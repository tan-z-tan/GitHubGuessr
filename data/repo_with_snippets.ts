export const githubPopularRepos = [
  {
    "id": "torvalds/linux",
    "org": "torvalds",
    "avatarURL": "https://avatars.githubusercontent.com/u/1024025?v=4",
    "name": "torvalds/linux",
    "url": "https://github.com/torvalds/linux",
    "lang": "C",
    "star_num": 156974,
    "fork_num": 49717,
    "snippets": [
      "{\n\torion_spi_init(SPI_PHYS_BASE);\n}\n\n\n/*****************************************************************************\n * UART0\n ****************************************************************************/\nvoid __init orion5x_uart0_init(void)\n{\n\torion_uart0_init(UART0_VIRT_BASE, UART0_PHYS_BASE,\n\t\t\t IRQ_ORION5X_UART0, tclk);\n}\n\n/*****************************************************************************\n * UART1\n ****************************************************************************/\nvoid __init orion5x_uart1_init(void)\n{\n\torion_uart1_init(UART1_VIRT_BASE, UART1_PHYS_BASE,\n\t\t\t IRQ_ORION5X_UART1, tclk);\n}\n\n/*****************************************************************************\n * XOR engine\n ****************************************************************************/\nvoid __init orion5x_xor_init(void)\n{\n\torion_xor0_init(ORION5X_XOR_PHYS_BASE,\n\t\t\tORION5X_XOR_PHYS_BASE + 0x200,\n\t\t\tIRQ_ORION5X_XOR0, IRQ_ORION5X_XOR1);\n}\n\n/*****************************************************************************\n * Cryptographic Engines and Security Accelerator (CESA)\n ****************************************************************************/\nstatic void __init orion5x_crypto_init(void)\n{\n\tmvebu_mbus_add_window_by_id(ORION_MBUS_SRAM_TARGET,\n\t\t\t\t    ORION_MBUS_SRAM_ATTR,\n\t\t\t\t    ORION5X_SRAM_PHYS_BASE,\n\t\t\t\t    ORION5X_SRAM_SIZE);\n\torion_crypto_init(ORION5X_CRYPTO_PHYS_BASE, ORION5X_SRAM_PHYS_BASE,\n\t\t\t  SZ_8K, IRQ_ORION5X_CESA);\n}\n\n/*****************************************************************************\n * Watchdog\n ****************************************************************************/\nstatic struct resource orion_wdt_resource[] = {\n\t\tDEFINE_RES_MEM(TIMER_PHYS_BASE, 0x04),\n\t\tDEFINE_RES_MEM(RSTOUTn_MASK_PHYS, 0x04),\n};\n\nstatic struct platform_device orion_wdt_device = {\n\t.name\t\t= \"orion_wdt\",\n\t.id\t\t= -1,\n\t.num_resources\t= ARRAY_SIZE(orion_wdt_resource),\n\t.resource\t= orion_wdt_resource,\n};\n\nstatic void __init orion5x_wdt_init(void)\n{\n\tplatform_device_register(&orion_wdt_device);",
      "\t}\n}\n\ndev_t\nufs_get_inode_dev(struct super_block *sb, struct ufs_inode_info *ufsi)\n{\n\t__u32 fs32;\n\tdev_t dev;\n\n\tif ((UFS_SB(sb)->s_flags & UFS_ST_MASK) == UFS_ST_SUNx86)\n\t\tfs32 = fs32_to_cpu(sb, ufsi->i_u1.i_data[1]);\n\telse\n\t\tfs32 = fs32_to_cpu(sb, ufsi->i_u1.i_data[0]);\n\tswitch (UFS_SB(sb)->s_flags & UFS_ST_MASK) {\n\tcase UFS_ST_SUNx86:\n\tcase UFS_ST_SUN:\n\t\tif ((fs32 & 0xffff0000) == 0 ||\n\t\t    (fs32 & 0xffff0000) == 0xffff0000)\n\t\t\tdev = old_decode_dev(fs32 & 0x7fff);\n\t\telse\n\t\t\tdev = MKDEV(sysv_major(fs32), sysv_minor(fs32));\n\t\tbreak;\n\n\tdefault:\n\t\tdev = old_decode_dev(fs32);\n\t\tbreak;\n\t}\n\treturn dev;\n}\n\nvoid\nufs_set_inode_dev(struct super_block *sb, struct ufs_inode_info *ufsi, dev_t dev)\n{\n\t__u32 fs32;\n\n\tswitch (UFS_SB(sb)->s_flags & UFS_ST_MASK) {\n\tcase UFS_ST_SUNx86:\n\tcase UFS_ST_SUN:\n\t\tfs32 = sysv_encode_dev(dev);\n\t\tif ((fs32 & 0xffff8000) == 0) {\n\t\t\tfs32 = old_encode_dev(dev);\n\t\t}\n\t\tbreak;\n\n\tdefault:\n\t\tfs32 = old_encode_dev(dev);\n\t\tbreak;\n\t}\n\tif ((UFS_SB(sb)->s_flags & UFS_ST_MASK) == UFS_ST_SUNx86)\n\t\tufsi->i_u1.i_data[1] = cpu_to_fs32(sb, fs32);\n\telse\n\t\tufsi->i_u1.i_data[0] = cpu_to_fs32(sb, fs32);\n}\n\n/**\n * ufs_get_locked_page() - locate, pin and lock a pagecache page, if not exist\n * read it from disk.\n * @mapping: the address_space to search\n * @index: the page index\n *\n * Locates the desired pagecache page, if not exist we'll read it,\n * locks it, increments its reference\n * count and returns its address.\n *",
      "\t\tbreak;\n\t}\n\n\t/*\n\t * Oxygen VX1 - it appears that setting PM3VideoControl and\n\t * then PM3RD_SyncControl to the same SYNC settings undoes\n\t * any net change - they seem to xor together.  Only set the\n\t * sync options in PM3RD_SyncControl.  --rmk\n\t */\n\t{\n\t\tunsigned int video = par->video;\n\n\t\tvideo &= ~(PM3VideoControl_HSYNC_MASK |\n\t\t\t   PM3VideoControl_VSYNC_MASK);\n\t\tvideo |= PM3VideoControl_HSYNC_ACTIVE_HIGH |\n\t\t\t PM3VideoControl_VSYNC_ACTIVE_HIGH;\n\t\tPM3_WRITE_REG(par, PM3VideoControl, video);\n\t}\n\tPM3_WRITE_REG(par, PM3VClkCtl,\n\t\t\t   (PM3_READ_REG(par, PM3VClkCtl) & 0xFFFFFFFC));\n\tPM3_WRITE_REG(par, PM3ScreenBase, par->base);\n\tPM3_WRITE_REG(par, PM3ChipConfig,\n\t\t\t   (PM3_READ_REG(par, PM3ChipConfig) & 0xFFFFFFFD));\n\n\twmb();\n\t{\n\t\tunsigned char m;\t/* ClkPreScale */\n\t\tunsigned char n;\t/* ClkFeedBackScale */\n\t\tunsigned char p;\t/* ClkPostScale */\n\t\tunsigned long pixclock = PICOS2KHZ(info->var.pixclock);\n\n\t\t(void)pm3fb_calculate_clock(pixclock, &m, &n, &p);\n\n\t\tDPRINTK(\"Pixclock: %ld, Pre: %d, Feedback: %d, Post: %d\\n\",\n\t\t\tpixclock, (int) m, (int) n, (int) p);\n\n\t\tPM3_WRITE_DAC_REG(par, PM3RD_DClk0PreScale, m);\n\t\tPM3_WRITE_DAC_REG(par, PM3RD_DClk0FeedbackScale, n);\n\t\tPM3_WRITE_DAC_REG(par, PM3RD_DClk0PostScale, p);\n\t}\n\t/*\n\t   PM3_WRITE_DAC_REG(par, PM3RD_IndexControl, 0x00);\n\t */\n\t/*\n\t   PM3_SLOW_WRITE_REG(par, PM3RD_IndexControl, 0x00);\n\t */\n\tif ((par->video & PM3VideoControl_HSYNC_MASK) ==\n\t    PM3VideoControl_HSYNC_ACTIVE_HIGH)\n\t\ttempsync |= PM3RD_SyncControl_HSYNC_ACTIVE_HIGH;\n\tif ((par->video & PM3VideoControl_VSYNC_MASK) ==\n\t    PM3VideoControl_VSYNC_ACTIVE_HIGH)\n\t\ttempsync |= PM3RD_SyncControl_VSYNC_ACTIVE_HIGH;\n\n\tPM3_WRITE_DAC_REG(par, PM3RD_SyncControl, tempsync);\n\tDPRINTK(\"PM3RD_SyncControl: %d\\n\", tempsync);\n\n\tPM3_WRITE_DAC_REG(par, PM3RD_DACControl, 0x00);\n\n\tswitch (pm3fb_depth(&info->var)) {\n\tcase 8:\n\t\tPM3_WRITE_DAC_REG(par, PM3RD_PixelSize,\n\t\t\t\t  PM3RD_PixelSize_8_BIT_PIXELS);\n\t\tPM3_WRITE_DAC_REG(par, PM3RD_ColorFormat,\n\t\t\t\t  PM3RD_ColorFormat_CI8_COLOR |",
      "\t\t\th = h->next;\t// find the end\n\t\th->next = ptr;\n\t\tzrdev_dbg(zr, \"videocodec: hooked in after '%s'\\n\",\n\t\t\t  h->codec->name);\n\t}\n\n\treturn 0;\n}\n\nint videocodec_unregister(const struct videocodec *codec)\n{\n\tstruct codec_list *prev = NULL, *h = codeclist_top;\n\tstruct zoran *zr;\n\n\tif (!codec) {\n\t\tpr_err(\"%s: no data!\\n\", __func__);\n\t\treturn -EINVAL;\n\t}\n\n\tzr = videocodec_to_zoran((struct videocodec *)codec);\n\n\tzrdev_dbg(zr,\n\t\t  \"videocodec: unregister '%s', type: %x, flags %lx, magic %lx\\n\",\n\t\t  codec->name, codec->type, codec->flags, codec->magic);\n\n\tif (!h) {\n\t\tzrdev_err(zr, \"%s: no device left...\\n\", __func__);\n\t\treturn -ENXIO;\n\t}\n\n\twhile (h) {\n\t\tif (codec == h->codec) {\n\t\t\tif (h->attached) {\n\t\t\t\tzrdev_err(zr, \"videocodec: '%s' is used\\n\",\n\t\t\t\t\t  h->codec->name);\n\t\t\t\treturn -EBUSY;\n\t\t\t}\n\t\t\tzrdev_dbg(zr, \"videocodec: unregister '%s' is ok.\\n\",\n\t\t\t\t  h->codec->name);\n\t\t\tif (!prev) {\n\t\t\t\tcodeclist_top = h->next;\n\t\t\t\tzrdev_dbg(zr,\n\t\t\t\t\t  \"videocodec: delete first element\\n\");\n\t\t\t} else {\n\t\t\t\tprev->next = h->next;\n\t\t\t\tzrdev_dbg(zr,\n\t\t\t\t\t  \"videocodec: delete middle element\\n\");\n\t\t\t}\n\t\t\tkfree(h);\n\t\t\treturn 0;\n\t\t}\n\t\tprev = h;\n\t\th = h->next;\n\t}\n\n\tzrdev_err(zr, \"%s: given codec not found!\\n\", __func__);\n\treturn -EINVAL;\n}\n\nint videocodec_debugfs_show(struct seq_file *m)\n{\n\tstruct codec_list *h = codeclist_top;\n\tstruct attached_list *a;\n",
      "\tsparc_config.load_profile_irq(cpu, SBUS_CLOCK_RATE / HZ);\n\treturn 0;\n}\n\nstatic int percpu_ce_set_next_event(unsigned long delta,\n\t\t\t\t    struct clock_event_device *evt)\n{\n\tint cpu = cpumask_first(evt->cpumask);\n\tunsigned int next = (unsigned int)delta;\n\n\tsparc_config.load_profile_irq(cpu, next);\n\treturn 0;\n}\n\nvoid register_percpu_ce(int cpu)\n{\n\tstruct clock_event_device *ce = &per_cpu(sparc32_clockevent, cpu);\n\tunsigned int features = CLOCK_EVT_FEAT_PERIODIC;\n\n\tif (sparc_config.features & FEAT_L14_ONESHOT)\n\t\tfeatures |= CLOCK_EVT_FEAT_ONESHOT;\n\n\tce->name           = \"percpu_ce\";\n\tce->rating         = 200;\n\tce->features       = features;\n\tce->set_state_shutdown = percpu_ce_shutdown;\n\tce->set_state_periodic = percpu_ce_set_periodic;\n\tce->set_state_oneshot = percpu_ce_shutdown;\n\tce->set_next_event = percpu_ce_set_next_event;\n\tce->cpumask        = cpumask_of(cpu);\n\tce->shift          = 32;\n\tce->mult           = div_sc(sparc_config.clock_rate, NSEC_PER_SEC,\n\t                            ce->shift);\n\tce->max_delta_ns   = clockevent_delta2ns(sparc_config.clock_rate, ce);\n\tce->max_delta_ticks = (unsigned long)sparc_config.clock_rate;\n\tce->min_delta_ns   = clockevent_delta2ns(100, ce);\n\tce->min_delta_ticks = 100;\n\n\tclockevents_register_device(ce);\n}\n#endif\n\nstatic unsigned char mostek_read_byte(struct device *dev, u32 ofs)\n{\n\tstruct platform_device *pdev = to_platform_device(dev);\n\tstruct m48t59_plat_data *pdata = pdev->dev.platform_data;\n\n\treturn readb(pdata->ioaddr + ofs);\n}\n\nstatic void mostek_write_byte(struct device *dev, u32 ofs, u8 val)\n{\n\tstruct platform_device *pdev = to_platform_device(dev);\n\tstruct m48t59_plat_data *pdata = pdev->dev.platform_data;\n\n\twriteb(val, pdata->ioaddr + ofs);\n}\n\nstatic struct m48t59_plat_data m48t59_data = {\n\t.read_byte = mostek_read_byte,\n\t.write_byte = mostek_write_byte,\n};\n\n/* resource is set at runtime */",
      "",
      "\t\treturn \"JPEG_DECODER_UNSUPPORTED_MARKER\";\n\tcase JPEG_DECODER_UNABLE_ALLOCATE_MEMORY:\n\t\treturn \"JPEG_DECODER_UNABLE_ALLOCATE_MEMORY\";\n\tcase JPEG_DECODER_NON_SUPPORTED_SAMP_FACTORS:\n\t\treturn \"JPEG_DECODER_NON_SUPPORTED_SAMP_FACTORS\";\n\tcase JPEG_DECODER_BAD_PARAMETER:\n\t\treturn \"JPEG_DECODER_BAD_PARAMETER\";\n\tcase JPEG_DECODER_DECODE_ERROR:\n\t\treturn \"JPEG_DECODER_DECODE_ERROR\";\n\tcase JPEG_DECODER_BAD_RESTART_MARKER:\n\t\treturn \"JPEG_DECODER_BAD_RESTART_MARKER\";\n\tcase JPEG_DECODER_UNSUPPORTED_COLORSPACE:\n\t\treturn \"JPEG_DECODER_UNSUPPORTED_COLORSPACE\";\n\tcase JPEG_DECODER_BAD_SOS_SPECTRAL:\n\t\treturn \"JPEG_DECODER_BAD_SOS_SPECTRAL\";\n\tcase JPEG_DECODER_BAD_SOS_SUCCESSIVE:\n\t\treturn \"JPEG_DECODER_BAD_SOS_SUCCESSIVE\";\n\tcase JPEG_DECODER_BAD_HEADER_LENGTH:\n\t\treturn \"JPEG_DECODER_BAD_HEADER_LENGTH\";\n\tcase JPEG_DECODER_BAD_COUNT_VALUE:\n\t\treturn \"JPEG_DECODER_BAD_COUNT_VALUE\";\n\tcase JPEG_DECODER_BAD_DHT_MARKER:\n\t\treturn \"JPEG_DECODER_BAD_DHT_MARKER\";\n\tcase JPEG_DECODER_BAD_INDEX_VALUE:\n\t\treturn \"JPEG_DECODER_BAD_INDEX_VALUE\";\n\tcase JPEG_DECODER_BAD_NUMBER_HUFFMAN_TABLES:\n\t\treturn \"JPEG_DECODER_BAD_NUMBER_HUFFMAN_TABLES\";\n\tcase JPEG_DECODER_BAD_QUANT_TABLE_LENGTH:\n\t\treturn \"JPEG_DECODER_BAD_QUANT_TABLE_LENGTH\";\n\tcase JPEG_DECODER_BAD_NUMBER_QUANT_TABLES:\n\t\treturn \"JPEG_DECODER_BAD_NUMBER_QUANT_TABLES\";\n\tcase JPEG_DECODER_BAD_COMPONENT_COUNT:\n\t\treturn \"JPEG_DECODER_BAD_COMPONENT_COUNT\";\n\tcase JPEG_DECODER_DIVIDE_BY_ZERO_ERROR:\n\t\treturn \"JPEG_DECODER_DIVIDE_BY_ZERO_ERROR\";\n\tcase JPEG_DECODER_NOT_JPG_IMAGE:\n\t\treturn \"JPEG_DECODER_NOT_JPG_IMAGE\";\n\tcase JPEG_DECODER_UNSUPPORTED_ROTATION_ANGLE:\n\t\treturn \"JPEG_DECODER_UNSUPPORTED_ROTATION_ANGLE\";\n\tcase JPEG_DECODER_UNSUPPORTED_SCALING:\n\t\treturn \"JPEG_DECODER_UNSUPPORTED_SCALING\";\n\tcase JPEG_DECODER_INSUFFICIENT_OUTPUTBUFFER_SIZE:\n\t\treturn \"JPEG_DECODER_INSUFFICIENT_OUTPUTBUFFER_SIZE\";\n\tcase JPEG_DECODER_BAD_HWCFG_GP_VERSION_VALUE:\n\t\treturn \"JPEG_DECODER_BAD_HWCFG_GP_VERSION_VALUE\";\n\tcase JPEG_DECODER_BAD_VALUE_FROM_RED:\n\t\treturn \"JPEG_DECODER_BAD_VALUE_FROM_RED\";\n\tcase JPEG_DECODER_BAD_SUBREGION_PARAMETERS:\n\t\treturn \"JPEG_DECODER_BAD_SUBREGION_PARAMETERS\";\n\tcase JPEG_DECODER_PROGRESSIVE_DECODE_NOT_SUPPORTED:\n\t\treturn \"JPEG_DECODER_PROGRESSIVE_DECODE_NOT_SUPPORTED\";\n\tcase JPEG_DECODER_ERROR_TASK_TIMEOUT:\n\t\treturn \"JPEG_DECODER_ERROR_TASK_TIMEOUT\";\n\tcase JPEG_DECODER_ERROR_FEATURE_NOT_SUPPORTED:\n\t\treturn \"JPEG_DECODER_ERROR_FEATURE_NOT_SUPPORTED\";\n\tdefault:\n\t\treturn \"!unknown MJPEG error!\";\n\t}\n}\n\nstatic bool delta_mjpeg_check_status(struct delta_ctx *pctx,\n\t\t\t\t     struct jpeg_decode_return_params_t *status)\n{\n\tstruct delta_dev *delta = pctx->dev;",
      " *\n * DESCRIPTION: Common code to handle optional resource_source_index and\n *              resource_source fields in some Large descriptors. Used during\n *              stream-to-list conversion\n *\n ******************************************************************************/\n\nstatic u32\nacpi_rs_stream_option_length(u32 resource_length,\n\t\t\t     u32 minimum_aml_resource_length)\n{\n\tu32 string_length = 0;\n\n\tACPI_FUNCTION_ENTRY();\n\n\t/*\n\t * The resource_source_index and resource_source are optional elements of\n\t * some Large-type resource descriptors.\n\t */\n\n\t/*\n\t * If the length of the actual resource descriptor is greater than the\n\t * ACPI spec-defined minimum length, it means that a resource_source_index\n\t * exists and is followed by a (required) null terminated string. The\n\t * string length (including the null terminator) is the resource length\n\t * minus the minimum length, minus one byte for the resource_source_index\n\t * itself.\n\t */\n\tif (resource_length > minimum_aml_resource_length) {\n\n\t\t/* Compute the length of the optional string */\n\n\t\tstring_length =\n\t\t    resource_length - minimum_aml_resource_length - 1;\n\t}\n\n\t/*\n\t * Round the length up to a multiple of the native word in order to\n\t * guarantee that the entire resource descriptor is native word aligned\n\t */\n\treturn ((u32) ACPI_ROUND_UP_TO_NATIVE_WORD(string_length));\n}\n\n/*******************************************************************************\n *\n * FUNCTION:    acpi_rs_get_aml_length\n *\n * PARAMETERS:  resource            - Pointer to the resource linked list\n *              resource_list_size  - Size of the resource linked list\n *              size_needed         - Where the required size is returned\n *\n * RETURN:      Status\n *\n * DESCRIPTION: Takes a linked list of internal resource descriptors and\n *              calculates the size buffer needed to hold the corresponding\n *              external resource byte stream.\n *\n ******************************************************************************/\n\nacpi_status\nacpi_rs_get_aml_length(struct acpi_resource *resource,\n\t\t       acpi_size resource_list_size, acpi_size *size_needed)\n{\n\tacpi_size aml_size_needed = 0;",
      "static DEFINE_SEMAPHORE(kmod_concurrent_max, MAX_KMOD_CONCURRENT);\n\n/*\n * This is a restriction on having *all* MAX_KMOD_CONCURRENT threads\n * running at the same time without returning. When this happens we\n * believe you've somehow ended up with a recursive module dependency\n * creating a loop.\n *\n * We have no option but to fail.\n *\n * Userspace should proactively try to detect and prevent these.\n */\n#define MAX_KMOD_ALL_BUSY_TIMEOUT 5\n\n/*\n\tmodprobe_path is set via /proc/sys.\n*/\nchar modprobe_path[KMOD_PATH_LEN] = CONFIG_MODPROBE_PATH;\n\nstatic void free_modprobe_argv(struct subprocess_info *info)\n{\n\tkfree(info->argv[3]); /* check call_modprobe() */\n\tkfree(info->argv);\n}\n\nstatic int call_modprobe(char *orig_module_name, int wait)\n{\n\tstruct subprocess_info *info;\n\tstatic char *envp[] = {\n\t\t\"HOME=/\",\n\t\t\"TERM=linux\",\n\t\t\"PATH=/sbin:/usr/sbin:/bin:/usr/bin\",\n\t\tNULL\n\t};\n\tchar *module_name;\n\tint ret;\n\n\tchar **argv = kmalloc(sizeof(char *[5]), GFP_KERNEL);\n\tif (!argv)\n\t\tgoto out;\n\n\tmodule_name = kstrdup(orig_module_name, GFP_KERNEL);\n\tif (!module_name)\n\t\tgoto free_argv;\n\n\targv[0] = modprobe_path;\n\targv[1] = \"-q\";\n\targv[2] = \"--\";\n\targv[3] = module_name;\t/* check free_modprobe_argv() */\n\targv[4] = NULL;\n\n\tinfo = call_usermodehelper_setup(modprobe_path, argv, envp, GFP_KERNEL,\n\t\t\t\t\t NULL, free_modprobe_argv, NULL);\n\tif (!info)\n\t\tgoto free_module_name;\n\n\tret = call_usermodehelper_exec(info, wait | UMH_KILLABLE);\n\tkmod_dup_request_announce(orig_module_name, ret);\n\treturn ret;\n\nfree_module_name:\n\tkfree(module_name);\nfree_argv:\n\tkfree(argv);",
      "\n\tif (adreno_is_a506(adreno_gpu) || adreno_is_a508(adreno_gpu)) {\n\t\tregs = a50x_hwcg;\n\t\tsz = ARRAY_SIZE(a50x_hwcg);\n\t} else if (adreno_is_a509(adreno_gpu) || adreno_is_a512(adreno_gpu)) {\n\t\tregs = a512_hwcg;\n\t\tsz = ARRAY_SIZE(a512_hwcg);\n\t} else {\n\t\tregs = a5xx_hwcg;\n\t\tsz = ARRAY_SIZE(a5xx_hwcg);\n\t}\n\n\tfor (i = 0; i < sz; i++)\n\t\tgpu_write(gpu, regs[i].offset,\n\t\t\t  state ? regs[i].value : 0);\n\n\tif (adreno_is_a540(adreno_gpu)) {\n\t\tgpu_write(gpu, REG_A5XX_RBBM_CLOCK_DELAY_GPMU, state ? 0x00000770 : 0);\n\t\tgpu_write(gpu, REG_A5XX_RBBM_CLOCK_HYST_GPMU, state ? 0x00000004 : 0);\n\t}\n\n\tgpu_write(gpu, REG_A5XX_RBBM_CLOCK_CNTL, state ? 0xAAA8AA00 : 0);\n\tgpu_write(gpu, REG_A5XX_RBBM_ISDB_CNT, state ? 0x182 : 0x180);\n}\n\nstatic int a5xx_me_init(struct msm_gpu *gpu)\n{\n\tstruct adreno_gpu *adreno_gpu = to_adreno_gpu(gpu);\n\tstruct msm_ringbuffer *ring = gpu->rb[0];\n\n\tOUT_PKT7(ring, CP_ME_INIT, 8);\n\n\tOUT_RING(ring, 0x0000002F);\n\n\t/* Enable multiple hardware contexts */\n\tOUT_RING(ring, 0x00000003);\n\n\t/* Enable error detection */\n\tOUT_RING(ring, 0x20000000);\n\n\t/* Don't enable header dump */\n\tOUT_RING(ring, 0x00000000);\n\tOUT_RING(ring, 0x00000000);\n\n\t/* Specify workarounds for various microcode issues */\n\tif (adreno_is_a506(adreno_gpu) || adreno_is_a530(adreno_gpu)) {\n\t\t/* Workaround for token end syncs\n\t\t * Force a WFI after every direct-render 3D mode draw and every\n\t\t * 2D mode 3 draw\n\t\t */\n\t\tOUT_RING(ring, 0x0000000B);\n\t} else if (adreno_is_a510(adreno_gpu)) {\n\t\t/* Workaround for token and syncs */\n\t\tOUT_RING(ring, 0x00000001);\n\t} else {\n\t\t/* No workarounds enabled */\n\t\tOUT_RING(ring, 0x00000000);\n\t}\n\n\tOUT_RING(ring, 0x00000000);\n\tOUT_RING(ring, 0x00000000);\n\n\ta5xx_flush(gpu, ring, true);\n\treturn a5xx_idle(gpu, ring) ? 0 : -EINVAL;"
    ]
  },
  {
    "id": "microsoft/vscode",
    "org": "microsoft",
    "avatarURL": "https://avatars.githubusercontent.com/u/6154722?v=4",
    "name": "microsoft/vscode",
    "url": "https://github.com/microsoft/vscode",
    "lang": "TypeScript",
    "star_num": 150832,
    "fork_num": 26807,
    "snippets": [
      "\t\tawait writeP(xterm, '\\r\\n');\n\t\tassertCommands([0, 2]);\n\t});\n});\n",
      "\n\t\t\t\tif (decl.returnType?.typeAnnotation.type !== AST_NODE_TYPES.TSTypeReference) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (decl.returnType.typeAnnotation.typeName.type !== AST_NODE_TYPES.Identifier) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst ident = decl.returnType.typeAnnotation.typeName.name;\n\t\t\t\tif (ident === 'Promise' || ident === 'Thenable') {\n\t\t\t\t\tcontext.report({\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tmessageId: 'sync'\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n};\n",
      " *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { diffSets } from 'vs/base/common/collections';\nimport { Emitter } from 'vs/base/common/event';\nimport { Disposable, DisposableStore } from 'vs/base/common/lifecycle';\nimport { isDefined } from 'vs/base/common/types';\nimport { ICellViewModel, INotebookEditor } from 'vs/workbench/contrib/notebook/browser/notebookBrowser';\nimport { cellRangesToIndexes } from 'vs/workbench/contrib/notebook/common/notebookRange';\n\nexport interface ICellVisibilityChangeEvent {\n\tadded: ICellViewModel[];\n\tremoved: ICellViewModel[];\n}\n\nexport class NotebookVisibleCellObserver extends Disposable {\n\tprivate readonly _onDidChangeVisibleCells = this._register(new Emitter<ICellVisibilityChangeEvent>());\n\treadonly onDidChangeVisibleCells = this._onDidChangeVisibleCells.event;\n\n\tprivate readonly _viewModelDisposables = this._register(new DisposableStore());\n\n\tprivate _visibleCells: ICellViewModel[] = [];\n\n\tget visibleCells(): ICellViewModel[] {\n\t\treturn this._visibleCells;\n\t}\n\n\tconstructor(private readonly _notebookEditor: INotebookEditor) {\n\t\tsuper();\n\n\t\tthis._register(this._notebookEditor.onDidChangeVisibleRanges(this._updateVisibleCells, this));\n\t\tthis._register(this._notebookEditor.onDidChangeModel(this._onModelChange, this));\n\t\tthis._updateVisibleCells();\n\t}\n\n\tprivate _onModelChange() {\n\t\tthis._viewModelDisposables.clear();\n\t\tif (this._notebookEditor.hasModel()) {\n\t\t\tthis._viewModelDisposables.add(this._notebookEditor.onDidChangeViewCells(() => this.updateEverything()));\n\t\t}\n\n\t\tthis.updateEverything();\n\t}\n\n\tprotected updateEverything(): void {\n\t\tthis._onDidChangeVisibleCells.fire({ added: [], removed: Array.from(this._visibleCells) });\n\t\tthis._visibleCells = [];\n\t\tthis._updateVisibleCells();\n\t}\n\n\tprivate _updateVisibleCells(): void {\n\t\tif (!this._notebookEditor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst newVisibleCells = cellRangesToIndexes(this._notebookEditor.visibleRanges)\n\t\t\t.map(index => this._notebookEditor.cellAt(index))\n\t\t\t.filter(isDefined);\n\t\tconst newVisibleHandles = new Set(newVisibleCells.map(cell => cell.handle));\n\t\tconst oldVisibleHandles = new Set(this._visibleCells.map(cell => cell.handle));\n\t\tconst diff = diffSets(oldVisibleHandles, newVisibleHandles);\n\n\t\tconst added = diff.added",
      "}\n",
      "\t\t\treturn 0;\n\t\t}\n\t\tif (width >= scrollWidth) {\n\t\t\t// horizontal scrollbar not visible\n\t\t\treturn 0;\n\t\t}\n\t\treturn scrollbar.horizontalScrollbarSize;\n\t}\n\n\tprivate _getContentHeight(width: number, height: number, contentWidth: number): number {\n\t\tconst options = this._configuration.options;\n\n\t\tlet result = this._linesLayout.getLinesTotalHeight();\n\t\tif (options.get(EditorOption.scrollBeyondLastLine)) {\n\t\t\tresult += Math.max(0, height - options.get(EditorOption.lineHeight) - options.get(EditorOption.padding).bottom);\n\t\t} else {\n\t\t\tresult += this._getHorizontalScrollbarHeight(width, contentWidth);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate _updateHeight(): void {\n\t\tconst scrollDimensions = this._scrollable.getScrollDimensions();\n\t\tconst width = scrollDimensions.width;\n\t\tconst height = scrollDimensions.height;\n\t\tconst contentWidth = scrollDimensions.contentWidth;\n\t\tthis._scrollable.setScrollDimensions(new EditorScrollDimensions(\n\t\t\twidth,\n\t\t\tscrollDimensions.contentWidth,\n\t\t\theight,\n\t\t\tthis._getContentHeight(width, height, contentWidth)\n\t\t));\n\t}\n\n\t// ---- Layouting logic\n\n\tpublic getCurrentViewport(): Viewport {\n\t\tconst scrollDimensions = this._scrollable.getScrollDimensions();\n\t\tconst currentScrollPosition = this._scrollable.getCurrentScrollPosition();\n\t\treturn new Viewport(\n\t\t\tcurrentScrollPosition.scrollTop,\n\t\t\tcurrentScrollPosition.scrollLeft,\n\t\t\tscrollDimensions.width,\n\t\t\tscrollDimensions.height\n\t\t);\n\t}\n\n\tpublic getFutureViewport(): Viewport {\n\t\tconst scrollDimensions = this._scrollable.getScrollDimensions();\n\t\tconst currentScrollPosition = this._scrollable.getFutureScrollPosition();\n\t\treturn new Viewport(\n\t\t\tcurrentScrollPosition.scrollTop,\n\t\t\tcurrentScrollPosition.scrollLeft,\n\t\t\tscrollDimensions.width,\n\t\t\tscrollDimensions.height\n\t\t);\n\t}\n\n\tprivate _computeContentWidth(): number {\n\t\tconst options = this._configuration.options;\n\t\tconst maxLineWidth = this._maxLineWidth;\n\t\tconst wrappingInfo = options.get(EditorOption.wrappingInfo);\n\t\tconst fontInfo = options.get(EditorOption.fontInfo);",
      "\t\t\t],\n\t\t\tnew Selection(2, 1, 1, 1),\n\t\t\t[\n\t\t\t\t'first',\n\t\t\t\t'first',\n\t\t\t\t'second line',\n\t\t\t\t'third line',\n\t\t\t\t'fourth line',\n\t\t\t\t'fifth'\n\t\t\t],\n\t\t\tnew Selection(2, 1, 1, 1)\n\t\t);\n\t});\n});\n\nsuite('Editor Contrib - Duplicate Selection', () => {\n\n\tconst duplicateSelectionAction = new DuplicateSelectionAction();\n\n\tfunction testDuplicateSelectionAction(lines: string[], selections: Selection[], expectedLines: string[], expectedSelections: Selection[]): void {\n\t\twithTestCodeEditor(lines.join('\\n'), {}, (editor) => {\n\t\t\teditor.setSelections(selections);\n\t\t\tduplicateSelectionAction.run(null!, editor, {});\n\t\t\tassert.deepStrictEqual(editor.getValue(), expectedLines.join('\\n'));\n\t\t\tassert.deepStrictEqual(editor.getSelections()!.map(s => s.toString()), expectedSelections.map(s => s.toString()));\n\t\t});\n\t}\n\n\ttest('empty selection', function () {\n\t\ttestDuplicateSelectionAction(\n\t\t\t[\n\t\t\t\t'first',\n\t\t\t\t'second line',\n\t\t\t\t'third line',\n\t\t\t\t'fourth line',\n\t\t\t\t'fifth'\n\t\t\t],\n\t\t\t[new Selection(2, 2, 2, 2), new Selection(3, 2, 3, 2)],\n\t\t\t[\n\t\t\t\t'first',\n\t\t\t\t'second line',\n\t\t\t\t'second line',\n\t\t\t\t'third line',\n\t\t\t\t'third line',\n\t\t\t\t'fourth line',\n\t\t\t\t'fifth'\n\t\t\t],\n\t\t\t[new Selection(3, 2, 3, 2), new Selection(5, 2, 5, 2)]\n\t\t);\n\t});\n\n\ttest('with selection', function () {\n\t\ttestDuplicateSelectionAction(\n\t\t\t[\n\t\t\t\t'first',\n\t\t\t\t'second line',\n\t\t\t\t'third line',\n\t\t\t\t'fourth line',\n\t\t\t\t'fifth'\n\t\t\t],\n\t\t\t[new Selection(2, 1, 2, 4), new Selection(3, 1, 3, 4)],\n\t\t\t[\n\t\t\t\t'first',\n\t\t\t\t'secsecond line',",
      " *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as vscode from 'vscode';\n\ntype ResourceToKey = (uri: vscode.Uri) => string;\n\nconst defaultResourceToKey = (resource: vscode.Uri): string => resource.toString();\n\nexport class ResourceMap<T> {\n\n\tprivate readonly _map = new Map<string, { readonly uri: vscode.Uri; readonly value: T }>();\n\n\tprivate readonly _toKey: ResourceToKey;\n\n\tconstructor(toKey: ResourceToKey = defaultResourceToKey) {\n\t\tthis._toKey = toKey;\n\t}\n\n\tpublic set(uri: vscode.Uri, value: T): this {\n\t\tthis._map.set(this._toKey(uri), { uri, value });\n\t\treturn this;\n\t}\n\n\tpublic get(resource: vscode.Uri): T | undefined {\n\t\treturn this._map.get(this._toKey(resource))?.value;\n\t}\n\n\tpublic has(resource: vscode.Uri): boolean {\n\t\treturn this._map.has(this._toKey(resource));\n\t}\n\n\tpublic get size(): number {\n\t\treturn this._map.size;\n\t}\n\n\tpublic clear(): void {\n\t\tthis._map.clear();\n\t}\n\n\tpublic delete(resource: vscode.Uri): boolean {\n\t\treturn this._map.delete(this._toKey(resource));\n\t}\n\n\tpublic *values(): IterableIterator<T> {\n\t\tfor (const entry of this._map.values()) {\n\t\t\tyield entry.value;\n\t\t}\n\t}\n\n\tpublic *keys(): IterableIterator<vscode.Uri> {\n\t\tfor (const entry of this._map.values()) {\n\t\t\tyield entry.uri;\n\t\t}\n\t}\n\n\tpublic *entries(): IterableIterator<[vscode.Uri, T]> {\n\t\tfor (const entry of this._map.values()) {\n\t\t\tyield [entry.uri, entry.value];\n\t\t}\n\t}\n\n\tpublic [Symbol.iterator](): IterableIterator<[vscode.Uri, T]> {\n\t\treturn this.entries();",
      "import { CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { URI } from 'vs/base/common/uri';\nimport { IExtensionGalleryService } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { IExtensionResourceLoaderService } from 'vs/platform/extensionResourceLoader/common/extensionResourceLoader';\nimport { ILanguagePackItem, LanguagePackBaseService } from 'vs/platform/languagePacks/common/languagePacks';\nimport { ILogService } from 'vs/platform/log/common/log';\n\nexport class WebLanguagePacksService extends LanguagePackBaseService {\n\tconstructor(\n\t\t@IExtensionResourceLoaderService private readonly extensionResourceLoaderService: IExtensionResourceLoaderService,\n\t\t@IExtensionGalleryService extensionGalleryService: IExtensionGalleryService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tsuper(extensionGalleryService);\n\t}\n\n\tasync getBuiltInExtensionTranslationsUri(id: string, language: string): Promise<URI | undefined> {\n\n\t\tconst queryTimeout = new CancellationTokenSource();\n\t\tsetTimeout(() => queryTimeout.cancel(), 1000);\n\n\t\t// First get the extensions that supports the language (there should only be one but just in case let's include more results)\n\t\tlet result;\n\t\ttry {\n\t\t\tresult = await this.extensionGalleryService.query({\n\t\t\t\ttext: `tag:\"lp-${language}\"`,\n\t\t\t\tpageSize: 5\n\t\t\t}, queryTimeout.token);\n\t\t} catch (err) {\n\t\t\tthis.logService.error(err);\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst languagePackExtensions = result.firstPage.find(e => e.properties.localizedLanguages?.length);\n\t\tif (!languagePackExtensions) {\n\t\t\tthis.logService.trace(`No language pack found for language ${language}`);\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Then get the manifest for that extension\n\t\tconst manifestTimeout = new CancellationTokenSource();\n\t\tsetTimeout(() => queryTimeout.cancel(), 1000);\n\t\tconst manifest = await this.extensionGalleryService.getManifest(languagePackExtensions, manifestTimeout.token);\n\n\t\t// Find the translation from the language pack\n\t\tconst localization = manifest?.contributes?.localizations?.find(l => l.languageId === language);\n\t\tconst translation = localization?.translations.find(t => t.id === id);\n\t\tif (!translation) {\n\t\t\tthis.logService.trace(`No translation found for id '${id}, in ${manifest?.name}`);\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// get the resource uri and return it\n\t\tconst uri = this.extensionResourceLoaderService.getExtensionGalleryResourceURL({\n\t\t\t// If translation is defined then manifest should have been defined.\n\t\t\tname: manifest!.name,\n\t\t\tpublisher: manifest!.publisher,\n\t\t\tversion: manifest!.version\n\t\t});\n\t\tif (!uri) {\n\t\t\tthis.logService.trace('Gallery does not provide extension resources.');\n\t\t\treturn undefined;\n\t\t}\n",
      "\nexport class AtomicTabMoveOperations {\n\t/**\n\t * Get the visible column at the position. If we get to a non-whitespace character first\n\t * or past the end of string then return -1.\n\t *\n\t * **Note** `position` and the return value are 0-based.\n\t */\n\tpublic static whitespaceVisibleColumn(lineContent: string, position: number, tabSize: number): [number, number, number] {\n\t\tconst lineLength = lineContent.length;\n\t\tlet visibleColumn = 0;\n\t\tlet prevTabStopPosition = -1;\n\t\tlet prevTabStopVisibleColumn = -1;\n\t\tfor (let i = 0; i < lineLength; i++) {\n\t\t\tif (i === position) {\n\t\t\t\treturn [prevTabStopPosition, prevTabStopVisibleColumn, visibleColumn];\n\t\t\t}\n\t\t\tif (visibleColumn % tabSize === 0) {\n\t\t\t\tprevTabStopPosition = i;\n\t\t\t\tprevTabStopVisibleColumn = visibleColumn;\n\t\t\t}\n\t\t\tconst chCode = lineContent.charCodeAt(i);\n\t\t\tswitch (chCode) {\n\t\t\t\tcase CharCode.Space:\n\t\t\t\t\tvisibleColumn += 1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase CharCode.Tab:\n\t\t\t\t\t// Skip to the next multiple of tabSize.\n\t\t\t\t\tvisibleColumn = CursorColumns.nextRenderTabStop(visibleColumn, tabSize);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\treturn [-1, -1, -1];\n\t\t\t}\n\t\t}\n\t\tif (position === lineLength) {\n\t\t\treturn [prevTabStopPosition, prevTabStopVisibleColumn, visibleColumn];\n\t\t}\n\t\treturn [-1, -1, -1];\n\t}\n\n\t/**\n\t * Return the position that should result from a move left, right or to the\n\t * nearest tab, if atomic tabs are enabled. Left and right are used for the\n\t * arrow key movements, nearest is used for mouse selection. It returns\n\t * -1 if atomic tabs are not relevant and you should fall back to normal\n\t * behaviour.\n\t *\n\t * **Note**: `position` and the return value are 0-based.\n\t */\n\tpublic static atomicPosition(lineContent: string, position: number, tabSize: number, direction: Direction): number {\n\t\tconst lineLength = lineContent.length;\n\n\t\t// Get the 0-based visible column corresponding to the position, or return\n\t\t// -1 if it is not in the initial whitespace.\n\t\tconst [prevTabStopPosition, prevTabStopVisibleColumn, visibleColumn] = AtomicTabMoveOperations.whitespaceVisibleColumn(lineContent, position, tabSize);\n\n\t\tif (visibleColumn === -1) {\n\t\t\treturn -1;\n\t\t}\n\n\t\t// Is the output left or right of the current position. The case for nearest\n\t\t// where it is the same as the current position is handled in the switch.\n\t\tlet left: boolean;\n\t\tswitch (direction) {",
      "\t\t\t\treturn servicesAccessor.get(IInstantiationService).createInstance(OpenWindowSessionLogFileAction, OpenWindowSessionLogFileAction.ID, OpenWindowSessionLogFileAction.TITLE.value).run();\n\t\t\t}\n\t\t});\n\n\t}\n\n}\n\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(WebLogOutputChannels, LifecyclePhase.Restored);\n"
    ]
  },
  {
    "id": "facebook/react",
    "org": "facebook",
    "avatarURL": "https://avatars.githubusercontent.com/u/69631?v=4",
    "name": "facebook/react",
    "url": "https://github.com/facebook/react",
    "lang": "JavaScript",
    "star_num": 212724,
    "fork_num": 44659,
    "snippets": [
      "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactNativeType} from './src/ReactNativeTypes';\nimport * as ReactNative from './src/ReactNativeRenderer';\n// Assert that the exports line up with the type we're going to expose.\n// eslint-disable-next-line ft-flow/no-unused-expressions\n(ReactNative: ReactNativeType);\n\nexport * from './src/ReactNativeRenderer';\n",
      "        if (inner !== outer) {\n          Scheduler.log('Tearing! Inner and outer are inconsistent!');\n        } else {\n          Scheduler.log('Inner and outer are consistent');\n        }\n      }, [inner, outer]);\n\n      return <Text text={'Inner: ' + inner} />;\n    }\n\n    let setOuter;\n    function App({show}) {\n      const [outer, _setOuter] = useState(0);\n      setOuter = _setOuter;\n      return (\n        <>\n          <Offscreen mode={show ? 'visible' : 'hidden'}>\n            <span>\n              <Child outer={outer} />\n            </span>\n          </Offscreen>\n          <span>\n            <Text text={'Outer: ' + outer} />\n          </span>\n          <Suspense fallback={<Text text=\"Loading...\" />}>\n            <span>\n              <Text text={'Sibling: ' + outer} />\n            </span>\n          </Suspense>\n        </>\n      );\n    }\n\n    // Render a hidden tree\n    const root = ReactNoop.createRoot();\n    resolveText('Async: 0');\n    await act(() => {\n      root.render(<App show={true} />);\n    });\n    assertLog([\n      'Inner: 0',\n      'Outer: 0',\n      'Sibling: 0',\n      'Inner and outer are consistent',\n    ]);\n    expect(root).toMatchRenderedOutput(\n      <>\n        <span>Inner: 0</span>\n        <span>Outer: 0</span>\n        <span>Sibling: 0</span>\n      </>,\n    );\n\n    await act(async () => {\n      // Update a value both inside and outside the hidden tree. These values\n      // must always be consistent.\n      startTransition(() => {\n        setOuter(1);\n        setInner(1);\n        // In the same render, also hide the offscreen tree.\n        root.render(<App show={false} />);\n      });\n\n      await waitFor([",
      "\nfunction useHostTransitionStatus(): TransitionStatus {\n  resolveCurrentlyRenderingComponent();\n  return NotPendingTransition;\n}\n\nfunction unsupportedSetOptimisticState() {\n  throw new Error('Cannot update optimistic state while rendering.');\n}\n\nfunction useOptimistic<S, A>(\n  passthrough: S,\n  reducer: ?(S, A) => S,\n): [S, (A) => void] {\n  resolveCurrentlyRenderingComponent();\n  return [passthrough, unsupportedSetOptimisticState];\n}\n\nfunction useFormState<S, P>(\n  action: (S, P) => Promise<S>,\n  initialState: S,\n  permalink?: string,\n): [S, (P) => void] {\n  resolveCurrentlyRenderingComponent();\n\n  // Bind the initial state to the first argument of the action.\n  // TODO: Use the keypath (or permalink) to check if there's matching state\n  // from the previous page.\n  const boundAction = action.bind(null, initialState);\n\n  // Wrap the action so the return value is void.\n  const dispatch = (payload: P): void => {\n    boundAction(payload);\n  };\n\n  // $FlowIgnore[prop-missing]\n  if (typeof boundAction.$$FORM_ACTION === 'function') {\n    // $FlowIgnore[prop-missing]\n    dispatch.$$FORM_ACTION = (prefix: string) => {\n      // $FlowIgnore[prop-missing]\n      const metadata: ReactCustomFormAction = boundAction.$$FORM_ACTION(prefix);\n      // Override the action URL\n      if (permalink !== undefined) {\n        if (__DEV__) {\n          checkAttributeStringCoercion(permalink, 'target');\n        }\n        metadata.action = permalink + '';\n      }\n      return metadata;\n    };\n  } else {\n    // This is not a server action, so the permalink argument has\n    // no effect. The form will have to be hydrated before it's submitted.\n  }\n\n  return [initialState, dispatch];\n}\n\nfunction useId(): string {\n  const task: Task = (currentlyRenderingTask: any);\n  const treeId = getTreeId(task.treeContext);\n\n  const resumableState = currentResumableState;\n  if (resumableState === null) {",
      "  module.exports = require('./cjs/react-server-flight.development.js');\n}\n",
      "}\n\njest.run(argv);\n",
      "  if (children.length === 0) {\n    return null;\n  } else if (children.length === 1) {\n    return toTree(children[0]);\n  }\n  return flatten(children.map(toTree));\n}\n\n// $FlowFixMe[missing-local-annot]\nfunction nodeAndSiblingsArray(nodeWithSibling) {\n  const array = [];\n  let node = nodeWithSibling;\n  while (node != null) {\n    array.push(node);\n    node = node.sibling;\n  }\n  return array;\n}\n\n// $FlowFixMe[missing-local-annot]\nfunction flatten(arr) {\n  const result = [];\n  const stack = [{i: 0, array: arr}];\n  while (stack.length) {\n    const n = stack.pop();\n    while (n.i < n.array.length) {\n      const el = n.array[n.i];\n      n.i += 1;\n      if (isArray(el)) {\n        stack.push(n);\n        stack.push({i: 0, array: el});\n        break;\n      }\n      result.push(el);\n    }\n  }\n  return result;\n}\n\nfunction toTree(node: null | Fiber): $FlowFixMe {\n  if (node == null) {\n    return null;\n  }\n  switch (node.tag) {\n    case HostRoot:\n      return childrenToTree(node.child);\n    case HostPortal:\n      return childrenToTree(node.child);\n    case ClassComponent:\n      return {\n        nodeType: 'component',\n        type: node.type,\n        props: {...node.memoizedProps},\n        instance: node.stateNode,\n        rendered: childrenToTree(node.child),\n      };\n    case FunctionComponent:\n    case SimpleMemoComponent:\n      return {\n        nodeType: 'component',\n        type: node.type,\n        props: {...node.memoizedProps},\n        instance: null,\n        rendered: childrenToTree(node.child),",
      "    ReactDOM,\n    ReactDOMServer,\n    ReactTestUtils,\n  };\n}\n\nconst {resetModules, itRenders} = ReactDOMServerIntegrationUtils(initModules);\n\nfunction formatValue(val) {\n  if (val === null) {\n    return 'null';\n  }\n  if (val === undefined) {\n    return 'undefined';\n  }\n  if (typeof val === 'string') {\n    return val;\n  }\n  return JSON.stringify(val);\n}\n\ndescribe('ReactDOMServerIntegrationLegacyContextDisabled', () => {\n  beforeEach(() => {\n    resetModules();\n  });\n\n  itRenders('undefined legacy context with warning', async render => {\n    class LegacyProvider extends React.Component {\n      static childContextTypes = {\n        foo() {},\n      };\n      getChildContext() {\n        return {foo: 10};\n      }\n      render() {\n        return this.props.children;\n      }\n    }\n\n    const lifecycleContextLog = [];\n    class LegacyClsConsumer extends React.Component {\n      static contextTypes = {\n        foo() {},\n      };\n      shouldComponentUpdate(nextProps, nextState, nextContext) {\n        lifecycleContextLog.push(nextContext);\n        return true;\n      }\n      UNSAFE_componentWillReceiveProps(nextProps, nextContext) {\n        lifecycleContextLog.push(nextContext);\n      }\n      UNSAFE_componentWillUpdate(nextProps, nextState, nextContext) {\n        lifecycleContextLog.push(nextContext);\n      }\n      render() {\n        return formatValue(this.context);\n      }\n    }\n\n    function LegacyFnConsumer(props, context) {\n      return formatValue(context);\n    }\n    LegacyFnConsumer.contextTypes = {foo() {}};\n",
      "      }\n\n      function App() {\n        return (\n          <Suspense fallback={<Text text=\"Loading...\" />}>\n            <Sibling>Sibling</Sibling>\n            <span>\n              <AsyncText text=\"Async\" />\n            </span>\n          </Suspense>\n        );\n      }\n\n      await act(() => {\n        ReactDOM.render(<App />, container);\n      });\n      expect(container.innerHTML).toEqual(\n        '<span style=\"display: none;\">Sibling</span><span style=' +\n          '\"display: none;\"></span>Loading...',\n      );\n\n      // Update the inline display style. It will be overridden because it's\n      // inside a hidden fallback.\n      await act(() => setIsVisible(true));\n      expect(container.innerHTML).toEqual(\n        '<span style=\"display: none;\">Sibling</span><span style=' +\n          '\"display: none;\"></span>Loading...',\n      );\n\n      // Unsuspend. The style should now match the inline prop.\n      await act(() => resolveText('Async'));\n      expect(container.innerHTML).toEqual(\n        '<span style=\"display: inline;\">Sibling</span><span style=\"\">Async</span>',\n      );\n    },\n  );\n\n  // Regression test for https://github.com/facebook/react/issues/14188\n  it('can call findDOMNode() in a suspended component commit phase', async () => {\n    const log = [];\n    const Lazy = React.lazy(\n      () =>\n        new Promise(resolve =>\n          resolve({\n            default() {\n              return 'lazy';\n            },\n          }),\n        ),\n    );\n\n    class Child extends React.Component {\n      componentDidMount() {\n        log.push('cDM ' + this.props.id);\n        ReactDOM.findDOMNode(this);\n      }\n      componentDidUpdate() {\n        log.push('cDU ' + this.props.id);\n        ReactDOM.findDOMNode(this);\n      }\n      render() {\n        return 'child';\n      }\n    }",
      "\n/* eslint-disable react-internal/prod-error-codes */\n\n// We expect that our Rollup, Jest, and Flow configurations\n// always shim this module with the corresponding host config\n// (either provided by a renderer, or a generic shim for npm).\n//\n// We should never resolve to this file, but it exists to make\n// sure that if we *do* accidentally break the configuration,\n// the failure isn't silent.\n\nthrow new Error('This module must be shimmed by a specific renderer.');\n",
      " * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nconst ThemeContext = /*#__PURE__*/(0, _react.createContext)('bright');\nexports.ThemeContext = ThemeContext;\n\nfunction useTheme() {\n  const theme = (0, _react.useContext)(ThemeContext);\n  (0, _react.useDebugValue)(theme);\n  return theme;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVzZVRoZW1lLmpzIl0sIm5hbWVzIjpbIlRoZW1lQ29udGV4dCIsInVzZVRoZW1lIiwidGhlbWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBU0E7O0FBVEE7Ozs7Ozs7O0FBV08sTUFBTUEsWUFBWSxnQkFBRywwQkFBYyxRQUFkLENBQXJCOzs7QUFFUSxTQUFTQyxRQUFULEdBQW9CO0FBQ2pDLFFBQU1DLEtBQUssR0FBRyx1QkFBV0YsWUFBWCxDQUFkO0FBQ0EsNEJBQWNFLEtBQWQ7QUFDQSxTQUFPQSxLQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKi9cblxuaW1wb3J0IHtjcmVhdGVDb250ZXh0LCB1c2VDb250ZXh0LCB1c2VEZWJ1Z1ZhbHVlfSBmcm9tICdyZWFjdCc7XG5cbmV4cG9ydCBjb25zdCBUaGVtZUNvbnRleHQgPSBjcmVhdGVDb250ZXh0KCdicmlnaHQnKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlVGhlbWUoKSB7XG4gIGNvbnN0IHRoZW1lID0gdXNlQ29udGV4dChUaGVtZUNvbnRleHQpO1xuICB1c2VEZWJ1Z1ZhbHVlKHRoZW1lKTtcbiAgcmV0dXJuIHRoZW1lO1xufVxuIl19"
    ]
  },
  {
    "id": "angular/angular",
    "org": "angular",
    "avatarURL": "https://avatars.githubusercontent.com/u/139426?v=4",
    "name": "angular/angular",
    "url": "https://github.com/angular/angular",
    "lang": "TypeScript",
    "star_num": 89997,
    "fork_num": 24174,
    "snippets": [
      "import {Component} from '@angular/core';\n\n@Component({selector: 'test', template: '<a [someProp]></a>'})\nexport class FooCmp {\n}\n",
      "    }\n\n    return nativeDelegate.call(target, name, opts, options);\n  };\n\n  api.attachOriginToPatched(target[method], nativeDelegate);\n}\n",
      "    address: ''\n  });\n\n// #docregion inject-form-builder\n  constructor(\n    private cartService: CartService,\n    private formBuilder: FormBuilder,\n  ) {}\n// #enddocregion inject-form-builder, checkout-form-group\n\n  onSubmit(): void {\n    // Process checkout data here\n    this.items = this.cartService.clearCart();\n    console.warn('Your order has been submitted', this.checkoutForm.value);\n    this.checkoutForm.reset();\n  }\n// #docregion inject-form-builder, checkout-form-group\n}\n",
      "// The file contents for the current environment will overwrite these during build.\n// The build system defaults to using `environment.ts`, but if you do\n// `ng build --configuration=<foo>` then `environment.<foo>.ts` will be used instead.\n// The list of which configuration maps to which file can be found in `angular.json`.\n\n\nexport const environment = {\n  legacyUniversalAnalyticsId: 'UA-8594346-26', // Development id\n  googleAnalyticsId: 'G-Q8PB6PJ5CC', // Development id\n\n  production: false,\n  mode: 'stable',\n};\n",
      "import { Component } from '@angular/core';\nimport { DatePipe, UpperCasePipe} from '@angular/common';\n\n@Component({\n  standalone: true,\n  selector: 'app-birthday-pipe-chaining',\n  templateUrl: './birthday-pipe-chaining.component.html',\n  imports: [DatePipe, UpperCasePipe],\n})\nexport class BirthdayPipeChainingComponent {\n  birthday = new Date(1988, 3, 15); // April 15, 1988 -- since month parameter is zero-based\n}\n",
      " *  |                     | ccc         | Abbreviated                                                   | Tue                                                        |\n *  |                     | cccc        | Wide                                                          | Tuesday                                                    |\n *  |                     | ccccc       | Narrow                                                        | T                                                          |\n *  |                     | cccccc      | Short                                                         | Tu                                                         |\n *  | Period              | a, aa & aaa | Abbreviated                                                   | am/pm or AM/PM                                             |\n *  |                     | aaaa        | Wide (fallback to `a` when missing)                           | ante meridiem/post meridiem                                |\n *  |                     | aaaaa       | Narrow                                                        | a/p                                                        |\n *  | Period*             | B, BB & BBB | Abbreviated                                                   | mid.                                                       |\n *  |                     | BBBB        | Wide                                                          | am, pm, midnight, noon, morning, afternoon, evening, night |\n *  |                     | BBBBB       | Narrow                                                        | md                                                         |\n *  | Period standalone*  | b, bb & bbb | Abbreviated                                                   | mid.                                                       |\n *  |                     | bbbb        | Wide                                                          | am, pm, midnight, noon, morning, afternoon, evening, night |\n *  |                     | bbbbb       | Narrow                                                        | md                                                         |\n *  | Hour 1-12           | h           | Numeric: minimum digits                                       | 1, 12                                                      |\n *  |                     | hh          | Numeric: 2 digits + zero padded                               | 01, 12                                                     |\n *  | Hour 0-23           | H           | Numeric: minimum digits                                       | 0, 23                                                      |\n *  |                     | HH          | Numeric: 2 digits + zero padded                               | 00, 23                                                     |\n *  | Minute              | m           | Numeric: minimum digits                                       | 8, 59                                                      |\n *  |                     | mm          | Numeric: 2 digits + zero padded                               | 08, 59                                                     |\n *  | Second              | s           | Numeric: minimum digits                                       | 0... 59                                                    |\n *  |                     | ss          | Numeric: 2 digits + zero padded                               | 00... 59                                                   |\n *  | Fractional seconds  | S           | Numeric: 1 digit                                              | 0... 9                                                     |\n *  |                     | SS          | Numeric: 2 digits + zero padded                               | 00... 99                                                   |\n *  |                     | SSS         | Numeric: 3 digits + zero padded (= milliseconds)              | 000... 999                                                 |\n *  | Zone                | z, zz & zzz | Short specific non location format (fallback to O)            | GMT-8                                                      |\n *  |                     | zzzz        | Long specific non location format (fallback to OOOO)          | GMT-08:00                                                  |\n *  |                     | Z, ZZ & ZZZ | ISO8601 basic format                                          | -0800                                                      |\n *  |                     | ZZZZ        | Long localized GMT format                                     | GMT-8:00                                                   |\n *  |                     | ZZZZZ       | ISO8601 extended format + Z indicator for offset 0 (= XXXXX)  | -08:00                                                     |\n *  |                     | O, OO & OOO | Short localized GMT format                                    | GMT-8                                                      |\n *  |                     | OOOO        | Long localized GMT format                                     | GMT-08:00                                                  |\n *\n *\n * ### Format examples\n *\n * These examples transform a date into various formats,\n * assuming that `dateObj` is a JavaScript `Date` object for\n * year: 2015, month: 6, day: 15, hour: 21, minute: 43, second: 11,\n * given in the local time for the `en-US` locale.\n *\n * ```\n * {{ dateObj | date }}               // output is 'Jun 15, 2015'\n * {{ dateObj | date:'medium' }}      // output is 'Jun 15, 2015, 9:43:11 PM'\n * {{ dateObj | date:'shortTime' }}   // output is '9:43 PM'\n * {{ dateObj | date:'mm:ss' }}       // output is '43:11'\n * {{ dateObj | date:\"MMM dd, yyyy 'at' hh:mm a\" }}  // output is 'Jun 15, 2015 at 09:43 PM'\n * ```\n *\n * ### Usage example\n *\n * The following component uses a date pipe to display the current date in different formats.\n *\n * ```\n * @Component({\n *  selector: 'date-pipe',\n *  template: `<div>\n *    <p>Today is {{today | date}}</p>\n *    <p>Or if you prefer, {{today | date:'fullDate'}}</p>\n *    <p>The time is {{today | date:'h:mm a z'}}</p>\n *  </div>`\n * })\n * // Get the current date and time as a date-time value.\n * export class DatePipeComponent {\n *   today: number = Date.now();",
      "// #docregion\nimport { Component, Input } from '@angular/core';\n\nimport { Hero } from './hero';\n\n@Component({\n  selector: 'app-hero-child',\n  template: `\n    <h3>{{hero.name}} says:</h3>\n    <p>I, {{hero.name}}, am at your service, {{masterName}}.</p>\n  `\n})\nexport class HeroChildComponent {\n  @Input() hero!: Hero;\n  @Input('master') masterName = ''; // eslint-disable-line @angular-eslint/no-input-rename\n}\n// #enddocregion\n",
      "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: `\n    <app-greeting></app-greeting>\n    <nav>\n      <a routerLink=\"contact\" routerLinkActive=\"active\" ariaCurrentWhenActive=\"page\">Contact</a>\n      <a routerLink=\"items\" routerLinkActive=\"active\" ariaCurrentWhenActive=\"page\">Items</a>\n      <a routerLink=\"customers\" routerLinkActive=\"active\" ariaCurrentWhenActive=\"page\">Customers</a>\n    </nav>\n    <router-outlet></router-outlet>\n  `\n})\nexport class AppComponent {\n}\n",
      "    observable1 = constructorZone1.run(() => {\n      return new Observable(subscriber => {\n        expect(Zone.current.name).toEqual(constructorZone1.name);\n        subscriber.next(1);\n        subscriber.next(2);\n        subscriber.complete();\n      });\n    });\n\n    observable2 = constructorZone2.run(() => {\n      return range(3, 4);\n    });\n\n    constructorZone3.run(() => {\n      concatObservable = concat(observable1, observable2);\n    });\n\n    subscriptionZone.run(() => {\n      concatObservable.subscribe((concat: any) => {\n        expect(Zone.current.name).toEqual(subscriptionZone.name);\n        log.push(concat);\n      });\n    });\n\n    expect(log).toEqual([1, 2, 3, 4, 5, 6]);\n  });\n\n  it('concat func callback should run in the correct zone with scheduler',\n     asyncTest((done: any) => {\n       const constructorZone1: Zone = Zone.current.fork({name: 'Constructor Zone1'});\n       const constructorZone2: Zone = Zone.current.fork({name: 'Constructor Zone2'});\n       const constructorZone3: Zone = Zone.current.fork({name: 'Constructor Zone3'});\n       const subscriptionZone: Zone = Zone.current.fork({name: 'Subscription Zone'});\n       observable1 = constructorZone1.run(() => {\n         return new Observable(subscriber => {\n           expect(Zone.current.name).toEqual(constructorZone1.name);\n           subscriber.next(1);\n           subscriber.next(2);\n           subscriber.complete();\n         });\n       });\n\n       observable2 = constructorZone2.run(() => {\n         return range(3, 4);\n       });\n\n       constructorZone3.run(() => {\n         concatObservable = concat(observable1, observable2, asapScheduler);\n       });\n\n       subscriptionZone.run(() => {\n         concatObservable.subscribe(\n             (concat: any) => {\n               expect(Zone.current.name).toEqual(subscriptionZone.name);\n               log.push(concat);\n             },\n             (error: any) => {\n               fail('subscribe failed' + error);\n             },\n             () => {\n               expect(Zone.current.name).toEqual(subscriptionZone.name);\n               expect(log).toEqual([1, 2, 3, 4, 5, 6]);\n               done();\n             });",
      "// #enddocregion\n\n@Component({\n  selector: 'app-shipping',\n  templateUrl: './shipping.component.html',\n  styleUrls: ['./shipping.component.css']\n})\n// #docregion props\nexport class ShippingComponent implements OnInit {\n\n  shippingCosts!: Observable<{ type: string, price: number }[]>;\n// #enddocregion props\n\n// #docregion inject-cart-service\n  constructor(private cartService: CartService) { }\n// #enddocregion inject-cart-service\n// #docregion props\n\n  ngOnInit(): void {\n    this.shippingCosts =  this.cartService.getShippingPrices();\n  }\n\n}\n"
    ]
  },
  {
    "id": "tensorflow/tensorflow",
    "org": "tensorflow",
    "avatarURL": "https://avatars.githubusercontent.com/u/15658638?v=4",
    "name": "tensorflow/tensorflow",
    "url": "https://github.com/tensorflow/tensorflow",
    "lang": "Python",
    "star_num": 177432,
    "fork_num": 88885,
    "snippets": [
      "        max_value=1)\n    min_value, max_value = parameters[\"input_range\"]\n    dy = create_tensor_data(parameters[\"dtype\"], parameters[\"input_shape\"],\n                            min_value, max_value)\n    values = [y, dy]\n    return values, sess.run(outputs, feed_dict=dict(zip(inputs, values)))\n\n  make_zip_of_tests(options, test_parameters, build_graph, build_inputs)\n",
      "  def _dtype(self, value):\n    value = dtypes.as_dtype(value).name\n    self._set_dtype_policy(policy.Policy(value))\n\n  def _name_scope(self):  # pylint: disable=method-hidden\n    return self.name\n\n  def _init_set_name(self, name, zero_based=True):\n    if not name:\n      self._name = backend.unique_object_name(\n          generic_utils.to_snake_case(self.__class__.__name__),\n          zero_based=zero_based)\n    else:\n      self._name = name\n\n  def _get_existing_metric(self, name=None):\n    match = [m for m in self._metrics if m.name == name]\n    if not match:\n      return\n    if len(match) > 1:\n      raise ValueError(\n          'Please provide different names for the metrics you have added. '\n          'We found {} metrics with the name: \"{}\"'.format(len(match), name))\n    return match[0]\n\n  def _symbolic_add_metric(self, value, aggregation=None, name=None):\n    base_layer_utils.check_graph_consistency(value, method='add_metric')\n    match = self._get_existing_metric(name)\n    if aggregation is None:\n      # Iterate over the metrics and check if the given metric exists already.\n      # This can happen when a metric instance is created in subclassed model\n      # layer `__init__` and we have tracked that instance already in\n      # model.__setattr__.\n      if match:\n        result_tensor = value\n        metric_obj = match\n      elif hasattr(value, '_metric_obj'):\n        # We track the instance using the metadata on the result tensor.\n        result_tensor = value\n        metric_obj = result_tensor._metric_obj\n        self._metrics.append(metric_obj)\n      else:\n        raise ValueError(\n            'We do not support adding an aggregated metric result tensor that '\n            'is not the output of a `tf.keras.metrics.Metric` metric instance. '\n            'Without having access to the metric instance we cannot reset the '\n            'state of a metric after every epoch during training. You can '\n            'create a `tf.keras.metrics.Metric` instance and pass the result '\n            'here or pass an un-aggregated result with `aggregation` parameter '\n            'set as `mean`. For example: `self.add_metric(tf.reduce_sum(inputs)'\n            ', name=\\'mean_activation\\', aggregation=\\'mean\\')`')\n    else:\n      # If a non-aggregated tensor is given as input (ie. `aggregation` is\n      # explicitly set to `mean`), we wrap the tensor in `Mean` metric.\n      if match:\n        result_tensor = match(value)\n        metric_obj = match\n      else:\n        metric_obj, result_tensor = base_layer_utils.create_mean_metric(\n            value, name)\n        self._metrics.append(metric_obj)\n\n  def _handle_weight_regularization(self, name, variable, regularizer):\n    \"\"\"Create lambdas which compute regularization losses.\"\"\"",
      "              weighted_losses, reduction=loss_reduction)\n        else:\n          # Compute the stateless loss value for a custom loss class.\n          # Here we assume that the class takes care of loss reduction\n          # because if this class returns a vector value we cannot\n          # differentiate between use case where a custom optimizer\n          # expects a vector loss value vs unreduced per-sample loss value.\n          output_loss = loss_fn(targets[i], outs[i], sample_weight=weights)\n          loss_reduction = losses_utils.ReductionV2.SUM_OVER_BATCH_SIZE\n\n      # If the number of outputs is 1 then we don't append the loss metric\n      # associated with each model output. When there are multiple outputs\n      # associated with a model, each output's loss is calculated and returned\n      # as part of the loss_metrics.\n      if len(model.outputs) > 1:\n        # Keep track of the stateful output loss result.\n        output_losses.append(output_loss_metrics[i](output_loss))\n\n      # Scale output loss for distribution. For custom losses we assume\n      # reduction was mean.\n      if loss_reduction == losses_utils.ReductionV2.SUM_OVER_BATCH_SIZE:\n        output_loss = losses_utils.scale_loss_for_distribution(output_loss)\n      total_loss += model._loss_weights_list[i] * output_loss\n\n    # Add regularization losses\n    if custom_losses:\n      total_loss += losses_utils.scale_loss_for_distribution(\n          math_ops.add_n(custom_losses))\n  return outs, total_loss, output_losses, masks\n\n\ndef _process_single_batch(model,\n                          inputs,\n                          targets,\n                          output_loss_metrics=None,\n                          sample_weights=None,\n                          training=False):\n  \"\"\"Calculate the loss and gradient for one input batch.\n\n     The model weights are updated if training is set to True.\n\n  Args:\n      model: Model whose loss has to be calculated.\n      inputs: List of input arrays.\n      targets: List of target arrays.\n      output_loss_metrics: List of metrics that are used to aggregated output\n        loss values.\n      sample_weights: Optional list of sample weight arrays.\n      training: The boolean represents if the weights of the model are updated.\n              'fit' methods will set this to True while 'evaluate' methods will\n              set this to False.\n\n  Returns:\n      output of the model, total loss, the loss and the mask\n      associated with each output.\n\n  Raises:\n      ValueError: If the model has no loss to optimize.\n  \"\"\"\n  with backend.eager_learning_phase_scope(1 if training else 0), \\\n      training_utils.RespectCompiledTrainableState(model):\n    with GradientTape() as tape:\n      outs, total_loss, output_losses, masks = (\n          _model_loss(",
      "    return [input_tensor], [out]\n\n  def build_inputs(parameters, sess, inputs, outputs):\n    input_value = create_scalar_data(parameters[\"dtype\"])\n    return [input_value], sess.run(\n        outputs, feed_dict=dict(zip(inputs, [input_value])))\n\n  make_zip_of_tests(options, test_parameters, build_graph, build_inputs)\n",
      "  @combinations.generate(\n      combinations.combine(strategy=[\n          strategy_combinations.multi_worker_mirrored_2x1_cpu,\n          strategy_combinations.multi_worker_mirrored_2x1_gpu,\n          strategy_combinations.multi_worker_mirrored_2x2_gpu,\n          strategy_combinations.multi_worker_mirrored_4x1_cpu,\n      ]))\n  def testMultiWorkerMirrored(self, strategy):\n    # MultiWorkerMirroredStrategy combinations only supports V2.\n    self.assertIsInstance(\n        strategy, collective_all_reduce_strategy.CollectiveAllReduceStrategy)\n\n  @combinations.generate(\n      combinations.combine(strategy=[\n          strategy_combinations.central_storage_strategy_with_gpu_and_cpu,\n          strategy_combinations.central_storage_strategy_with_two_gpus,\n      ]))\n  def testCentralStorage(self, strategy):\n    self.assertIsInstance(strategy,\n                          central_storage_strategy.CentralStorageStrategyV1)\n\n  @combinations.generate(\n      combinations.combine(strategy=strategy_combinations.tpu_strategies))\n  def testTPU(self, strategy):\n    self.assertIsInstance(strategy, tpu_strategy.TPUStrategyV1)\n\n\nclass V2StrategyTest(test.TestCase, parameterized.TestCase):\n\n  def setUp(self):\n    super().setUp()\n    tf2.enable()\n\n  @combinations.generate(\n      combinations.combine(strategy=[\n          strategy_combinations.one_device_strategy,\n          strategy_combinations.one_device_strategy_gpu,\n          strategy_combinations.one_device_strategy_gpu_on_worker_1,\n          strategy_combinations.one_device_strategy_on_worker_1\n      ]))\n  def testOneDevice(self, strategy):\n    self.assertIsInstance(strategy, one_device_strategy.OneDeviceStrategy)\n\n  @combinations.generate(\n      combinations.combine(strategy=[\n          strategy_combinations.mirrored_strategy_with_cpu_1_and_2,\n          strategy_combinations.mirrored_strategy_with_gpu_and_cpu,\n          strategy_combinations.mirrored_strategy_with_one_cpu,\n          strategy_combinations.mirrored_strategy_with_one_gpu,\n          strategy_combinations.mirrored_strategy_with_two_gpus,\n      ]))\n  def testMirrored(self, strategy):\n    self.assertIsInstance(strategy, mirrored_strategy.MirroredStrategy)\n\n  @combinations.generate(\n      combinations.combine(strategy=[\n          strategy_combinations.multi_worker_mirrored_2x1_cpu,\n          strategy_combinations.multi_worker_mirrored_2x1_gpu,\n          strategy_combinations.multi_worker_mirrored_2x2_gpu,\n          strategy_combinations.multi_worker_mirrored_4x1_cpu,\n      ]))\n  def testMultiWorkerMirrored(self, strategy):\n    self.assertIsInstance(\n        strategy, collective_all_reduce_strategy.CollectiveAllReduceStrategy)",
      "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\"\"\"Integration test for sequence feature columns with SequenceExamples.\"\"\"\n\nimport string\nimport tempfile\n\nfrom google.protobuf import text_format\n\nfrom tensorflow.core.example import example_pb2\nfrom tensorflow.python.feature_column import feature_column_v2 as fc\nfrom tensorflow.python.feature_column import sequence_feature_column as sfc\nfrom tensorflow.python.ops import parsing_ops\nfrom tensorflow.python.platform import test\nfrom tensorflow.python.util import compat\n\n\nclass SequenceExampleParsingTest(test.TestCase):\n\n  def test_seq_ex_in_sequence_categorical_column_with_identity(self):\n    self._test_parsed_sequence_example(\n        'int_list', sfc.sequence_categorical_column_with_identity,\n        10, [3, 6], [2, 4, 6])\n\n  def test_seq_ex_in_sequence_categorical_column_with_hash_bucket(self):\n    self._test_parsed_sequence_example(\n        'bytes_list', sfc.sequence_categorical_column_with_hash_bucket,\n        10, [3, 4], [compat.as_bytes(x) for x in 'acg'])\n\n  def test_seq_ex_in_sequence_categorical_column_with_vocabulary_list(self):\n    self._test_parsed_sequence_example(\n        'bytes_list', sfc.sequence_categorical_column_with_vocabulary_list,\n        list(string.ascii_lowercase), [3, 4],\n        [compat.as_bytes(x) for x in 'acg'])\n\n  def test_seq_ex_in_sequence_categorical_column_with_vocabulary_file(self):\n    _, fname = tempfile.mkstemp()\n    with open(fname, 'w') as f:\n      f.write(string.ascii_lowercase)\n    self._test_parsed_sequence_example(\n        'bytes_list', sfc.sequence_categorical_column_with_vocabulary_file,\n        fname, [3, 4], [compat.as_bytes(x) for x in 'acg'])\n\n  def _test_parsed_sequence_example(\n      self, col_name, col_fn, col_arg, shape, values):\n    \"\"\"Helper function to check that each FeatureColumn parses correctly.\n\n    Args:\n      col_name: string, name to give to the feature column. Should match\n        the name that the column will parse out of the features dict.\n      col_fn: function used to create the feature column. For example,\n        sequence_numeric_column.\n      col_arg: second arg that the target feature column is expecting.",
      "# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an 'AS IS' BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\"\"\"Utility functions related to SignatureDefs.\n\nNote: This utility is not compatiable with tensorflow.org/lite/guide/signatures.\n\"\"\"\n\nfrom tensorflow.core.protobuf import meta_graph_pb2\nfrom tensorflow.lite.tools.signature import _pywrap_signature_def_util_wrapper as signature_def_util\n\n\ndef set_signature_defs(tflite_model, signature_def_map):\n  \"\"\"Sets SignatureDefs to the Metadata of a TfLite flatbuffer buffer.\n\n  Args:\n    tflite_model: Binary TFLite model (bytes or bytes-like object) to which to\n      add signature_def.\n    signature_def_map: dict containing SignatureDefs to store in metadata.\n  Returns:\n    buffer: A TFLite model binary identical to model buffer with\n      metadata field containing SignatureDef.\n\n  Raises:\n    ValueError:\n      tflite_model buffer does not contain a valid TFLite model.\n      signature_def_map is empty or does not contain a SignatureDef.\n  \"\"\"\n  model = tflite_model\n  if not isinstance(tflite_model, bytearray):\n    model = bytearray(tflite_model)\n  serialized_signature_def_map = {\n      k: v.SerializeToString() for k, v in signature_def_map.items()}\n  model_buffer = signature_def_util.SetSignatureDefMap(\n      model, serialized_signature_def_map)\n  return model_buffer\n\n\ndef get_signature_defs(tflite_model):\n  \"\"\"Get SignatureDef dict from the Metadata of a TfLite flatbuffer buffer.\n\n  Args:\n    tflite_model: TFLite model buffer to get the signature_def.\n\n  Returns:\n    dict containing serving names to SignatureDefs if exists, otherwise, empty\n      dict.\n\n  Raises:\n    ValueError:\n      tflite_model buffer does not contain a valid TFLite model.\n    DecodeError:\n      SignatureDef cannot be parsed from TfLite SignatureDef metadata.\n  \"\"\"\n  model = tflite_model\n  if not isinstance(tflite_model, bytearray):\n    model = bytearray(tflite_model)",
      "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\"\"\"Tests that sparse tensors work with GPU, such as placement of int and string.\n\nTest using sparse tensors with distributed dataset. Since GPU does\nnot support strings, sparse tensors containing string should always be placed\non CPU.\n\"\"\"\n\nfrom absl.testing import parameterized\nfrom tensorflow.python.data.ops import dataset_ops\nfrom tensorflow.python.distribute import mirrored_strategy\nfrom tensorflow.python.eager import def_function\nfrom tensorflow.python.framework import constant_op\nfrom tensorflow.python.framework import dtypes\nfrom tensorflow.python.framework import sparse_tensor\nfrom tensorflow.python.framework import test_util\nfrom tensorflow.python.ops import sparse_ops\nfrom tensorflow.python.platform import test\n\n\ndef sparse_int64():\n  return sparse_tensor.SparseTensor(\n      indices=[[0, 0], [1, 1], [2, 2], [3, 3], [4, 0], [5, 1], [6, 2], [7, 3]],\n      values=constant_op.constant([1, 2, 3, 4, 5, 6, 7, 8], dtype=dtypes.int64),\n      dense_shape=[8, 4])\n\n\ndef sparse_str():\n  return sparse_tensor.SparseTensor(\n      indices=[[0, 0], [1, 1], [2, 2], [3, 3], [4, 0], [5, 1], [6, 2], [7, 3]],\n      values=constant_op.constant(['1', '2', '3', '4', '5', '6', '7', '8']),\n      dense_shape=[8, 4])\n\n\nclass FactoryOpsTest(test_util.TensorFlowTestCase, parameterized.TestCase):\n\n  @parameterized.parameters(\n      (sparse_int64,),\n      (sparse_str,),\n  )\n  @test_util.run_gpu_only\n  def testSparseWithDistributedDataset(self, sparse_factory):\n\n    @def_function.function\n    def distributed_dataset_producer(t):\n      strategy = mirrored_strategy.MirroredStrategy(['GPU:0', 'GPU:1'])\n      sparse_ds = dataset_ops.Dataset.from_tensor_slices(t).batch(2)\n      dist_dataset = strategy.experimental_distribute_dataset(sparse_ds)\n      ds = iter(dist_dataset)\n      result = strategy.experimental_local_results(next(ds))[0]\n      # Reach the end of the iterator\n      for ignore in ds:  # pylint: disable=unused-variable\n        pass\n      return result\n\n    t = sparse_factory()\n\n    result = distributed_dataset_producer(t)\n    self.assertAllEqual(\n        self.evaluate(sparse_ops.sparse_tensor_to_dense(t)[0]),\n        self.evaluate(sparse_ops.sparse_tensor_to_dense(result)[0]))",
      "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\"\"\"Test configs for broadcast_to.\"\"\"\nimport tensorflow as tf\nfrom tensorflow.lite.testing.zip_test_utils import create_tensor_data\nfrom tensorflow.lite.testing.zip_test_utils import make_zip_of_tests\nfrom tensorflow.lite.testing.zip_test_utils import register_make_test_function\n\n\n@register_make_test_function(\"make_broadcast_to_tests\")\ndef make_broadcast_to_tests(options):\n  \"\"\"Make a set of tests to do broadcast_to.\"\"\"\n\n  # Chose a set of parameters\n  test_parameters = [{\n      \"input_dtype\": [tf.float32, tf.int32],\n      \"input_shape\": [[1, 2], [2, 3, 4], [1], [2, 5, 2, 3, 4]],\n      \"output_shape\": [[3, 1, 2], [5, 2, 3, 4], [10, 10],\n                       [1, 2, 1, 2, 5, 2, 3, 4]],\n  }, {\n      \"input_dtype\": [tf.float32, tf.int32],\n      \"input_shape\": [[3, 2, 3, 4, 5, 6, 7, 8]],\n      \"output_shape\": [[3, 2, 3, 4, 5, 6, 7, 8]],\n  }, {\n      \"input_dtype\": [tf.float32, tf.int32],\n      \"input_shape\": [[1, 3, 1, 2, 1, 4, 1, 1]],\n      \"output_shape\": [[2, 3, 1, 2, 2, 4, 1, 1]],\n  }, {\n      \"input_dtype\": [tf.float32, tf.int32],\n      \"input_shape\": [[2, 1, 1, 2, 1, 4, 1, 1]],\n      \"output_shape\": [[2, 3, 2, 2, 2, 4, 1, 1]],\n  }, {\n      \"input_dtype\": [tf.float32, tf.int32],\n      \"input_shape\": [[3, 4, 1]],\n      \"output_shape\": [[3, 4, 0]],\n  }]\n\n  def build_graph(parameters):\n    \"\"\"Build the graph for cond tests.\"\"\"\n    input_tensor = tf.compat.v1.placeholder(\n        dtype=parameters[\"input_dtype\"],\n        name=\"input\",\n        shape=parameters[\"input_shape\"])\n\n    out = tf.broadcast_to(input_tensor, shape=parameters[\"output_shape\"])\n    return [input_tensor], [out]\n\n  def build_inputs(parameters, sess, inputs, outputs):\n    input_values = [\n        create_tensor_data(parameters[\"input_dtype\"], parameters[\"input_shape\"])\n    ]\n    return input_values, sess.run(\n        outputs, feed_dict=dict(zip(inputs, input_values)))",
      "        # TODO(b/68813416): Skip bfloat16's as the input type for direct is\n        # float32 and results in a mismatch, while making testDirect provide the\n        # correctly typed input results in 'no fill-function for data-type'\n        # error.\n        if dtype == dtypes.bfloat16.as_numpy_dtype:\n          continue\n        if dtype == np.float16:\n          actual_inputs = np.array(inputs).astype(dtype)\n          actual_paddings = np.array(paddings).astype(dtype)\n          expected_outputs = np.array(outputs).astype(dtype)\n        else:\n          actual_inputs = inputs\n          actual_paddings = paddings\n          expected_outputs = outputs\n        placeholder = array_ops.placeholder(dtype)\n        # outputs = space_to_batch(inputs)\n        x_tf = array_ops.space_to_batch_nd(placeholder, block_shape,\n                                           actual_paddings)\n        self.assertAllEqual(\n            sess.run(x_tf, {placeholder: actual_inputs}), expected_outputs)\n        # inputs = batch_to_space(outputs)\n        placeholder = array_ops.placeholder(dtype)\n        x_tf = array_ops.batch_to_space_nd(placeholder, block_shape,\n                                           actual_paddings)\n        self.assertAllEqual(\n            sess.run(x_tf, {placeholder: expected_outputs}), actual_inputs)\n\n  def _testDirect(self, input_shape, block_shape, paddings):\n    inputs = np.arange(np.prod(input_shape), dtype=np.float32)\n    inputs = inputs.reshape(input_shape)\n    self._testPad(inputs, block_shape, paddings,\n                  space_to_batch_direct(inputs, block_shape, paddings))\n\n  def testZeroBlockDimsZeroRemainingDims(self):\n    self._testPad(\n        inputs=[1, 2],\n        block_shape=[],\n        paddings=[],\n        outputs=[1, 2],)\n\n  def testZeroBlockDimsOneRemainingDim(self):\n    self._testPad(\n        inputs=[[1, 2], [3, 4]],\n        block_shape=[],\n        paddings=[],\n        outputs=[[1, 2], [3, 4]])\n\n    # Same thing, but with a no-op block dim.\n    self._testPad(\n        inputs=[[1, 2], [3, 4]],\n        block_shape=[1],\n        paddings=[[0, 0]],\n        outputs=[[1, 2], [3, 4]])\n\n  def testZeroBlockDimsTwoRemainingDims(self):\n    self._testPad(\n        inputs=[[[1, 2], [3, 4]], [[5, 6], [7, 8]]],\n        block_shape=[],\n        paddings=[],\n        outputs=[[[1, 2], [3, 4]], [[5, 6], [7, 8]]])\n\n    # Same thing, but with a no-op block dim.\n    self._testPad(\n        inputs=[[[1, 2], [3, 4]], [[5, 6], [7, 8]]],"
    ]
  },
  {
    "id": "twbs/bootstrap",
    "org": "twbs",
    "avatarURL": "https://avatars.githubusercontent.com/u/2918581?v=4",
    "name": "twbs/bootstrap",
    "url": "https://github.com/twbs/bootstrap",
    "lang": "HTML, CSS, JavaScript",
    "star_num": 165178,
    "fork_num": 78848,
    "snippets": [
      "@charset \"UTF-8\";/*!\n * Bootstrap  v5.3.1 (https://getbootstrap.com/)\n * Copyright 2011-2023 The Bootstrap Authors\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n */:root,[data-bs-theme=light]{--bs-blue:#0d6efd;--bs-indigo:#6610f2;--bs-purple:#6f42c1;--bs-pink:#d63384;--bs-red:#dc3545;--bs-orange:#fd7e14;--bs-yellow:#ffc107;--bs-green:#198754;--bs-teal:#20c997;--bs-cyan:#0dcaf0;--bs-black:#000;--bs-white:#fff;--bs-gray:#6c757d;--bs-gray-dark:#343a40;--bs-gray-100:#f8f9fa;--bs-gray-200:#e9ecef;--bs-gray-300:#dee2e6;--bs-gray-400:#ced4da;--bs-gray-500:#adb5bd;--bs-gray-600:#6c757d;--bs-gray-700:#495057;--bs-gray-800:#343a40;--bs-gray-900:#212529;--bs-primary:#0d6efd;--bs-secondary:#6c757d;--bs-success:#198754;--bs-info:#0dcaf0;--bs-warning:#ffc107;--bs-danger:#dc3545;--bs-light:#f8f9fa;--bs-dark:#212529;--bs-primary-rgb:13,110,253;--bs-secondary-rgb:108,117,125;--bs-success-rgb:25,135,84;--bs-info-rgb:13,202,240;--bs-warning-rgb:255,193,7;--bs-danger-rgb:220,53,69;--bs-light-rgb:248,249,250;--bs-dark-rgb:33,37,41;--bs-primary-text-emphasis:#052c65;--bs-secondary-text-emphasis:#2b2f32;--bs-success-text-emphasis:#0a3622;--bs-info-text-emphasis:#055160;--bs-warning-text-emphasis:#664d03;--bs-danger-text-emphasis:#58151c;--bs-light-text-emphasis:#495057;--bs-dark-text-emphasis:#495057;--bs-primary-bg-subtle:#cfe2ff;--bs-secondary-bg-subtle:#e2e3e5;--bs-success-bg-subtle:#d1e7dd;--bs-info-bg-subtle:#cff4fc;--bs-warning-bg-subtle:#fff3cd;--bs-danger-bg-subtle:#f8d7da;--bs-light-bg-subtle:#fcfcfd;--bs-dark-bg-subtle:#ced4da;--bs-primary-border-subtle:#9ec5fe;--bs-secondary-border-subtle:#c4c8cb;--bs-success-border-subtle:#a3cfbb;--bs-info-border-subtle:#9eeaf9;--bs-warning-border-subtle:#ffe69c;--bs-danger-border-subtle:#f1aeb5;--bs-light-border-subtle:#e9ecef;--bs-dark-border-subtle:#adb5bd;--bs-white-rgb:255,255,255;--bs-black-rgb:0,0,0;--bs-font-sans-serif:system-ui,-apple-system,\"Segoe UI\",Roboto,\"Helvetica Neue\",\"Noto Sans\",\"Liberation Sans\",Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\";--bs-font-monospace:SFMono-Regular,Menlo,Monaco,Consolas,\"Liberation Mono\",\"Courier New\",monospace;--bs-gradient:linear-gradient(180deg, rgba(255, 255, 255, 0.15), rgba(255, 255, 255, 0));--bs-body-font-family:var(--bs-font-sans-serif);--bs-body-font-size:1rem;--bs-body-font-weight:400;--bs-body-line-height:1.5;--bs-body-color:#212529;--bs-body-color-rgb:33,37,41;--bs-body-bg:#fff;--bs-body-bg-rgb:255,255,255;--bs-emphasis-color:#000;--bs-emphasis-color-rgb:0,0,0;--bs-secondary-color:rgba(33, 37, 41, 0.75);--bs-secondary-color-rgb:33,37,41;--bs-secondary-bg:#e9ecef;--bs-secondary-bg-rgb:233,236,239;--bs-tertiary-color:rgba(33, 37, 41, 0.5);--bs-tertiary-color-rgb:33,37,41;--bs-tertiary-bg:#f8f9fa;--bs-tertiary-bg-rgb:248,249,250;--bs-heading-color:inherit;--bs-link-color:#0d6efd;--bs-link-color-rgb:13,110,253;--bs-link-decoration:underline;--bs-link-hover-color:#0a58ca;--bs-link-hover-color-rgb:10,88,202;--bs-code-color:#d63384;--bs-highlight-bg:#fff3cd;--bs-border-width:1px;--bs-border-style:solid;--bs-border-color:#dee2e6;--bs-border-color-translucent:rgba(0, 0, 0, 0.175);--bs-border-radius:0.375rem;--bs-border-radius-sm:0.25rem;--bs-border-radius-lg:0.5rem;--bs-border-radius-xl:1rem;--bs-border-radius-xxl:2rem;--bs-border-radius-2xl:var(--bs-border-radius-xxl);--bs-border-radius-pill:50rem;--bs-box-shadow:0 0.5rem 1rem rgba(0, 0, 0, 0.15);--bs-box-shadow-sm:0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);--bs-box-shadow-lg:0 1rem 3rem rgba(0, 0, 0, 0.175);--bs-box-shadow-inset:inset 0 1px 2px rgba(0, 0, 0, 0.075);--bs-focus-ring-width:0.25rem;--bs-focus-ring-opacity:0.25;--bs-focus-ring-color:rgba(13, 110, 253, 0.25);--bs-form-valid-color:#198754;--bs-form-valid-border-color:#198754;--bs-form-invalid-color:#dc3545;--bs-form-invalid-border-color:#dc3545}[data-bs-theme=dark]{color-scheme:dark;--bs-body-color:#dee2e6;--bs-body-color-rgb:222,226,230;--bs-body-bg:#212529;--bs-body-bg-rgb:33,37,41;--bs-emphasis-color:#fff;--bs-emphasis-color-rgb:255,255,255;--bs-secondary-color:rgba(222, 226, 230, 0.75);--bs-secondary-color-rgb:222,226,230;--bs-secondary-bg:#343a40;--bs-secondary-bg-rgb:52,58,64;--bs-tertiary-color:rgba(222, 226, 230, 0.5);--bs-tertiary-color-rgb:222,226,230;--bs-tertiary-bg:#2b3035;--bs-tertiary-bg-rgb:43,48,53;--bs-primary-text-emphasis:#6ea8fe;--bs-secondary-text-emphasis:#a7acb1;--bs-success-text-emphasis:#75b798;--bs-info-text-emphasis:#6edff6;--bs-warning-text-emphasis:#ffda6a;--bs-danger-text-emphasis:#ea868f;--bs-light-text-emphasis:#f8f9fa;--bs-dark-text-emphasis:#dee2e6;--bs-primary-bg-subtle:#031633;--bs-secondary-bg-subtle:#161719;--bs-success-bg-subtle:#051b11;--bs-info-bg-subtle:#032830;--bs-warning-bg-subtle:#332701;--bs-danger-bg-subtle:#2c0b0e;--bs-light-bg-subtle:#343a40;--bs-dark-bg-subtle:#1a1d20;--bs-primary-border-subtle:#084298;--bs-secondary-border-subtle:#41464b;--bs-success-border-subtle:#0f5132;--bs-info-border-subtle:#087990;--bs-warning-border-subtle:#997404;--bs-danger-border-subtle:#842029;--bs-light-border-subtle:#495057;--bs-dark-border-subtle:#343a40;--bs-heading-color:inherit;--bs-link-color:#6ea8fe;--bs-link-hover-color:#8bb9fe;--bs-link-color-rgb:110,168,254;--bs-link-hover-color-rgb:139,185,254;--bs-code-color:#e685b5;--bs-border-color:#495057;--bs-border-color-translucent:rgba(255, 255, 255, 0.15);--bs-form-valid-color:#75b798;--bs-form-valid-border-color:#75b798;--bs-form-invalid-color:#ea868f;--bs-form-invalid-border-color:#ea868f}*,::after,::before{box-sizing:border-box}@media (prefers-reduced-motion:no-preference){:root{scroll-behavior:smooth}}body{margin:0;font-family:var(--bs-body-font-family);font-size:var(--bs-body-font-size);font-weight:var(--bs-body-font-weight);line-height:var(--bs-body-line-height);color:var(--bs-body-color);text-align:var(--bs-body-text-align);background-color:var(--bs-body-bg);-webkit-text-size-adjust:100%;-webkit-tap-highlight-color:transparent}hr{margin:1rem 0;color:inherit;border:0;border-top:var(--bs-border-width) solid;opacity:.25}.h1,.h2,.h3,.h4,.h5,.h6,h1,h2,h3,h4,h5,h6{margin-top:0;margin-bottom:.5rem;font-weight:500;line-height:1.2;color:var(--bs-heading-color)}.h1,h1{font-size:calc(1.375rem + 1.5vw)}@media (min-width:1200px){.h1,h1{font-size:2.5rem}}.h2,h2{font-size:calc(1.325rem + .9vw)}@media (min-width:1200px){.h2,h2{font-size:2rem}}.h3,h3{font-size:calc(1.3rem + .6vw)}@media (min-width:1200px){.h3,h3{font-size:1.75rem}}.h4,h4{font-size:calc(1.275rem + .3vw)}@media (min-width:1200px){.h4,h4{font-size:1.5rem}}.h5,h5{font-size:1.25rem}.h6,h6{font-size:1rem}p{margin-top:0;margin-bottom:1rem}abbr[title]{-webkit-text-decoration:underline dotted;text-decoration:underline dotted;cursor:help;-webkit-text-decoration-skip-ink:none;text-decoration-skip-ink:none}address{margin-bottom:1rem;font-style:normal;line-height:inherit}ol,ul{padding-left:2rem}dl,ol,ul{margin-top:0;margin-bottom:1rem}ol ol,ol ul,ul ol,ul ul{margin-bottom:0}dt{font-weight:700}dd{margin-bottom:.5rem;margin-left:0}blockquote{margin:0 0 1rem}b,strong{font-weight:bolder}.small,small{font-size:.875em}.mark,mark{padding:.1875em;background-color:var(--bs-highlight-bg)}sub,sup{position:relative;font-size:.75em;line-height:0;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}a{color:rgba(var(--bs-link-color-rgb),var(--bs-link-opacity,1));text-decoration:underline}a:hover{--bs-link-color-rgb:var(--bs-link-hover-color-rgb)}a:not([href]):not([class]),a:not([href]):not([class]):hover{color:inherit;text-decoration:none}code,kbd,pre,samp{font-family:var(--bs-font-monospace);font-size:1em}pre{display:block;margin-top:0;margin-bottom:1rem;overflow:auto;font-size:.875em}pre code{font-size:inherit;color:inherit;word-break:normal}code{font-size:.875em;color:var(--bs-code-color);word-wrap:break-word}a>code{color:inherit}kbd{padding:.1875rem .375rem;font-size:.875em;color:var(--bs-body-bg);background-color:var(--bs-body-color);border-radius:.25rem}kbd kbd{padding:0;font-size:1em}figure{margin:0 0 1rem}img,svg{vertical-align:middle}table{caption-side:bottom;border-collapse:collapse}caption{padding-top:.5rem;padding-bottom:.5rem;color:var(--bs-secondary-color);text-align:left}th{text-align:inherit;text-align:-webkit-match-parent}tbody,td,tfoot,th,thead,tr{border-color:inherit;border-style:solid;border-width:0}label{display:inline-block}button{border-radius:0}button:focus:not(:focus-visible){outline:0}button,input,optgroup,select,textarea{margin:0;font-family:inherit;font-size:inherit;line-height:inherit}button,select{text-transform:none}[role=button]{cursor:pointer}select{word-wrap:normal}select:disabled{opacity:1}[list]:not([type=date]):not([type=datetime-local]):not([type=month]):not([type=week]):not([type=time])::-webkit-calendar-picker-indicator{display:none!important}[type=button],[type=reset],[type=submit],button{-webkit-appearance:button}[type=button]:not(:disabled),[type=reset]:not(:disabled),[type=submit]:not(:disabled),button:not(:disabled){cursor:pointer}::-moz-focus-inner{padding:0;border-style:none}textarea{resize:vertical}fieldset{min-width:0;padding:0;margin:0;border:0}legend{float:left;width:100%;padding:0;margin-bottom:.5rem;font-size:calc(1.275rem + .3vw);line-height:inherit}@media (min-width:1200px){legend{font-size:1.5rem}}legend+*{clear:left}::-webkit-datetime-edit-day-field,::-webkit-datetime-edit-fields-wrapper,::-webkit-datetime-edit-hour-field,::-webkit-datetime-edit-minute,::-webkit-datetime-edit-month-field,::-webkit-datetime-edit-text,::-webkit-datetime-edit-year-field{padding:0}::-webkit-inner-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}::-webkit-search-decoration{-webkit-appearance:none}::-webkit-color-swatch-wrapper{padding:0}::-webkit-file-upload-button{font:inherit;-webkit-appearance:button}::file-selector-button{font:inherit;-webkit-appearance:button}output{display:inline-block}iframe{border:0}summary{display:list-item;cursor:pointer}progress{vertical-align:baseline}[hidden]{display:none!important}.lead{font-size:1.25rem;font-weight:300}.display-1{font-size:calc(1.625rem + 4.5vw);font-weight:300;line-height:1.2}@media (min-width:1200px){.display-1{font-size:5rem}}.display-2{font-size:calc(1.575rem + 3.9vw);font-weight:300;line-height:1.2}@media (min-width:1200px){.display-2{font-size:4.5rem}}.display-3{font-size:calc(1.525rem + 3.3vw);font-weight:300;line-height:1.2}@media (min-width:1200px){.display-3{font-size:4rem}}.display-4{font-size:calc(1.475rem + 2.7vw);font-weight:300;line-height:1.2}@media (min-width:1200px){.display-4{font-size:3.5rem}}.display-5{font-size:calc(1.425rem + 2.1vw);font-weight:300;line-height:1.2}@media (min-width:1200px){.display-5{font-size:3rem}}.display-6{font-size:calc(1.375rem + 1.5vw);font-weight:300;line-height:1.2}@media (min-width:1200px){.display-6{font-size:2.5rem}}.list-unstyled{padding-left:0;list-style:none}.list-inline{padding-left:0;list-style:none}.list-inline-item{display:inline-block}.list-inline-item:not(:last-child){margin-right:.5rem}.initialism{font-size:.875em;text-transform:uppercase}.blockquote{margin-bottom:1rem;font-size:1.25rem}.blockquote>:last-child{margin-bottom:0}.blockquote-footer{margin-top:-1rem;margin-bottom:1rem;font-size:.875em;color:#6c757d}.blockquote-footer::before{content:\"— \"}.img-fluid{max-width:100%;height:auto}.img-thumbnail{padding:.25rem;background-color:var(--bs-body-bg);border:var(--bs-border-width) solid var(--bs-border-color);border-radius:var(--bs-border-radius);max-width:100%;height:auto}.figure{display:inline-block}.figure-img{margin-bottom:.5rem;line-height:1}.figure-caption{font-size:.875em;color:var(--bs-secondary-color)}.container,.container-fluid,.container-lg,.container-md,.container-sm,.container-xl,.container-xxl{--bs-gutter-x:1.5rem;--bs-gutter-y:0;width:100%;padding-right:calc(var(--bs-gutter-x) * .5);padding-left:calc(var(--bs-gutter-x) * .5);margin-right:auto;margin-left:auto}@media (min-width:576px){.container,.container-sm{max-width:540px}}@media (min-width:768px){.container,.container-md,.container-sm{max-width:720px}}@media (min-width:992px){.container,.container-lg,.container-md,.container-sm{max-width:960px}}@media (min-width:1200px){.container,.container-lg,.container-md,.container-sm,.container-xl{max-width:1140px}}@media (min-width:1400px){.container,.container-lg,.container-md,.container-sm,.container-xl,.container-xxl{max-width:1320px}}:root{--bs-breakpoint-xs:0;--bs-breakpoint-sm:576px;--bs-breakpoint-md:768px;--bs-breakpoint-lg:992px;--bs-breakpoint-xl:1200px;--bs-breakpoint-xxl:1400px}.row{--bs-gutter-x:1.5rem;--bs-gutter-y:0;display:flex;flex-wrap:wrap;margin-top:calc(-1 * var(--bs-gutter-y));margin-right:calc(-.5 * var(--bs-gutter-x));margin-left:calc(-.5 * var(--bs-gutter-x))}.row>*{flex-shrink:0;width:100%;max-width:100%;padding-right:calc(var(--bs-gutter-x) * .5);padding-left:calc(var(--bs-gutter-x) * .5);margin-top:var(--bs-gutter-y)}.col{flex:1 0 0%}.row-cols-auto>*{flex:0 0 auto;width:auto}.row-cols-1>*{flex:0 0 auto;width:100%}.row-cols-2>*{flex:0 0 auto;width:50%}.row-cols-3>*{flex:0 0 auto;width:33.3333333333%}.row-cols-4>*{flex:0 0 auto;width:25%}.row-cols-5>*{flex:0 0 auto;width:20%}.row-cols-6>*{flex:0 0 auto;width:16.6666666667%}.col-auto{flex:0 0 auto;width:auto}.col-1{flex:0 0 auto;width:8.33333333%}.col-2{flex:0 0 auto;width:16.66666667%}.col-3{flex:0 0 auto;width:25%}.col-4{flex:0 0 auto;width:33.33333333%}.col-5{flex:0 0 auto;width:41.66666667%}.col-6{flex:0 0 auto;width:50%}.col-7{flex:0 0 auto;width:58.33333333%}.col-8{flex:0 0 auto;width:66.66666667%}.col-9{flex:0 0 auto;width:75%}.col-10{flex:0 0 auto;width:83.33333333%}.col-11{flex:0 0 auto;width:91.66666667%}.col-12{flex:0 0 auto;width:100%}.offset-1{margin-left:8.33333333%}.offset-2{margin-left:16.66666667%}.offset-3{margin-left:25%}.offset-4{margin-left:33.33333333%}.offset-5{margin-left:41.66666667%}.offset-6{margin-left:50%}.offset-7{margin-left:58.33333333%}.offset-8{margin-left:66.66666667%}.offset-9{margin-left:75%}.offset-10{margin-left:83.33333333%}.offset-11{margin-left:91.66666667%}.g-0,.gx-0{--bs-gutter-x:0}.g-0,.gy-0{--bs-gutter-y:0}.g-1,.gx-1{--bs-gutter-x:0.25rem}.g-1,.gy-1{--bs-gutter-y:0.25rem}.g-2,.gx-2{--bs-gutter-x:0.5rem}.g-2,.gy-2{--bs-gutter-y:0.5rem}.g-3,.gx-3{--bs-gutter-x:1rem}.g-3,.gy-3{--bs-gutter-y:1rem}.g-4,.gx-4{--bs-gutter-x:1.5rem}.g-4,.gy-4{--bs-gutter-y:1.5rem}.g-5,.gx-5{--bs-gutter-x:3rem}.g-5,.gy-5{--bs-gutter-y:3rem}@media (min-width:576px){.col-sm{flex:1 0 0%}.row-cols-sm-auto>*{flex:0 0 auto;width:auto}.row-cols-sm-1>*{flex:0 0 auto;width:100%}.row-cols-sm-2>*{flex:0 0 auto;width:50%}.row-cols-sm-3>*{flex:0 0 auto;width:33.3333333333%}.row-cols-sm-4>*{flex:0 0 auto;width:25%}.row-cols-sm-5>*{flex:0 0 auto;width:20%}.row-cols-sm-6>*{flex:0 0 auto;width:16.6666666667%}.col-sm-auto{flex:0 0 auto;width:auto}.col-sm-1{flex:0 0 auto;width:8.33333333%}.col-sm-2{flex:0 0 auto;width:16.66666667%}.col-sm-3{flex:0 0 auto;width:25%}.col-sm-4{flex:0 0 auto;width:33.33333333%}.col-sm-5{flex:0 0 auto;width:41.66666667%}.col-sm-6{flex:0 0 auto;width:50%}.col-sm-7{flex:0 0 auto;width:58.33333333%}.col-sm-8{flex:0 0 auto;width:66.66666667%}.col-sm-9{flex:0 0 auto;width:75%}.col-sm-10{flex:0 0 auto;width:83.33333333%}.col-sm-11{flex:0 0 auto;width:91.66666667%}.col-sm-12{flex:0 0 auto;width:100%}.offset-sm-0{margin-left:0}.offset-sm-1{margin-left:8.33333333%}.offset-sm-2{margin-left:16.66666667%}.offset-sm-3{margin-left:25%}.offset-sm-4{margin-left:33.33333333%}.offset-sm-5{margin-left:41.66666667%}.offset-sm-6{margin-left:50%}.offset-sm-7{margin-left:58.33333333%}.offset-sm-8{margin-left:66.66666667%}.offset-sm-9{margin-left:75%}.offset-sm-10{margin-left:83.33333333%}.offset-sm-11{margin-left:91.66666667%}.g-sm-0,.gx-sm-0{--bs-gutter-x:0}.g-sm-0,.gy-sm-0{--bs-gutter-y:0}.g-sm-1,.gx-sm-1{--bs-gutter-x:0.25rem}.g-sm-1,.gy-sm-1{--bs-gutter-y:0.25rem}.g-sm-2,.gx-sm-2{--bs-gutter-x:0.5rem}.g-sm-2,.gy-sm-2{--bs-gutter-y:0.5rem}.g-sm-3,.gx-sm-3{--bs-gutter-x:1rem}.g-sm-3,.gy-sm-3{--bs-gutter-y:1rem}.g-sm-4,.gx-sm-4{--bs-gutter-x:1.5rem}.g-sm-4,.gy-sm-4{--bs-gutter-y:1.5rem}.g-sm-5,.gx-sm-5{--bs-gutter-x:3rem}.g-sm-5,.gy-sm-5{--bs-gutter-y:3rem}}@media (min-width:768px){.col-md{flex:1 0 0%}.row-cols-md-auto>*{flex:0 0 auto;width:auto}.row-cols-md-1>*{flex:0 0 auto;width:100%}.row-cols-md-2>*{flex:0 0 auto;width:50%}.row-cols-md-3>*{flex:0 0 auto;width:33.3333333333%}.row-cols-md-4>*{flex:0 0 auto;width:25%}.row-cols-md-5>*{flex:0 0 auto;width:20%}.row-cols-md-6>*{flex:0 0 auto;width:16.6666666667%}.col-md-auto{flex:0 0 auto;width:auto}.col-md-1{flex:0 0 auto;width:8.33333333%}.col-md-2{flex:0 0 auto;width:16.66666667%}.col-md-3{flex:0 0 auto;width:25%}.col-md-4{flex:0 0 auto;width:33.33333333%}.col-md-5{flex:0 0 auto;width:41.66666667%}.col-md-6{flex:0 0 auto;width:50%}.col-md-7{flex:0 0 auto;width:58.33333333%}.col-md-8{flex:0 0 auto;width:66.66666667%}.col-md-9{flex:0 0 auto;width:75%}.col-md-10{flex:0 0 auto;width:83.33333333%}.col-md-11{flex:0 0 auto;width:91.66666667%}.col-md-12{flex:0 0 auto;width:100%}.offset-md-0{margin-left:0}.offset-md-1{margin-left:8.33333333%}.offset-md-2{margin-left:16.66666667%}.offset-md-3{margin-left:25%}.offset-md-4{margin-left:33.33333333%}.offset-md-5{margin-left:41.66666667%}.offset-md-6{margin-left:50%}.offset-md-7{margin-left:58.33333333%}.offset-md-8{margin-left:66.66666667%}.offset-md-9{margin-left:75%}.offset-md-10{margin-left:83.33333333%}.offset-md-11{margin-left:91.66666667%}.g-md-0,.gx-md-0{--bs-gutter-x:0}.g-md-0,.gy-md-0{--bs-gutter-y:0}.g-md-1,.gx-md-1{--bs-gutter-x:0.25rem}.g-md-1,.gy-md-1{--bs-gutter-y:0.25rem}.g-md-2,.gx-md-2{--bs-gutter-x:0.5rem}.g-md-2,.gy-md-2{--bs-gutter-y:0.5rem}.g-md-3,.gx-md-3{--bs-gutter-x:1rem}.g-md-3,.gy-md-3{--bs-gutter-y:1rem}.g-md-4,.gx-md-4{--bs-gutter-x:1.5rem}.g-md-4,.gy-md-4{--bs-gutter-y:1.5rem}.g-md-5,.gx-md-5{--bs-gutter-x:3rem}.g-md-5,.gy-md-5{--bs-gutter-y:3rem}}@media (min-width:992px){.col-lg{flex:1 0 0%}.row-cols-lg-auto>*{flex:0 0 auto;width:auto}.row-cols-lg-1>*{flex:0 0 auto;width:100%}.row-cols-lg-2>*{flex:0 0 auto;width:50%}.row-cols-lg-3>*{flex:0 0 auto;width:33.3333333333%}.row-cols-lg-4>*{flex:0 0 auto;width:25%}.row-cols-lg-5>*{flex:0 0 auto;width:20%}.row-cols-lg-6>*{flex:0 0 auto;width:16.6666666667%}.col-lg-auto{flex:0 0 auto;width:auto}.col-lg-1{flex:0 0 auto;width:8.33333333%}.col-lg-2{flex:0 0 auto;width:16.66666667%}.col-lg-3{flex:0 0 auto;width:25%}.col-lg-4{flex:0 0 auto;width:33.33333333%}.col-lg-5{flex:0 0 auto;width:41.66666667%}.col-lg-6{flex:0 0 auto;width:50%}.col-lg-7{flex:0 0 auto;width:58.33333333%}.col-lg-8{flex:0 0 auto;width:66.66666667%}.col-lg-9{flex:0 0 auto;width:75%}.col-lg-10{flex:0 0 auto;width:83.33333333%}.col-lg-11{flex:0 0 auto;width:91.66666667%}.col-lg-12{flex:0 0 auto;width:100%}.offset-lg-0{margin-left:0}.offset-lg-1{margin-left:8.33333333%}.offset-lg-2{margin-left:16.66666667%}.offset-lg-3{margin-left:25%}.offset-lg-4{margin-left:33.33333333%}.offset-lg-5{margin-left:41.66666667%}.offset-lg-6{margin-left:50%}.offset-lg-7{margin-left:58.33333333%}.offset-lg-8{margin-left:66.66666667%}.offset-lg-9{margin-left:75%}.offset-lg-10{margin-left:83.33333333%}.offset-lg-11{margin-left:91.66666667%}.g-lg-0,.gx-lg-0{--bs-gutter-x:0}.g-lg-0,.gy-lg-0{--bs-gutter-y:0}.g-lg-1,.gx-lg-1{--bs-gutter-x:0.25rem}.g-lg-1,.gy-lg-1{--bs-gutter-y:0.25rem}.g-lg-2,.gx-lg-2{--bs-gutter-x:0.5rem}.g-lg-2,.gy-lg-2{--bs-gutter-y:0.5rem}.g-lg-3,.gx-lg-3{--bs-gutter-x:1rem}.g-lg-3,.gy-lg-3{--bs-gutter-y:1rem}.g-lg-4,.gx-lg-4{--bs-gutter-x:1.5rem}.g-lg-4,.gy-lg-4{--bs-gutter-y:1.5rem}.g-lg-5,.gx-lg-5{--bs-gutter-x:3rem}.g-lg-5,.gy-lg-5{--bs-gutter-y:3rem}}@media (min-width:1200px){.col-xl{flex:1 0 0%}.row-cols-xl-auto>*{flex:0 0 auto;width:auto}.row-cols-xl-1>*{flex:0 0 auto;width:100%}.row-cols-xl-2>*{flex:0 0 auto;width:50%}.row-cols-xl-3>*{flex:0 0 auto;width:33.3333333333%}.row-cols-xl-4>*{flex:0 0 auto;width:25%}.row-cols-xl-5>*{flex:0 0 auto;width:20%}.row-cols-xl-6>*{flex:0 0 auto;width:16.6666666667%}.col-xl-auto{flex:0 0 auto;width:auto}.col-xl-1{flex:0 0 auto;width:8.33333333%}.col-xl-2{flex:0 0 auto;width:16.66666667%}.col-xl-3{flex:0 0 auto;width:25%}.col-xl-4{flex:0 0 auto;width:33.33333333%}.col-xl-5{flex:0 0 auto;width:41.66666667%}.col-xl-6{flex:0 0 auto;width:50%}.col-xl-7{flex:0 0 auto;width:58.33333333%}.col-xl-8{flex:0 0 auto;width:66.66666667%}.col-xl-9{flex:0 0 auto;width:75%}.col-xl-10{flex:0 0 auto;width:83.33333333%}.col-xl-11{flex:0 0 auto;width:91.66666667%}.col-xl-12{flex:0 0 auto;width:100%}.offset-xl-0{margin-left:0}.offset-xl-1{margin-left:8.33333333%}.offset-xl-2{margin-left:16.66666667%}.offset-xl-3{margin-left:25%}.offset-xl-4{margin-left:33.33333333%}.offset-xl-5{margin-left:41.66666667%}.offset-xl-6{margin-left:50%}.offset-xl-7{margin-left:58.33333333%}.offset-xl-8{margin-left:66.66666667%}.offset-xl-9{margin-left:75%}.offset-xl-10{margin-left:83.33333333%}.offset-xl-11{margin-left:91.66666667%}.g-xl-0,.gx-xl-0{--bs-gutter-x:0}.g-xl-0,.gy-xl-0{--bs-gutter-y:0}.g-xl-1,.gx-xl-1{--bs-gutter-x:0.25rem}.g-xl-1,.gy-xl-1{--bs-gutter-y:0.25rem}.g-xl-2,.gx-xl-2{--bs-gutter-x:0.5rem}.g-xl-2,.gy-xl-2{--bs-gutter-y:0.5rem}.g-xl-3,.gx-xl-3{--bs-gutter-x:1rem}.g-xl-3,.gy-xl-3{--bs-gutter-y:1rem}.g-xl-4,.gx-xl-4{--bs-gutter-x:1.5rem}.g-xl-4,.gy-xl-4{--bs-gutter-y:1.5rem}.g-xl-5,.gx-xl-5{--bs-gutter-x:3rem}.g-xl-5,.gy-xl-5{--bs-gutter-y:3rem}}@media (min-width:1400px){.col-xxl{flex:1 0 0%}.row-cols-xxl-auto>*{flex:0 0 auto;width:auto}.row-cols-xxl-1>*{flex:0 0 auto;width:100%}.row-cols-xxl-2>*{flex:0 0 auto;width:50%}.row-cols-xxl-3>*{flex:0 0 auto;width:33.3333333333%}.row-cols-xxl-4>*{flex:0 0 auto;width:25%}.row-cols-xxl-5>*{flex:0 0 auto;width:20%}.row-cols-xxl-6>*{flex:0 0 auto;width:16.6666666667%}.col-xxl-auto{flex:0 0 auto;width:auto}.col-xxl-1{flex:0 0 auto;width:8.33333333%}.col-xxl-2{flex:0 0 auto;width:16.66666667%}.col-xxl-3{flex:0 0 auto;width:25%}.col-xxl-4{flex:0 0 auto;width:33.33333333%}.col-xxl-5{flex:0 0 auto;width:41.66666667%}.col-xxl-6{flex:0 0 auto;width:50%}.col-xxl-7{flex:0 0 auto;width:58.33333333%}.col-xxl-8{flex:0 0 auto;width:66.66666667%}.col-xxl-9{flex:0 0 auto;width:75%}.col-xxl-10{flex:0 0 auto;width:83.33333333%}.col-xxl-11{flex:0 0 auto;width:91.66666667%}.col-xxl-12{flex:0 0 auto;width:100%}.offset-xxl-0{margin-left:0}.offset-xxl-1{margin-left:8.33333333%}.offset-xxl-2{margin-left:16.66666667%}.offset-xxl-3{margin-left:25%}.offset-xxl-4{margin-left:33.33333333%}.offset-xxl-5{margin-left:41.66666667%}.offset-xxl-6{margin-left:50%}.offset-xxl-7{margin-left:58.33333333%}.offset-xxl-8{margin-left:66.66666667%}.offset-xxl-9{margin-left:75%}.offset-xxl-10{margin-left:83.33333333%}.offset-xxl-11{margin-left:91.66666667%}.g-xxl-0,.gx-xxl-0{--bs-gutter-x:0}.g-xxl-0,.gy-xxl-0{--bs-gutter-y:0}.g-xxl-1,.gx-xxl-1{--bs-gutter-x:0.25rem}.g-xxl-1,.gy-xxl-1{--bs-gutter-y:0.25rem}.g-xxl-2,.gx-xxl-2{--bs-gutter-x:0.5rem}.g-xxl-2,.gy-xxl-2{--bs-gutter-y:0.5rem}.g-xxl-3,.gx-xxl-3{--bs-gutter-x:1rem}.g-xxl-3,.gy-xxl-3{--bs-gutter-y:1rem}.g-xxl-4,.gx-xxl-4{--bs-gutter-x:1.5rem}.g-xxl-4,.gy-xxl-4{--bs-gutter-y:1.5rem}.g-xxl-5,.gx-xxl-5{--bs-gutter-x:3rem}.g-xxl-5,.gy-xxl-5{--bs-gutter-y:3rem}}.table{--bs-table-color-type:initial;--bs-table-bg-type:initial;--bs-table-color-state:initial;--bs-table-bg-state:initial;--bs-table-color:var(--bs-body-color);--bs-table-bg:var(--bs-body-bg);--bs-table-border-color:var(--bs-border-color);--bs-table-accent-bg:transparent;--bs-table-striped-color:var(--bs-body-color);--bs-table-striped-bg:rgba(0, 0, 0, 0.05);--bs-table-active-color:var(--bs-body-color);--bs-table-active-bg:rgba(0, 0, 0, 0.1);--bs-table-hover-color:var(--bs-body-color);--bs-table-hover-bg:rgba(0, 0, 0, 0.075);width:100%;margin-bottom:1rem;vertical-align:top;border-color:var(--bs-table-border-color)}.table>:not(caption)>*>*{padding:.5rem .5rem;color:var(--bs-table-color-state,var(--bs-table-color-type,var(--bs-table-color)));background-color:var(--bs-table-bg);border-bottom-width:var(--bs-border-width);box-shadow:inset 0 0 0 9999px var(--bs-table-bg-state,var(--bs-table-bg-type,var(--bs-table-accent-bg)))}.table>tbody{vertical-align:inherit}.table>thead{vertical-align:bottom}.table-group-divider{border-top:calc(var(--bs-border-width) * 2) solid currentcolor}.caption-top{caption-side:top}.table-sm>:not(caption)>*>*{padding:.25rem .25rem}.table-bordered>:not(caption)>*{border-width:var(--bs-border-width) 0}.table-bordered>:not(caption)>*>*{border-width:0 var(--bs-border-width)}.table-borderless>:not(caption)>*>*{border-bottom-width:0}.table-borderless>:not(:first-child){border-top-width:0}.table-striped>tbody>tr:nth-of-type(odd)>*{--bs-table-color-type:var(--bs-table-striped-color);--bs-table-bg-type:var(--bs-table-striped-bg)}.table-striped-columns>:not(caption)>tr>:nth-child(2n){--bs-table-color-type:var(--bs-table-striped-color);--bs-table-bg-type:var(--bs-table-striped-bg)}.table-active{--bs-table-color-state:var(--bs-table-active-color);--bs-table-bg-state:var(--bs-table-active-bg)}.table-hover>tbody>tr:hover>*{--bs-table-color-state:var(--bs-table-hover-color);--bs-table-bg-state:var(--bs-table-hover-bg)}.table-primary{--bs-table-color:#000;--bs-table-bg:#cfe2ff;--bs-table-border-color:#bacbe6;--bs-table-striped-bg:#c5d7f2;--bs-table-striped-color:#000;--bs-table-active-bg:#bacbe6;--bs-table-active-color:#000;--bs-table-hover-bg:#bfd1ec;--bs-table-hover-color:#000;color:var(--bs-table-color);border-color:var(--bs-table-border-color)}.table-secondary{--bs-table-color:#000;--bs-table-bg:#e2e3e5;--bs-table-border-color:#cbccce;--bs-table-striped-bg:#d7d8da;--bs-table-striped-color:#000;--bs-table-active-bg:#cbccce;--bs-table-active-color:#000;--bs-table-hover-bg:#d1d2d4;--bs-table-hover-color:#000;color:var(--bs-table-color);border-color:var(--bs-table-border-color)}.table-success{--bs-table-color:#000;--bs-table-bg:#d1e7dd;--bs-table-border-color:#bcd0c7;--bs-table-striped-bg:#c7dbd2;--bs-table-striped-color:#000;--bs-table-active-bg:#bcd0c7;--bs-table-active-color:#000;--bs-table-hover-bg:#c1d6cc;--bs-table-hover-color:#000;color:var(--bs-table-color);border-color:var(--bs-table-border-color)}.table-info{--bs-table-color:#000;--bs-table-bg:#cff4fc;--bs-table-border-color:#badce3;--bs-table-striped-bg:#c5e8ef;--bs-table-striped-color:#000;--bs-table-active-bg:#badce3;--bs-table-active-color:#000;--bs-table-hover-bg:#bfe2e9;--bs-table-hover-color:#000;color:var(--bs-table-color);border-color:var(--bs-table-border-color)}.table-warning{--bs-table-color:#000;--bs-table-bg:#fff3cd;--bs-table-border-color:#e6dbb9;--bs-table-striped-bg:#f2e7c3;--bs-table-striped-color:#000;--bs-table-active-bg:#e6dbb9;--bs-table-active-color:#000;--bs-table-hover-bg:#ece1be;--bs-table-hover-color:#000;color:var(--bs-table-color);border-color:var(--bs-table-border-color)}.table-danger{--bs-table-color:#000;--bs-table-bg:#f8d7da;--bs-table-border-color:#dfc2c4;--bs-table-striped-bg:#eccccf;--bs-table-striped-color:#000;--bs-table-active-bg:#dfc2c4;--bs-table-active-color:#000;--bs-table-hover-bg:#e5c7ca;--bs-table-hover-color:#000;color:var(--bs-table-color);border-color:var(--bs-table-border-color)}.table-light{--bs-table-color:#000;--bs-table-bg:#f8f9fa;--bs-table-border-color:#dfe0e1;--bs-table-striped-bg:#ecedee;--bs-table-striped-color:#000;--bs-table-active-bg:#dfe0e1;--bs-table-active-color:#000;--bs-table-hover-bg:#e5e6e7;--bs-table-hover-color:#000;color:var(--bs-table-color);border-color:var(--bs-table-border-color)}.table-dark{--bs-table-color:#fff;--bs-table-bg:#212529;--bs-table-border-color:#373b3e;--bs-table-striped-bg:#2c3034;--bs-table-striped-color:#fff;--bs-table-active-bg:#373b3e;--bs-table-active-color:#fff;--bs-table-hover-bg:#323539;--bs-table-hover-color:#fff;color:var(--bs-table-color);border-color:var(--bs-table-border-color)}.table-responsive{overflow-x:auto;-webkit-overflow-scrolling:touch}@media (max-width:575.98px){.table-responsive-sm{overflow-x:auto;-webkit-overflow-scrolling:touch}}@media (max-width:767.98px){.table-responsive-md{overflow-x:auto;-webkit-overflow-scrolling:touch}}@media (max-width:991.98px){.table-responsive-lg{overflow-x:auto;-webkit-overflow-scrolling:touch}}@media (max-width:1199.98px){.table-responsive-xl{overflow-x:auto;-webkit-overflow-scrolling:touch}}@media (max-width:1399.98px){.table-responsive-xxl{overflow-x:auto;-webkit-overflow-scrolling:touch}}.form-label{margin-bottom:.5rem}.col-form-label{padding-top:calc(.375rem + var(--bs-border-width));padding-bottom:calc(.375rem + var(--bs-border-width));margin-bottom:0;font-size:inherit;line-height:1.5}.col-form-label-lg{padding-top:calc(.5rem + var(--bs-border-width));padding-bottom:calc(.5rem + var(--bs-border-width));font-size:1.25rem}.col-form-label-sm{padding-top:calc(.25rem + var(--bs-border-width));padding-bottom:calc(.25rem + var(--bs-border-width));font-size:.875rem}.form-text{margin-top:.25rem;font-size:.875em;color:var(--bs-secondary-color)}.form-control{display:block;width:100%;padding:.375rem .75rem;font-size:1rem;font-weight:400;line-height:1.5;color:var(--bs-body-color);-webkit-appearance:none;-moz-appearance:none;appearance:none;background-color:var(--bs-body-bg);background-clip:padding-box;border:var(--bs-border-width) solid var(--bs-border-color);border-radius:var(--bs-border-radius);transition:border-color .15s ease-in-out,box-shadow .15s ease-in-out}@media (prefers-reduced-motion:reduce){.form-control{transition:none}}.form-control[type=file]{overflow:hidden}.form-control[type=file]:not(:disabled):not([readonly]){cursor:pointer}.form-control:focus{color:var(--bs-body-color);background-color:var(--bs-body-bg);border-color:#86b7fe;outline:0;box-shadow:0 0 0 .25rem rgba(13,110,253,.25)}.form-control::-webkit-date-and-time-value{min-width:85px;height:1.5em;margin:0}.form-control::-webkit-datetime-edit{display:block;padding:0}.form-control::-moz-placeholder{color:var(--bs-secondary-color);opacity:1}.form-control::placeholder{color:var(--bs-secondary-color);opacity:1}.form-control:disabled{background-color:var(--bs-secondary-bg);opacity:1}.form-control::-webkit-file-upload-button{padding:.375rem .75rem;margin:-.375rem -.75rem;-webkit-margin-end:.75rem;margin-inline-end:.75rem;color:var(--bs-body-color);background-color:var(--bs-tertiary-bg);pointer-events:none;border-color:inherit;border-style:solid;border-width:0;border-inline-end-width:var(--bs-border-width);border-radius:0;-webkit-transition:color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;transition:color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out}.form-control::file-selector-button{padding:.375rem .75rem;margin:-.375rem -.75rem;-webkit-margin-end:.75rem;margin-inline-end:.75rem;color:var(--bs-body-color);background-color:var(--bs-tertiary-bg);pointer-events:none;border-color:inherit;border-style:solid;border-width:0;border-inline-end-width:var(--bs-border-width);border-radius:0;transition:color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out}@media (prefers-reduced-motion:reduce){.form-control::-webkit-file-upload-button{-webkit-transition:none;transition:none}.form-control::file-selector-button{transition:none}}.form-control:hover:not(:disabled):not([readonly])::-webkit-file-upload-button{background-color:var(--bs-secondary-bg)}.form-control:hover:not(:disabled):not([readonly])::file-selector-button{background-color:var(--bs-secondary-bg)}.form-control-plaintext{display:block;width:100%;padding:.375rem 0;margin-bottom:0;line-height:1.5;color:var(--bs-body-color);background-color:transparent;border:solid transparent;border-width:var(--bs-border-width) 0}.form-control-plaintext:focus{outline:0}.form-control-plaintext.form-control-lg,.form-control-plaintext.form-control-sm{padding-right:0;padding-left:0}.form-control-sm{min-height:calc(1.5em + .5rem + calc(var(--bs-border-width) * 2));padding:.25rem .5rem;font-size:.875rem;border-radius:var(--bs-border-radius-sm)}.form-control-sm::-webkit-file-upload-button{padding:.25rem .5rem;margin:-.25rem -.5rem;-webkit-margin-end:.5rem;margin-inline-end:.5rem}.form-control-sm::file-selector-button{padding:.25rem .5rem;margin:-.25rem -.5rem;-webkit-margin-end:.5rem;margin-inline-end:.5rem}.form-control-lg{min-height:calc(1.5em + 1rem + calc(var(--bs-border-width) * 2));padding:.5rem 1rem;font-size:1.25rem;border-radius:var(--bs-border-radius-lg)}.form-control-lg::-webkit-file-upload-button{padding:.5rem 1rem;margin:-.5rem -1rem;-webkit-margin-end:1rem;margin-inline-end:1rem}.form-control-lg::file-selector-button{padding:.5rem 1rem;margin:-.5rem -1rem;-webkit-margin-end:1rem;margin-inline-end:1rem}textarea.form-control{min-height:calc(1.5em + .75rem + calc(var(--bs-border-width) * 2))}textarea.form-control-sm{min-height:calc(1.5em + .5rem + calc(var(--bs-border-width) * 2))}textarea.form-control-lg{min-height:calc(1.5em + 1rem + calc(var(--bs-border-width) * 2))}.form-control-color{width:3rem;height:calc(1.5em + .75rem + calc(var(--bs-border-width) * 2));padding:.375rem}.form-control-color:not(:disabled):not([readonly]){cursor:pointer}.form-control-color::-moz-color-swatch{border:0!important;border-radius:var(--bs-border-radius)}.form-control-color::-webkit-color-swatch{border:0!important;border-radius:var(--bs-border-radius)}.form-control-color.form-control-sm{height:calc(1.5em + .5rem + calc(var(--bs-border-width) * 2))}.form-control-color.form-control-lg{height:calc(1.5em + 1rem + calc(var(--bs-border-width) * 2))}.form-select{--bs-form-select-bg-img:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='%23343a40' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='m2 5 6 6 6-6'/%3e%3c/svg%3e\");display:block;width:100%;padding:.375rem 2.25rem .375rem .75rem;font-size:1rem;font-weight:400;line-height:1.5;color:var(--bs-body-color);-webkit-appearance:none;-moz-appearance:none;appearance:none;background-color:var(--bs-body-bg);background-image:var(--bs-form-select-bg-img),var(--bs-form-select-bg-icon,none);background-repeat:no-repeat;background-position:right .75rem center;background-size:16px 12px;border:var(--bs-border-width) solid var(--bs-border-color);border-radius:var(--bs-border-radius);transition:border-color .15s ease-in-out,box-shadow .15s ease-in-out}@media (prefers-reduced-motion:reduce){.form-select{transition:none}}.form-select:focus{border-color:#86b7fe;outline:0;box-shadow:0 0 0 .25rem rgba(13,110,253,.25)}.form-select[multiple],.form-select[size]:not([size=\"1\"]){padding-right:.75rem;background-image:none}.form-select:disabled{background-color:var(--bs-secondary-bg)}.form-select:-moz-focusring{color:transparent;text-shadow:0 0 0 var(--bs-body-color)}.form-select-sm{padding-top:.25rem;padding-bottom:.25rem;padding-left:.5rem;font-size:.875rem;border-radius:var(--bs-border-radius-sm)}.form-select-lg{padding-top:.5rem;padding-bottom:.5rem;padding-left:1rem;font-size:1.25rem;border-radius:var(--bs-border-radius-lg)}[data-bs-theme=dark] .form-select{--bs-form-select-bg-img:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='%23dee2e6' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='m2 5 6 6 6-6'/%3e%3c/svg%3e\")}.form-check{display:block;min-height:1.5rem;padding-left:1.5em;margin-bottom:.125rem}.form-check .form-check-input{float:left;margin-left:-1.5em}.form-check-reverse{padding-right:1.5em;padding-left:0;text-align:right}.form-check-reverse .form-check-input{float:right;margin-right:-1.5em;margin-left:0}.form-check-input{--bs-form-check-bg:var(--bs-body-bg);width:1em;height:1em;margin-top:.25em;vertical-align:top;-webkit-appearance:none;-moz-appearance:none;appearance:none;background-color:var(--bs-form-check-bg);background-image:var(--bs-form-check-bg-image);background-repeat:no-repeat;background-position:center;background-size:contain;border:var(--bs-border-width) solid var(--bs-border-color);-webkit-print-color-adjust:exact;color-adjust:exact;print-color-adjust:exact}.form-check-input[type=checkbox]{border-radius:.25em}.form-check-input[type=radio]{border-radius:50%}.form-check-input:active{filter:brightness(90%)}.form-check-input:focus{border-color:#86b7fe;outline:0;box-shadow:0 0 0 .25rem rgba(13,110,253,.25)}.form-check-input:checked{background-color:#0d6efd;border-color:#0d6efd}.form-check-input:checked[type=checkbox]{--bs-form-check-bg-image:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20'%3e%3cpath fill='none' stroke='%23fff' stroke-linecap='round' stroke-linejoin='round' stroke-width='3' d='m6 10 3 3 6-6'/%3e%3c/svg%3e\")}.form-check-input:checked[type=radio]{--bs-form-check-bg-image:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3e%3ccircle r='2' fill='%23fff'/%3e%3c/svg%3e\")}.form-check-input[type=checkbox]:indeterminate{background-color:#0d6efd;border-color:#0d6efd;--bs-form-check-bg-image:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20'%3e%3cpath fill='none' stroke='%23fff' stroke-linecap='round' stroke-linejoin='round' stroke-width='3' d='M6 10h8'/%3e%3c/svg%3e\")}.form-check-input:disabled{pointer-events:none;filter:none;opacity:.5}.form-check-input:disabled~.form-check-label,.form-check-input[disabled]~.form-check-label{cursor:default;opacity:.5}.form-switch{padding-left:2.5em}.form-switch .form-check-input{--bs-form-switch-bg:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3e%3ccircle r='3' fill='rgba%280, 0, 0, 0.25%29'/%3e%3c/svg%3e\");width:2em;margin-left:-2.5em;background-image:var(--bs-form-switch-bg);background-position:left center;border-radius:2em;transition:background-position .15s ease-in-out}@media (prefers-reduced-motion:reduce){.form-switch .form-check-input{transition:none}}.form-switch .form-check-input:focus{--bs-form-switch-bg:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3e%3ccircle r='3' fill='%2386b7fe'/%3e%3c/svg%3e\")}.form-switch .form-check-input:checked{background-position:right center;--bs-form-switch-bg:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3e%3ccircle r='3' fill='%23fff'/%3e%3c/svg%3e\")}.form-switch.form-check-reverse{padding-right:2.5em;padding-left:0}.form-switch.form-check-reverse .form-check-input{margin-right:-2.5em;margin-left:0}.form-check-inline{display:inline-block;margin-right:1rem}.btn-check{position:absolute;clip:rect(0,0,0,0);pointer-events:none}.btn-check:disabled+.btn,.btn-check[disabled]+.btn{pointer-events:none;filter:none;opacity:.65}[data-bs-theme=dark] .form-switch .form-check-input:not(:checked):not(:focus){--bs-form-switch-bg:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3e%3ccircle r='3' fill='rgba%28255, 255, 255, 0.25%29'/%3e%3c/svg%3e\")}.form-range{width:100%;height:1.5rem;padding:0;-webkit-appearance:none;-moz-appearance:none;appearance:none;background-color:transparent}.form-range:focus{outline:0}.form-range:focus::-webkit-slider-thumb{box-shadow:0 0 0 1px #fff,0 0 0 .25rem rgba(13,110,253,.25)}.form-range:focus::-moz-range-thumb{box-shadow:0 0 0 1px #fff,0 0 0 .25rem rgba(13,110,253,.25)}.form-range::-moz-focus-outer{border:0}.form-range::-webkit-slider-thumb{width:1rem;height:1rem;margin-top:-.25rem;-webkit-appearance:none;appearance:none;background-color:#0d6efd;border:0;border-radius:1rem;-webkit-transition:background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;transition:background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out}@media (prefers-reduced-motion:reduce){.form-range::-webkit-slider-thumb{-webkit-transition:none;transition:none}}.form-range::-webkit-slider-thumb:active{background-color:#b6d4fe}.form-range::-webkit-slider-runnable-track{width:100%;height:.5rem;color:transparent;cursor:pointer;background-color:var(--bs-tertiary-bg);border-color:transparent;border-radius:1rem}.form-range::-moz-range-thumb{width:1rem;height:1rem;-moz-appearance:none;appearance:none;background-color:#0d6efd;border:0;border-radius:1rem;-moz-transition:background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;transition:background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out}@media (prefers-reduced-motion:reduce){.form-range::-moz-range-thumb{-moz-transition:none;transition:none}}.form-range::-moz-range-thumb:active{background-color:#b6d4fe}.form-range::-moz-range-track{width:100%;height:.5rem;color:transparent;cursor:pointer;background-color:var(--bs-tertiary-bg);border-color:transparent;border-radius:1rem}.form-range:disabled{pointer-events:none}.form-range:disabled::-webkit-slider-thumb{background-color:var(--bs-secondary-color)}.form-range:disabled::-moz-range-thumb{background-color:var(--bs-secondary-color)}.form-floating{position:relative}.form-floating>.form-control,.form-floating>.form-control-plaintext,.form-floating>.form-select{height:calc(3.5rem + calc(var(--bs-border-width) * 2));min-height:calc(3.5rem + calc(var(--bs-border-width) * 2));line-height:1.25}.form-floating>label{position:absolute;top:0;left:0;z-index:2;height:100%;padding:1rem .75rem;overflow:hidden;text-align:start;text-overflow:ellipsis;white-space:nowrap;pointer-events:none;border:var(--bs-border-width) solid transparent;transform-origin:0 0;transition:opacity .1s ease-in-out,transform .1s ease-in-out}@media (prefers-reduced-motion:reduce){.form-floating>label{transition:none}}.form-floating>.form-control,.form-floating>.form-control-plaintext{padding:1rem .75rem}.form-floating>.form-control-plaintext::-moz-placeholder,.form-floating>.form-control::-moz-placeholder{color:transparent}.form-floating>.form-control-plaintext::placeholder,.form-floating>.form-control::placeholder{color:transparent}.form-floating>.form-control-plaintext:not(:-moz-placeholder-shown),.form-floating>.form-control:not(:-moz-placeholder-shown){padding-top:1.625rem;padding-bottom:.625rem}.form-floating>.form-control-plaintext:focus,.form-floating>.form-control-plaintext:not(:placeholder-shown),.form-floating>.form-control:focus,.form-floating>.form-control:not(:placeholder-shown){padding-top:1.625rem;padding-bottom:.625rem}.form-floating>.form-control-plaintext:-webkit-autofill,.form-floating>.form-control:-webkit-autofill{padding-top:1.625rem;padding-bottom:.625rem}.form-floating>.form-select{padding-top:1.625rem;padding-bottom:.625rem}.form-floating>.form-control:not(:-moz-placeholder-shown)~label{color:rgba(var(--bs-body-color-rgb),.65);transform:scale(.85) translateY(-.5rem) translateX(.15rem)}.form-floating>.form-control-plaintext~label,.form-floating>.form-control:focus~label,.form-floating>.form-control:not(:placeholder-shown)~label,.form-floating>.form-select~label{color:rgba(var(--bs-body-color-rgb),.65);transform:scale(.85) translateY(-.5rem) translateX(.15rem)}.form-floating>.form-control:not(:-moz-placeholder-shown)~label::after{position:absolute;inset:1rem 0.375rem;z-index:-1;height:1.5em;content:\"\";background-color:var(--bs-body-bg);border-radius:var(--bs-border-radius)}.form-floating>.form-control-plaintext~label::after,.form-floating>.form-control:focus~label::after,.form-floating>.form-control:not(:placeholder-shown)~label::after,.form-floating>.form-select~label::after{position:absolute;inset:1rem 0.375rem;z-index:-1;height:1.5em;content:\"\";background-color:var(--bs-body-bg);border-radius:var(--bs-border-radius)}.form-floating>.form-control:-webkit-autofill~label{color:rgba(var(--bs-body-color-rgb),.65);transform:scale(.85) translateY(-.5rem) translateX(.15rem)}.form-floating>.form-control-plaintext~label{border-width:var(--bs-border-width) 0}.form-floating>.form-control:disabled~label,.form-floating>:disabled~label{color:#6c757d}.form-floating>.form-control:disabled~label::after,.form-floating>:disabled~label::after{background-color:var(--bs-secondary-bg)}.input-group{position:relative;display:flex;flex-wrap:wrap;align-items:stretch;width:100%}.input-group>.form-control,.input-group>.form-floating,.input-group>.form-select{position:relative;flex:1 1 auto;width:1%;min-width:0}.input-group>.form-control:focus,.input-group>.form-floating:focus-within,.input-group>.form-select:focus{z-index:5}.input-group .btn{position:relative;z-index:2}.input-group .btn:focus{z-index:5}.input-group-text{display:flex;align-items:center;padding:.375rem .75rem;font-size:1rem;font-weight:400;line-height:1.5;color:var(--bs-body-color);text-align:center;white-space:nowrap;background-color:var(--bs-tertiary-bg);border:var(--bs-border-width) solid var(--bs-border-color);border-radius:var(--bs-border-radius)}.input-group-lg>.btn,.input-group-lg>.form-control,.input-group-lg>.form-select,.input-group-lg>.input-group-text{padding:.5rem 1rem;font-size:1.25rem;border-radius:var(--bs-border-radius-lg)}.input-group-sm>.btn,.input-group-sm>.form-control,.input-group-sm>.form-select,.input-group-sm>.input-group-text{padding:.25rem .5rem;font-size:.875rem;border-radius:var(--bs-border-radius-sm)}.input-group-lg>.form-select,.input-group-sm>.form-select{padding-right:3rem}.input-group:not(.has-validation)>.dropdown-toggle:nth-last-child(n+3),.input-group:not(.has-validation)>.form-floating:not(:last-child)>.form-control,.input-group:not(.has-validation)>.form-floating:not(:last-child)>.form-select,.input-group:not(.has-validation)>:not(:last-child):not(.dropdown-toggle):not(.dropdown-menu):not(.form-floating){border-top-right-radius:0;border-bottom-right-radius:0}.input-group.has-validation>.dropdown-toggle:nth-last-child(n+4),.input-group.has-validation>.form-floating:nth-last-child(n+3)>.form-control,.input-group.has-validation>.form-floating:nth-last-child(n+3)>.form-select,.input-group.has-validation>:nth-last-child(n+3):not(.dropdown-toggle):not(.dropdown-menu):not(.form-floating){border-top-right-radius:0;border-bottom-right-radius:0}.input-group>:not(:first-child):not(.dropdown-menu):not(.valid-tooltip):not(.valid-feedback):not(.invalid-tooltip):not(.invalid-feedback){margin-left:calc(var(--bs-border-width) * -1);border-top-left-radius:0;border-bottom-left-radius:0}.input-group>.form-floating:not(:first-child)>.form-control,.input-group>.form-floating:not(:first-child)>.form-select{border-top-left-radius:0;border-bottom-left-radius:0}.valid-feedback{display:none;width:100%;margin-top:.25rem;font-size:.875em;color:var(--bs-form-valid-color)}.valid-tooltip{position:absolute;top:100%;z-index:5;display:none;max-width:100%;padding:.25rem .5rem;margin-top:.1rem;font-size:.875rem;color:#fff;background-color:var(--bs-success);border-radius:var(--bs-border-radius)}.is-valid~.valid-feedback,.is-valid~.valid-tooltip,.was-validated :valid~.valid-feedback,.was-validated :valid~.valid-tooltip{display:block}.form-control.is-valid,.was-validated .form-control:valid{border-color:var(--bs-form-valid-border-color);padding-right:calc(1.5em + .75rem);background-image:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3e%3cpath fill='%23198754' d='M2.3 6.73.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/%3e%3c/svg%3e\");background-repeat:no-repeat;background-position:right calc(.375em + .1875rem) center;background-size:calc(.75em + .375rem) calc(.75em + .375rem)}.form-control.is-valid:focus,.was-validated .form-control:valid:focus{border-color:var(--bs-form-valid-border-color);box-shadow:0 0 0 .25rem rgba(var(--bs-success-rgb),.25)}.was-validated textarea.form-control:valid,textarea.form-control.is-valid{padding-right:calc(1.5em + .75rem);background-position:top calc(.375em + .1875rem) right calc(.375em + .1875rem)}.form-select.is-valid,.was-validated .form-select:valid{border-color:var(--bs-form-valid-border-color)}.form-select.is-valid:not([multiple]):not([size]),.form-select.is-valid:not([multiple])[size=\"1\"],.was-validated .form-select:valid:not([multiple]):not([size]),.was-validated .form-select:valid:not([multiple])[size=\"1\"]{--bs-form-select-bg-icon:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3e%3cpath fill='%23198754' d='M2.3 6.73.6 4.53c-.4-1.04.46-1.4 1.1-.8l1.1 1.4 3.4-3.8c.6-.63 1.6-.27 1.2.7l-4 4.6c-.43.5-.8.4-1.1.1z'/%3e%3c/svg%3e\");padding-right:4.125rem;background-position:right .75rem center,center right 2.25rem;background-size:16px 12px,calc(.75em + .375rem) calc(.75em + .375rem)}.form-select.is-valid:focus,.was-validated .form-select:valid:focus{border-color:var(--bs-form-valid-border-color);box-shadow:0 0 0 .25rem rgba(var(--bs-success-rgb),.25)}.form-control-color.is-valid,.was-validated .form-control-color:valid{width:calc(3rem + calc(1.5em + .75rem))}.form-check-input.is-valid,.was-validated .form-check-input:valid{border-color:var(--bs-form-valid-border-color)}.form-check-input.is-valid:checked,.was-validated .form-check-input:valid:checked{background-color:var(--bs-form-valid-color)}.form-check-input.is-valid:focus,.was-validated .form-check-input:valid:focus{box-shadow:0 0 0 .25rem rgba(var(--bs-success-rgb),.25)}.form-check-input.is-valid~.form-check-label,.was-validated .form-check-input:valid~.form-check-label{color:var(--bs-form-valid-color)}.form-check-inline .form-check-input~.valid-feedback{margin-left:.5em}.input-group>.form-control:not(:focus).is-valid,.input-group>.form-floating:not(:focus-within).is-valid,.input-group>.form-select:not(:focus).is-valid,.was-validated .input-group>.form-control:not(:focus):valid,.was-validated .input-group>.form-floating:not(:focus-within):valid,.was-validated .input-group>.form-select:not(:focus):valid{z-index:3}.invalid-feedback{display:none;width:100%;margin-top:.25rem;font-size:.875em;color:var(--bs-form-invalid-color)}.invalid-tooltip{position:absolute;top:100%;z-index:5;display:none;max-width:100%;padding:.25rem .5rem;margin-top:.1rem;font-size:.875rem;color:#fff;background-color:var(--bs-danger);border-radius:var(--bs-border-radius)}.is-invalid~.invalid-feedback,.is-invalid~.invalid-tooltip,.was-validated :invalid~.invalid-feedback,.was-validated :invalid~.invalid-tooltip{display:block}.form-control.is-invalid,.was-validated .form-control:invalid{border-color:var(--bs-form-invalid-border-color);padding-right:calc(1.5em + .75rem);background-image:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e\");background-repeat:no-repeat;background-position:right calc(.375em + .1875rem) center;background-size:calc(.75em + .375rem) calc(.75em + .375rem)}.form-control.is-invalid:focus,.was-validated .form-control:invalid:focus{border-color:var(--bs-form-invalid-border-color);box-shadow:0 0 0 .25rem rgba(var(--bs-danger-rgb),.25)}.was-validated textarea.form-control:invalid,textarea.form-control.is-invalid{padding-right:calc(1.5em + .75rem);background-position:top calc(.375em + .1875rem) right calc(.375em + .1875rem)}.form-select.is-invalid,.was-validated .form-select:invalid{border-color:var(--bs-form-invalid-border-color)}.form-select.is-invalid:not([multiple]):not([size]),.form-select.is-invalid:not([multiple])[size=\"1\"],.was-validated .form-select:invalid:not([multiple]):not([size]),.was-validated .form-select:invalid:not([multiple])[size=\"1\"]{--bs-form-select-bg-icon:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e\");padding-right:4.125rem;background-position:right .75rem center,center right 2.25rem;background-size:16px 12px,calc(.75em + .375rem) calc(.75em + .375rem)}.form-select.is-invalid:focus,.was-validated .form-select:invalid:focus{border-color:var(--bs-form-invalid-border-color);box-shadow:0 0 0 .25rem rgba(var(--bs-danger-rgb),.25)}.form-control-color.is-invalid,.was-validated .form-control-color:invalid{width:calc(3rem + calc(1.5em + .75rem))}.form-check-input.is-invalid,.was-validated .form-check-input:invalid{border-color:var(--bs-form-invalid-border-color)}.form-check-input.is-invalid:checked,.was-validated .form-check-input:invalid:checked{background-color:var(--bs-form-invalid-color)}.form-check-input.is-invalid:focus,.was-validated .form-check-input:invalid:focus{box-shadow:0 0 0 .25rem rgba(var(--bs-danger-rgb),.25)}.form-check-input.is-invalid~.form-check-label,.was-validated .form-check-input:invalid~.form-check-label{color:var(--bs-form-invalid-color)}.form-check-inline .form-check-input~.invalid-feedback{margin-left:.5em}.input-group>.form-control:not(:focus).is-invalid,.input-group>.form-floating:not(:focus-within).is-invalid,.input-group>.form-select:not(:focus).is-invalid,.was-validated .input-group>.form-control:not(:focus):invalid,.was-validated .input-group>.form-floating:not(:focus-within):invalid,.was-validated .input-group>.form-select:not(:focus):invalid{z-index:4}.btn{--bs-btn-padding-x:0.75rem;--bs-btn-padding-y:0.375rem;--bs-btn-font-family: ;--bs-btn-font-size:1rem;--bs-btn-font-weight:400;--bs-btn-line-height:1.5;--bs-btn-color:var(--bs-body-color);--bs-btn-bg:transparent;--bs-btn-border-width:var(--bs-border-width);--bs-btn-border-color:transparent;--bs-btn-border-radius:var(--bs-border-radius);--bs-btn-hover-border-color:transparent;--bs-btn-box-shadow:inset 0 1px 0 rgba(255, 255, 255, 0.15),0 1px 1px rgba(0, 0, 0, 0.075);--bs-btn-disabled-opacity:0.65;--bs-btn-focus-box-shadow:0 0 0 0.25rem rgba(var(--bs-btn-focus-shadow-rgb), .5);display:inline-block;padding:var(--bs-btn-padding-y) var(--bs-btn-padding-x);font-family:var(--bs-btn-font-family);font-size:var(--bs-btn-font-size);font-weight:var(--bs-btn-font-weight);line-height:var(--bs-btn-line-height);color:var(--bs-btn-color);text-align:center;text-decoration:none;vertical-align:middle;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;user-select:none;border:var(--bs-btn-border-width) solid var(--bs-btn-border-color);border-radius:var(--bs-btn-border-radius);background-color:var(--bs-btn-bg);transition:color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out}@media (prefers-reduced-motion:reduce){.btn{transition:none}}.btn:hover{color:var(--bs-btn-hover-color);background-color:var(--bs-btn-hover-bg);border-color:var(--bs-btn-hover-border-color)}.btn-check+.btn:hover{color:var(--bs-btn-color);background-color:var(--bs-btn-bg);border-color:var(--bs-btn-border-color)}.btn:focus-visible{color:var(--bs-btn-hover-color);background-color:var(--bs-btn-hover-bg);border-color:var(--bs-btn-hover-border-color);outline:0;box-shadow:var(--bs-btn-focus-box-shadow)}.btn-check:focus-visible+.btn{border-color:var(--bs-btn-hover-border-color);outline:0;box-shadow:var(--bs-btn-focus-box-shadow)}.btn-check:checked+.btn,.btn.active,.btn.show,.btn:first-child:active,:not(.btn-check)+.btn:active{color:var(--bs-btn-active-color);background-color:var(--bs-btn-active-bg);border-color:var(--bs-btn-active-border-color)}.btn-check:checked+.btn:focus-visible,.btn.active:focus-visible,.btn.show:focus-visible,.btn:first-child:active:focus-visible,:not(.btn-check)+.btn:active:focus-visible{box-shadow:var(--bs-btn-focus-box-shadow)}.btn.disabled,.btn:disabled,fieldset:disabled .btn{color:var(--bs-btn-disabled-color);pointer-events:none;background-color:var(--bs-btn-disabled-bg);border-color:var(--bs-btn-disabled-border-color);opacity:var(--bs-btn-disabled-opacity)}.btn-primary{--bs-btn-color:#fff;--bs-btn-bg:#0d6efd;--bs-btn-border-color:#0d6efd;--bs-btn-hover-color:#fff;--bs-btn-hover-bg:#0b5ed7;--bs-btn-hover-border-color:#0a58ca;--bs-btn-focus-shadow-rgb:49,132,253;--bs-btn-active-color:#fff;--bs-btn-active-bg:#0a58ca;--bs-btn-active-border-color:#0a53be;--bs-btn-active-shadow:inset 0 3px 5px rgba(0, 0, 0, 0.125);--bs-btn-disabled-color:#fff;--bs-btn-disabled-bg:#0d6efd;--bs-btn-disabled-border-color:#0d6efd}.btn-secondary{--bs-btn-color:#fff;--bs-btn-bg:#6c757d;--bs-btn-border-color:#6c757d;--bs-btn-hover-color:#fff;--bs-btn-hover-bg:#5c636a;--bs-btn-hover-border-color:#565e64;--bs-btn-focus-shadow-rgb:130,138,145;--bs-btn-active-color:#fff;--bs-btn-active-bg:#565e64;--bs-btn-active-border-color:#51585e;--bs-btn-active-shadow:inset 0 3px 5px rgba(0, 0, 0, 0.125);--bs-btn-disabled-color:#fff;--bs-btn-disabled-bg:#6c757d;--bs-btn-disabled-border-color:#6c757d}.btn-success{--bs-btn-color:#fff;--bs-btn-bg:#198754;--bs-btn-border-color:#198754;--bs-btn-hover-color:#fff;--bs-btn-hover-bg:#157347;--bs-btn-hover-border-color:#146c43;--bs-btn-focus-shadow-rgb:60,153,110;--bs-btn-active-color:#fff;--bs-btn-active-bg:#146c43;--bs-btn-active-border-color:#13653f;--bs-btn-active-shadow:inset 0 3px 5px rgba(0, 0, 0, 0.125);--bs-btn-disabled-color:#fff;--bs-btn-disabled-bg:#198754;--bs-btn-disabled-border-color:#198754}.btn-info{--bs-btn-color:#000;--bs-btn-bg:#0dcaf0;--bs-btn-border-color:#0dcaf0;--bs-btn-hover-color:#000;--bs-btn-hover-bg:#31d2f2;--bs-btn-hover-border-color:#25cff2;--bs-btn-focus-shadow-rgb:11,172,204;--bs-btn-active-color:#000;--bs-btn-active-bg:#3dd5f3;--bs-btn-active-border-color:#25cff2;--bs-btn-active-shadow:inset 0 3px 5px rgba(0, 0, 0, 0.125);--bs-btn-disabled-color:#000;--bs-btn-disabled-bg:#0dcaf0;--bs-btn-disabled-border-color:#0dcaf0}.btn-warning{--bs-btn-color:#000;--bs-btn-bg:#ffc107;--bs-btn-border-color:#ffc107;--bs-btn-hover-color:#000;--bs-btn-hover-bg:#ffca2c;--bs-btn-hover-border-color:#ffc720;--bs-btn-focus-shadow-rgb:217,164,6;--bs-btn-active-color:#000;--bs-btn-active-bg:#ffcd39;--bs-btn-active-border-color:#ffc720;--bs-btn-active-shadow:inset 0 3px 5px rgba(0, 0, 0, 0.125);--bs-btn-disabled-color:#000;--bs-btn-disabled-bg:#ffc107;--bs-btn-disabled-border-color:#ffc107}.btn-danger{--bs-btn-color:#fff;--bs-btn-bg:#dc3545;--bs-btn-border-color:#dc3545;--bs-btn-hover-color:#fff;--bs-btn-hover-bg:#bb2d3b;--bs-btn-hover-border-color:#b02a37;--bs-btn-focus-shadow-rgb:225,83,97;--bs-btn-active-color:#fff;--bs-btn-active-bg:#b02a37;--bs-btn-active-border-color:#a52834;--bs-btn-active-shadow:inset 0 3px 5px rgba(0, 0, 0, 0.125);--bs-btn-disabled-color:#fff;--bs-btn-disabled-bg:#dc3545;--bs-btn-disabled-border-color:#dc3545}.btn-light{--bs-btn-color:#000;--bs-btn-bg:#f8f9fa;--bs-btn-border-color:#f8f9fa;--bs-btn-hover-color:#000;--bs-btn-hover-bg:#d3d4d5;--bs-btn-hover-border-color:#c6c7c8;--bs-btn-focus-shadow-rgb:211,212,213;--bs-btn-active-color:#000;--bs-btn-active-bg:#c6c7c8;--bs-btn-active-border-color:#babbbc;--bs-btn-active-shadow:inset 0 3px 5px rgba(0, 0, 0, 0.125);--bs-btn-disabled-color:#000;--bs-btn-disabled-bg:#f8f9fa;--bs-btn-disabled-border-color:#f8f9fa}.btn-dark{--bs-btn-color:#fff;--bs-btn-bg:#212529;--bs-btn-border-color:#212529;--bs-btn-hover-color:#fff;--bs-btn-hover-bg:#424649;--bs-btn-hover-border-color:#373b3e;--bs-btn-focus-shadow-rgb:66,70,73;--bs-btn-active-color:#fff;--bs-btn-active-bg:#4d5154;--bs-btn-active-border-color:#373b3e;--bs-btn-active-shadow:inset 0 3px 5px rgba(0, 0, 0, 0.125);--bs-btn-disabled-color:#fff;--bs-btn-disabled-bg:#212529;--bs-btn-disabled-border-color:#212529}.btn-outline-primary{--bs-btn-color:#0d6efd;--bs-btn-border-color:#0d6efd;--bs-btn-hover-color:#fff;--bs-btn-hover-bg:#0d6efd;--bs-btn-hover-border-color:#0d6efd;--bs-btn-focus-shadow-rgb:13,110,253;--bs-btn-active-color:#fff;--bs-btn-active-bg:#0d6efd;--bs-btn-active-border-color:#0d6efd;--bs-btn-active-shadow:inset 0 3px 5px rgba(0, 0, 0, 0.125);--bs-btn-disabled-color:#0d6efd;--bs-btn-disabled-bg:transparent;--bs-btn-disabled-border-color:#0d6efd;--bs-gradient:none}.btn-outline-secondary{--bs-btn-color:#6c757d;--bs-btn-border-color:#6c757d;--bs-btn-hover-color:#fff;--bs-btn-hover-bg:#6c757d;--bs-btn-hover-border-color:#6c757d;--bs-btn-focus-shadow-rgb:108,117,125;--bs-btn-active-color:#fff;--bs-btn-active-bg:#6c757d;--bs-btn-active-border-color:#6c757d;--bs-btn-active-shadow:inset 0 3px 5px rgba(0, 0, 0, 0.125);--bs-btn-disabled-color:#6c757d;--bs-btn-disabled-bg:transparent;--bs-btn-disabled-border-color:#6c757d;--bs-gradient:none}.btn-outline-success{--bs-btn-color:#198754;--bs-btn-border-color:#198754;--bs-btn-hover-color:#fff;--bs-btn-hover-bg:#198754;--bs-btn-hover-border-color:#198754;--bs-btn-focus-shadow-rgb:25,135,84;--bs-btn-active-color:#fff;--bs-btn-active-bg:#198754;--bs-btn-active-border-color:#198754;--bs-btn-active-shadow:inset 0 3px 5px rgba(0, 0, 0, 0.125);--bs-btn-disabled-color:#198754;--bs-btn-disabled-bg:transparent;--bs-btn-disabled-border-color:#198754;--bs-gradient:none}.btn-outline-info{--bs-btn-color:#0dcaf0;--bs-btn-border-color:#0dcaf0;--bs-btn-hover-color:#000;--bs-btn-hover-bg:#0dcaf0;--bs-btn-hover-border-color:#0dcaf0;--bs-btn-focus-shadow-rgb:13,202,240;--bs-btn-active-color:#000;--bs-btn-active-bg:#0dcaf0;--bs-btn-active-border-color:#0dcaf0;--bs-btn-active-shadow:inset 0 3px 5px rgba(0, 0, 0, 0.125);--bs-btn-disabled-color:#0dcaf0;--bs-btn-disabled-bg:transparent;--bs-btn-disabled-border-color:#0dcaf0;--bs-gradient:none}.btn-outline-warning{--bs-btn-color:#ffc107;--bs-btn-border-color:#ffc107;--bs-btn-hover-color:#000;--bs-btn-hover-bg:#ffc107;--bs-btn-hover-border-color:#ffc107;--bs-btn-focus-shadow-rgb:255,193,7;--bs-btn-active-color:#000;--bs-btn-active-bg:#ffc107;--bs-btn-active-border-color:#ffc107;--bs-btn-active-shadow:inset 0 3px 5px rgba(0, 0, 0, 0.125);--bs-btn-disabled-color:#ffc107;--bs-btn-disabled-bg:transparent;--bs-btn-disabled-border-color:#ffc107;--bs-gradient:none}.btn-outline-danger{--bs-btn-color:#dc3545;--bs-btn-border-color:#dc3545;--bs-btn-hover-color:#fff;--bs-btn-hover-bg:#dc3545;--bs-btn-hover-border-color:#dc3545;--bs-btn-focus-shadow-rgb:220,53,69;--bs-btn-active-color:#fff;--bs-btn-active-bg:#dc3545;--bs-btn-active-border-color:#dc3545;--bs-btn-active-shadow:inset 0 3px 5px rgba(0, 0, 0, 0.125);--bs-btn-disabled-color:#dc3545;--bs-btn-disabled-bg:transparent;--bs-btn-disabled-border-color:#dc3545;--bs-gradient:none}.btn-outline-light{--bs-btn-color:#f8f9fa;--bs-btn-border-color:#f8f9fa;--bs-btn-hover-color:#000;--bs-btn-hover-bg:#f8f9fa;--bs-btn-hover-border-color:#f8f9fa;--bs-btn-focus-shadow-rgb:248,249,250;--bs-btn-active-color:#000;--bs-btn-active-bg:#f8f9fa;--bs-btn-active-border-color:#f8f9fa;--bs-btn-active-shadow:inset 0 3px 5px rgba(0, 0, 0, 0.125);--bs-btn-disabled-color:#f8f9fa;--bs-btn-disabled-bg:transparent;--bs-btn-disabled-border-color:#f8f9fa;--bs-gradient:none}.btn-outline-dark{--bs-btn-color:#212529;--bs-btn-border-color:#212529;--bs-btn-hover-color:#fff;--bs-btn-hover-bg:#212529;--bs-btn-hover-border-color:#212529;--bs-btn-focus-shadow-rgb:33,37,41;--bs-btn-active-color:#fff;--bs-btn-active-bg:#212529;--bs-btn-active-border-color:#212529;--bs-btn-active-shadow:inset 0 3px 5px rgba(0, 0, 0, 0.125);--bs-btn-disabled-color:#212529;--bs-btn-disabled-bg:transparent;--bs-btn-disabled-border-color:#212529;--bs-gradient:none}.btn-link{--bs-btn-font-weight:400;--bs-btn-color:var(--bs-link-color);--bs-btn-bg:transparent;--bs-btn-border-color:transparent;--bs-btn-hover-color:var(--bs-link-hover-color);--bs-btn-hover-border-color:transparent;--bs-btn-active-color:var(--bs-link-hover-color);--bs-btn-active-border-color:transparent;--bs-btn-disabled-color:#6c757d;--bs-btn-disabled-border-color:transparent;--bs-btn-box-shadow:0 0 0 #000;--bs-btn-focus-shadow-rgb:49,132,253;text-decoration:underline}.btn-link:focus-visible{color:var(--bs-btn-color)}.btn-link:hover{color:var(--bs-btn-hover-color)}.btn-group-lg>.btn,.btn-lg{--bs-btn-padding-y:0.5rem;--bs-btn-padding-x:1rem;--bs-btn-font-size:1.25rem;--bs-btn-border-radius:var(--bs-border-radius-lg)}.btn-group-sm>.btn,.btn-sm{--bs-btn-padding-y:0.25rem;--bs-btn-padding-x:0.5rem;--bs-btn-font-size:0.875rem;--bs-btn-border-radius:var(--bs-border-radius-sm)}.fade{transition:opacity .15s linear}@media (prefers-reduced-motion:reduce){.fade{transition:none}}.fade:not(.show){opacity:0}.collapse:not(.show){display:none}.collapsing{height:0;overflow:hidden;transition:height .35s ease}@media (prefers-reduced-motion:reduce){.collapsing{transition:none}}.collapsing.collapse-horizontal{width:0;height:auto;transition:width .35s ease}@media (prefers-reduced-motion:reduce){.collapsing.collapse-horizontal{transition:none}}.dropdown,.dropdown-center,.dropend,.dropstart,.dropup,.dropup-center{position:relative}.dropdown-toggle{white-space:nowrap}.dropdown-toggle::after{display:inline-block;margin-left:.255em;vertical-align:.255em;content:\"\";border-top:.3em solid;border-right:.3em solid transparent;border-bottom:0;border-left:.3em solid transparent}.dropdown-toggle:empty::after{margin-left:0}.dropdown-menu{--bs-dropdown-zindex:1000;--bs-dropdown-min-width:10rem;--bs-dropdown-padding-x:0;--bs-dropdown-padding-y:0.5rem;--bs-dropdown-spacer:0.125rem;--bs-dropdown-font-size:1rem;--bs-dropdown-color:var(--bs-body-color);--bs-dropdown-bg:var(--bs-body-bg);--bs-dropdown-border-color:var(--bs-border-color-translucent);--bs-dropdown-border-radius:var(--bs-border-radius);--bs-dropdown-border-width:var(--bs-border-width);--bs-dropdown-inner-border-radius:calc(var(--bs-border-radius) - var(--bs-border-width));--bs-dropdown-divider-bg:var(--bs-border-color-translucent);--bs-dropdown-divider-margin-y:0.5rem;--bs-dropdown-box-shadow:0 0.5rem 1rem rgba(0, 0, 0, 0.15);--bs-dropdown-link-color:var(--bs-body-color);--bs-dropdown-link-hover-color:var(--bs-body-color);--bs-dropdown-link-hover-bg:var(--bs-tertiary-bg);--bs-dropdown-link-active-color:#fff;--bs-dropdown-link-active-bg:#0d6efd;--bs-dropdown-link-disabled-color:var(--bs-tertiary-color);--bs-dropdown-item-padding-x:1rem;--bs-dropdown-item-padding-y:0.25rem;--bs-dropdown-header-color:#6c757d;--bs-dropdown-header-padding-x:1rem;--bs-dropdown-header-padding-y:0.5rem;position:absolute;z-index:var(--bs-dropdown-zindex);display:none;min-width:var(--bs-dropdown-min-width);padding:var(--bs-dropdown-padding-y) var(--bs-dropdown-padding-x);margin:0;font-size:var(--bs-dropdown-font-size);color:var(--bs-dropdown-color);text-align:left;list-style:none;background-color:var(--bs-dropdown-bg);background-clip:padding-box;border:var(--bs-dropdown-border-width) solid var(--bs-dropdown-border-color);border-radius:var(--bs-dropdown-border-radius)}.dropdown-menu[data-bs-popper]{top:100%;left:0;margin-top:var(--bs-dropdown-spacer)}.dropdown-menu-start{--bs-position:start}.dropdown-menu-start[data-bs-popper]{right:auto;left:0}.dropdown-menu-end{--bs-position:end}.dropdown-menu-end[data-bs-popper]{right:0;left:auto}@media (min-width:576px){.dropdown-menu-sm-start{--bs-position:start}.dropdown-menu-sm-start[data-bs-popper]{right:auto;left:0}.dropdown-menu-sm-end{--bs-position:end}.dropdown-menu-sm-end[data-bs-popper]{right:0;left:auto}}@media (min-width:768px){.dropdown-menu-md-start{--bs-position:start}.dropdown-menu-md-start[data-bs-popper]{right:auto;left:0}.dropdown-menu-md-end{--bs-position:end}.dropdown-menu-md-end[data-bs-popper]{right:0;left:auto}}@media (min-width:992px){.dropdown-menu-lg-start{--bs-position:start}.dropdown-menu-lg-start[data-bs-popper]{right:auto;left:0}.dropdown-menu-lg-end{--bs-position:end}.dropdown-menu-lg-end[data-bs-popper]{right:0;left:auto}}@media (min-width:1200px){.dropdown-menu-xl-start{--bs-position:start}.dropdown-menu-xl-start[data-bs-popper]{right:auto;left:0}.dropdown-menu-xl-end{--bs-position:end}.dropdown-menu-xl-end[data-bs-popper]{right:0;left:auto}}@media (min-width:1400px){.dropdown-menu-xxl-start{--bs-position:start}.dropdown-menu-xxl-start[data-bs-popper]{right:auto;left:0}.dropdown-menu-xxl-end{--bs-position:end}.dropdown-menu-xxl-end[data-bs-popper]{right:0;left:auto}}.dropup .dropdown-menu[data-bs-popper]{top:auto;bottom:100%;margin-top:0;margin-bottom:var(--bs-dropdown-spacer)}.dropup .dropdown-toggle::after{display:inline-block;margin-left:.255em;vertical-align:.255em;content:\"\";border-top:0;border-right:.3em solid transparent;border-bottom:.3em solid;border-left:.3em solid transparent}.dropup .dropdown-toggle:empty::after{margin-left:0}.dropend .dropdown-menu[data-bs-popper]{top:0;right:auto;left:100%;margin-top:0;margin-left:var(--bs-dropdown-spacer)}.dropend .dropdown-toggle::after{display:inline-block;margin-left:.255em;vertical-align:.255em;content:\"\";border-top:.3em solid transparent;border-right:0;border-bottom:.3em solid transparent;border-left:.3em solid}.dropend .dropdown-toggle:empty::after{margin-left:0}.dropend .dropdown-toggle::after{vertical-align:0}.dropstart .dropdown-menu[data-bs-popper]{top:0;right:100%;left:auto;margin-top:0;margin-right:var(--bs-dropdown-spacer)}.dropstart .dropdown-toggle::after{display:inline-block;margin-left:.255em;vertical-align:.255em;content:\"\"}.dropstart .dropdown-toggle::after{display:none}.dropstart .dropdown-toggle::before{display:inline-block;margin-right:.255em;vertical-align:.255em;content:\"\";border-top:.3em solid transparent;border-right:.3em solid;border-bottom:.3em solid transparent}.dropstart .dropdown-toggle:empty::after{margin-left:0}.dropstart .dropdown-toggle::before{vertical-align:0}.dropdown-divider{height:0;margin:var(--bs-dropdown-divider-margin-y) 0;overflow:hidden;border-top:1px solid var(--bs-dropdown-divider-bg);opacity:1}.dropdown-item{display:block;width:100%;padding:var(--bs-dropdown-item-padding-y) var(--bs-dropdown-item-padding-x);clear:both;font-weight:400;color:var(--bs-dropdown-link-color);text-align:inherit;text-decoration:none;white-space:nowrap;background-color:transparent;border:0;border-radius:var(--bs-dropdown-item-border-radius,0)}.dropdown-item:focus,.dropdown-item:hover{color:var(--bs-dropdown-link-hover-color);background-color:var(--bs-dropdown-link-hover-bg)}.dropdown-item.active,.dropdown-item:active{color:var(--bs-dropdown-link-active-color);text-decoration:none;background-color:var(--bs-dropdown-link-active-bg)}.dropdown-item.disabled,.dropdown-item:disabled{color:var(--bs-dropdown-link-disabled-color);pointer-events:none;background-color:transparent}.dropdown-menu.show{display:block}.dropdown-header{display:block;padding:var(--bs-dropdown-header-padding-y) var(--bs-dropdown-header-padding-x);margin-bottom:0;font-size:.875rem;color:var(--bs-dropdown-header-color);white-space:nowrap}.dropdown-item-text{display:block;padding:var(--bs-dropdown-item-padding-y) var(--bs-dropdown-item-padding-x);color:var(--bs-dropdown-link-color)}.dropdown-menu-dark{--bs-dropdown-color:#dee2e6;--bs-dropdown-bg:#343a40;--bs-dropdown-border-color:var(--bs-border-color-translucent);--bs-dropdown-box-shadow: ;--bs-dropdown-link-color:#dee2e6;--bs-dropdown-link-hover-color:#fff;--bs-dropdown-divider-bg:var(--bs-border-color-translucent);--bs-dropdown-link-hover-bg:rgba(255, 255, 255, 0.15);--bs-dropdown-link-active-color:#fff;--bs-dropdown-link-active-bg:#0d6efd;--bs-dropdown-link-disabled-color:#adb5bd;--bs-dropdown-header-color:#adb5bd}.btn-group,.btn-group-vertical{position:relative;display:inline-flex;vertical-align:middle}.btn-group-vertical>.btn,.btn-group>.btn{position:relative;flex:1 1 auto}.btn-group-vertical>.btn-check:checked+.btn,.btn-group-vertical>.btn-check:focus+.btn,.btn-group-vertical>.btn.active,.btn-group-vertical>.btn:active,.btn-group-vertical>.btn:focus,.btn-group-vertical>.btn:hover,.btn-group>.btn-check:checked+.btn,.btn-group>.btn-check:focus+.btn,.btn-group>.btn.active,.btn-group>.btn:active,.btn-group>.btn:focus,.btn-group>.btn:hover{z-index:1}.btn-toolbar{display:flex;flex-wrap:wrap;justify-content:flex-start}.btn-toolbar .input-group{width:auto}.btn-group{border-radius:var(--bs-border-radius)}.btn-group>.btn-group:not(:first-child),.btn-group>:not(.btn-check:first-child)+.btn{margin-left:calc(var(--bs-border-width) * -1)}.btn-group>.btn-group:not(:last-child)>.btn,.btn-group>.btn.dropdown-toggle-split:first-child,.btn-group>.btn:not(:last-child):not(.dropdown-toggle){border-top-right-radius:0;border-bottom-right-radius:0}.btn-group>.btn-group:not(:first-child)>.btn,.btn-group>.btn:nth-child(n+3),.btn-group>:not(.btn-check)+.btn{border-top-left-radius:0;border-bottom-left-radius:0}.dropdown-toggle-split{padding-right:.5625rem;padding-left:.5625rem}.dropdown-toggle-split::after,.dropend .dropdown-toggle-split::after,.dropup .dropdown-toggle-split::after{margin-left:0}.dropstart .dropdown-toggle-split::before{margin-right:0}.btn-group-sm>.btn+.dropdown-toggle-split,.btn-sm+.dropdown-toggle-split{padding-right:.375rem;padding-left:.375rem}.btn-group-lg>.btn+.dropdown-toggle-split,.btn-lg+.dropdown-toggle-split{padding-right:.75rem;padding-left:.75rem}.btn-group-vertical{flex-direction:column;align-items:flex-start;justify-content:center}.btn-group-vertical>.btn,.btn-group-vertical>.btn-group{width:100%}.btn-group-vertical>.btn-group:not(:first-child),.btn-group-vertical>.btn:not(:first-child){margin-top:calc(var(--bs-border-width) * -1)}.btn-group-vertical>.btn-group:not(:last-child)>.btn,.btn-group-vertical>.btn:not(:last-child):not(.dropdown-toggle){border-bottom-right-radius:0;border-bottom-left-radius:0}.btn-group-vertical>.btn-group:not(:first-child)>.btn,.btn-group-vertical>.btn~.btn{border-top-left-radius:0;border-top-right-radius:0}.nav{--bs-nav-link-padding-x:1rem;--bs-nav-link-padding-y:0.5rem;--bs-nav-link-font-weight: ;--bs-nav-link-color:var(--bs-link-color);--bs-nav-link-hover-color:var(--bs-link-hover-color);--bs-nav-link-disabled-color:var(--bs-secondary-color);display:flex;flex-wrap:wrap;padding-left:0;margin-bottom:0;list-style:none}.nav-link{display:block;padding:var(--bs-nav-link-padding-y) var(--bs-nav-link-padding-x);font-size:var(--bs-nav-link-font-size);font-weight:var(--bs-nav-link-font-weight);color:var(--bs-nav-link-color);text-decoration:none;background:0 0;border:0;transition:color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out}@media (prefers-reduced-motion:reduce){.nav-link{transition:none}}.nav-link:focus,.nav-link:hover{color:var(--bs-nav-link-hover-color)}.nav-link:focus-visible{outline:0;box-shadow:0 0 0 .25rem rgba(13,110,253,.25)}.nav-link.disabled,.nav-link:disabled{color:var(--bs-nav-link-disabled-color);pointer-events:none;cursor:default}.nav-tabs{--bs-nav-tabs-border-width:var(--bs-border-width);--bs-nav-tabs-border-color:var(--bs-border-color);--bs-nav-tabs-border-radius:var(--bs-border-radius);--bs-nav-tabs-link-hover-border-color:var(--bs-secondary-bg) var(--bs-secondary-bg) var(--bs-border-color);--bs-nav-tabs-link-active-color:var(--bs-emphasis-color);--bs-nav-tabs-link-active-bg:var(--bs-body-bg);--bs-nav-tabs-link-active-border-color:var(--bs-border-color) var(--bs-border-color) var(--bs-body-bg);border-bottom:var(--bs-nav-tabs-border-width) solid var(--bs-nav-tabs-border-color)}.nav-tabs .nav-link{margin-bottom:calc(-1 * var(--bs-nav-tabs-border-width));border:var(--bs-nav-tabs-border-width) solid transparent;border-top-left-radius:var(--bs-nav-tabs-border-radius);border-top-right-radius:var(--bs-nav-tabs-border-radius)}.nav-tabs .nav-link:focus,.nav-tabs .nav-link:hover{isolation:isolate;border-color:var(--bs-nav-tabs-link-hover-border-color)}.nav-tabs .nav-item.show .nav-link,.nav-tabs .nav-link.active{color:var(--bs-nav-tabs-link-active-color);background-color:var(--bs-nav-tabs-link-active-bg);border-color:var(--bs-nav-tabs-link-active-border-color)}.nav-tabs .dropdown-menu{margin-top:calc(-1 * var(--bs-nav-tabs-border-width));border-top-left-radius:0;border-top-right-radius:0}.nav-pills{--bs-nav-pills-border-radius:var(--bs-border-radius);--bs-nav-pills-link-active-color:#fff;--bs-nav-pills-link-active-bg:#0d6efd}.nav-pills .nav-link{border-radius:var(--bs-nav-pills-border-radius)}.nav-pills .nav-link.active,.nav-pills .show>.nav-link{color:var(--bs-nav-pills-link-active-color);background-color:var(--bs-nav-pills-link-active-bg)}.nav-underline{--bs-nav-underline-gap:1rem;--bs-nav-underline-border-width:0.125rem;--bs-nav-underline-link-active-color:var(--bs-emphasis-color);gap:var(--bs-nav-underline-gap)}.nav-underline .nav-link{padding-right:0;padding-left:0;border-bottom:var(--bs-nav-underline-border-width) solid transparent}.nav-underline .nav-link:focus,.nav-underline .nav-link:hover{border-bottom-color:currentcolor}.nav-underline .nav-link.active,.nav-underline .show>.nav-link{font-weight:700;color:var(--bs-nav-underline-link-active-color);border-bottom-color:currentcolor}.nav-fill .nav-item,.nav-fill>.nav-link{flex:1 1 auto;text-align:center}.nav-justified .nav-item,.nav-justified>.nav-link{flex-basis:0;flex-grow:1;text-align:center}.nav-fill .nav-item .nav-link,.nav-justified .nav-item .nav-link{width:100%}.tab-content>.tab-pane{display:none}.tab-content>.active{display:block}.navbar{--bs-navbar-padding-x:0;--bs-navbar-padding-y:0.5rem;--bs-navbar-color:rgba(var(--bs-emphasis-color-rgb), 0.65);--bs-navbar-hover-color:rgba(var(--bs-emphasis-color-rgb), 0.8);--bs-navbar-disabled-color:rgba(var(--bs-emphasis-color-rgb), 0.3);--bs-navbar-active-color:rgba(var(--bs-emphasis-color-rgb), 1);--bs-navbar-brand-padding-y:0.3125rem;--bs-navbar-brand-margin-end:1rem;--bs-navbar-brand-font-size:1.25rem;--bs-navbar-brand-color:rgba(var(--bs-emphasis-color-rgb), 1);--bs-navbar-brand-hover-color:rgba(var(--bs-emphasis-color-rgb), 1);--bs-navbar-nav-link-padding-x:0.5rem;--bs-navbar-toggler-padding-y:0.25rem;--bs-navbar-toggler-padding-x:0.75rem;--bs-navbar-toggler-font-size:1.25rem;--bs-navbar-toggler-icon-bg:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 30 30'%3e%3cpath stroke='rgba%2833, 37, 41, 0.75%29' stroke-linecap='round' stroke-miterlimit='10' stroke-width='2' d='M4 7h22M4 15h22M4 23h22'/%3e%3c/svg%3e\");--bs-navbar-toggler-border-color:rgba(var(--bs-emphasis-color-rgb), 0.15);--bs-navbar-toggler-border-radius:var(--bs-border-radius);--bs-navbar-toggler-focus-width:0.25rem;--bs-navbar-toggler-transition:box-shadow 0.15s ease-in-out;position:relative;display:flex;flex-wrap:wrap;align-items:center;justify-content:space-between;padding:var(--bs-navbar-padding-y) var(--bs-navbar-padding-x)}.navbar>.container,.navbar>.container-fluid,.navbar>.container-lg,.navbar>.container-md,.navbar>.container-sm,.navbar>.container-xl,.navbar>.container-xxl{display:flex;flex-wrap:inherit;align-items:center;justify-content:space-between}.navbar-brand{padding-top:var(--bs-navbar-brand-padding-y);padding-bottom:var(--bs-navbar-brand-padding-y);margin-right:var(--bs-navbar-brand-margin-end);font-size:var(--bs-navbar-brand-font-size);color:var(--bs-navbar-brand-color);text-decoration:none;white-space:nowrap}.navbar-brand:focus,.navbar-brand:hover{color:var(--bs-navbar-brand-hover-color)}.navbar-nav{--bs-nav-link-padding-x:0;--bs-nav-link-padding-y:0.5rem;--bs-nav-link-font-weight: ;--bs-nav-link-color:var(--bs-navbar-color);--bs-nav-link-hover-color:var(--bs-navbar-hover-color);--bs-nav-link-disabled-color:var(--bs-navbar-disabled-color);display:flex;flex-direction:column;padding-left:0;margin-bottom:0;list-style:none}.navbar-nav .nav-link.active,.navbar-nav .nav-link.show{color:var(--bs-navbar-active-color)}.navbar-nav .dropdown-menu{position:static}.navbar-text{padding-top:.5rem;padding-bottom:.5rem;color:var(--bs-navbar-color)}.navbar-text a,.navbar-text a:focus,.navbar-text a:hover{color:var(--bs-navbar-active-color)}.navbar-collapse{flex-basis:100%;flex-grow:1;align-items:center}.navbar-toggler{padding:var(--bs-navbar-toggler-padding-y) var(--bs-navbar-toggler-padding-x);font-size:var(--bs-navbar-toggler-font-size);line-height:1;color:var(--bs-navbar-color);background-color:transparent;border:var(--bs-border-width) solid var(--bs-navbar-toggler-border-color);border-radius:var(--bs-navbar-toggler-border-radius);transition:var(--bs-navbar-toggler-transition)}@media (prefers-reduced-motion:reduce){.navbar-toggler{transition:none}}.navbar-toggler:hover{text-decoration:none}.navbar-toggler:focus{text-decoration:none;outline:0;box-shadow:0 0 0 var(--bs-navbar-toggler-focus-width)}.navbar-toggler-icon{display:inline-block;width:1.5em;height:1.5em;vertical-align:middle;background-image:var(--bs-navbar-toggler-icon-bg);background-repeat:no-repeat;background-position:center;background-size:100%}.navbar-nav-scroll{max-height:var(--bs-scroll-height,75vh);overflow-y:auto}@media (min-width:576px){.navbar-expand-sm{flex-wrap:nowrap;justify-content:flex-start}.navbar-expand-sm .navbar-nav{flex-direction:row}.navbar-expand-sm .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-sm .navbar-nav .nav-link{padding-right:var(--bs-navbar-nav-link-padding-x);padding-left:var(--bs-navbar-nav-link-padding-x)}.navbar-expand-sm .navbar-nav-scroll{overflow:visible}.navbar-expand-sm .navbar-collapse{display:flex!important;flex-basis:auto}.navbar-expand-sm .navbar-toggler{display:none}.navbar-expand-sm .offcanvas{position:static;z-index:auto;flex-grow:1;width:auto!important;height:auto!important;visibility:visible!important;background-color:transparent!important;border:0!important;transform:none!important;transition:none}.navbar-expand-sm .offcanvas .offcanvas-header{display:none}.navbar-expand-sm .offcanvas .offcanvas-body{display:flex;flex-grow:0;padding:0;overflow-y:visible}}@media (min-width:768px){.navbar-expand-md{flex-wrap:nowrap;justify-content:flex-start}.navbar-expand-md .navbar-nav{flex-direction:row}.navbar-expand-md .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-md .navbar-nav .nav-link{padding-right:var(--bs-navbar-nav-link-padding-x);padding-left:var(--bs-navbar-nav-link-padding-x)}.navbar-expand-md .navbar-nav-scroll{overflow:visible}.navbar-expand-md .navbar-collapse{display:flex!important;flex-basis:auto}.navbar-expand-md .navbar-toggler{display:none}.navbar-expand-md .offcanvas{position:static;z-index:auto;flex-grow:1;width:auto!important;height:auto!important;visibility:visible!important;background-color:transparent!important;border:0!important;transform:none!important;transition:none}.navbar-expand-md .offcanvas .offcanvas-header{display:none}.navbar-expand-md .offcanvas .offcanvas-body{display:flex;flex-grow:0;padding:0;overflow-y:visible}}@media (min-width:992px){.navbar-expand-lg{flex-wrap:nowrap;justify-content:flex-start}.navbar-expand-lg .navbar-nav{flex-direction:row}.navbar-expand-lg .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-lg .navbar-nav .nav-link{padding-right:var(--bs-navbar-nav-link-padding-x);padding-left:var(--bs-navbar-nav-link-padding-x)}.navbar-expand-lg .navbar-nav-scroll{overflow:visible}.navbar-expand-lg .navbar-collapse{display:flex!important;flex-basis:auto}.navbar-expand-lg .navbar-toggler{display:none}.navbar-expand-lg .offcanvas{position:static;z-index:auto;flex-grow:1;width:auto!important;height:auto!important;visibility:visible!important;background-color:transparent!important;border:0!important;transform:none!important;transition:none}.navbar-expand-lg .offcanvas .offcanvas-header{display:none}.navbar-expand-lg .offcanvas .offcanvas-body{display:flex;flex-grow:0;padding:0;overflow-y:visible}}@media (min-width:1200px){.navbar-expand-xl{flex-wrap:nowrap;justify-content:flex-start}.navbar-expand-xl .navbar-nav{flex-direction:row}.navbar-expand-xl .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-xl .navbar-nav .nav-link{padding-right:var(--bs-navbar-nav-link-padding-x);padding-left:var(--bs-navbar-nav-link-padding-x)}.navbar-expand-xl .navbar-nav-scroll{overflow:visible}.navbar-expand-xl .navbar-collapse{display:flex!important;flex-basis:auto}.navbar-expand-xl .navbar-toggler{display:none}.navbar-expand-xl .offcanvas{position:static;z-index:auto;flex-grow:1;width:auto!important;height:auto!important;visibility:visible!important;background-color:transparent!important;border:0!important;transform:none!important;transition:none}.navbar-expand-xl .offcanvas .offcanvas-header{display:none}.navbar-expand-xl .offcanvas .offcanvas-body{display:flex;flex-grow:0;padding:0;overflow-y:visible}}@media (min-width:1400px){.navbar-expand-xxl{flex-wrap:nowrap;justify-content:flex-start}.navbar-expand-xxl .navbar-nav{flex-direction:row}.navbar-expand-xxl .navbar-nav .dropdown-menu{position:absolute}.navbar-expand-xxl .navbar-nav .nav-link{padding-right:var(--bs-navbar-nav-link-padding-x);padding-left:var(--bs-navbar-nav-link-padding-x)}.navbar-expand-xxl .navbar-nav-scroll{overflow:visible}.navbar-expand-xxl .navbar-collapse{display:flex!important;flex-basis:auto}.navbar-expand-xxl .navbar-toggler{display:none}.navbar-expand-xxl .offcanvas{position:static;z-index:auto;flex-grow:1;width:auto!important;height:auto!important;visibility:visible!important;background-color:transparent!important;border:0!important;transform:none!important;transition:none}.navbar-expand-xxl .offcanvas .offcanvas-header{display:none}.navbar-expand-xxl .offcanvas .offcanvas-body{display:flex;flex-grow:0;padding:0;overflow-y:visible}}.navbar-expand{flex-wrap:nowrap;justify-content:flex-start}.navbar-expand .navbar-nav{flex-direction:row}.navbar-expand .navbar-nav .dropdown-menu{position:absolute}.navbar-expand .navbar-nav .nav-link{padding-right:var(--bs-navbar-nav-link-padding-x);padding-left:var(--bs-navbar-nav-link-padding-x)}.navbar-expand .navbar-nav-scroll{overflow:visible}.navbar-expand .navbar-collapse{display:flex!important;flex-basis:auto}.navbar-expand .navbar-toggler{display:none}.navbar-expand .offcanvas{position:static;z-index:auto;flex-grow:1;width:auto!important;height:auto!important;visibility:visible!important;background-color:transparent!important;border:0!important;transform:none!important;transition:none}.navbar-expand .offcanvas .offcanvas-header{display:none}.navbar-expand .offcanvas .offcanvas-body{display:flex;flex-grow:0;padding:0;overflow-y:visible}.navbar-dark,.navbar[data-bs-theme=dark]{--bs-navbar-color:rgba(255, 255, 255, 0.55);--bs-navbar-hover-color:rgba(255, 255, 255, 0.75);--bs-navbar-disabled-color:rgba(255, 255, 255, 0.25);--bs-navbar-active-color:#fff;--bs-navbar-brand-color:#fff;--bs-navbar-brand-hover-color:#fff;--bs-navbar-toggler-border-color:rgba(255, 255, 255, 0.1);--bs-navbar-toggler-icon-bg:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 30 30'%3e%3cpath stroke='rgba%28255, 255, 255, 0.55%29' stroke-linecap='round' stroke-miterlimit='10' stroke-width='2' d='M4 7h22M4 15h22M4 23h22'/%3e%3c/svg%3e\")}[data-bs-theme=dark] .navbar-toggler-icon{--bs-navbar-toggler-icon-bg:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 30 30'%3e%3cpath stroke='rgba%28255, 255, 255, 0.55%29' stroke-linecap='round' stroke-miterlimit='10' stroke-width='2' d='M4 7h22M4 15h22M4 23h22'/%3e%3c/svg%3e\")}.card{--bs-card-spacer-y:1rem;--bs-card-spacer-x:1rem;--bs-card-title-spacer-y:0.5rem;--bs-card-title-color: ;--bs-card-subtitle-color: ;--bs-card-border-width:var(--bs-border-width);--bs-card-border-color:var(--bs-border-color-translucent);--bs-card-border-radius:var(--bs-border-radius);--bs-card-box-shadow: ;--bs-card-inner-border-radius:calc(var(--bs-border-radius) - (var(--bs-border-width)));--bs-card-cap-padding-y:0.5rem;--bs-card-cap-padding-x:1rem;--bs-card-cap-bg:rgba(var(--bs-body-color-rgb), 0.03);--bs-card-cap-color: ;--bs-card-height: ;--bs-card-color: ;--bs-card-bg:var(--bs-body-bg);--bs-card-img-overlay-padding:1rem;--bs-card-group-margin:0.75rem;position:relative;display:flex;flex-direction:column;min-width:0;height:var(--bs-card-height);color:var(--bs-body-color);word-wrap:break-word;background-color:var(--bs-card-bg);background-clip:border-box;border:var(--bs-card-border-width) solid var(--bs-card-border-color);border-radius:var(--bs-card-border-radius)}.card>hr{margin-right:0;margin-left:0}.card>.list-group{border-top:inherit;border-bottom:inherit}.card>.list-group:first-child{border-top-width:0;border-top-left-radius:var(--bs-card-inner-border-radius);border-top-right-radius:var(--bs-card-inner-border-radius)}.card>.list-group:last-child{border-bottom-width:0;border-bottom-right-radius:var(--bs-card-inner-border-radius);border-bottom-left-radius:var(--bs-card-inner-border-radius)}.card>.card-header+.list-group,.card>.list-group+.card-footer{border-top:0}.card-body{flex:1 1 auto;padding:var(--bs-card-spacer-y) var(--bs-card-spacer-x);color:var(--bs-card-color)}.card-title{margin-bottom:var(--bs-card-title-spacer-y);color:var(--bs-card-title-color)}.card-subtitle{margin-top:calc(-.5 * var(--bs-card-title-spacer-y));margin-bottom:0;color:var(--bs-card-subtitle-color)}.card-text:last-child{margin-bottom:0}.card-link+.card-link{margin-left:var(--bs-card-spacer-x)}.card-header{padding:var(--bs-card-cap-padding-y) var(--bs-card-cap-padding-x);margin-bottom:0;color:var(--bs-card-cap-color);background-color:var(--bs-card-cap-bg);border-bottom:var(--bs-card-border-width) solid var(--bs-card-border-color)}.card-header:first-child{border-radius:var(--bs-card-inner-border-radius) var(--bs-card-inner-border-radius) 0 0}.card-footer{padding:var(--bs-card-cap-padding-y) var(--bs-card-cap-padding-x);color:var(--bs-card-cap-color);background-color:var(--bs-card-cap-bg);border-top:var(--bs-card-border-width) solid var(--bs-card-border-color)}.card-footer:last-child{border-radius:0 0 var(--bs-card-inner-border-radius) var(--bs-card-inner-border-radius)}.card-header-tabs{margin-right:calc(-.5 * var(--bs-card-cap-padding-x));margin-bottom:calc(-1 * var(--bs-card-cap-padding-y));margin-left:calc(-.5 * var(--bs-card-cap-padding-x));border-bottom:0}.card-header-tabs .nav-link.active{background-color:var(--bs-card-bg);border-bottom-color:var(--bs-card-bg)}.card-header-pills{margin-right:calc(-.5 * var(--bs-card-cap-padding-x));margin-left:calc(-.5 * var(--bs-card-cap-padding-x))}.card-img-overlay{position:absolute;top:0;right:0;bottom:0;left:0;padding:var(--bs-card-img-overlay-padding);border-radius:var(--bs-card-inner-border-radius)}.card-img,.card-img-bottom,.card-img-top{width:100%}.card-img,.card-img-top{border-top-left-radius:var(--bs-card-inner-border-radius);border-top-right-radius:var(--bs-card-inner-border-radius)}.card-img,.card-img-bottom{border-bottom-right-radius:var(--bs-card-inner-border-radius);border-bottom-left-radius:var(--bs-card-inner-border-radius)}.card-group>.card{margin-bottom:var(--bs-card-group-margin)}@media (min-width:576px){.card-group{display:flex;flex-flow:row wrap}.card-group>.card{flex:1 0 0%;margin-bottom:0}.card-group>.card+.card{margin-left:0;border-left:0}.card-group>.card:not(:last-child){border-top-right-radius:0;border-bottom-right-radius:0}.card-group>.card:not(:last-child) .card-header,.card-group>.card:not(:last-child) .card-img-top{border-top-right-radius:0}.card-group>.card:not(:last-child) .card-footer,.card-group>.card:not(:last-child) .card-img-bottom{border-bottom-right-radius:0}.card-group>.card:not(:first-child){border-top-left-radius:0;border-bottom-left-radius:0}.card-group>.card:not(:first-child) .card-header,.card-group>.card:not(:first-child) .card-img-top{border-top-left-radius:0}.card-group>.card:not(:first-child) .card-footer,.card-group>.card:not(:first-child) .card-img-bottom{border-bottom-left-radius:0}}.accordion{--bs-accordion-color:var(--bs-body-color);--bs-accordion-bg:var(--bs-body-bg);--bs-accordion-transition:color 0.15s ease-in-out,background-color 0.15s ease-in-out,border-color 0.15s ease-in-out,box-shadow 0.15s ease-in-out,border-radius 0.15s ease;--bs-accordion-border-color:var(--bs-border-color);--bs-accordion-border-width:var(--bs-border-width);--bs-accordion-border-radius:var(--bs-border-radius);--bs-accordion-inner-border-radius:calc(var(--bs-border-radius) - (var(--bs-border-width)));--bs-accordion-btn-padding-x:1.25rem;--bs-accordion-btn-padding-y:1rem;--bs-accordion-btn-color:var(--bs-body-color);--bs-accordion-btn-bg:var(--bs-accordion-bg);--bs-accordion-btn-icon:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%23212529'%3e%3cpath fill-rule='evenodd' d='M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z'/%3e%3c/svg%3e\");--bs-accordion-btn-icon-width:1.25rem;--bs-accordion-btn-icon-transform:rotate(-180deg);--bs-accordion-btn-icon-transition:transform 0.2s ease-in-out;--bs-accordion-btn-active-icon:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%23052c65'%3e%3cpath fill-rule='evenodd' d='M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z'/%3e%3c/svg%3e\");--bs-accordion-btn-focus-border-color:#86b7fe;--bs-accordion-btn-focus-box-shadow:0 0 0 0.25rem rgba(13, 110, 253, 0.25);--bs-accordion-body-padding-x:1.25rem;--bs-accordion-body-padding-y:1rem;--bs-accordion-active-color:var(--bs-primary-text-emphasis);--bs-accordion-active-bg:var(--bs-primary-bg-subtle)}.accordion-button{position:relative;display:flex;align-items:center;width:100%;padding:var(--bs-accordion-btn-padding-y) var(--bs-accordion-btn-padding-x);font-size:1rem;color:var(--bs-accordion-btn-color);text-align:left;background-color:var(--bs-accordion-btn-bg);border:0;border-radius:0;overflow-anchor:none;transition:var(--bs-accordion-transition)}@media (prefers-reduced-motion:reduce){.accordion-button{transition:none}}.accordion-button:not(.collapsed){color:var(--bs-accordion-active-color);background-color:var(--bs-accordion-active-bg);box-shadow:inset 0 calc(-1 * var(--bs-accordion-border-width)) 0 var(--bs-accordion-border-color)}.accordion-button:not(.collapsed)::after{background-image:var(--bs-accordion-btn-active-icon);transform:var(--bs-accordion-btn-icon-transform)}.accordion-button::after{flex-shrink:0;width:var(--bs-accordion-btn-icon-width);height:var(--bs-accordion-btn-icon-width);margin-left:auto;content:\"\";background-image:var(--bs-accordion-btn-icon);background-repeat:no-repeat;background-size:var(--bs-accordion-btn-icon-width);transition:var(--bs-accordion-btn-icon-transition)}@media (prefers-reduced-motion:reduce){.accordion-button::after{transition:none}}.accordion-button:hover{z-index:2}.accordion-button:focus{z-index:3;border-color:var(--bs-accordion-btn-focus-border-color);outline:0;box-shadow:var(--bs-accordion-btn-focus-box-shadow)}.accordion-header{margin-bottom:0}.accordion-item{color:var(--bs-accordion-color);background-color:var(--bs-accordion-bg);border:var(--bs-accordion-border-width) solid var(--bs-accordion-border-color)}.accordion-item:first-of-type{border-top-left-radius:var(--bs-accordion-border-radius);border-top-right-radius:var(--bs-accordion-border-radius)}.accordion-item:first-of-type .accordion-button{border-top-left-radius:var(--bs-accordion-inner-border-radius);border-top-right-radius:var(--bs-accordion-inner-border-radius)}.accordion-item:not(:first-of-type){border-top:0}.accordion-item:last-of-type{border-bottom-right-radius:var(--bs-accordion-border-radius);border-bottom-left-radius:var(--bs-accordion-border-radius)}.accordion-item:last-of-type .accordion-button.collapsed{border-bottom-right-radius:var(--bs-accordion-inner-border-radius);border-bottom-left-radius:var(--bs-accordion-inner-border-radius)}.accordion-item:last-of-type .accordion-collapse{border-bottom-right-radius:var(--bs-accordion-border-radius);border-bottom-left-radius:var(--bs-accordion-border-radius)}.accordion-body{padding:var(--bs-accordion-body-padding-y) var(--bs-accordion-body-padding-x)}.accordion-flush .accordion-collapse{border-width:0}.accordion-flush .accordion-item{border-right:0;border-left:0;border-radius:0}.accordion-flush .accordion-item:first-child{border-top:0}.accordion-flush .accordion-item:last-child{border-bottom:0}.accordion-flush .accordion-item .accordion-button,.accordion-flush .accordion-item .accordion-button.collapsed{border-radius:0}[data-bs-theme=dark] .accordion-button::after{--bs-accordion-btn-icon:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%236ea8fe'%3e%3cpath fill-rule='evenodd' d='M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z'/%3e%3c/svg%3e\");--bs-accordion-btn-active-icon:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%236ea8fe'%3e%3cpath fill-rule='evenodd' d='M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z'/%3e%3c/svg%3e\")}.breadcrumb{--bs-breadcrumb-padding-x:0;--bs-breadcrumb-padding-y:0;--bs-breadcrumb-margin-bottom:1rem;--bs-breadcrumb-bg: ;--bs-breadcrumb-border-radius: ;--bs-breadcrumb-divider-color:var(--bs-secondary-color);--bs-breadcrumb-item-padding-x:0.5rem;--bs-breadcrumb-item-active-color:var(--bs-secondary-color);display:flex;flex-wrap:wrap;padding:var(--bs-breadcrumb-padding-y) var(--bs-breadcrumb-padding-x);margin-bottom:var(--bs-breadcrumb-margin-bottom);font-size:var(--bs-breadcrumb-font-size);list-style:none;background-color:var(--bs-breadcrumb-bg);border-radius:var(--bs-breadcrumb-border-radius)}.breadcrumb-item+.breadcrumb-item{padding-left:var(--bs-breadcrumb-item-padding-x)}.breadcrumb-item+.breadcrumb-item::before{float:left;padding-right:var(--bs-breadcrumb-item-padding-x);color:var(--bs-breadcrumb-divider-color);content:var(--bs-breadcrumb-divider, \"/\")}.breadcrumb-item.active{color:var(--bs-breadcrumb-item-active-color)}.pagination{--bs-pagination-padding-x:0.75rem;--bs-pagination-padding-y:0.375rem;--bs-pagination-font-size:1rem;--bs-pagination-color:var(--bs-link-color);--bs-pagination-bg:var(--bs-body-bg);--bs-pagination-border-width:var(--bs-border-width);--bs-pagination-border-color:var(--bs-border-color);--bs-pagination-border-radius:var(--bs-border-radius);--bs-pagination-hover-color:var(--bs-link-hover-color);--bs-pagination-hover-bg:var(--bs-tertiary-bg);--bs-pagination-hover-border-color:var(--bs-border-color);--bs-pagination-focus-color:var(--bs-link-hover-color);--bs-pagination-focus-bg:var(--bs-secondary-bg);--bs-pagination-focus-box-shadow:0 0 0 0.25rem rgba(13, 110, 253, 0.25);--bs-pagination-active-color:#fff;--bs-pagination-active-bg:#0d6efd;--bs-pagination-active-border-color:#0d6efd;--bs-pagination-disabled-color:var(--bs-secondary-color);--bs-pagination-disabled-bg:var(--bs-secondary-bg);--bs-pagination-disabled-border-color:var(--bs-border-color);display:flex;padding-left:0;list-style:none}.page-link{position:relative;display:block;padding:var(--bs-pagination-padding-y) var(--bs-pagination-padding-x);font-size:var(--bs-pagination-font-size);color:var(--bs-pagination-color);text-decoration:none;background-color:var(--bs-pagination-bg);border:var(--bs-pagination-border-width) solid var(--bs-pagination-border-color);transition:color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out}@media (prefers-reduced-motion:reduce){.page-link{transition:none}}.page-link:hover{z-index:2;color:var(--bs-pagination-hover-color);background-color:var(--bs-pagination-hover-bg);border-color:var(--bs-pagination-hover-border-color)}.page-link:focus{z-index:3;color:var(--bs-pagination-focus-color);background-color:var(--bs-pagination-focus-bg);outline:0;box-shadow:var(--bs-pagination-focus-box-shadow)}.active>.page-link,.page-link.active{z-index:3;color:var(--bs-pagination-active-color);background-color:var(--bs-pagination-active-bg);border-color:var(--bs-pagination-active-border-color)}.disabled>.page-link,.page-link.disabled{color:var(--bs-pagination-disabled-color);pointer-events:none;background-color:var(--bs-pagination-disabled-bg);border-color:var(--bs-pagination-disabled-border-color)}.page-item:not(:first-child) .page-link{margin-left:calc(var(--bs-border-width) * -1)}.page-item:first-child .page-link{border-top-left-radius:var(--bs-pagination-border-radius);border-bottom-left-radius:var(--bs-pagination-border-radius)}.page-item:last-child .page-link{border-top-right-radius:var(--bs-pagination-border-radius);border-bottom-right-radius:var(--bs-pagination-border-radius)}.pagination-lg{--bs-pagination-padding-x:1.5rem;--bs-pagination-padding-y:0.75rem;--bs-pagination-font-size:1.25rem;--bs-pagination-border-radius:var(--bs-border-radius-lg)}.pagination-sm{--bs-pagination-padding-x:0.5rem;--bs-pagination-padding-y:0.25rem;--bs-pagination-font-size:0.875rem;--bs-pagination-border-radius:var(--bs-border-radius-sm)}.badge{--bs-badge-padding-x:0.65em;--bs-badge-padding-y:0.35em;--bs-badge-font-size:0.75em;--bs-badge-font-weight:700;--bs-badge-color:#fff;--bs-badge-border-radius:var(--bs-border-radius);display:inline-block;padding:var(--bs-badge-padding-y) var(--bs-badge-padding-x);font-size:var(--bs-badge-font-size);font-weight:var(--bs-badge-font-weight);line-height:1;color:var(--bs-badge-color);text-align:center;white-space:nowrap;vertical-align:baseline;border-radius:var(--bs-badge-border-radius)}.badge:empty{display:none}.btn .badge{position:relative;top:-1px}.alert{--bs-alert-bg:transparent;--bs-alert-padding-x:1rem;--bs-alert-padding-y:1rem;--bs-alert-margin-bottom:1rem;--bs-alert-color:inherit;--bs-alert-border-color:transparent;--bs-alert-border:var(--bs-border-width) solid var(--bs-alert-border-color);--bs-alert-border-radius:var(--bs-border-radius);--bs-alert-link-color:inherit;position:relative;padding:var(--bs-alert-padding-y) var(--bs-alert-padding-x);margin-bottom:var(--bs-alert-margin-bottom);color:var(--bs-alert-color);background-color:var(--bs-alert-bg);border:var(--bs-alert-border);border-radius:var(--bs-alert-border-radius)}.alert-heading{color:inherit}.alert-link{font-weight:700;color:var(--bs-alert-link-color)}.alert-dismissible{padding-right:3rem}.alert-dismissible .btn-close{position:absolute;top:0;right:0;z-index:2;padding:1.25rem 1rem}.alert-primary{--bs-alert-color:var(--bs-primary-text-emphasis);--bs-alert-bg:var(--bs-primary-bg-subtle);--bs-alert-border-color:var(--bs-primary-border-subtle);--bs-alert-link-color:var(--bs-primary-text-emphasis)}.alert-secondary{--bs-alert-color:var(--bs-secondary-text-emphasis);--bs-alert-bg:var(--bs-secondary-bg-subtle);--bs-alert-border-color:var(--bs-secondary-border-subtle);--bs-alert-link-color:var(--bs-secondary-text-emphasis)}.alert-success{--bs-alert-color:var(--bs-success-text-emphasis);--bs-alert-bg:var(--bs-success-bg-subtle);--bs-alert-border-color:var(--bs-success-border-subtle);--bs-alert-link-color:var(--bs-success-text-emphasis)}.alert-info{--bs-alert-color:var(--bs-info-text-emphasis);--bs-alert-bg:var(--bs-info-bg-subtle);--bs-alert-border-color:var(--bs-info-border-subtle);--bs-alert-link-color:var(--bs-info-text-emphasis)}.alert-warning{--bs-alert-color:var(--bs-warning-text-emphasis);--bs-alert-bg:var(--bs-warning-bg-subtle);--bs-alert-border-color:var(--bs-warning-border-subtle);--bs-alert-link-color:var(--bs-warning-text-emphasis)}.alert-danger{--bs-alert-color:var(--bs-danger-text-emphasis);--bs-alert-bg:var(--bs-danger-bg-subtle);--bs-alert-border-color:var(--bs-danger-border-subtle);--bs-alert-link-color:var(--bs-danger-text-emphasis)}.alert-light{--bs-alert-color:var(--bs-light-text-emphasis);--bs-alert-bg:var(--bs-light-bg-subtle);--bs-alert-border-color:var(--bs-light-border-subtle);--bs-alert-link-color:var(--bs-light-text-emphasis)}.alert-dark{--bs-alert-color:var(--bs-dark-text-emphasis);--bs-alert-bg:var(--bs-dark-bg-subtle);--bs-alert-border-color:var(--bs-dark-border-subtle);--bs-alert-link-color:var(--bs-dark-text-emphasis)}@keyframes progress-bar-stripes{0%{background-position-x:1rem}}.progress,.progress-stacked{--bs-progress-height:1rem;--bs-progress-font-size:0.75rem;--bs-progress-bg:var(--bs-secondary-bg);--bs-progress-border-radius:var(--bs-border-radius);--bs-progress-box-shadow:var(--bs-box-shadow-inset);--bs-progress-bar-color:#fff;--bs-progress-bar-bg:#0d6efd;--bs-progress-bar-transition:width 0.6s ease;display:flex;height:var(--bs-progress-height);overflow:hidden;font-size:var(--bs-progress-font-size);background-color:var(--bs-progress-bg);border-radius:var(--bs-progress-border-radius)}.progress-bar{display:flex;flex-direction:column;justify-content:center;overflow:hidden;color:var(--bs-progress-bar-color);text-align:center;white-space:nowrap;background-color:var(--bs-progress-bar-bg);transition:var(--bs-progress-bar-transition)}@media (prefers-reduced-motion:reduce){.progress-bar{transition:none}}.progress-bar-striped{background-image:linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-size:var(--bs-progress-height) var(--bs-progress-height)}.progress-stacked>.progress{overflow:visible}.progress-stacked>.progress>.progress-bar{width:100%}.progress-bar-animated{animation:1s linear infinite progress-bar-stripes}@media (prefers-reduced-motion:reduce){.progress-bar-animated{animation:none}}.list-group{--bs-list-group-color:var(--bs-body-color);--bs-list-group-bg:var(--bs-body-bg);--bs-list-group-border-color:var(--bs-border-color);--bs-list-group-border-width:var(--bs-border-width);--bs-list-group-border-radius:var(--bs-border-radius);--bs-list-group-item-padding-x:1rem;--bs-list-group-item-padding-y:0.5rem;--bs-list-group-action-color:var(--bs-secondary-color);--bs-list-group-action-hover-color:var(--bs-emphasis-color);--bs-list-group-action-hover-bg:var(--bs-tertiary-bg);--bs-list-group-action-active-color:var(--bs-body-color);--bs-list-group-action-active-bg:var(--bs-secondary-bg);--bs-list-group-disabled-color:var(--bs-secondary-color);--bs-list-group-disabled-bg:var(--bs-body-bg);--bs-list-group-active-color:#fff;--bs-list-group-active-bg:#0d6efd;--bs-list-group-active-border-color:#0d6efd;display:flex;flex-direction:column;padding-left:0;margin-bottom:0;border-radius:var(--bs-list-group-border-radius)}.list-group-numbered{list-style-type:none;counter-reset:section}.list-group-numbered>.list-group-item::before{content:counters(section, \".\") \". \";counter-increment:section}.list-group-item-action{width:100%;color:var(--bs-list-group-action-color);text-align:inherit}.list-group-item-action:focus,.list-group-item-action:hover{z-index:1;color:var(--bs-list-group-action-hover-color);text-decoration:none;background-color:var(--bs-list-group-action-hover-bg)}.list-group-item-action:active{color:var(--bs-list-group-action-active-color);background-color:var(--bs-list-group-action-active-bg)}.list-group-item{position:relative;display:block;padding:var(--bs-list-group-item-padding-y) var(--bs-list-group-item-padding-x);color:var(--bs-list-group-color);text-decoration:none;background-color:var(--bs-list-group-bg);border:var(--bs-list-group-border-width) solid var(--bs-list-group-border-color)}.list-group-item:first-child{border-top-left-radius:inherit;border-top-right-radius:inherit}.list-group-item:last-child{border-bottom-right-radius:inherit;border-bottom-left-radius:inherit}.list-group-item.disabled,.list-group-item:disabled{color:var(--bs-list-group-disabled-color);pointer-events:none;background-color:var(--bs-list-group-disabled-bg)}.list-group-item.active{z-index:2;color:var(--bs-list-group-active-color);background-color:var(--bs-list-group-active-bg);border-color:var(--bs-list-group-active-border-color)}.list-group-item+.list-group-item{border-top-width:0}.list-group-item+.list-group-item.active{margin-top:calc(-1 * var(--bs-list-group-border-width));border-top-width:var(--bs-list-group-border-width)}.list-group-horizontal{flex-direction:row}.list-group-horizontal>.list-group-item:first-child:not(:last-child){border-bottom-left-radius:var(--bs-list-group-border-radius);border-top-right-radius:0}.list-group-horizontal>.list-group-item:last-child:not(:first-child){border-top-right-radius:var(--bs-list-group-border-radius);border-bottom-left-radius:0}.list-group-horizontal>.list-group-item.active{margin-top:0}.list-group-horizontal>.list-group-item+.list-group-item{border-top-width:var(--bs-list-group-border-width);border-left-width:0}.list-group-horizontal>.list-group-item+.list-group-item.active{margin-left:calc(-1 * var(--bs-list-group-border-width));border-left-width:var(--bs-list-group-border-width)}@media (min-width:576px){.list-group-horizontal-sm{flex-direction:row}.list-group-horizontal-sm>.list-group-item:first-child:not(:last-child){border-bottom-left-radius:var(--bs-list-group-border-radius);border-top-right-radius:0}.list-group-horizontal-sm>.list-group-item:last-child:not(:first-child){border-top-right-radius:var(--bs-list-group-border-radius);border-bottom-left-radius:0}.list-group-horizontal-sm>.list-group-item.active{margin-top:0}.list-group-horizontal-sm>.list-group-item+.list-group-item{border-top-width:var(--bs-list-group-border-width);border-left-width:0}.list-group-horizontal-sm>.list-group-item+.list-group-item.active{margin-left:calc(-1 * var(--bs-list-group-border-width));border-left-width:var(--bs-list-group-border-width)}}@media (min-width:768px){.list-group-horizontal-md{flex-direction:row}.list-group-horizontal-md>.list-group-item:first-child:not(:last-child){border-bottom-left-radius:var(--bs-list-group-border-radius);border-top-right-radius:0}.list-group-horizontal-md>.list-group-item:last-child:not(:first-child){border-top-right-radius:var(--bs-list-group-border-radius);border-bottom-left-radius:0}.list-group-horizontal-md>.list-group-item.active{margin-top:0}.list-group-horizontal-md>.list-group-item+.list-group-item{border-top-width:var(--bs-list-group-border-width);border-left-width:0}.list-group-horizontal-md>.list-group-item+.list-group-item.active{margin-left:calc(-1 * var(--bs-list-group-border-width));border-left-width:var(--bs-list-group-border-width)}}@media (min-width:992px){.list-group-horizontal-lg{flex-direction:row}.list-group-horizontal-lg>.list-group-item:first-child:not(:last-child){border-bottom-left-radius:var(--bs-list-group-border-radius);border-top-right-radius:0}.list-group-horizontal-lg>.list-group-item:last-child:not(:first-child){border-top-right-radius:var(--bs-list-group-border-radius);border-bottom-left-radius:0}.list-group-horizontal-lg>.list-group-item.active{margin-top:0}.list-group-horizontal-lg>.list-group-item+.list-group-item{border-top-width:var(--bs-list-group-border-width);border-left-width:0}.list-group-horizontal-lg>.list-group-item+.list-group-item.active{margin-left:calc(-1 * var(--bs-list-group-border-width));border-left-width:var(--bs-list-group-border-width)}}@media (min-width:1200px){.list-group-horizontal-xl{flex-direction:row}.list-group-horizontal-xl>.list-group-item:first-child:not(:last-child){border-bottom-left-radius:var(--bs-list-group-border-radius);border-top-right-radius:0}.list-group-horizontal-xl>.list-group-item:last-child:not(:first-child){border-top-right-radius:var(--bs-list-group-border-radius);border-bottom-left-radius:0}.list-group-horizontal-xl>.list-group-item.active{margin-top:0}.list-group-horizontal-xl>.list-group-item+.list-group-item{border-top-width:var(--bs-list-group-border-width);border-left-width:0}.list-group-horizontal-xl>.list-group-item+.list-group-item.active{margin-left:calc(-1 * var(--bs-list-group-border-width));border-left-width:var(--bs-list-group-border-width)}}@media (min-width:1400px){.list-group-horizontal-xxl{flex-direction:row}.list-group-horizontal-xxl>.list-group-item:first-child:not(:last-child){border-bottom-left-radius:var(--bs-list-group-border-radius);border-top-right-radius:0}.list-group-horizontal-xxl>.list-group-item:last-child:not(:first-child){border-top-right-radius:var(--bs-list-group-border-radius);border-bottom-left-radius:0}.list-group-horizontal-xxl>.list-group-item.active{margin-top:0}.list-group-horizontal-xxl>.list-group-item+.list-group-item{border-top-width:var(--bs-list-group-border-width);border-left-width:0}.list-group-horizontal-xxl>.list-group-item+.list-group-item.active{margin-left:calc(-1 * var(--bs-list-group-border-width));border-left-width:var(--bs-list-group-border-width)}}.list-group-flush{border-radius:0}.list-group-flush>.list-group-item{border-width:0 0 var(--bs-list-group-border-width)}.list-group-flush>.list-group-item:last-child{border-bottom-width:0}.list-group-item-primary{--bs-list-group-color:var(--bs-primary-text-emphasis);--bs-list-group-bg:var(--bs-primary-bg-subtle);--bs-list-group-border-color:var(--bs-primary-border-subtle);--bs-list-group-action-hover-color:var(--bs-emphasis-color);--bs-list-group-action-hover-bg:var(--bs-primary-border-subtle);--bs-list-group-action-active-color:var(--bs-emphasis-color);--bs-list-group-action-active-bg:var(--bs-primary-border-subtle);--bs-list-group-active-color:var(--bs-primary-bg-subtle);--bs-list-group-active-bg:var(--bs-primary-text-emphasis);--bs-list-group-active-border-color:var(--bs-primary-text-emphasis)}.list-group-item-secondary{--bs-list-group-color:var(--bs-secondary-text-emphasis);--bs-list-group-bg:var(--bs-secondary-bg-subtle);--bs-list-group-border-color:var(--bs-secondary-border-subtle);--bs-list-group-action-hover-color:var(--bs-emphasis-color);--bs-list-group-action-hover-bg:var(--bs-secondary-border-subtle);--bs-list-group-action-active-color:var(--bs-emphasis-color);--bs-list-group-action-active-bg:var(--bs-secondary-border-subtle);--bs-list-group-active-color:var(--bs-secondary-bg-subtle);--bs-list-group-active-bg:var(--bs-secondary-text-emphasis);--bs-list-group-active-border-color:var(--bs-secondary-text-emphasis)}.list-group-item-success{--bs-list-group-color:var(--bs-success-text-emphasis);--bs-list-group-bg:var(--bs-success-bg-subtle);--bs-list-group-border-color:var(--bs-success-border-subtle);--bs-list-group-action-hover-color:var(--bs-emphasis-color);--bs-list-group-action-hover-bg:var(--bs-success-border-subtle);--bs-list-group-action-active-color:var(--bs-emphasis-color);--bs-list-group-action-active-bg:var(--bs-success-border-subtle);--bs-list-group-active-color:var(--bs-success-bg-subtle);--bs-list-group-active-bg:var(--bs-success-text-emphasis);--bs-list-group-active-border-color:var(--bs-success-text-emphasis)}.list-group-item-info{--bs-list-group-color:var(--bs-info-text-emphasis);--bs-list-group-bg:var(--bs-info-bg-subtle);--bs-list-group-border-color:var(--bs-info-border-subtle);--bs-list-group-action-hover-color:var(--bs-emphasis-color);--bs-list-group-action-hover-bg:var(--bs-info-border-subtle);--bs-list-group-action-active-color:var(--bs-emphasis-color);--bs-list-group-action-active-bg:var(--bs-info-border-subtle);--bs-list-group-active-color:var(--bs-info-bg-subtle);--bs-list-group-active-bg:var(--bs-info-text-emphasis);--bs-list-group-active-border-color:var(--bs-info-text-emphasis)}.list-group-item-warning{--bs-list-group-color:var(--bs-warning-text-emphasis);--bs-list-group-bg:var(--bs-warning-bg-subtle);--bs-list-group-border-color:var(--bs-warning-border-subtle);--bs-list-group-action-hover-color:var(--bs-emphasis-color);--bs-list-group-action-hover-bg:var(--bs-warning-border-subtle);--bs-list-group-action-active-color:var(--bs-emphasis-color);--bs-list-group-action-active-bg:var(--bs-warning-border-subtle);--bs-list-group-active-color:var(--bs-warning-bg-subtle);--bs-list-group-active-bg:var(--bs-warning-text-emphasis);--bs-list-group-active-border-color:var(--bs-warning-text-emphasis)}.list-group-item-danger{--bs-list-group-color:var(--bs-danger-text-emphasis);--bs-list-group-bg:var(--bs-danger-bg-subtle);--bs-list-group-border-color:var(--bs-danger-border-subtle);--bs-list-group-action-hover-color:var(--bs-emphasis-color);--bs-list-group-action-hover-bg:var(--bs-danger-border-subtle);--bs-list-group-action-active-color:var(--bs-emphasis-color);--bs-list-group-action-active-bg:var(--bs-danger-border-subtle);--bs-list-group-active-color:var(--bs-danger-bg-subtle);--bs-list-group-active-bg:var(--bs-danger-text-emphasis);--bs-list-group-active-border-color:var(--bs-danger-text-emphasis)}.list-group-item-light{--bs-list-group-color:var(--bs-light-text-emphasis);--bs-list-group-bg:var(--bs-light-bg-subtle);--bs-list-group-border-color:var(--bs-light-border-subtle);--bs-list-group-action-hover-color:var(--bs-emphasis-color);--bs-list-group-action-hover-bg:var(--bs-light-border-subtle);--bs-list-group-action-active-color:var(--bs-emphasis-color);--bs-list-group-action-active-bg:var(--bs-light-border-subtle);--bs-list-group-active-color:var(--bs-light-bg-subtle);--bs-list-group-active-bg:var(--bs-light-text-emphasis);--bs-list-group-active-border-color:var(--bs-light-text-emphasis)}.list-group-item-dark{--bs-list-group-color:var(--bs-dark-text-emphasis);--bs-list-group-bg:var(--bs-dark-bg-subtle);--bs-list-group-border-color:var(--bs-dark-border-subtle);--bs-list-group-action-hover-color:var(--bs-emphasis-color);--bs-list-group-action-hover-bg:var(--bs-dark-border-subtle);--bs-list-group-action-active-color:var(--bs-emphasis-color);--bs-list-group-action-active-bg:var(--bs-dark-border-subtle);--bs-list-group-active-color:var(--bs-dark-bg-subtle);--bs-list-group-active-bg:var(--bs-dark-text-emphasis);--bs-list-group-active-border-color:var(--bs-dark-text-emphasis)}.btn-close{--bs-btn-close-color:#000;--bs-btn-close-bg:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%23000'%3e%3cpath d='M.293.293a1 1 0 0 1 1.414 0L8 6.586 14.293.293a1 1 0 1 1 1.414 1.414L9.414 8l6.293 6.293a1 1 0 0 1-1.414 1.414L8 9.414l-6.293 6.293a1 1 0 0 1-1.414-1.414L6.586 8 .293 1.707a1 1 0 0 1 0-1.414z'/%3e%3c/svg%3e\");--bs-btn-close-opacity:0.5;--bs-btn-close-hover-opacity:0.75;--bs-btn-close-focus-shadow:0 0 0 0.25rem rgba(13, 110, 253, 0.25);--bs-btn-close-focus-opacity:1;--bs-btn-close-disabled-opacity:0.25;--bs-btn-close-white-filter:invert(1) grayscale(100%) brightness(200%);box-sizing:content-box;width:1em;height:1em;padding:.25em .25em;color:var(--bs-btn-close-color);background:transparent var(--bs-btn-close-bg) center/1em auto no-repeat;border:0;border-radius:.375rem;opacity:var(--bs-btn-close-opacity)}.btn-close:hover{color:var(--bs-btn-close-color);text-decoration:none;opacity:var(--bs-btn-close-hover-opacity)}.btn-close:focus{outline:0;box-shadow:var(--bs-btn-close-focus-shadow);opacity:var(--bs-btn-close-focus-opacity)}.btn-close.disabled,.btn-close:disabled{pointer-events:none;-webkit-user-select:none;-moz-user-select:none;user-select:none;opacity:var(--bs-btn-close-disabled-opacity)}.btn-close-white{filter:var(--bs-btn-close-white-filter)}[data-bs-theme=dark] .btn-close{filter:var(--bs-btn-close-white-filter)}.toast{--bs-toast-zindex:1090;--bs-toast-padding-x:0.75rem;--bs-toast-padding-y:0.5rem;--bs-toast-spacing:1.5rem;--bs-toast-max-width:350px;--bs-toast-font-size:0.875rem;--bs-toast-color: ;--bs-toast-bg:rgba(var(--bs-body-bg-rgb), 0.85);--bs-toast-border-width:var(--bs-border-width);--bs-toast-border-color:var(--bs-border-color-translucent);--bs-toast-border-radius:var(--bs-border-radius);--bs-toast-box-shadow:var(--bs-box-shadow);--bs-toast-header-color:var(--bs-secondary-color);--bs-toast-header-bg:rgba(var(--bs-body-bg-rgb), 0.85);--bs-toast-header-border-color:var(--bs-border-color-translucent);width:var(--bs-toast-max-width);max-width:100%;font-size:var(--bs-toast-font-size);color:var(--bs-toast-color);pointer-events:auto;background-color:var(--bs-toast-bg);background-clip:padding-box;border:var(--bs-toast-border-width) solid var(--bs-toast-border-color);box-shadow:var(--bs-toast-box-shadow);border-radius:var(--bs-toast-border-radius)}.toast.showing{opacity:0}.toast:not(.show){display:none}.toast-container{--bs-toast-zindex:1090;position:absolute;z-index:var(--bs-toast-zindex);width:-webkit-max-content;width:-moz-max-content;width:max-content;max-width:100%;pointer-events:none}.toast-container>:not(:last-child){margin-bottom:var(--bs-toast-spacing)}.toast-header{display:flex;align-items:center;padding:var(--bs-toast-padding-y) var(--bs-toast-padding-x);color:var(--bs-toast-header-color);background-color:var(--bs-toast-header-bg);background-clip:padding-box;border-bottom:var(--bs-toast-border-width) solid var(--bs-toast-header-border-color);border-top-left-radius:calc(var(--bs-toast-border-radius) - var(--bs-toast-border-width));border-top-right-radius:calc(var(--bs-toast-border-radius) - var(--bs-toast-border-width))}.toast-header .btn-close{margin-right:calc(-.5 * var(--bs-toast-padding-x));margin-left:var(--bs-toast-padding-x)}.toast-body{padding:var(--bs-toast-padding-x);word-wrap:break-word}.modal{--bs-modal-zindex:1055;--bs-modal-width:500px;--bs-modal-padding:1rem;--bs-modal-margin:0.5rem;--bs-modal-color: ;--bs-modal-bg:var(--bs-body-bg);--bs-modal-border-color:var(--bs-border-color-translucent);--bs-modal-border-width:var(--bs-border-width);--bs-modal-border-radius:var(--bs-border-radius-lg);--bs-modal-box-shadow:0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);--bs-modal-inner-border-radius:calc(var(--bs-border-radius-lg) - (var(--bs-border-width)));--bs-modal-header-padding-x:1rem;--bs-modal-header-padding-y:1rem;--bs-modal-header-padding:1rem 1rem;--bs-modal-header-border-color:var(--bs-border-color);--bs-modal-header-border-width:var(--bs-border-width);--bs-modal-title-line-height:1.5;--bs-modal-footer-gap:0.5rem;--bs-modal-footer-bg: ;--bs-modal-footer-border-color:var(--bs-border-color);--bs-modal-footer-border-width:var(--bs-border-width);position:fixed;top:0;left:0;z-index:var(--bs-modal-zindex);display:none;width:100%;height:100%;overflow-x:hidden;overflow-y:auto;outline:0}.modal-dialog{position:relative;width:auto;margin:var(--bs-modal-margin);pointer-events:none}.modal.fade .modal-dialog{transition:transform .3s ease-out;transform:translate(0,-50px)}@media (prefers-reduced-motion:reduce){.modal.fade .modal-dialog{transition:none}}.modal.show .modal-dialog{transform:none}.modal.modal-static .modal-dialog{transform:scale(1.02)}.modal-dialog-scrollable{height:calc(100% - var(--bs-modal-margin) * 2)}.modal-dialog-scrollable .modal-content{max-height:100%;overflow:hidden}.modal-dialog-scrollable .modal-body{overflow-y:auto}.modal-dialog-centered{display:flex;align-items:center;min-height:calc(100% - var(--bs-modal-margin) * 2)}.modal-content{position:relative;display:flex;flex-direction:column;width:100%;color:var(--bs-modal-color);pointer-events:auto;background-color:var(--bs-modal-bg);background-clip:padding-box;border:var(--bs-modal-border-width) solid var(--bs-modal-border-color);border-radius:var(--bs-modal-border-radius);outline:0}.modal-backdrop{--bs-backdrop-zindex:1050;--bs-backdrop-bg:#000;--bs-backdrop-opacity:0.5;position:fixed;top:0;left:0;z-index:var(--bs-backdrop-zindex);width:100vw;height:100vh;background-color:var(--bs-backdrop-bg)}.modal-backdrop.fade{opacity:0}.modal-backdrop.show{opacity:var(--bs-backdrop-opacity)}.modal-header{display:flex;flex-shrink:0;align-items:center;justify-content:space-between;padding:var(--bs-modal-header-padding);border-bottom:var(--bs-modal-header-border-width) solid var(--bs-modal-header-border-color);border-top-left-radius:var(--bs-modal-inner-border-radius);border-top-right-radius:var(--bs-modal-inner-border-radius)}.modal-header .btn-close{padding:calc(var(--bs-modal-header-padding-y) * .5) calc(var(--bs-modal-header-padding-x) * .5);margin:calc(-.5 * var(--bs-modal-header-padding-y)) calc(-.5 * var(--bs-modal-header-padding-x)) calc(-.5 * var(--bs-modal-header-padding-y)) auto}.modal-title{margin-bottom:0;line-height:var(--bs-modal-title-line-height)}.modal-body{position:relative;flex:1 1 auto;padding:var(--bs-modal-padding)}.modal-footer{display:flex;flex-shrink:0;flex-wrap:wrap;align-items:center;justify-content:flex-end;padding:calc(var(--bs-modal-padding) - var(--bs-modal-footer-gap) * .5);background-color:var(--bs-modal-footer-bg);border-top:var(--bs-modal-footer-border-width) solid var(--bs-modal-footer-border-color);border-bottom-right-radius:var(--bs-modal-inner-border-radius);border-bottom-left-radius:var(--bs-modal-inner-border-radius)}.modal-footer>*{margin:calc(var(--bs-modal-footer-gap) * .5)}@media (min-width:576px){.modal{--bs-modal-margin:1.75rem;--bs-modal-box-shadow:0 0.5rem 1rem rgba(0, 0, 0, 0.15)}.modal-dialog{max-width:var(--bs-modal-width);margin-right:auto;margin-left:auto}.modal-sm{--bs-modal-width:300px}}@media (min-width:992px){.modal-lg,.modal-xl{--bs-modal-width:800px}}@media (min-width:1200px){.modal-xl{--bs-modal-width:1140px}}.modal-fullscreen{width:100vw;max-width:none;height:100%;margin:0}.modal-fullscreen .modal-content{height:100%;border:0;border-radius:0}.modal-fullscreen .modal-footer,.modal-fullscreen .modal-header{border-radius:0}.modal-fullscreen .modal-body{overflow-y:auto}@media (max-width:575.98px){.modal-fullscreen-sm-down{width:100vw;max-width:none;height:100%;margin:0}.modal-fullscreen-sm-down .modal-content{height:100%;border:0;border-radius:0}.modal-fullscreen-sm-down .modal-footer,.modal-fullscreen-sm-down .modal-header{border-radius:0}.modal-fullscreen-sm-down .modal-body{overflow-y:auto}}@media (max-width:767.98px){.modal-fullscreen-md-down{width:100vw;max-width:none;height:100%;margin:0}.modal-fullscreen-md-down .modal-content{height:100%;border:0;border-radius:0}.modal-fullscreen-md-down .modal-footer,.modal-fullscreen-md-down .modal-header{border-radius:0}.modal-fullscreen-md-down .modal-body{overflow-y:auto}}@media (max-width:991.98px){.modal-fullscreen-lg-down{width:100vw;max-width:none;height:100%;margin:0}.modal-fullscreen-lg-down .modal-content{height:100%;border:0;border-radius:0}.modal-fullscreen-lg-down .modal-footer,.modal-fullscreen-lg-down .modal-header{border-radius:0}.modal-fullscreen-lg-down .modal-body{overflow-y:auto}}@media (max-width:1199.98px){.modal-fullscreen-xl-down{width:100vw;max-width:none;height:100%;margin:0}.modal-fullscreen-xl-down .modal-content{height:100%;border:0;border-radius:0}.modal-fullscreen-xl-down .modal-footer,.modal-fullscreen-xl-down .modal-header{border-radius:0}.modal-fullscreen-xl-down .modal-body{overflow-y:auto}}@media (max-width:1399.98px){.modal-fullscreen-xxl-down{width:100vw;max-width:none;height:100%;margin:0}.modal-fullscreen-xxl-down .modal-content{height:100%;border:0;border-radius:0}.modal-fullscreen-xxl-down .modal-footer,.modal-fullscreen-xxl-down .modal-header{border-radius:0}.modal-fullscreen-xxl-down .modal-body{overflow-y:auto}}.tooltip{--bs-tooltip-zindex:1080;--bs-tooltip-max-width:200px;--bs-tooltip-padding-x:0.5rem;--bs-tooltip-padding-y:0.25rem;--bs-tooltip-margin: ;--bs-tooltip-font-size:0.875rem;--bs-tooltip-color:var(--bs-body-bg);--bs-tooltip-bg:var(--bs-emphasis-color);--bs-tooltip-border-radius:var(--bs-border-radius);--bs-tooltip-opacity:0.9;--bs-tooltip-arrow-width:0.8rem;--bs-tooltip-arrow-height:0.4rem;z-index:var(--bs-tooltip-zindex);display:block;margin:var(--bs-tooltip-margin);font-family:var(--bs-font-sans-serif);font-style:normal;font-weight:400;line-height:1.5;text-align:left;text-align:start;text-decoration:none;text-shadow:none;text-transform:none;letter-spacing:normal;word-break:normal;white-space:normal;word-spacing:normal;line-break:auto;font-size:var(--bs-tooltip-font-size);word-wrap:break-word;opacity:0}.tooltip.show{opacity:var(--bs-tooltip-opacity)}.tooltip .tooltip-arrow{display:block;width:var(--bs-tooltip-arrow-width);height:var(--bs-tooltip-arrow-height)}.tooltip .tooltip-arrow::before{position:absolute;content:\"\";border-color:transparent;border-style:solid}.bs-tooltip-auto[data-popper-placement^=top] .tooltip-arrow,.bs-tooltip-top .tooltip-arrow{bottom:calc(-1 * var(--bs-tooltip-arrow-height))}.bs-tooltip-auto[data-popper-placement^=top] .tooltip-arrow::before,.bs-tooltip-top .tooltip-arrow::before{top:-1px;border-width:var(--bs-tooltip-arrow-height) calc(var(--bs-tooltip-arrow-width) * .5) 0;border-top-color:var(--bs-tooltip-bg)}.bs-tooltip-auto[data-popper-placement^=right] .tooltip-arrow,.bs-tooltip-end .tooltip-arrow{left:calc(-1 * var(--bs-tooltip-arrow-height));width:var(--bs-tooltip-arrow-height);height:var(--bs-tooltip-arrow-width)}.bs-tooltip-auto[data-popper-placement^=right] .tooltip-arrow::before,.bs-tooltip-end .tooltip-arrow::before{right:-1px;border-width:calc(var(--bs-tooltip-arrow-width) * .5) var(--bs-tooltip-arrow-height) calc(var(--bs-tooltip-arrow-width) * .5) 0;border-right-color:var(--bs-tooltip-bg)}.bs-tooltip-auto[data-popper-placement^=bottom] .tooltip-arrow,.bs-tooltip-bottom .tooltip-arrow{top:calc(-1 * var(--bs-tooltip-arrow-height))}.bs-tooltip-auto[data-popper-placement^=bottom] .tooltip-arrow::before,.bs-tooltip-bottom .tooltip-arrow::before{bottom:-1px;border-width:0 calc(var(--bs-tooltip-arrow-width) * .5) var(--bs-tooltip-arrow-height);border-bottom-color:var(--bs-tooltip-bg)}.bs-tooltip-auto[data-popper-placement^=left] .tooltip-arrow,.bs-tooltip-start .tooltip-arrow{right:calc(-1 * var(--bs-tooltip-arrow-height));width:var(--bs-tooltip-arrow-height);height:var(--bs-tooltip-arrow-width)}.bs-tooltip-auto[data-popper-placement^=left] .tooltip-arrow::before,.bs-tooltip-start .tooltip-arrow::before{left:-1px;border-width:calc(var(--bs-tooltip-arrow-width) * .5) 0 calc(var(--bs-tooltip-arrow-width) * .5) var(--bs-tooltip-arrow-height);border-left-color:var(--bs-tooltip-bg)}.tooltip-inner{max-width:var(--bs-tooltip-max-width);padding:var(--bs-tooltip-padding-y) var(--bs-tooltip-padding-x);color:var(--bs-tooltip-color);text-align:center;background-color:var(--bs-tooltip-bg);border-radius:var(--bs-tooltip-border-radius)}.popover{--bs-popover-zindex:1070;--bs-popover-max-width:276px;--bs-popover-font-size:0.875rem;--bs-popover-bg:var(--bs-body-bg);--bs-popover-border-width:var(--bs-border-width);--bs-popover-border-color:var(--bs-border-color-translucent);--bs-popover-border-radius:var(--bs-border-radius-lg);--bs-popover-inner-border-radius:calc(var(--bs-border-radius-lg) - var(--bs-border-width));--bs-popover-box-shadow:0 0.5rem 1rem rgba(0, 0, 0, 0.15);--bs-popover-header-padding-x:1rem;--bs-popover-header-padding-y:0.5rem;--bs-popover-header-font-size:1rem;--bs-popover-header-color:inherit;--bs-popover-header-bg:var(--bs-secondary-bg);--bs-popover-body-padding-x:1rem;--bs-popover-body-padding-y:1rem;--bs-popover-body-color:var(--bs-body-color);--bs-popover-arrow-width:1rem;--bs-popover-arrow-height:0.5rem;--bs-popover-arrow-border:var(--bs-popover-border-color);z-index:var(--bs-popover-zindex);display:block;max-width:var(--bs-popover-max-width);font-family:var(--bs-font-sans-serif);font-style:normal;font-weight:400;line-height:1.5;text-align:left;text-align:start;text-decoration:none;text-shadow:none;text-transform:none;letter-spacing:normal;word-break:normal;white-space:normal;word-spacing:normal;line-break:auto;font-size:var(--bs-popover-font-size);word-wrap:break-word;background-color:var(--bs-popover-bg);background-clip:padding-box;border:var(--bs-popover-border-width) solid var(--bs-popover-border-color);border-radius:var(--bs-popover-border-radius)}.popover .popover-arrow{display:block;width:var(--bs-popover-arrow-width);height:var(--bs-popover-arrow-height)}.popover .popover-arrow::after,.popover .popover-arrow::before{position:absolute;display:block;content:\"\";border-color:transparent;border-style:solid;border-width:0}.bs-popover-auto[data-popper-placement^=top]>.popover-arrow,.bs-popover-top>.popover-arrow{bottom:calc(-1 * (var(--bs-popover-arrow-height)) - var(--bs-popover-border-width))}.bs-popover-auto[data-popper-placement^=top]>.popover-arrow::after,.bs-popover-auto[data-popper-placement^=top]>.popover-arrow::before,.bs-popover-top>.popover-arrow::after,.bs-popover-top>.popover-arrow::before{border-width:var(--bs-popover-arrow-height) calc(var(--bs-popover-arrow-width) * .5) 0}.bs-popover-auto[data-popper-placement^=top]>.popover-arrow::before,.bs-popover-top>.popover-arrow::before{bottom:0;border-top-color:var(--bs-popover-arrow-border)}.bs-popover-auto[data-popper-placement^=top]>.popover-arrow::after,.bs-popover-top>.popover-arrow::after{bottom:var(--bs-popover-border-width);border-top-color:var(--bs-popover-bg)}.bs-popover-auto[data-popper-placement^=right]>.popover-arrow,.bs-popover-end>.popover-arrow{left:calc(-1 * (var(--bs-popover-arrow-height)) - var(--bs-popover-border-width));width:var(--bs-popover-arrow-height);height:var(--bs-popover-arrow-width)}.bs-popover-auto[data-popper-placement^=right]>.popover-arrow::after,.bs-popover-auto[data-popper-placement^=right]>.popover-arrow::before,.bs-popover-end>.popover-arrow::after,.bs-popover-end>.popover-arrow::before{border-width:calc(var(--bs-popover-arrow-width) * .5) var(--bs-popover-arrow-height) calc(var(--bs-popover-arrow-width) * .5) 0}.bs-popover-auto[data-popper-placement^=right]>.popover-arrow::before,.bs-popover-end>.popover-arrow::before{left:0;border-right-color:var(--bs-popover-arrow-border)}.bs-popover-auto[data-popper-placement^=right]>.popover-arrow::after,.bs-popover-end>.popover-arrow::after{left:var(--bs-popover-border-width);border-right-color:var(--bs-popover-bg)}.bs-popover-auto[data-popper-placement^=bottom]>.popover-arrow,.bs-popover-bottom>.popover-arrow{top:calc(-1 * (var(--bs-popover-arrow-height)) - var(--bs-popover-border-width))}.bs-popover-auto[data-popper-placement^=bottom]>.popover-arrow::after,.bs-popover-auto[data-popper-placement^=bottom]>.popover-arrow::before,.bs-popover-bottom>.popover-arrow::after,.bs-popover-bottom>.popover-arrow::before{border-width:0 calc(var(--bs-popover-arrow-width) * .5) var(--bs-popover-arrow-height)}.bs-popover-auto[data-popper-placement^=bottom]>.popover-arrow::before,.bs-popover-bottom>.popover-arrow::before{top:0;border-bottom-color:var(--bs-popover-arrow-border)}.bs-popover-auto[data-popper-placement^=bottom]>.popover-arrow::after,.bs-popover-bottom>.popover-arrow::after{top:var(--bs-popover-border-width);border-bottom-color:var(--bs-popover-bg)}.bs-popover-auto[data-popper-placement^=bottom] .popover-header::before,.bs-popover-bottom .popover-header::before{position:absolute;top:0;left:50%;display:block;width:var(--bs-popover-arrow-width);margin-left:calc(-.5 * var(--bs-popover-arrow-width));content:\"\";border-bottom:var(--bs-popover-border-width) solid var(--bs-popover-header-bg)}.bs-popover-auto[data-popper-placement^=left]>.popover-arrow,.bs-popover-start>.popover-arrow{right:calc(-1 * (var(--bs-popover-arrow-height)) - var(--bs-popover-border-width));width:var(--bs-popover-arrow-height);height:var(--bs-popover-arrow-width)}.bs-popover-auto[data-popper-placement^=left]>.popover-arrow::after,.bs-popover-auto[data-popper-placement^=left]>.popover-arrow::before,.bs-popover-start>.popover-arrow::after,.bs-popover-start>.popover-arrow::before{border-width:calc(var(--bs-popover-arrow-width) * .5) 0 calc(var(--bs-popover-arrow-width) * .5) var(--bs-popover-arrow-height)}.bs-popover-auto[data-popper-placement^=left]>.popover-arrow::before,.bs-popover-start>.popover-arrow::before{right:0;border-left-color:var(--bs-popover-arrow-border)}.bs-popover-auto[data-popper-placement^=left]>.popover-arrow::after,.bs-popover-start>.popover-arrow::after{right:var(--bs-popover-border-width);border-left-color:var(--bs-popover-bg)}.popover-header{padding:var(--bs-popover-header-padding-y) var(--bs-popover-header-padding-x);margin-bottom:0;font-size:var(--bs-popover-header-font-size);color:var(--bs-popover-header-color);background-color:var(--bs-popover-header-bg);border-bottom:var(--bs-popover-border-width) solid var(--bs-popover-border-color);border-top-left-radius:var(--bs-popover-inner-border-radius);border-top-right-radius:var(--bs-popover-inner-border-radius)}.popover-header:empty{display:none}.popover-body{padding:var(--bs-popover-body-padding-y) var(--bs-popover-body-padding-x);color:var(--bs-popover-body-color)}.carousel{position:relative}.carousel.pointer-event{touch-action:pan-y}.carousel-inner{position:relative;width:100%;overflow:hidden}.carousel-inner::after{display:block;clear:both;content:\"\"}.carousel-item{position:relative;display:none;float:left;width:100%;margin-right:-100%;-webkit-backface-visibility:hidden;backface-visibility:hidden;transition:transform .6s ease-in-out}@media (prefers-reduced-motion:reduce){.carousel-item{transition:none}}.carousel-item-next,.carousel-item-prev,.carousel-item.active{display:block}.active.carousel-item-end,.carousel-item-next:not(.carousel-item-start){transform:translateX(100%)}.active.carousel-item-start,.carousel-item-prev:not(.carousel-item-end){transform:translateX(-100%)}.carousel-fade .carousel-item{opacity:0;transition-property:opacity;transform:none}.carousel-fade .carousel-item-next.carousel-item-start,.carousel-fade .carousel-item-prev.carousel-item-end,.carousel-fade .carousel-item.active{z-index:1;opacity:1}.carousel-fade .active.carousel-item-end,.carousel-fade .active.carousel-item-start{z-index:0;opacity:0;transition:opacity 0s .6s}@media (prefers-reduced-motion:reduce){.carousel-fade .active.carousel-item-end,.carousel-fade .active.carousel-item-start{transition:none}}.carousel-control-next,.carousel-control-prev{position:absolute;top:0;bottom:0;z-index:1;display:flex;align-items:center;justify-content:center;width:15%;padding:0;color:#fff;text-align:center;background:0 0;border:0;opacity:.5;transition:opacity .15s ease}@media (prefers-reduced-motion:reduce){.carousel-control-next,.carousel-control-prev{transition:none}}.carousel-control-next:focus,.carousel-control-next:hover,.carousel-control-prev:focus,.carousel-control-prev:hover{color:#fff;text-decoration:none;outline:0;opacity:.9}.carousel-control-prev{left:0}.carousel-control-next{right:0}.carousel-control-next-icon,.carousel-control-prev-icon{display:inline-block;width:2rem;height:2rem;background-repeat:no-repeat;background-position:50%;background-size:100% 100%}.carousel-control-prev-icon{background-image:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%23fff'%3e%3cpath d='M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z'/%3e%3c/svg%3e\")}.carousel-control-next-icon{background-image:url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%23fff'%3e%3cpath d='M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z'/%3e%3c/svg%3e\")}.carousel-indicators{position:absolute;right:0;bottom:0;left:0;z-index:2;display:flex;justify-content:center;padding:0;margin-right:15%;margin-bottom:1rem;margin-left:15%}.carousel-indicators [data-bs-target]{box-sizing:content-box;flex:0 1 auto;width:30px;height:3px;padding:0;margin-right:3px;margin-left:3px;text-indent:-999px;cursor:pointer;background-color:#fff;background-clip:padding-box;border:0;border-top:10px solid transparent;border-bottom:10px solid transparent;opacity:.5;transition:opacity .6s ease}@media (prefers-reduced-motion:reduce){.carousel-indicators [data-bs-target]{transition:none}}.carousel-indicators .active{opacity:1}.carousel-caption{position:absolute;right:15%;bottom:1.25rem;left:15%;padding-top:1.25rem;padding-bottom:1.25rem;color:#fff;text-align:center}.carousel-dark .carousel-control-next-icon,.carousel-dark .carousel-control-prev-icon{filter:invert(1) grayscale(100)}.carousel-dark .carousel-indicators [data-bs-target]{background-color:#000}.carousel-dark .carousel-caption{color:#000}[data-bs-theme=dark] .carousel .carousel-control-next-icon,[data-bs-theme=dark] .carousel .carousel-control-prev-icon,[data-bs-theme=dark].carousel .carousel-control-next-icon,[data-bs-theme=dark].carousel .carousel-control-prev-icon{filter:invert(1) grayscale(100)}[data-bs-theme=dark] .carousel .carousel-indicators [data-bs-target],[data-bs-theme=dark].carousel .carousel-indicators [data-bs-target]{background-color:#000}[data-bs-theme=dark] .carousel .carousel-caption,[data-bs-theme=dark].carousel .carousel-caption{color:#000}.spinner-border,.spinner-grow{display:inline-block;width:var(--bs-spinner-width);height:var(--bs-spinner-height);vertical-align:var(--bs-spinner-vertical-align);border-radius:50%;animation:var(--bs-spinner-animation-speed) linear infinite var(--bs-spinner-animation-name)}@keyframes spinner-border{to{transform:rotate(360deg)}}.spinner-border{--bs-spinner-width:2rem;--bs-spinner-height:2rem;--bs-spinner-vertical-align:-0.125em;--bs-spinner-border-width:0.25em;--bs-spinner-animation-speed:0.75s;--bs-spinner-animation-name:spinner-border;border:var(--bs-spinner-border-width) solid currentcolor;border-right-color:transparent}.spinner-border-sm{--bs-spinner-width:1rem;--bs-spinner-height:1rem;--bs-spinner-border-width:0.2em}@keyframes spinner-grow{0%{transform:scale(0)}50%{opacity:1;transform:none}}.spinner-grow{--bs-spinner-width:2rem;--bs-spinner-height:2rem;--bs-spinner-vertical-align:-0.125em;--bs-spinner-animation-speed:0.75s;--bs-spinner-animation-name:spinner-grow;background-color:currentcolor;opacity:0}.spinner-grow-sm{--bs-spinner-width:1rem;--bs-spinner-height:1rem}@media (prefers-reduced-motion:reduce){.spinner-border,.spinner-grow{--bs-spinner-animation-speed:1.5s}}.offcanvas,.offcanvas-lg,.offcanvas-md,.offcanvas-sm,.offcanvas-xl,.offcanvas-xxl{--bs-offcanvas-zindex:1045;--bs-offcanvas-width:400px;--bs-offcanvas-height:30vh;--bs-offcanvas-padding-x:1rem;--bs-offcanvas-padding-y:1rem;--bs-offcanvas-color:var(--bs-body-color);--bs-offcanvas-bg:var(--bs-body-bg);--bs-offcanvas-border-width:var(--bs-border-width);--bs-offcanvas-border-color:var(--bs-border-color-translucent);--bs-offcanvas-box-shadow:0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);--bs-offcanvas-transition:transform 0.3s ease-in-out;--bs-offcanvas-title-line-height:1.5}@media (max-width:575.98px){.offcanvas-sm{position:fixed;bottom:0;z-index:var(--bs-offcanvas-zindex);display:flex;flex-direction:column;max-width:100%;color:var(--bs-offcanvas-color);visibility:hidden;background-color:var(--bs-offcanvas-bg);background-clip:padding-box;outline:0;transition:var(--bs-offcanvas-transition)}}@media (max-width:575.98px) and (prefers-reduced-motion:reduce){.offcanvas-sm{transition:none}}@media (max-width:575.98px){.offcanvas-sm.offcanvas-start{top:0;left:0;width:var(--bs-offcanvas-width);border-right:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateX(-100%)}.offcanvas-sm.offcanvas-end{top:0;right:0;width:var(--bs-offcanvas-width);border-left:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateX(100%)}.offcanvas-sm.offcanvas-top{top:0;right:0;left:0;height:var(--bs-offcanvas-height);max-height:100%;border-bottom:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateY(-100%)}.offcanvas-sm.offcanvas-bottom{right:0;left:0;height:var(--bs-offcanvas-height);max-height:100%;border-top:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateY(100%)}.offcanvas-sm.show:not(.hiding),.offcanvas-sm.showing{transform:none}.offcanvas-sm.hiding,.offcanvas-sm.show,.offcanvas-sm.showing{visibility:visible}}@media (min-width:576px){.offcanvas-sm{--bs-offcanvas-height:auto;--bs-offcanvas-border-width:0;background-color:transparent!important}.offcanvas-sm .offcanvas-header{display:none}.offcanvas-sm .offcanvas-body{display:flex;flex-grow:0;padding:0;overflow-y:visible;background-color:transparent!important}}@media (max-width:767.98px){.offcanvas-md{position:fixed;bottom:0;z-index:var(--bs-offcanvas-zindex);display:flex;flex-direction:column;max-width:100%;color:var(--bs-offcanvas-color);visibility:hidden;background-color:var(--bs-offcanvas-bg);background-clip:padding-box;outline:0;transition:var(--bs-offcanvas-transition)}}@media (max-width:767.98px) and (prefers-reduced-motion:reduce){.offcanvas-md{transition:none}}@media (max-width:767.98px){.offcanvas-md.offcanvas-start{top:0;left:0;width:var(--bs-offcanvas-width);border-right:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateX(-100%)}.offcanvas-md.offcanvas-end{top:0;right:0;width:var(--bs-offcanvas-width);border-left:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateX(100%)}.offcanvas-md.offcanvas-top{top:0;right:0;left:0;height:var(--bs-offcanvas-height);max-height:100%;border-bottom:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateY(-100%)}.offcanvas-md.offcanvas-bottom{right:0;left:0;height:var(--bs-offcanvas-height);max-height:100%;border-top:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateY(100%)}.offcanvas-md.show:not(.hiding),.offcanvas-md.showing{transform:none}.offcanvas-md.hiding,.offcanvas-md.show,.offcanvas-md.showing{visibility:visible}}@media (min-width:768px){.offcanvas-md{--bs-offcanvas-height:auto;--bs-offcanvas-border-width:0;background-color:transparent!important}.offcanvas-md .offcanvas-header{display:none}.offcanvas-md .offcanvas-body{display:flex;flex-grow:0;padding:0;overflow-y:visible;background-color:transparent!important}}@media (max-width:991.98px){.offcanvas-lg{position:fixed;bottom:0;z-index:var(--bs-offcanvas-zindex);display:flex;flex-direction:column;max-width:100%;color:var(--bs-offcanvas-color);visibility:hidden;background-color:var(--bs-offcanvas-bg);background-clip:padding-box;outline:0;transition:var(--bs-offcanvas-transition)}}@media (max-width:991.98px) and (prefers-reduced-motion:reduce){.offcanvas-lg{transition:none}}@media (max-width:991.98px){.offcanvas-lg.offcanvas-start{top:0;left:0;width:var(--bs-offcanvas-width);border-right:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateX(-100%)}.offcanvas-lg.offcanvas-end{top:0;right:0;width:var(--bs-offcanvas-width);border-left:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateX(100%)}.offcanvas-lg.offcanvas-top{top:0;right:0;left:0;height:var(--bs-offcanvas-height);max-height:100%;border-bottom:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateY(-100%)}.offcanvas-lg.offcanvas-bottom{right:0;left:0;height:var(--bs-offcanvas-height);max-height:100%;border-top:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateY(100%)}.offcanvas-lg.show:not(.hiding),.offcanvas-lg.showing{transform:none}.offcanvas-lg.hiding,.offcanvas-lg.show,.offcanvas-lg.showing{visibility:visible}}@media (min-width:992px){.offcanvas-lg{--bs-offcanvas-height:auto;--bs-offcanvas-border-width:0;background-color:transparent!important}.offcanvas-lg .offcanvas-header{display:none}.offcanvas-lg .offcanvas-body{display:flex;flex-grow:0;padding:0;overflow-y:visible;background-color:transparent!important}}@media (max-width:1199.98px){.offcanvas-xl{position:fixed;bottom:0;z-index:var(--bs-offcanvas-zindex);display:flex;flex-direction:column;max-width:100%;color:var(--bs-offcanvas-color);visibility:hidden;background-color:var(--bs-offcanvas-bg);background-clip:padding-box;outline:0;transition:var(--bs-offcanvas-transition)}}@media (max-width:1199.98px) and (prefers-reduced-motion:reduce){.offcanvas-xl{transition:none}}@media (max-width:1199.98px){.offcanvas-xl.offcanvas-start{top:0;left:0;width:var(--bs-offcanvas-width);border-right:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateX(-100%)}.offcanvas-xl.offcanvas-end{top:0;right:0;width:var(--bs-offcanvas-width);border-left:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateX(100%)}.offcanvas-xl.offcanvas-top{top:0;right:0;left:0;height:var(--bs-offcanvas-height);max-height:100%;border-bottom:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateY(-100%)}.offcanvas-xl.offcanvas-bottom{right:0;left:0;height:var(--bs-offcanvas-height);max-height:100%;border-top:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateY(100%)}.offcanvas-xl.show:not(.hiding),.offcanvas-xl.showing{transform:none}.offcanvas-xl.hiding,.offcanvas-xl.show,.offcanvas-xl.showing{visibility:visible}}@media (min-width:1200px){.offcanvas-xl{--bs-offcanvas-height:auto;--bs-offcanvas-border-width:0;background-color:transparent!important}.offcanvas-xl .offcanvas-header{display:none}.offcanvas-xl .offcanvas-body{display:flex;flex-grow:0;padding:0;overflow-y:visible;background-color:transparent!important}}@media (max-width:1399.98px){.offcanvas-xxl{position:fixed;bottom:0;z-index:var(--bs-offcanvas-zindex);display:flex;flex-direction:column;max-width:100%;color:var(--bs-offcanvas-color);visibility:hidden;background-color:var(--bs-offcanvas-bg);background-clip:padding-box;outline:0;transition:var(--bs-offcanvas-transition)}}@media (max-width:1399.98px) and (prefers-reduced-motion:reduce){.offcanvas-xxl{transition:none}}@media (max-width:1399.98px){.offcanvas-xxl.offcanvas-start{top:0;left:0;width:var(--bs-offcanvas-width);border-right:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateX(-100%)}.offcanvas-xxl.offcanvas-end{top:0;right:0;width:var(--bs-offcanvas-width);border-left:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateX(100%)}.offcanvas-xxl.offcanvas-top{top:0;right:0;left:0;height:var(--bs-offcanvas-height);max-height:100%;border-bottom:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateY(-100%)}.offcanvas-xxl.offcanvas-bottom{right:0;left:0;height:var(--bs-offcanvas-height);max-height:100%;border-top:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateY(100%)}.offcanvas-xxl.show:not(.hiding),.offcanvas-xxl.showing{transform:none}.offcanvas-xxl.hiding,.offcanvas-xxl.show,.offcanvas-xxl.showing{visibility:visible}}@media (min-width:1400px){.offcanvas-xxl{--bs-offcanvas-height:auto;--bs-offcanvas-border-width:0;background-color:transparent!important}.offcanvas-xxl .offcanvas-header{display:none}.offcanvas-xxl .offcanvas-body{display:flex;flex-grow:0;padding:0;overflow-y:visible;background-color:transparent!important}}.offcanvas{position:fixed;bottom:0;z-index:var(--bs-offcanvas-zindex);display:flex;flex-direction:column;max-width:100%;color:var(--bs-offcanvas-color);visibility:hidden;background-color:var(--bs-offcanvas-bg);background-clip:padding-box;outline:0;transition:var(--bs-offcanvas-transition)}@media (prefers-reduced-motion:reduce){.offcanvas{transition:none}}.offcanvas.offcanvas-start{top:0;left:0;width:var(--bs-offcanvas-width);border-right:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateX(-100%)}.offcanvas.offcanvas-end{top:0;right:0;width:var(--bs-offcanvas-width);border-left:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateX(100%)}.offcanvas.offcanvas-top{top:0;right:0;left:0;height:var(--bs-offcanvas-height);max-height:100%;border-bottom:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateY(-100%)}.offcanvas.offcanvas-bottom{right:0;left:0;height:var(--bs-offcanvas-height);max-height:100%;border-top:var(--bs-offcanvas-border-width) solid var(--bs-offcanvas-border-color);transform:translateY(100%)}.offcanvas.show:not(.hiding),.offcanvas.showing{transform:none}.offcanvas.hiding,.offcanvas.show,.offcanvas.showing{visibility:visible}.offcanvas-backdrop{position:fixed;top:0;left:0;z-index:1040;width:100vw;height:100vh;background-color:#000}.offcanvas-backdrop.fade{opacity:0}.offcanvas-backdrop.show{opacity:.5}.offcanvas-header{display:flex;align-items:center;justify-content:space-between;padding:var(--bs-offcanvas-padding-y) var(--bs-offcanvas-padding-x)}.offcanvas-header .btn-close{padding:calc(var(--bs-offcanvas-padding-y) * .5) calc(var(--bs-offcanvas-padding-x) * .5);margin-top:calc(-.5 * var(--bs-offcanvas-padding-y));margin-right:calc(-.5 * var(--bs-offcanvas-padding-x));margin-bottom:calc(-.5 * var(--bs-offcanvas-padding-y))}.offcanvas-title{margin-bottom:0;line-height:var(--bs-offcanvas-title-line-height)}.offcanvas-body{flex-grow:1;padding:var(--bs-offcanvas-padding-y) var(--bs-offcanvas-padding-x);overflow-y:auto}.placeholder{display:inline-block;min-height:1em;vertical-align:middle;cursor:wait;background-color:currentcolor;opacity:.5}.placeholder.btn::before{display:inline-block;content:\"\"}.placeholder-xs{min-height:.6em}.placeholder-sm{min-height:.8em}.placeholder-lg{min-height:1.2em}.placeholder-glow .placeholder{animation:placeholder-glow 2s ease-in-out infinite}@keyframes placeholder-glow{50%{opacity:.2}}.placeholder-wave{-webkit-mask-image:linear-gradient(130deg,#000 55%,rgba(0,0,0,0.8) 75%,#000 95%);mask-image:linear-gradient(130deg,#000 55%,rgba(0,0,0,0.8) 75%,#000 95%);-webkit-mask-size:200% 100%;mask-size:200% 100%;animation:placeholder-wave 2s linear infinite}@keyframes placeholder-wave{100%{-webkit-mask-position:-200% 0%;mask-position:-200% 0%}}.clearfix::after{display:block;clear:both;content:\"\"}.text-bg-primary{color:#fff!important;background-color:RGBA(var(--bs-primary-rgb),var(--bs-bg-opacity,1))!important}.text-bg-secondary{color:#fff!important;background-color:RGBA(var(--bs-secondary-rgb),var(--bs-bg-opacity,1))!important}.text-bg-success{color:#fff!important;background-color:RGBA(var(--bs-success-rgb),var(--bs-bg-opacity,1))!important}.text-bg-info{color:#000!important;background-color:RGBA(var(--bs-info-rgb),var(--bs-bg-opacity,1))!important}.text-bg-warning{color:#000!important;background-color:RGBA(var(--bs-warning-rgb),var(--bs-bg-opacity,1))!important}.text-bg-danger{color:#fff!important;background-color:RGBA(var(--bs-danger-rgb),var(--bs-bg-opacity,1))!important}.text-bg-light{color:#000!important;background-color:RGBA(var(--bs-light-rgb),var(--bs-bg-opacity,1))!important}.text-bg-dark{color:#fff!important;background-color:RGBA(var(--bs-dark-rgb),var(--bs-bg-opacity,1))!important}.link-primary{color:RGBA(var(--bs-primary-rgb),var(--bs-link-opacity,1))!important;-webkit-text-decoration-color:RGBA(var(--bs-primary-rgb),var(--bs-link-underline-opacity,1))!important;text-decoration-color:RGBA(var(--bs-primary-rgb),var(--bs-link-underline-opacity,1))!important}.link-primary:focus,.link-primary:hover{color:RGBA(10,88,202,var(--bs-link-opacity,1))!important;-webkit-text-decoration-color:RGBA(10,88,202,var(--bs-link-underline-opacity,1))!important;text-decoration-color:RGBA(10,88,202,var(--bs-link-underline-opacity,1))!important}.link-secondary{color:RGBA(var(--bs-secondary-rgb),var(--bs-link-opacity,1))!important;-webkit-text-decoration-color:RGBA(var(--bs-secondary-rgb),var(--bs-link-underline-opacity,1))!important;text-decoration-color:RGBA(var(--bs-secondary-rgb),var(--bs-link-underline-opacity,1))!important}.link-secondary:focus,.link-secondary:hover{color:RGBA(86,94,100,var(--bs-link-opacity,1))!important;-webkit-text-decoration-color:RGBA(86,94,100,var(--bs-link-underline-opacity,1))!important;text-decoration-color:RGBA(86,94,100,var(--bs-link-underline-opacity,1))!important}.link-success{color:RGBA(var(--bs-success-rgb),var(--bs-link-opacity,1))!important;-webkit-text-decoration-color:RGBA(var(--bs-success-rgb),var(--bs-link-underline-opacity,1))!important;text-decoration-color:RGBA(var(--bs-success-rgb),var(--bs-link-underline-opacity,1))!important}.link-success:focus,.link-success:hover{color:RGBA(20,108,67,var(--bs-link-opacity,1))!important;-webkit-text-decoration-color:RGBA(20,108,67,var(--bs-link-underline-opacity,1))!important;text-decoration-color:RGBA(20,108,67,var(--bs-link-underline-opacity,1))!important}.link-info{color:RGBA(var(--bs-info-rgb),var(--bs-link-opacity,1))!important;-webkit-text-decoration-color:RGBA(var(--bs-info-rgb),var(--bs-link-underline-opacity,1))!important;text-decoration-color:RGBA(var(--bs-info-rgb),var(--bs-link-underline-opacity,1))!important}.link-info:focus,.link-info:hover{color:RGBA(61,213,243,var(--bs-link-opacity,1))!important;-webkit-text-decoration-color:RGBA(61,213,243,var(--bs-link-underline-opacity,1))!important;text-decoration-color:RGBA(61,213,243,var(--bs-link-underline-opacity,1))!important}.link-warning{color:RGBA(var(--bs-warning-rgb),var(--bs-link-opacity,1))!important;-webkit-text-decoration-color:RGBA(var(--bs-warning-rgb),var(--bs-link-underline-opacity,1))!important;text-decoration-color:RGBA(var(--bs-warning-rgb),var(--bs-link-underline-opacity,1))!important}.link-warning:focus,.link-warning:hover{color:RGBA(255,205,57,var(--bs-link-opacity,1))!important;-webkit-text-decoration-color:RGBA(255,205,57,var(--bs-link-underline-opacity,1))!important;text-decoration-color:RGBA(255,205,57,var(--bs-link-underline-opacity,1))!important}.link-danger{color:RGBA(var(--bs-danger-rgb),var(--bs-link-opacity,1))!important;-webkit-text-decoration-color:RGBA(var(--bs-danger-rgb),var(--bs-link-underline-opacity,1))!important;text-decoration-color:RGBA(var(--bs-danger-rgb),var(--bs-link-underline-opacity,1))!important}.link-danger:focus,.link-danger:hover{color:RGBA(176,42,55,var(--bs-link-opacity,1))!important;-webkit-text-decoration-color:RGBA(176,42,55,var(--bs-link-underline-opacity,1))!important;text-decoration-color:RGBA(176,42,55,var(--bs-link-underline-opacity,1))!important}.link-light{color:RGBA(var(--bs-light-rgb),var(--bs-link-opacity,1))!important;-webkit-text-decoration-color:RGBA(var(--bs-light-rgb),var(--bs-link-underline-opacity,1))!important;text-decoration-color:RGBA(var(--bs-light-rgb),var(--bs-link-underline-opacity,1))!important}.link-light:focus,.link-light:hover{color:RGBA(249,250,251,var(--bs-link-opacity,1))!important;-webkit-text-decoration-color:RGBA(249,250,251,var(--bs-link-underline-opacity,1))!important;text-decoration-color:RGBA(249,250,251,var(--bs-link-underline-opacity,1))!important}.link-dark{color:RGBA(var(--bs-dark-rgb),var(--bs-link-opacity,1))!important;-webkit-text-decoration-color:RGBA(var(--bs-dark-rgb),var(--bs-link-underline-opacity,1))!important;text-decoration-color:RGBA(var(--bs-dark-rgb),var(--bs-link-underline-opacity,1))!important}.link-dark:focus,.link-dark:hover{color:RGBA(26,30,33,var(--bs-link-opacity,1))!important;-webkit-text-decoration-color:RGBA(26,30,33,var(--bs-link-underline-opacity,1))!important;text-decoration-color:RGBA(26,30,33,var(--bs-link-underline-opacity,1))!important}.link-body-emphasis{color:RGBA(var(--bs-emphasis-color-rgb),var(--bs-link-opacity,1))!important;-webkit-text-decoration-color:RGBA(var(--bs-emphasis-color-rgb),var(--bs-link-underline-opacity,1))!important;text-decoration-color:RGBA(var(--bs-emphasis-color-rgb),var(--bs-link-underline-opacity,1))!important}.link-body-emphasis:focus,.link-body-emphasis:hover{color:RGBA(var(--bs-emphasis-color-rgb),var(--bs-link-opacity,.75))!important;-webkit-text-decoration-color:RGBA(var(--bs-emphasis-color-rgb),var(--bs-link-underline-opacity,0.75))!important;text-decoration-color:RGBA(var(--bs-emphasis-color-rgb),var(--bs-link-underline-opacity,0.75))!important}.focus-ring:focus{outline:0;box-shadow:var(--bs-focus-ring-x,0) var(--bs-focus-ring-y,0) var(--bs-focus-ring-blur,0) var(--bs-focus-ring-width) var(--bs-focus-ring-color)}.icon-link{display:inline-flex;gap:.375rem;align-items:center;-webkit-text-decoration-color:rgba(var(--bs-link-color-rgb),var(--bs-link-opacity,0.5));text-decoration-color:rgba(var(--bs-link-color-rgb),var(--bs-link-opacity,0.5));text-underline-offset:0.25em;-webkit-backface-visibility:hidden;backface-visibility:hidden}.icon-link>.bi{flex-shrink:0;width:1em;height:1em;fill:currentcolor;transition:.2s ease-in-out transform}@media (prefers-reduced-motion:reduce){.icon-link>.bi{transition:none}}.icon-link-hover:focus-visible>.bi,.icon-link-hover:hover>.bi{transform:var(--bs-icon-link-transform,translate3d(.25em,0,0))}.ratio{position:relative;width:100%}.ratio::before{display:block;padding-top:var(--bs-aspect-ratio);content:\"\"}.ratio>*{position:absolute;top:0;left:0;width:100%;height:100%}.ratio-1x1{--bs-aspect-ratio:100%}.ratio-4x3{--bs-aspect-ratio:75%}.ratio-16x9{--bs-aspect-ratio:56.25%}.ratio-21x9{--bs-aspect-ratio:42.8571428571%}.fixed-top{position:fixed;top:0;right:0;left:0;z-index:1030}.fixed-bottom{position:fixed;right:0;bottom:0;left:0;z-index:1030}.sticky-top{position:-webkit-sticky;position:sticky;top:0;z-index:1020}.sticky-bottom{position:-webkit-sticky;position:sticky;bottom:0;z-index:1020}@media (min-width:576px){.sticky-sm-top{position:-webkit-sticky;position:sticky;top:0;z-index:1020}.sticky-sm-bottom{position:-webkit-sticky;position:sticky;bottom:0;z-index:1020}}@media (min-width:768px){.sticky-md-top{position:-webkit-sticky;position:sticky;top:0;z-index:1020}.sticky-md-bottom{position:-webkit-sticky;position:sticky;bottom:0;z-index:1020}}@media (min-width:992px){.sticky-lg-top{position:-webkit-sticky;position:sticky;top:0;z-index:1020}.sticky-lg-bottom{position:-webkit-sticky;position:sticky;bottom:0;z-index:1020}}@media (min-width:1200px){.sticky-xl-top{position:-webkit-sticky;position:sticky;top:0;z-index:1020}.sticky-xl-bottom{position:-webkit-sticky;position:sticky;bottom:0;z-index:1020}}@media (min-width:1400px){.sticky-xxl-top{position:-webkit-sticky;position:sticky;top:0;z-index:1020}.sticky-xxl-bottom{position:-webkit-sticky;position:sticky;bottom:0;z-index:1020}}.hstack{display:flex;flex-direction:row;align-items:center;align-self:stretch}.vstack{display:flex;flex:1 1 auto;flex-direction:column;align-self:stretch}.visually-hidden,.visually-hidden-focusable:not(:focus):not(:focus-within){width:1px!important;height:1px!important;padding:0!important;margin:-1px!important;overflow:hidden!important;clip:rect(0,0,0,0)!important;white-space:nowrap!important;border:0!important}.visually-hidden-focusable:not(:focus):not(:focus-within):not(caption),.visually-hidden:not(caption){position:absolute!important}.stretched-link::after{position:absolute;top:0;right:0;bottom:0;left:0;z-index:1;content:\"\"}.text-truncate{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.vr{display:inline-block;align-self:stretch;width:var(--bs-border-width);min-height:1em;background-color:currentcolor;opacity:.25}.align-baseline{vertical-align:baseline!important}.align-top{vertical-align:top!important}.align-middle{vertical-align:middle!important}.align-bottom{vertical-align:bottom!important}.align-text-bottom{vertical-align:text-bottom!important}.align-text-top{vertical-align:text-top!important}.float-start{float:left!important}.float-end{float:right!important}.float-none{float:none!important}.object-fit-contain{-o-object-fit:contain!important;object-fit:contain!important}.object-fit-cover{-o-object-fit:cover!important;object-fit:cover!important}.object-fit-fill{-o-object-fit:fill!important;object-fit:fill!important}.object-fit-scale{-o-object-fit:scale-down!important;object-fit:scale-down!important}.object-fit-none{-o-object-fit:none!important;object-fit:none!important}.opacity-0{opacity:0!important}.opacity-25{opacity:.25!important}.opacity-50{opacity:.5!important}.opacity-75{opacity:.75!important}.opacity-100{opacity:1!important}.overflow-auto{overflow:auto!important}.overflow-hidden{overflow:hidden!important}.overflow-visible{overflow:visible!important}.overflow-scroll{overflow:scroll!important}.overflow-x-auto{overflow-x:auto!important}.overflow-x-hidden{overflow-x:hidden!important}.overflow-x-visible{overflow-x:visible!important}.overflow-x-scroll{overflow-x:scroll!important}.overflow-y-auto{overflow-y:auto!important}.overflow-y-hidden{overflow-y:hidden!important}.overflow-y-visible{overflow-y:visible!important}.overflow-y-scroll{overflow-y:scroll!important}.d-inline{display:inline!important}.d-inline-block{display:inline-block!important}.d-block{display:block!important}.d-grid{display:grid!important}.d-inline-grid{display:inline-grid!important}.d-table{display:table!important}.d-table-row{display:table-row!important}.d-table-cell{display:table-cell!important}.d-flex{display:flex!important}.d-inline-flex{display:inline-flex!important}.d-none{display:none!important}.shadow{box-shadow:0 .5rem 1rem rgba(0,0,0,.15)!important}.shadow-sm{box-shadow:0 .125rem .25rem rgba(0,0,0,.075)!important}.shadow-lg{box-shadow:0 1rem 3rem rgba(0,0,0,.175)!important}.shadow-none{box-shadow:none!important}.focus-ring-primary{--bs-focus-ring-color:rgba(var(--bs-primary-rgb), var(--bs-focus-ring-opacity))}.focus-ring-secondary{--bs-focus-ring-color:rgba(var(--bs-secondary-rgb), var(--bs-focus-ring-opacity))}.focus-ring-success{--bs-focus-ring-color:rgba(var(--bs-success-rgb), var(--bs-focus-ring-opacity))}.focus-ring-info{--bs-focus-ring-color:rgba(var(--bs-info-rgb), var(--bs-focus-ring-opacity))}.focus-ring-warning{--bs-focus-ring-color:rgba(var(--bs-warning-rgb), var(--bs-focus-ring-opacity))}.focus-ring-danger{--bs-focus-ring-color:rgba(var(--bs-danger-rgb), var(--bs-focus-ring-opacity))}.focus-ring-light{--bs-focus-ring-color:rgba(var(--bs-light-rgb), var(--bs-focus-ring-opacity))}.focus-ring-dark{--bs-focus-ring-color:rgba(var(--bs-dark-rgb), var(--bs-focus-ring-opacity))}.position-static{position:static!important}.position-relative{position:relative!important}.position-absolute{position:absolute!important}.position-fixed{position:fixed!important}.position-sticky{position:-webkit-sticky!important;position:sticky!important}.top-0{top:0!important}.top-50{top:50%!important}.top-100{top:100%!important}.bottom-0{bottom:0!important}.bottom-50{bottom:50%!important}.bottom-100{bottom:100%!important}.start-0{left:0!important}.start-50{left:50%!important}.start-100{left:100%!important}.end-0{right:0!important}.end-50{right:50%!important}.end-100{right:100%!important}.translate-middle{transform:translate(-50%,-50%)!important}.translate-middle-x{transform:translateX(-50%)!important}.translate-middle-y{transform:translateY(-50%)!important}.border{border:var(--bs-border-width) var(--bs-border-style) var(--bs-border-color)!important}.border-0{border:0!important}.border-top{border-top:var(--bs-border-width) var(--bs-border-style) var(--bs-border-color)!important}.border-top-0{border-top:0!important}.border-end{border-right:var(--bs-border-width) var(--bs-border-style) var(--bs-border-color)!important}.border-end-0{border-right:0!important}.border-bottom{border-bottom:var(--bs-border-width) var(--bs-border-style) var(--bs-border-color)!important}.border-bottom-0{border-bottom:0!important}.border-start{border-left:var(--bs-border-width) var(--bs-border-style) var(--bs-border-color)!important}.border-start-0{border-left:0!important}.border-primary{--bs-border-opacity:1;border-color:rgba(var(--bs-primary-rgb),var(--bs-border-opacity))!important}.border-secondary{--bs-border-opacity:1;border-color:rgba(var(--bs-secondary-rgb),var(--bs-border-opacity))!important}.border-success{--bs-border-opacity:1;border-color:rgba(var(--bs-success-rgb),var(--bs-border-opacity))!important}.border-info{--bs-border-opacity:1;border-color:rgba(var(--bs-info-rgb),var(--bs-border-opacity))!important}.border-warning{--bs-border-opacity:1;border-color:rgba(var(--bs-warning-rgb),var(--bs-border-opacity))!important}.border-danger{--bs-border-opacity:1;border-color:rgba(var(--bs-danger-rgb),var(--bs-border-opacity))!important}.border-light{--bs-border-opacity:1;border-color:rgba(var(--bs-light-rgb),var(--bs-border-opacity))!important}.border-dark{--bs-border-opacity:1;border-color:rgba(var(--bs-dark-rgb),var(--bs-border-opacity))!important}.border-black{--bs-border-opacity:1;border-color:rgba(var(--bs-black-rgb),var(--bs-border-opacity))!important}.border-white{--bs-border-opacity:1;border-color:rgba(var(--bs-white-rgb),var(--bs-border-opacity))!important}.border-primary-subtle{border-color:var(--bs-primary-border-subtle)!important}.border-secondary-subtle{border-color:var(--bs-secondary-border-subtle)!important}.border-success-subtle{border-color:var(--bs-success-border-subtle)!important}.border-info-subtle{border-color:var(--bs-info-border-subtle)!important}.border-warning-subtle{border-color:var(--bs-warning-border-subtle)!important}.border-danger-subtle{border-color:var(--bs-danger-border-subtle)!important}.border-light-subtle{border-color:var(--bs-light-border-subtle)!important}.border-dark-subtle{border-color:var(--bs-dark-border-subtle)!important}.border-1{border-width:1px!important}.border-2{border-width:2px!important}.border-3{border-width:3px!important}.border-4{border-width:4px!important}.border-5{border-width:5px!important}.border-opacity-10{--bs-border-opacity:0.1}.border-opacity-25{--bs-border-opacity:0.25}.border-opacity-50{--bs-border-opacity:0.5}.border-opacity-75{--bs-border-opacity:0.75}.border-opacity-100{--bs-border-opacity:1}.w-25{width:25%!important}.w-50{width:50%!important}.w-75{width:75%!important}.w-100{width:100%!important}.w-auto{width:auto!important}.mw-100{max-width:100%!important}.vw-100{width:100vw!important}.min-vw-100{min-width:100vw!important}.h-25{height:25%!important}.h-50{height:50%!important}.h-75{height:75%!important}.h-100{height:100%!important}.h-auto{height:auto!important}.mh-100{max-height:100%!important}.vh-100{height:100vh!important}.min-vh-100{min-height:100vh!important}.flex-fill{flex:1 1 auto!important}.flex-row{flex-direction:row!important}.flex-column{flex-direction:column!important}.flex-row-reverse{flex-direction:row-reverse!important}.flex-column-reverse{flex-direction:column-reverse!important}.flex-grow-0{flex-grow:0!important}.flex-grow-1{flex-grow:1!important}.flex-shrink-0{flex-shrink:0!important}.flex-shrink-1{flex-shrink:1!important}.flex-wrap{flex-wrap:wrap!important}.flex-nowrap{flex-wrap:nowrap!important}.flex-wrap-reverse{flex-wrap:wrap-reverse!important}.justify-content-start{justify-content:flex-start!important}.justify-content-end{justify-content:flex-end!important}.justify-content-center{justify-content:center!important}.justify-content-between{justify-content:space-between!important}.justify-content-around{justify-content:space-around!important}.justify-content-evenly{justify-content:space-evenly!important}.align-items-start{align-items:flex-start!important}.align-items-end{align-items:flex-end!important}.align-items-center{align-items:center!important}.align-items-baseline{align-items:baseline!important}.align-items-stretch{align-items:stretch!important}.align-content-start{align-content:flex-start!important}.align-content-end{align-content:flex-end!important}.align-content-center{align-content:center!important}.align-content-between{align-content:space-between!important}.align-content-around{align-content:space-around!important}.align-content-stretch{align-content:stretch!important}.align-self-auto{align-self:auto!important}.align-self-start{align-self:flex-start!important}.align-self-end{align-self:flex-end!important}.align-self-center{align-self:center!important}.align-self-baseline{align-self:baseline!important}.align-self-stretch{align-self:stretch!important}.order-first{order:-1!important}.order-0{order:0!important}.order-1{order:1!important}.order-2{order:2!important}.order-3{order:3!important}.order-4{order:4!important}.order-5{order:5!important}.order-last{order:6!important}.m-0{margin:0!important}.m-1{margin:.25rem!important}.m-2{margin:.5rem!important}.m-3{margin:1rem!important}.m-4{margin:1.5rem!important}.m-5{margin:3rem!important}.m-auto{margin:auto!important}.mx-0{margin-right:0!important;margin-left:0!important}.mx-1{margin-right:.25rem!important;margin-left:.25rem!important}.mx-2{margin-right:.5rem!important;margin-left:.5rem!important}.mx-3{margin-right:1rem!important;margin-left:1rem!important}.mx-4{margin-right:1.5rem!important;margin-left:1.5rem!important}.mx-5{margin-right:3rem!important;margin-left:3rem!important}.mx-auto{margin-right:auto!important;margin-left:auto!important}.my-0{margin-top:0!important;margin-bottom:0!important}.my-1{margin-top:.25rem!important;margin-bottom:.25rem!important}.my-2{margin-top:.5rem!important;margin-bottom:.5rem!important}.my-3{margin-top:1rem!important;margin-bottom:1rem!important}.my-4{margin-top:1.5rem!important;margin-bottom:1.5rem!important}.my-5{margin-top:3rem!important;margin-bottom:3rem!important}.my-auto{margin-top:auto!important;margin-bottom:auto!important}.mt-0{margin-top:0!important}.mt-1{margin-top:.25rem!important}.mt-2{margin-top:.5rem!important}.mt-3{margin-top:1rem!important}.mt-4{margin-top:1.5rem!important}.mt-5{margin-top:3rem!important}.mt-auto{margin-top:auto!important}.me-0{margin-right:0!important}.me-1{margin-right:.25rem!important}.me-2{margin-right:.5rem!important}.me-3{margin-right:1rem!important}.me-4{margin-right:1.5rem!important}.me-5{margin-right:3rem!important}.me-auto{margin-right:auto!important}.mb-0{margin-bottom:0!important}.mb-1{margin-bottom:.25rem!important}.mb-2{margin-bottom:.5rem!important}.mb-3{margin-bottom:1rem!important}.mb-4{margin-bottom:1.5rem!important}.mb-5{margin-bottom:3rem!important}.mb-auto{margin-bottom:auto!important}.ms-0{margin-left:0!important}.ms-1{margin-left:.25rem!important}.ms-2{margin-left:.5rem!important}.ms-3{margin-left:1rem!important}.ms-4{margin-left:1.5rem!important}.ms-5{margin-left:3rem!important}.ms-auto{margin-left:auto!important}.p-0{padding:0!important}.p-1{padding:.25rem!important}.p-2{padding:.5rem!important}.p-3{padding:1rem!important}.p-4{padding:1.5rem!important}.p-5{padding:3rem!important}.px-0{padding-right:0!important;padding-left:0!important}.px-1{padding-right:.25rem!important;padding-left:.25rem!important}.px-2{padding-right:.5rem!important;padding-left:.5rem!important}.px-3{padding-right:1rem!important;padding-left:1rem!important}.px-4{padding-right:1.5rem!important;padding-left:1.5rem!important}.px-5{padding-right:3rem!important;padding-left:3rem!important}.py-0{padding-top:0!important;padding-bottom:0!important}.py-1{padding-top:.25rem!important;padding-bottom:.25rem!important}.py-2{padding-top:.5rem!important;padding-bottom:.5rem!important}.py-3{padding-top:1rem!important;padding-bottom:1rem!important}.py-4{padding-top:1.5rem!important;padding-bottom:1.5rem!important}.py-5{padding-top:3rem!important;padding-bottom:3rem!important}.pt-0{padding-top:0!important}.pt-1{padding-top:.25rem!important}.pt-2{padding-top:.5rem!important}.pt-3{padding-top:1rem!important}.pt-4{padding-top:1.5rem!important}.pt-5{padding-top:3rem!important}.pe-0{padding-right:0!important}.pe-1{padding-right:.25rem!important}.pe-2{padding-right:.5rem!important}.pe-3{padding-right:1rem!important}.pe-4{padding-right:1.5rem!important}.pe-5{padding-right:3rem!important}.pb-0{padding-bottom:0!important}.pb-1{padding-bottom:.25rem!important}.pb-2{padding-bottom:.5rem!important}.pb-3{padding-bottom:1rem!important}.pb-4{padding-bottom:1.5rem!important}.pb-5{padding-bottom:3rem!important}.ps-0{padding-left:0!important}.ps-1{padding-left:.25rem!important}.ps-2{padding-left:.5rem!important}.ps-3{padding-left:1rem!important}.ps-4{padding-left:1.5rem!important}.ps-5{padding-left:3rem!important}.gap-0{gap:0!important}.gap-1{gap:.25rem!important}.gap-2{gap:.5rem!important}.gap-3{gap:1rem!important}.gap-4{gap:1.5rem!important}.gap-5{gap:3rem!important}.row-gap-0{row-gap:0!important}.row-gap-1{row-gap:.25rem!important}.row-gap-2{row-gap:.5rem!important}.row-gap-3{row-gap:1rem!important}.row-gap-4{row-gap:1.5rem!important}.row-gap-5{row-gap:3rem!important}.column-gap-0{-moz-column-gap:0!important;column-gap:0!important}.column-gap-1{-moz-column-gap:0.25rem!important;column-gap:.25rem!important}.column-gap-2{-moz-column-gap:0.5rem!important;column-gap:.5rem!important}.column-gap-3{-moz-column-gap:1rem!important;column-gap:1rem!important}.column-gap-4{-moz-column-gap:1.5rem!important;column-gap:1.5rem!important}.column-gap-5{-moz-column-gap:3rem!important;column-gap:3rem!important}.font-monospace{font-family:var(--bs-font-monospace)!important}.fs-1{font-size:calc(1.375rem + 1.5vw)!important}.fs-2{font-size:calc(1.325rem + .9vw)!important}.fs-3{font-size:calc(1.3rem + .6vw)!important}.fs-4{font-size:calc(1.275rem + .3vw)!important}.fs-5{font-size:1.25rem!important}.fs-6{font-size:1rem!important}.fst-italic{font-style:italic!important}.fst-normal{font-style:normal!important}.fw-lighter{font-weight:lighter!important}.fw-light{font-weight:300!important}.fw-normal{font-weight:400!important}.fw-medium{font-weight:500!important}.fw-semibold{font-weight:600!important}.fw-bold{font-weight:700!important}.fw-bolder{font-weight:bolder!important}.lh-1{line-height:1!important}.lh-sm{line-height:1.25!important}.lh-base{line-height:1.5!important}.lh-lg{line-height:2!important}.text-start{text-align:left!important}.text-end{text-align:right!important}.text-center{text-align:center!important}.text-decoration-none{text-decoration:none!important}.text-decoration-underline{text-decoration:underline!important}.text-decoration-line-through{text-decoration:line-through!important}.text-lowercase{text-transform:lowercase!important}.text-uppercase{text-transform:uppercase!important}.text-capitalize{text-transform:capitalize!important}.text-wrap{white-space:normal!important}.text-nowrap{white-space:nowrap!important}.text-break{word-wrap:break-word!important;word-break:break-word!important}.text-primary{--bs-text-opacity:1;color:rgba(var(--bs-primary-rgb),var(--bs-text-opacity))!important}.text-secondary{--bs-text-opacity:1;color:rgba(var(--bs-secondary-rgb),var(--bs-text-opacity))!important}.text-success{--bs-text-opacity:1;color:rgba(var(--bs-success-rgb),var(--bs-text-opacity))!important}.text-info{--bs-text-opacity:1;color:rgba(var(--bs-info-rgb),var(--bs-text-opacity))!important}.text-warning{--bs-text-opacity:1;color:rgba(var(--bs-warning-rgb),var(--bs-text-opacity))!important}.text-danger{--bs-text-opacity:1;color:rgba(var(--bs-danger-rgb),var(--bs-text-opacity))!important}.text-light{--bs-text-opacity:1;color:rgba(var(--bs-light-rgb),var(--bs-text-opacity))!important}.text-dark{--bs-text-opacity:1;color:rgba(var(--bs-dark-rgb),var(--bs-text-opacity))!important}.text-black{--bs-text-opacity:1;color:rgba(var(--bs-black-rgb),var(--bs-text-opacity))!important}.text-white{--bs-text-opacity:1;color:rgba(var(--bs-white-rgb),var(--bs-text-opacity))!important}.text-body{--bs-text-opacity:1;color:rgba(var(--bs-body-color-rgb),var(--bs-text-opacity))!important}.text-muted{--bs-text-opacity:1;color:var(--bs-secondary-color)!important}.text-black-50{--bs-text-opacity:1;color:rgba(0,0,0,.5)!important}.text-white-50{--bs-text-opacity:1;color:rgba(255,255,255,.5)!important}.text-body-secondary{--bs-text-opacity:1;color:var(--bs-secondary-color)!important}.text-body-tertiary{--bs-text-opacity:1;color:var(--bs-tertiary-color)!important}.text-body-emphasis{--bs-text-opacity:1;color:var(--bs-emphasis-color)!important}.text-reset{--bs-text-opacity:1;color:inherit!important}.text-opacity-25{--bs-text-opacity:0.25}.text-opacity-50{--bs-text-opacity:0.5}.text-opacity-75{--bs-text-opacity:0.75}.text-opacity-100{--bs-text-opacity:1}.text-primary-emphasis{color:var(--bs-primary-text-emphasis)!important}.text-secondary-emphasis{color:var(--bs-secondary-text-emphasis)!important}.text-success-emphasis{color:var(--bs-success-text-emphasis)!important}.text-info-emphasis{color:var(--bs-info-text-emphasis)!important}.text-warning-emphasis{color:var(--bs-warning-text-emphasis)!important}.text-danger-emphasis{color:var(--bs-danger-text-emphasis)!important}.text-light-emphasis{color:var(--bs-light-text-emphasis)!important}.text-dark-emphasis{color:var(--bs-dark-text-emphasis)!important}.link-opacity-10{--bs-link-opacity:0.1}.link-opacity-10-hover:hover{--bs-link-opacity:0.1}.link-opacity-25{--bs-link-opacity:0.25}.link-opacity-25-hover:hover{--bs-link-opacity:0.25}.link-opacity-50{--bs-link-opacity:0.5}.link-opacity-50-hover:hover{--bs-link-opacity:0.5}.link-opacity-75{--bs-link-opacity:0.75}.link-opacity-75-hover:hover{--bs-link-opacity:0.75}.link-opacity-100{--bs-link-opacity:1}.link-opacity-100-hover:hover{--bs-link-opacity:1}.link-offset-1{text-underline-offset:0.125em!important}.link-offset-1-hover:hover{text-underline-offset:0.125em!important}.link-offset-2{text-underline-offset:0.25em!important}.link-offset-2-hover:hover{text-underline-offset:0.25em!important}.link-offset-3{text-underline-offset:0.375em!important}.link-offset-3-hover:hover{text-underline-offset:0.375em!important}.link-underline-primary{--bs-link-underline-opacity:1;-webkit-text-decoration-color:rgba(var(--bs-primary-rgb),var(--bs-link-underline-opacity))!important;text-decoration-color:rgba(var(--bs-primary-rgb),var(--bs-link-underline-opacity))!important}.link-underline-secondary{--bs-link-underline-opacity:1;-webkit-text-decoration-color:rgba(var(--bs-secondary-rgb),var(--bs-link-underline-opacity))!important;text-decoration-color:rgba(var(--bs-secondary-rgb),var(--bs-link-underline-opacity))!important}.link-underline-success{--bs-link-underline-opacity:1;-webkit-text-decoration-color:rgba(var(--bs-success-rgb),var(--bs-link-underline-opacity))!important;text-decoration-color:rgba(var(--bs-success-rgb),var(--bs-link-underline-opacity))!important}.link-underline-info{--bs-link-underline-opacity:1;-webkit-text-decoration-color:rgba(var(--bs-info-rgb),var(--bs-link-underline-opacity))!important;text-decoration-color:rgba(var(--bs-info-rgb),var(--bs-link-underline-opacity))!important}.link-underline-warning{--bs-link-underline-opacity:1;-webkit-text-decoration-color:rgba(var(--bs-warning-rgb),var(--bs-link-underline-opacity))!important;text-decoration-color:rgba(var(--bs-warning-rgb),var(--bs-link-underline-opacity))!important}.link-underline-danger{--bs-link-underline-opacity:1;-webkit-text-decoration-color:rgba(var(--bs-danger-rgb),var(--bs-link-underline-opacity))!important;text-decoration-color:rgba(var(--bs-danger-rgb),var(--bs-link-underline-opacity))!important}.link-underline-light{--bs-link-underline-opacity:1;-webkit-text-decoration-color:rgba(var(--bs-light-rgb),var(--bs-link-underline-opacity))!important;text-decoration-color:rgba(var(--bs-light-rgb),var(--bs-link-underline-opacity))!important}.link-underline-dark{--bs-link-underline-opacity:1;-webkit-text-decoration-color:rgba(var(--bs-dark-rgb),var(--bs-link-underline-opacity))!important;text-decoration-color:rgba(var(--bs-dark-rgb),var(--bs-link-underline-opacity))!important}.link-underline{--bs-link-underline-opacity:1;-webkit-text-decoration-color:rgba(var(--bs-link-color-rgb),var(--bs-link-underline-opacity,1))!important;text-decoration-color:rgba(var(--bs-link-color-rgb),var(--bs-link-underline-opacity,1))!important}.link-underline-opacity-0{--bs-link-underline-opacity:0}.link-underline-opacity-0-hover:hover{--bs-link-underline-opacity:0}.link-underline-opacity-10{--bs-link-underline-opacity:0.1}.link-underline-opacity-10-hover:hover{--bs-link-underline-opacity:0.1}.link-underline-opacity-25{--bs-link-underline-opacity:0.25}.link-underline-opacity-25-hover:hover{--bs-link-underline-opacity:0.25}.link-underline-opacity-50{--bs-link-underline-opacity:0.5}.link-underline-opacity-50-hover:hover{--bs-link-underline-opacity:0.5}.link-underline-opacity-75{--bs-link-underline-opacity:0.75}.link-underline-opacity-75-hover:hover{--bs-link-underline-opacity:0.75}.link-underline-opacity-100{--bs-link-underline-opacity:1}.link-underline-opacity-100-hover:hover{--bs-link-underline-opacity:1}.bg-primary{--bs-bg-opacity:1;background-color:rgba(var(--bs-primary-rgb),var(--bs-bg-opacity))!important}.bg-secondary{--bs-bg-opacity:1;background-color:rgba(var(--bs-secondary-rgb),var(--bs-bg-opacity))!important}.bg-success{--bs-bg-opacity:1;background-color:rgba(var(--bs-success-rgb),var(--bs-bg-opacity))!important}.bg-info{--bs-bg-opacity:1;background-color:rgba(var(--bs-info-rgb),var(--bs-bg-opacity))!important}.bg-warning{--bs-bg-opacity:1;background-color:rgba(var(--bs-warning-rgb),var(--bs-bg-opacity))!important}.bg-danger{--bs-bg-opacity:1;background-color:rgba(var(--bs-danger-rgb),var(--bs-bg-opacity))!important}.bg-light{--bs-bg-opacity:1;background-color:rgba(var(--bs-light-rgb),var(--bs-bg-opacity))!important}.bg-dark{--bs-bg-opacity:1;background-color:rgba(var(--bs-dark-rgb),var(--bs-bg-opacity))!important}.bg-black{--bs-bg-opacity:1;background-color:rgba(var(--bs-black-rgb),var(--bs-bg-opacity))!important}.bg-white{--bs-bg-opacity:1;background-color:rgba(var(--bs-white-rgb),var(--bs-bg-opacity))!important}.bg-body{--bs-bg-opacity:1;background-color:rgba(var(--bs-body-bg-rgb),var(--bs-bg-opacity))!important}.bg-transparent{--bs-bg-opacity:1;background-color:transparent!important}.bg-body-secondary{--bs-bg-opacity:1;background-color:rgba(var(--bs-secondary-bg-rgb),var(--bs-bg-opacity))!important}.bg-body-tertiary{--bs-bg-opacity:1;background-color:rgba(var(--bs-tertiary-bg-rgb),var(--bs-bg-opacity))!important}.bg-opacity-10{--bs-bg-opacity:0.1}.bg-opacity-25{--bs-bg-opacity:0.25}.bg-opacity-50{--bs-bg-opacity:0.5}.bg-opacity-75{--bs-bg-opacity:0.75}.bg-opacity-100{--bs-bg-opacity:1}.bg-primary-subtle{background-color:var(--bs-primary-bg-subtle)!important}.bg-secondary-subtle{background-color:var(--bs-secondary-bg-subtle)!important}.bg-success-subtle{background-color:var(--bs-success-bg-subtle)!important}.bg-info-subtle{background-color:var(--bs-info-bg-subtle)!important}.bg-warning-subtle{background-color:var(--bs-warning-bg-subtle)!important}.bg-danger-subtle{background-color:var(--bs-danger-bg-subtle)!important}.bg-light-subtle{background-color:var(--bs-light-bg-subtle)!important}.bg-dark-subtle{background-color:var(--bs-dark-bg-subtle)!important}.bg-gradient{background-image:var(--bs-gradient)!important}.user-select-all{-webkit-user-select:all!important;-moz-user-select:all!important;user-select:all!important}.user-select-auto{-webkit-user-select:auto!important;-moz-user-select:auto!important;user-select:auto!important}.user-select-none{-webkit-user-select:none!important;-moz-user-select:none!important;user-select:none!important}.pe-none{pointer-events:none!important}.pe-auto{pointer-events:auto!important}.rounded{border-radius:var(--bs-border-radius)!important}.rounded-0{border-radius:0!important}.rounded-1{border-radius:var(--bs-border-radius-sm)!important}.rounded-2{border-radius:var(--bs-border-radius)!important}.rounded-3{border-radius:var(--bs-border-radius-lg)!important}.rounded-4{border-radius:var(--bs-border-radius-xl)!important}.rounded-5{border-radius:var(--bs-border-radius-xxl)!important}.rounded-circle{border-radius:50%!important}.rounded-pill{border-radius:var(--bs-border-radius-pill)!important}.rounded-top{border-top-left-radius:var(--bs-border-radius)!important;border-top-right-radius:var(--bs-border-radius)!important}.rounded-top-0{border-top-left-radius:0!important;border-top-right-radius:0!important}.rounded-top-1{border-top-left-radius:var(--bs-border-radius-sm)!important;border-top-right-radius:var(--bs-border-radius-sm)!important}.rounded-top-2{border-top-left-radius:var(--bs-border-radius)!important;border-top-right-radius:var(--bs-border-radius)!important}.rounded-top-3{border-top-left-radius:var(--bs-border-radius-lg)!important;border-top-right-radius:var(--bs-border-radius-lg)!important}.rounded-top-4{border-top-left-radius:var(--bs-border-radius-xl)!important;border-top-right-radius:var(--bs-border-radius-xl)!important}.rounded-top-5{border-top-left-radius:var(--bs-border-radius-xxl)!important;border-top-right-radius:var(--bs-border-radius-xxl)!important}.rounded-top-circle{border-top-left-radius:50%!important;border-top-right-radius:50%!important}.rounded-top-pill{border-top-left-radius:var(--bs-border-radius-pill)!important;border-top-right-radius:var(--bs-border-radius-pill)!important}.rounded-end{border-top-right-radius:var(--bs-border-radius)!important;border-bottom-right-radius:var(--bs-border-radius)!important}.rounded-end-0{border-top-right-radius:0!important;border-bottom-right-radius:0!important}.rounded-end-1{border-top-right-radius:var(--bs-border-radius-sm)!important;border-bottom-right-radius:var(--bs-border-radius-sm)!important}.rounded-end-2{border-top-right-radius:var(--bs-border-radius)!important;border-bottom-right-radius:var(--bs-border-radius)!important}.rounded-end-3{border-top-right-radius:var(--bs-border-radius-lg)!important;border-bottom-right-radius:var(--bs-border-radius-lg)!important}.rounded-end-4{border-top-right-radius:var(--bs-border-radius-xl)!important;border-bottom-right-radius:var(--bs-border-radius-xl)!important}.rounded-end-5{border-top-right-radius:var(--bs-border-radius-xxl)!important;border-bottom-right-radius:var(--bs-border-radius-xxl)!important}.rounded-end-circle{border-top-right-radius:50%!important;border-bottom-right-radius:50%!important}.rounded-end-pill{border-top-right-radius:var(--bs-border-radius-pill)!important;border-bottom-right-radius:var(--bs-border-radius-pill)!important}.rounded-bottom{border-bottom-right-radius:var(--bs-border-radius)!important;border-bottom-left-radius:var(--bs-border-radius)!important}.rounded-bottom-0{border-bottom-right-radius:0!important;border-bottom-left-radius:0!important}.rounded-bottom-1{border-bottom-right-radius:var(--bs-border-radius-sm)!important;border-bottom-left-radius:var(--bs-border-radius-sm)!important}.rounded-bottom-2{border-bottom-right-radius:var(--bs-border-radius)!important;border-bottom-left-radius:var(--bs-border-radius)!important}.rounded-bottom-3{border-bottom-right-radius:var(--bs-border-radius-lg)!important;border-bottom-left-radius:var(--bs-border-radius-lg)!important}.rounded-bottom-4{border-bottom-right-radius:var(--bs-border-radius-xl)!important;border-bottom-left-radius:var(--bs-border-radius-xl)!important}.rounded-bottom-5{border-bottom-right-radius:var(--bs-border-radius-xxl)!important;border-bottom-left-radius:var(--bs-border-radius-xxl)!important}.rounded-bottom-circle{border-bottom-right-radius:50%!important;border-bottom-left-radius:50%!important}.rounded-bottom-pill{border-bottom-right-radius:var(--bs-border-radius-pill)!important;border-bottom-left-radius:var(--bs-border-radius-pill)!important}.rounded-start{border-bottom-left-radius:var(--bs-border-radius)!important;border-top-left-radius:var(--bs-border-radius)!important}.rounded-start-0{border-bottom-left-radius:0!important;border-top-left-radius:0!important}.rounded-start-1{border-bottom-left-radius:var(--bs-border-radius-sm)!important;border-top-left-radius:var(--bs-border-radius-sm)!important}.rounded-start-2{border-bottom-left-radius:var(--bs-border-radius)!important;border-top-left-radius:var(--bs-border-radius)!important}.rounded-start-3{border-bottom-left-radius:var(--bs-border-radius-lg)!important;border-top-left-radius:var(--bs-border-radius-lg)!important}.rounded-start-4{border-bottom-left-radius:var(--bs-border-radius-xl)!important;border-top-left-radius:var(--bs-border-radius-xl)!important}.rounded-start-5{border-bottom-left-radius:var(--bs-border-radius-xxl)!important;border-top-left-radius:var(--bs-border-radius-xxl)!important}.rounded-start-circle{border-bottom-left-radius:50%!important;border-top-left-radius:50%!important}.rounded-start-pill{border-bottom-left-radius:var(--bs-border-radius-pill)!important;border-top-left-radius:var(--bs-border-radius-pill)!important}.visible{visibility:visible!important}.invisible{visibility:hidden!important}.z-n1{z-index:-1!important}.z-0{z-index:0!important}.z-1{z-index:1!important}.z-2{z-index:2!important}.z-3{z-index:3!important}@media (min-width:576px){.float-sm-start{float:left!important}.float-sm-end{float:right!important}.float-sm-none{float:none!important}.object-fit-sm-contain{-o-object-fit:contain!important;object-fit:contain!important}.object-fit-sm-cover{-o-object-fit:cover!important;object-fit:cover!important}.object-fit-sm-fill{-o-object-fit:fill!important;object-fit:fill!important}.object-fit-sm-scale{-o-object-fit:scale-down!important;object-fit:scale-down!important}.object-fit-sm-none{-o-object-fit:none!important;object-fit:none!important}.d-sm-inline{display:inline!important}.d-sm-inline-block{display:inline-block!important}.d-sm-block{display:block!important}.d-sm-grid{display:grid!important}.d-sm-inline-grid{display:inline-grid!important}.d-sm-table{display:table!important}.d-sm-table-row{display:table-row!important}.d-sm-table-cell{display:table-cell!important}.d-sm-flex{display:flex!important}.d-sm-inline-flex{display:inline-flex!important}.d-sm-none{display:none!important}.flex-sm-fill{flex:1 1 auto!important}.flex-sm-row{flex-direction:row!important}.flex-sm-column{flex-direction:column!important}.flex-sm-row-reverse{flex-direction:row-reverse!important}.flex-sm-column-reverse{flex-direction:column-reverse!important}.flex-sm-grow-0{flex-grow:0!important}.flex-sm-grow-1{flex-grow:1!important}.flex-sm-shrink-0{flex-shrink:0!important}.flex-sm-shrink-1{flex-shrink:1!important}.flex-sm-wrap{flex-wrap:wrap!important}.flex-sm-nowrap{flex-wrap:nowrap!important}.flex-sm-wrap-reverse{flex-wrap:wrap-reverse!important}.justify-content-sm-start{justify-content:flex-start!important}.justify-content-sm-end{justify-content:flex-end!important}.justify-content-sm-center{justify-content:center!important}.justify-content-sm-between{justify-content:space-between!important}.justify-content-sm-around{justify-content:space-around!important}.justify-content-sm-evenly{justify-content:space-evenly!important}.align-items-sm-start{align-items:flex-start!important}.align-items-sm-end{align-items:flex-end!important}.align-items-sm-center{align-items:center!important}.align-items-sm-baseline{align-items:baseline!important}.align-items-sm-stretch{align-items:stretch!important}.align-content-sm-start{align-content:flex-start!important}.align-content-sm-end{align-content:flex-end!important}.align-content-sm-center{align-content:center!important}.align-content-sm-between{align-content:space-between!important}.align-content-sm-around{align-content:space-around!important}.align-content-sm-stretch{align-content:stretch!important}.align-self-sm-auto{align-self:auto!important}.align-self-sm-start{align-self:flex-start!important}.align-self-sm-end{align-self:flex-end!important}.align-self-sm-center{align-self:center!important}.align-self-sm-baseline{align-self:baseline!important}.align-self-sm-stretch{align-self:stretch!important}.order-sm-first{order:-1!important}.order-sm-0{order:0!important}.order-sm-1{order:1!important}.order-sm-2{order:2!important}.order-sm-3{order:3!important}.order-sm-4{order:4!important}.order-sm-5{order:5!important}.order-sm-last{order:6!important}.m-sm-0{margin:0!important}.m-sm-1{margin:.25rem!important}.m-sm-2{margin:.5rem!important}.m-sm-3{margin:1rem!important}.m-sm-4{margin:1.5rem!important}.m-sm-5{margin:3rem!important}.m-sm-auto{margin:auto!important}.mx-sm-0{margin-right:0!important;margin-left:0!important}.mx-sm-1{margin-right:.25rem!important;margin-left:.25rem!important}.mx-sm-2{margin-right:.5rem!important;margin-left:.5rem!important}.mx-sm-3{margin-right:1rem!important;margin-left:1rem!important}.mx-sm-4{margin-right:1.5rem!important;margin-left:1.5rem!important}.mx-sm-5{margin-right:3rem!important;margin-left:3rem!important}.mx-sm-auto{margin-right:auto!important;margin-left:auto!important}.my-sm-0{margin-top:0!important;margin-bottom:0!important}.my-sm-1{margin-top:.25rem!important;margin-bottom:.25rem!important}.my-sm-2{margin-top:.5rem!important;margin-bottom:.5rem!important}.my-sm-3{margin-top:1rem!important;margin-bottom:1rem!important}.my-sm-4{margin-top:1.5rem!important;margin-bottom:1.5rem!important}.my-sm-5{margin-top:3rem!important;margin-bottom:3rem!important}.my-sm-auto{margin-top:auto!important;margin-bottom:auto!important}.mt-sm-0{margin-top:0!important}.mt-sm-1{margin-top:.25rem!important}.mt-sm-2{margin-top:.5rem!important}.mt-sm-3{margin-top:1rem!important}.mt-sm-4{margin-top:1.5rem!important}.mt-sm-5{margin-top:3rem!important}.mt-sm-auto{margin-top:auto!important}.me-sm-0{margin-right:0!important}.me-sm-1{margin-right:.25rem!important}.me-sm-2{margin-right:.5rem!important}.me-sm-3{margin-right:1rem!important}.me-sm-4{margin-right:1.5rem!important}.me-sm-5{margin-right:3rem!important}.me-sm-auto{margin-right:auto!important}.mb-sm-0{margin-bottom:0!important}.mb-sm-1{margin-bottom:.25rem!important}.mb-sm-2{margin-bottom:.5rem!important}.mb-sm-3{margin-bottom:1rem!important}.mb-sm-4{margin-bottom:1.5rem!important}.mb-sm-5{margin-bottom:3rem!important}.mb-sm-auto{margin-bottom:auto!important}.ms-sm-0{margin-left:0!important}.ms-sm-1{margin-left:.25rem!important}.ms-sm-2{margin-left:.5rem!important}.ms-sm-3{margin-left:1rem!important}.ms-sm-4{margin-left:1.5rem!important}.ms-sm-5{margin-left:3rem!important}.ms-sm-auto{margin-left:auto!important}.p-sm-0{padding:0!important}.p-sm-1{padding:.25rem!important}.p-sm-2{padding:.5rem!important}.p-sm-3{padding:1rem!important}.p-sm-4{padding:1.5rem!important}.p-sm-5{padding:3rem!important}.px-sm-0{padding-right:0!important;padding-left:0!important}.px-sm-1{padding-right:.25rem!important;padding-left:.25rem!important}.px-sm-2{padding-right:.5rem!important;padding-left:.5rem!important}.px-sm-3{padding-right:1rem!important;padding-left:1rem!important}.px-sm-4{padding-right:1.5rem!important;padding-left:1.5rem!important}.px-sm-5{padding-right:3rem!important;padding-left:3rem!important}.py-sm-0{padding-top:0!important;padding-bottom:0!important}.py-sm-1{padding-top:.25rem!important;padding-bottom:.25rem!important}.py-sm-2{padding-top:.5rem!important;padding-bottom:.5rem!important}.py-sm-3{padding-top:1rem!important;padding-bottom:1rem!important}.py-sm-4{padding-top:1.5rem!important;padding-bottom:1.5rem!important}.py-sm-5{padding-top:3rem!important;padding-bottom:3rem!important}.pt-sm-0{padding-top:0!important}.pt-sm-1{padding-top:.25rem!important}.pt-sm-2{padding-top:.5rem!important}.pt-sm-3{padding-top:1rem!important}.pt-sm-4{padding-top:1.5rem!important}.pt-sm-5{padding-top:3rem!important}.pe-sm-0{padding-right:0!important}.pe-sm-1{padding-right:.25rem!important}.pe-sm-2{padding-right:.5rem!important}.pe-sm-3{padding-right:1rem!important}.pe-sm-4{padding-right:1.5rem!important}.pe-sm-5{padding-right:3rem!important}.pb-sm-0{padding-bottom:0!important}.pb-sm-1{padding-bottom:.25rem!important}.pb-sm-2{padding-bottom:.5rem!important}.pb-sm-3{padding-bottom:1rem!important}.pb-sm-4{padding-bottom:1.5rem!important}.pb-sm-5{padding-bottom:3rem!important}.ps-sm-0{padding-left:0!important}.ps-sm-1{padding-left:.25rem!important}.ps-sm-2{padding-left:.5rem!important}.ps-sm-3{padding-left:1rem!important}.ps-sm-4{padding-left:1.5rem!important}.ps-sm-5{padding-left:3rem!important}.gap-sm-0{gap:0!important}.gap-sm-1{gap:.25rem!important}.gap-sm-2{gap:.5rem!important}.gap-sm-3{gap:1rem!important}.gap-sm-4{gap:1.5rem!important}.gap-sm-5{gap:3rem!important}.row-gap-sm-0{row-gap:0!important}.row-gap-sm-1{row-gap:.25rem!important}.row-gap-sm-2{row-gap:.5rem!important}.row-gap-sm-3{row-gap:1rem!important}.row-gap-sm-4{row-gap:1.5rem!important}.row-gap-sm-5{row-gap:3rem!important}.column-gap-sm-0{-moz-column-gap:0!important;column-gap:0!important}.column-gap-sm-1{-moz-column-gap:0.25rem!important;column-gap:.25rem!important}.column-gap-sm-2{-moz-column-gap:0.5rem!important;column-gap:.5rem!important}.column-gap-sm-3{-moz-column-gap:1rem!important;column-gap:1rem!important}.column-gap-sm-4{-moz-column-gap:1.5rem!important;column-gap:1.5rem!important}.column-gap-sm-5{-moz-column-gap:3rem!important;column-gap:3rem!important}.text-sm-start{text-align:left!important}.text-sm-end{text-align:right!important}.text-sm-center{text-align:center!important}}@media (min-width:768px){.float-md-start{float:left!important}.float-md-end{float:right!important}.float-md-none{float:none!important}.object-fit-md-contain{-o-object-fit:contain!important;object-fit:contain!important}.object-fit-md-cover{-o-object-fit:cover!important;object-fit:cover!important}.object-fit-md-fill{-o-object-fit:fill!important;object-fit:fill!important}.object-fit-md-scale{-o-object-fit:scale-down!important;object-fit:scale-down!important}.object-fit-md-none{-o-object-fit:none!important;object-fit:none!important}.d-md-inline{display:inline!important}.d-md-inline-block{display:inline-block!important}.d-md-block{display:block!important}.d-md-grid{display:grid!important}.d-md-inline-grid{display:inline-grid!important}.d-md-table{display:table!important}.d-md-table-row{display:table-row!important}.d-md-table-cell{display:table-cell!important}.d-md-flex{display:flex!important}.d-md-inline-flex{display:inline-flex!important}.d-md-none{display:none!important}.flex-md-fill{flex:1 1 auto!important}.flex-md-row{flex-direction:row!important}.flex-md-column{flex-direction:column!important}.flex-md-row-reverse{flex-direction:row-reverse!important}.flex-md-column-reverse{flex-direction:column-reverse!important}.flex-md-grow-0{flex-grow:0!important}.flex-md-grow-1{flex-grow:1!important}.flex-md-shrink-0{flex-shrink:0!important}.flex-md-shrink-1{flex-shrink:1!important}.flex-md-wrap{flex-wrap:wrap!important}.flex-md-nowrap{flex-wrap:nowrap!important}.flex-md-wrap-reverse{flex-wrap:wrap-reverse!important}.justify-content-md-start{justify-content:flex-start!important}.justify-content-md-end{justify-content:flex-end!important}.justify-content-md-center{justify-content:center!important}.justify-content-md-between{justify-content:space-between!important}.justify-content-md-around{justify-content:space-around!important}.justify-content-md-evenly{justify-content:space-evenly!important}.align-items-md-start{align-items:flex-start!important}.align-items-md-end{align-items:flex-end!important}.align-items-md-center{align-items:center!important}.align-items-md-baseline{align-items:baseline!important}.align-items-md-stretch{align-items:stretch!important}.align-content-md-start{align-content:flex-start!important}.align-content-md-end{align-content:flex-end!important}.align-content-md-center{align-content:center!important}.align-content-md-between{align-content:space-between!important}.align-content-md-around{align-content:space-around!important}.align-content-md-stretch{align-content:stretch!important}.align-self-md-auto{align-self:auto!important}.align-self-md-start{align-self:flex-start!important}.align-self-md-end{align-self:flex-end!important}.align-self-md-center{align-self:center!important}.align-self-md-baseline{align-self:baseline!important}.align-self-md-stretch{align-self:stretch!important}.order-md-first{order:-1!important}.order-md-0{order:0!important}.order-md-1{order:1!important}.order-md-2{order:2!important}.order-md-3{order:3!important}.order-md-4{order:4!important}.order-md-5{order:5!important}.order-md-last{order:6!important}.m-md-0{margin:0!important}.m-md-1{margin:.25rem!important}.m-md-2{margin:.5rem!important}.m-md-3{margin:1rem!important}.m-md-4{margin:1.5rem!important}.m-md-5{margin:3rem!important}.m-md-auto{margin:auto!important}.mx-md-0{margin-right:0!important;margin-left:0!important}.mx-md-1{margin-right:.25rem!important;margin-left:.25rem!important}.mx-md-2{margin-right:.5rem!important;margin-left:.5rem!important}.mx-md-3{margin-right:1rem!important;margin-left:1rem!important}.mx-md-4{margin-right:1.5rem!important;margin-left:1.5rem!important}.mx-md-5{margin-right:3rem!important;margin-left:3rem!important}.mx-md-auto{margin-right:auto!important;margin-left:auto!important}.my-md-0{margin-top:0!important;margin-bottom:0!important}.my-md-1{margin-top:.25rem!important;margin-bottom:.25rem!important}.my-md-2{margin-top:.5rem!important;margin-bottom:.5rem!important}.my-md-3{margin-top:1rem!important;margin-bottom:1rem!important}.my-md-4{margin-top:1.5rem!important;margin-bottom:1.5rem!important}.my-md-5{margin-top:3rem!important;margin-bottom:3rem!important}.my-md-auto{margin-top:auto!important;margin-bottom:auto!important}.mt-md-0{margin-top:0!important}.mt-md-1{margin-top:.25rem!important}.mt-md-2{margin-top:.5rem!important}.mt-md-3{margin-top:1rem!important}.mt-md-4{margin-top:1.5rem!important}.mt-md-5{margin-top:3rem!important}.mt-md-auto{margin-top:auto!important}.me-md-0{margin-right:0!important}.me-md-1{margin-right:.25rem!important}.me-md-2{margin-right:.5rem!important}.me-md-3{margin-right:1rem!important}.me-md-4{margin-right:1.5rem!important}.me-md-5{margin-right:3rem!important}.me-md-auto{margin-right:auto!important}.mb-md-0{margin-bottom:0!important}.mb-md-1{margin-bottom:.25rem!important}.mb-md-2{margin-bottom:.5rem!important}.mb-md-3{margin-bottom:1rem!important}.mb-md-4{margin-bottom:1.5rem!important}.mb-md-5{margin-bottom:3rem!important}.mb-md-auto{margin-bottom:auto!important}.ms-md-0{margin-left:0!important}.ms-md-1{margin-left:.25rem!important}.ms-md-2{margin-left:.5rem!important}.ms-md-3{margin-left:1rem!important}.ms-md-4{margin-left:1.5rem!important}.ms-md-5{margin-left:3rem!important}.ms-md-auto{margin-left:auto!important}.p-md-0{padding:0!important}.p-md-1{padding:.25rem!important}.p-md-2{padding:.5rem!important}.p-md-3{padding:1rem!important}.p-md-4{padding:1.5rem!important}.p-md-5{padding:3rem!important}.px-md-0{padding-right:0!important;padding-left:0!important}.px-md-1{padding-right:.25rem!important;padding-left:.25rem!important}.px-md-2{padding-right:.5rem!important;padding-left:.5rem!important}.px-md-3{padding-right:1rem!important;padding-left:1rem!important}.px-md-4{padding-right:1.5rem!important;padding-left:1.5rem!important}.px-md-5{padding-right:3rem!important;padding-left:3rem!important}.py-md-0{padding-top:0!important;padding-bottom:0!important}.py-md-1{padding-top:.25rem!important;padding-bottom:.25rem!important}.py-md-2{padding-top:.5rem!important;padding-bottom:.5rem!important}.py-md-3{padding-top:1rem!important;padding-bottom:1rem!important}.py-md-4{padding-top:1.5rem!important;padding-bottom:1.5rem!important}.py-md-5{padding-top:3rem!important;padding-bottom:3rem!important}.pt-md-0{padding-top:0!important}.pt-md-1{padding-top:.25rem!important}.pt-md-2{padding-top:.5rem!important}.pt-md-3{padding-top:1rem!important}.pt-md-4{padding-top:1.5rem!important}.pt-md-5{padding-top:3rem!important}.pe-md-0{padding-right:0!important}.pe-md-1{padding-right:.25rem!important}.pe-md-2{padding-right:.5rem!important}.pe-md-3{padding-right:1rem!important}.pe-md-4{padding-right:1.5rem!important}.pe-md-5{padding-right:3rem!important}.pb-md-0{padding-bottom:0!important}.pb-md-1{padding-bottom:.25rem!important}.pb-md-2{padding-bottom:.5rem!important}.pb-md-3{padding-bottom:1rem!important}.pb-md-4{padding-bottom:1.5rem!important}.pb-md-5{padding-bottom:3rem!important}.ps-md-0{padding-left:0!important}.ps-md-1{padding-left:.25rem!important}.ps-md-2{padding-left:.5rem!important}.ps-md-3{padding-left:1rem!important}.ps-md-4{padding-left:1.5rem!important}.ps-md-5{padding-left:3rem!important}.gap-md-0{gap:0!important}.gap-md-1{gap:.25rem!important}.gap-md-2{gap:.5rem!important}.gap-md-3{gap:1rem!important}.gap-md-4{gap:1.5rem!important}.gap-md-5{gap:3rem!important}.row-gap-md-0{row-gap:0!important}.row-gap-md-1{row-gap:.25rem!important}.row-gap-md-2{row-gap:.5rem!important}.row-gap-md-3{row-gap:1rem!important}.row-gap-md-4{row-gap:1.5rem!important}.row-gap-md-5{row-gap:3rem!important}.column-gap-md-0{-moz-column-gap:0!important;column-gap:0!important}.column-gap-md-1{-moz-column-gap:0.25rem!important;column-gap:.25rem!important}.column-gap-md-2{-moz-column-gap:0.5rem!important;column-gap:.5rem!important}.column-gap-md-3{-moz-column-gap:1rem!important;column-gap:1rem!important}.column-gap-md-4{-moz-column-gap:1.5rem!important;column-gap:1.5rem!important}.column-gap-md-5{-moz-column-gap:3rem!important;column-gap:3rem!important}.text-md-start{text-align:left!important}.text-md-end{text-align:right!important}.text-md-center{text-align:center!important}}@media (min-width:992px){.float-lg-start{float:left!important}.float-lg-end{float:right!important}.float-lg-none{float:none!important}.object-fit-lg-contain{-o-object-fit:contain!important;object-fit:contain!important}.object-fit-lg-cover{-o-object-fit:cover!important;object-fit:cover!important}.object-fit-lg-fill{-o-object-fit:fill!important;object-fit:fill!important}.object-fit-lg-scale{-o-object-fit:scale-down!important;object-fit:scale-down!important}.object-fit-lg-none{-o-object-fit:none!important;object-fit:none!important}.d-lg-inline{display:inline!important}.d-lg-inline-block{display:inline-block!important}.d-lg-block{display:block!important}.d-lg-grid{display:grid!important}.d-lg-inline-grid{display:inline-grid!important}.d-lg-table{display:table!important}.d-lg-table-row{display:table-row!important}.d-lg-table-cell{display:table-cell!important}.d-lg-flex{display:flex!important}.d-lg-inline-flex{display:inline-flex!important}.d-lg-none{display:none!important}.flex-lg-fill{flex:1 1 auto!important}.flex-lg-row{flex-direction:row!important}.flex-lg-column{flex-direction:column!important}.flex-lg-row-reverse{flex-direction:row-reverse!important}.flex-lg-column-reverse{flex-direction:column-reverse!important}.flex-lg-grow-0{flex-grow:0!important}.flex-lg-grow-1{flex-grow:1!important}.flex-lg-shrink-0{flex-shrink:0!important}.flex-lg-shrink-1{flex-shrink:1!important}.flex-lg-wrap{flex-wrap:wrap!important}.flex-lg-nowrap{flex-wrap:nowrap!important}.flex-lg-wrap-reverse{flex-wrap:wrap-reverse!important}.justify-content-lg-start{justify-content:flex-start!important}.justify-content-lg-end{justify-content:flex-end!important}.justify-content-lg-center{justify-content:center!important}.justify-content-lg-between{justify-content:space-between!important}.justify-content-lg-around{justify-content:space-around!important}.justify-content-lg-evenly{justify-content:space-evenly!important}.align-items-lg-start{align-items:flex-start!important}.align-items-lg-end{align-items:flex-end!important}.align-items-lg-center{align-items:center!important}.align-items-lg-baseline{align-items:baseline!important}.align-items-lg-stretch{align-items:stretch!important}.align-content-lg-start{align-content:flex-start!important}.align-content-lg-end{align-content:flex-end!important}.align-content-lg-center{align-content:center!important}.align-content-lg-between{align-content:space-between!important}.align-content-lg-around{align-content:space-around!important}.align-content-lg-stretch{align-content:stretch!important}.align-self-lg-auto{align-self:auto!important}.align-self-lg-start{align-self:flex-start!important}.align-self-lg-end{align-self:flex-end!important}.align-self-lg-center{align-self:center!important}.align-self-lg-baseline{align-self:baseline!important}.align-self-lg-stretch{align-self:stretch!important}.order-lg-first{order:-1!important}.order-lg-0{order:0!important}.order-lg-1{order:1!important}.order-lg-2{order:2!important}.order-lg-3{order:3!important}.order-lg-4{order:4!important}.order-lg-5{order:5!important}.order-lg-last{order:6!important}.m-lg-0{margin:0!important}.m-lg-1{margin:.25rem!important}.m-lg-2{margin:.5rem!important}.m-lg-3{margin:1rem!important}.m-lg-4{margin:1.5rem!important}.m-lg-5{margin:3rem!important}.m-lg-auto{margin:auto!important}.mx-lg-0{margin-right:0!important;margin-left:0!important}.mx-lg-1{margin-right:.25rem!important;margin-left:.25rem!important}.mx-lg-2{margin-right:.5rem!important;margin-left:.5rem!important}.mx-lg-3{margin-right:1rem!important;margin-left:1rem!important}.mx-lg-4{margin-right:1.5rem!important;margin-left:1.5rem!important}.mx-lg-5{margin-right:3rem!important;margin-left:3rem!important}.mx-lg-auto{margin-right:auto!important;margin-left:auto!important}.my-lg-0{margin-top:0!important;margin-bottom:0!important}.my-lg-1{margin-top:.25rem!important;margin-bottom:.25rem!important}.my-lg-2{margin-top:.5rem!important;margin-bottom:.5rem!important}.my-lg-3{margin-top:1rem!important;margin-bottom:1rem!important}.my-lg-4{margin-top:1.5rem!important;margin-bottom:1.5rem!important}.my-lg-5{margin-top:3rem!important;margin-bottom:3rem!important}.my-lg-auto{margin-top:auto!important;margin-bottom:auto!important}.mt-lg-0{margin-top:0!important}.mt-lg-1{margin-top:.25rem!important}.mt-lg-2{margin-top:.5rem!important}.mt-lg-3{margin-top:1rem!important}.mt-lg-4{margin-top:1.5rem!important}.mt-lg-5{margin-top:3rem!important}.mt-lg-auto{margin-top:auto!important}.me-lg-0{margin-right:0!important}.me-lg-1{margin-right:.25rem!important}.me-lg-2{margin-right:.5rem!important}.me-lg-3{margin-right:1rem!important}.me-lg-4{margin-right:1.5rem!important}.me-lg-5{margin-right:3rem!important}.me-lg-auto{margin-right:auto!important}.mb-lg-0{margin-bottom:0!important}.mb-lg-1{margin-bottom:.25rem!important}.mb-lg-2{margin-bottom:.5rem!important}.mb-lg-3{margin-bottom:1rem!important}.mb-lg-4{margin-bottom:1.5rem!important}.mb-lg-5{margin-bottom:3rem!important}.mb-lg-auto{margin-bottom:auto!important}.ms-lg-0{margin-left:0!important}.ms-lg-1{margin-left:.25rem!important}.ms-lg-2{margin-left:.5rem!important}.ms-lg-3{margin-left:1rem!important}.ms-lg-4{margin-left:1.5rem!important}.ms-lg-5{margin-left:3rem!important}.ms-lg-auto{margin-left:auto!important}.p-lg-0{padding:0!important}.p-lg-1{padding:.25rem!important}.p-lg-2{padding:.5rem!important}.p-lg-3{padding:1rem!important}.p-lg-4{padding:1.5rem!important}.p-lg-5{padding:3rem!important}.px-lg-0{padding-right:0!important;padding-left:0!important}.px-lg-1{padding-right:.25rem!important;padding-left:.25rem!important}.px-lg-2{padding-right:.5rem!important;padding-left:.5rem!important}.px-lg-3{padding-right:1rem!important;padding-left:1rem!important}.px-lg-4{padding-right:1.5rem!important;padding-left:1.5rem!important}.px-lg-5{padding-right:3rem!important;padding-left:3rem!important}.py-lg-0{padding-top:0!important;padding-bottom:0!important}.py-lg-1{padding-top:.25rem!important;padding-bottom:.25rem!important}.py-lg-2{padding-top:.5rem!important;padding-bottom:.5rem!important}.py-lg-3{padding-top:1rem!important;padding-bottom:1rem!important}.py-lg-4{padding-top:1.5rem!important;padding-bottom:1.5rem!important}.py-lg-5{padding-top:3rem!important;padding-bottom:3rem!important}.pt-lg-0{padding-top:0!important}.pt-lg-1{padding-top:.25rem!important}.pt-lg-2{padding-top:.5rem!important}.pt-lg-3{padding-top:1rem!important}.pt-lg-4{padding-top:1.5rem!important}.pt-lg-5{padding-top:3rem!important}.pe-lg-0{padding-right:0!important}.pe-lg-1{padding-right:.25rem!important}.pe-lg-2{padding-right:.5rem!important}.pe-lg-3{padding-right:1rem!important}.pe-lg-4{padding-right:1.5rem!important}.pe-lg-5{padding-right:3rem!important}.pb-lg-0{padding-bottom:0!important}.pb-lg-1{padding-bottom:.25rem!important}.pb-lg-2{padding-bottom:.5rem!important}.pb-lg-3{padding-bottom:1rem!important}.pb-lg-4{padding-bottom:1.5rem!important}.pb-lg-5{padding-bottom:3rem!important}.ps-lg-0{padding-left:0!important}.ps-lg-1{padding-left:.25rem!important}.ps-lg-2{padding-left:.5rem!important}.ps-lg-3{padding-left:1rem!important}.ps-lg-4{padding-left:1.5rem!important}.ps-lg-5{padding-left:3rem!important}.gap-lg-0{gap:0!important}.gap-lg-1{gap:.25rem!important}.gap-lg-2{gap:.5rem!important}.gap-lg-3{gap:1rem!important}.gap-lg-4{gap:1.5rem!important}.gap-lg-5{gap:3rem!important}.row-gap-lg-0{row-gap:0!important}.row-gap-lg-1{row-gap:.25rem!important}.row-gap-lg-2{row-gap:.5rem!important}.row-gap-lg-3{row-gap:1rem!important}.row-gap-lg-4{row-gap:1.5rem!important}.row-gap-lg-5{row-gap:3rem!important}.column-gap-lg-0{-moz-column-gap:0!important;column-gap:0!important}.column-gap-lg-1{-moz-column-gap:0.25rem!important;column-gap:.25rem!important}.column-gap-lg-2{-moz-column-gap:0.5rem!important;column-gap:.5rem!important}.column-gap-lg-3{-moz-column-gap:1rem!important;column-gap:1rem!important}.column-gap-lg-4{-moz-column-gap:1.5rem!important;column-gap:1.5rem!important}.column-gap-lg-5{-moz-column-gap:3rem!important;column-gap:3rem!important}.text-lg-start{text-align:left!important}.text-lg-end{text-align:right!important}.text-lg-center{text-align:center!important}}@media (min-width:1200px){.float-xl-start{float:left!important}.float-xl-end{float:right!important}.float-xl-none{float:none!important}.object-fit-xl-contain{-o-object-fit:contain!important;object-fit:contain!important}.object-fit-xl-cover{-o-object-fit:cover!important;object-fit:cover!important}.object-fit-xl-fill{-o-object-fit:fill!important;object-fit:fill!important}.object-fit-xl-scale{-o-object-fit:scale-down!important;object-fit:scale-down!important}.object-fit-xl-none{-o-object-fit:none!important;object-fit:none!important}.d-xl-inline{display:inline!important}.d-xl-inline-block{display:inline-block!important}.d-xl-block{display:block!important}.d-xl-grid{display:grid!important}.d-xl-inline-grid{display:inline-grid!important}.d-xl-table{display:table!important}.d-xl-table-row{display:table-row!important}.d-xl-table-cell{display:table-cell!important}.d-xl-flex{display:flex!important}.d-xl-inline-flex{display:inline-flex!important}.d-xl-none{display:none!important}.flex-xl-fill{flex:1 1 auto!important}.flex-xl-row{flex-direction:row!important}.flex-xl-column{flex-direction:column!important}.flex-xl-row-reverse{flex-direction:row-reverse!important}.flex-xl-column-reverse{flex-direction:column-reverse!important}.flex-xl-grow-0{flex-grow:0!important}.flex-xl-grow-1{flex-grow:1!important}.flex-xl-shrink-0{flex-shrink:0!important}.flex-xl-shrink-1{flex-shrink:1!important}.flex-xl-wrap{flex-wrap:wrap!important}.flex-xl-nowrap{flex-wrap:nowrap!important}.flex-xl-wrap-reverse{flex-wrap:wrap-reverse!important}.justify-content-xl-start{justify-content:flex-start!important}.justify-content-xl-end{justify-content:flex-end!important}.justify-content-xl-center{justify-content:center!important}.justify-content-xl-between{justify-content:space-between!important}.justify-content-xl-around{justify-content:space-around!important}.justify-content-xl-evenly{justify-content:space-evenly!important}.align-items-xl-start{align-items:flex-start!important}.align-items-xl-end{align-items:flex-end!important}.align-items-xl-center{align-items:center!important}.align-items-xl-baseline{align-items:baseline!important}.align-items-xl-stretch{align-items:stretch!important}.align-content-xl-start{align-content:flex-start!important}.align-content-xl-end{align-content:flex-end!important}.align-content-xl-center{align-content:center!important}.align-content-xl-between{align-content:space-between!important}.align-content-xl-around{align-content:space-around!important}.align-content-xl-stretch{align-content:stretch!important}.align-self-xl-auto{align-self:auto!important}.align-self-xl-start{align-self:flex-start!important}.align-self-xl-end{align-self:flex-end!important}.align-self-xl-center{align-self:center!important}.align-self-xl-baseline{align-self:baseline!important}.align-self-xl-stretch{align-self:stretch!important}.order-xl-first{order:-1!important}.order-xl-0{order:0!important}.order-xl-1{order:1!important}.order-xl-2{order:2!important}.order-xl-3{order:3!important}.order-xl-4{order:4!important}.order-xl-5{order:5!important}.order-xl-last{order:6!important}.m-xl-0{margin:0!important}.m-xl-1{margin:.25rem!important}.m-xl-2{margin:.5rem!important}.m-xl-3{margin:1rem!important}.m-xl-4{margin:1.5rem!important}.m-xl-5{margin:3rem!important}.m-xl-auto{margin:auto!important}.mx-xl-0{margin-right:0!important;margin-left:0!important}.mx-xl-1{margin-right:.25rem!important;margin-left:.25rem!important}.mx-xl-2{margin-right:.5rem!important;margin-left:.5rem!important}.mx-xl-3{margin-right:1rem!important;margin-left:1rem!important}.mx-xl-4{margin-right:1.5rem!important;margin-left:1.5rem!important}.mx-xl-5{margin-right:3rem!important;margin-left:3rem!important}.mx-xl-auto{margin-right:auto!important;margin-left:auto!important}.my-xl-0{margin-top:0!important;margin-bottom:0!important}.my-xl-1{margin-top:.25rem!important;margin-bottom:.25rem!important}.my-xl-2{margin-top:.5rem!important;margin-bottom:.5rem!important}.my-xl-3{margin-top:1rem!important;margin-bottom:1rem!important}.my-xl-4{margin-top:1.5rem!important;margin-bottom:1.5rem!important}.my-xl-5{margin-top:3rem!important;margin-bottom:3rem!important}.my-xl-auto{margin-top:auto!important;margin-bottom:auto!important}.mt-xl-0{margin-top:0!important}.mt-xl-1{margin-top:.25rem!important}.mt-xl-2{margin-top:.5rem!important}.mt-xl-3{margin-top:1rem!important}.mt-xl-4{margin-top:1.5rem!important}.mt-xl-5{margin-top:3rem!important}.mt-xl-auto{margin-top:auto!important}.me-xl-0{margin-right:0!important}.me-xl-1{margin-right:.25rem!important}.me-xl-2{margin-right:.5rem!important}.me-xl-3{margin-right:1rem!important}.me-xl-4{margin-right:1.5rem!important}.me-xl-5{margin-right:3rem!important}.me-xl-auto{margin-right:auto!important}.mb-xl-0{margin-bottom:0!important}.mb-xl-1{margin-bottom:.25rem!important}.mb-xl-2{margin-bottom:.5rem!important}.mb-xl-3{margin-bottom:1rem!important}.mb-xl-4{margin-bottom:1.5rem!important}.mb-xl-5{margin-bottom:3rem!important}.mb-xl-auto{margin-bottom:auto!important}.ms-xl-0{margin-left:0!important}.ms-xl-1{margin-left:.25rem!important}.ms-xl-2{margin-left:.5rem!important}.ms-xl-3{margin-left:1rem!important}.ms-xl-4{margin-left:1.5rem!important}.ms-xl-5{margin-left:3rem!important}.ms-xl-auto{margin-left:auto!important}.p-xl-0{padding:0!important}.p-xl-1{padding:.25rem!important}.p-xl-2{padding:.5rem!important}.p-xl-3{padding:1rem!important}.p-xl-4{padding:1.5rem!important}.p-xl-5{padding:3rem!important}.px-xl-0{padding-right:0!important;padding-left:0!important}.px-xl-1{padding-right:.25rem!important;padding-left:.25rem!important}.px-xl-2{padding-right:.5rem!important;padding-left:.5rem!important}.px-xl-3{padding-right:1rem!important;padding-left:1rem!important}.px-xl-4{padding-right:1.5rem!important;padding-left:1.5rem!important}.px-xl-5{padding-right:3rem!important;padding-left:3rem!important}.py-xl-0{padding-top:0!important;padding-bottom:0!important}.py-xl-1{padding-top:.25rem!important;padding-bottom:.25rem!important}.py-xl-2{padding-top:.5rem!important;padding-bottom:.5rem!important}.py-xl-3{padding-top:1rem!important;padding-bottom:1rem!important}.py-xl-4{padding-top:1.5rem!important;padding-bottom:1.5rem!important}.py-xl-5{padding-top:3rem!important;padding-bottom:3rem!important}.pt-xl-0{padding-top:0!important}.pt-xl-1{padding-top:.25rem!important}.pt-xl-2{padding-top:.5rem!important}.pt-xl-3{padding-top:1rem!important}.pt-xl-4{padding-top:1.5rem!important}.pt-xl-5{padding-top:3rem!important}.pe-xl-0{padding-right:0!important}.pe-xl-1{padding-right:.25rem!important}.pe-xl-2{padding-right:.5rem!important}.pe-xl-3{padding-right:1rem!important}.pe-xl-4{padding-right:1.5rem!important}.pe-xl-5{padding-right:3rem!important}.pb-xl-0{padding-bottom:0!important}.pb-xl-1{padding-bottom:.25rem!important}.pb-xl-2{padding-bottom:.5rem!important}.pb-xl-3{padding-bottom:1rem!important}.pb-xl-4{padding-bottom:1.5rem!important}.pb-xl-5{padding-bottom:3rem!important}.ps-xl-0{padding-left:0!important}.ps-xl-1{padding-left:.25rem!important}.ps-xl-2{padding-left:.5rem!important}.ps-xl-3{padding-left:1rem!important}.ps-xl-4{padding-left:1.5rem!important}.ps-xl-5{padding-left:3rem!important}.gap-xl-0{gap:0!important}.gap-xl-1{gap:.25rem!important}.gap-xl-2{gap:.5rem!important}.gap-xl-3{gap:1rem!important}.gap-xl-4{gap:1.5rem!important}.gap-xl-5{gap:3rem!important}.row-gap-xl-0{row-gap:0!important}.row-gap-xl-1{row-gap:.25rem!important}.row-gap-xl-2{row-gap:.5rem!important}.row-gap-xl-3{row-gap:1rem!important}.row-gap-xl-4{row-gap:1.5rem!important}.row-gap-xl-5{row-gap:3rem!important}.column-gap-xl-0{-moz-column-gap:0!important;column-gap:0!important}.column-gap-xl-1{-moz-column-gap:0.25rem!important;column-gap:.25rem!important}.column-gap-xl-2{-moz-column-gap:0.5rem!important;column-gap:.5rem!important}.column-gap-xl-3{-moz-column-gap:1rem!important;column-gap:1rem!important}.column-gap-xl-4{-moz-column-gap:1.5rem!important;column-gap:1.5rem!important}.column-gap-xl-5{-moz-column-gap:3rem!important;column-gap:3rem!important}.text-xl-start{text-align:left!important}.text-xl-end{text-align:right!important}.text-xl-center{text-align:center!important}}@media (min-width:1400px){.float-xxl-start{float:left!important}.float-xxl-end{float:right!important}.float-xxl-none{float:none!important}.object-fit-xxl-contain{-o-object-fit:contain!important;object-fit:contain!important}.object-fit-xxl-cover{-o-object-fit:cover!important;object-fit:cover!important}.object-fit-xxl-fill{-o-object-fit:fill!important;object-fit:fill!important}.object-fit-xxl-scale{-o-object-fit:scale-down!important;object-fit:scale-down!important}.object-fit-xxl-none{-o-object-fit:none!important;object-fit:none!important}.d-xxl-inline{display:inline!important}.d-xxl-inline-block{display:inline-block!important}.d-xxl-block{display:block!important}.d-xxl-grid{display:grid!important}.d-xxl-inline-grid{display:inline-grid!important}.d-xxl-table{display:table!important}.d-xxl-table-row{display:table-row!important}.d-xxl-table-cell{display:table-cell!important}.d-xxl-flex{display:flex!important}.d-xxl-inline-flex{display:inline-flex!important}.d-xxl-none{display:none!important}.flex-xxl-fill{flex:1 1 auto!important}.flex-xxl-row{flex-direction:row!important}.flex-xxl-column{flex-direction:column!important}.flex-xxl-row-reverse{flex-direction:row-reverse!important}.flex-xxl-column-reverse{flex-direction:column-reverse!important}.flex-xxl-grow-0{flex-grow:0!important}.flex-xxl-grow-1{flex-grow:1!important}.flex-xxl-shrink-0{flex-shrink:0!important}.flex-xxl-shrink-1{flex-shrink:1!important}.flex-xxl-wrap{flex-wrap:wrap!important}.flex-xxl-nowrap{flex-wrap:nowrap!important}.flex-xxl-wrap-reverse{flex-wrap:wrap-reverse!important}.justify-content-xxl-start{justify-content:flex-start!important}.justify-content-xxl-end{justify-content:flex-end!important}.justify-content-xxl-center{justify-content:center!important}.justify-content-xxl-between{justify-content:space-between!important}.justify-content-xxl-around{justify-content:space-around!important}.justify-content-xxl-evenly{justify-content:space-evenly!important}.align-items-xxl-start{align-items:flex-start!important}.align-items-xxl-end{align-items:flex-end!important}.align-items-xxl-center{align-items:center!important}.align-items-xxl-baseline{align-items:baseline!important}.align-items-xxl-stretch{align-items:stretch!important}.align-content-xxl-start{align-content:flex-start!important}.align-content-xxl-end{align-content:flex-end!important}.align-content-xxl-center{align-content:center!important}.align-content-xxl-between{align-content:space-between!important}.align-content-xxl-around{align-content:space-around!important}.align-content-xxl-stretch{align-content:stretch!important}.align-self-xxl-auto{align-self:auto!important}.align-self-xxl-start{align-self:flex-start!important}.align-self-xxl-end{align-self:flex-end!important}.align-self-xxl-center{align-self:center!important}.align-self-xxl-baseline{align-self:baseline!important}.align-self-xxl-stretch{align-self:stretch!important}.order-xxl-first{order:-1!important}.order-xxl-0{order:0!important}.order-xxl-1{order:1!important}.order-xxl-2{order:2!important}.order-xxl-3{order:3!important}.order-xxl-4{order:4!important}.order-xxl-5{order:5!important}.order-xxl-last{order:6!important}.m-xxl-0{margin:0!important}.m-xxl-1{margin:.25rem!important}.m-xxl-2{margin:.5rem!important}.m-xxl-3{margin:1rem!important}.m-xxl-4{margin:1.5rem!important}.m-xxl-5{margin:3rem!important}.m-xxl-auto{margin:auto!important}.mx-xxl-0{margin-right:0!important;margin-left:0!important}.mx-xxl-1{margin-right:.25rem!important;margin-left:.25rem!important}.mx-xxl-2{margin-right:.5rem!important;margin-left:.5rem!important}.mx-xxl-3{margin-right:1rem!important;margin-left:1rem!important}.mx-xxl-4{margin-right:1.5rem!important;margin-left:1.5rem!important}.mx-xxl-5{margin-right:3rem!important;margin-left:3rem!important}.mx-xxl-auto{margin-right:auto!important;margin-left:auto!important}.my-xxl-0{margin-top:0!important;margin-bottom:0!important}.my-xxl-1{margin-top:.25rem!important;margin-bottom:.25rem!important}.my-xxl-2{margin-top:.5rem!important;margin-bottom:.5rem!important}.my-xxl-3{margin-top:1rem!important;margin-bottom:1rem!important}.my-xxl-4{margin-top:1.5rem!important;margin-bottom:1.5rem!important}.my-xxl-5{margin-top:3rem!important;margin-bottom:3rem!important}.my-xxl-auto{margin-top:auto!important;margin-bottom:auto!important}.mt-xxl-0{margin-top:0!important}.mt-xxl-1{margin-top:.25rem!important}.mt-xxl-2{margin-top:.5rem!important}.mt-xxl-3{margin-top:1rem!important}.mt-xxl-4{margin-top:1.5rem!important}.mt-xxl-5{margin-top:3rem!important}.mt-xxl-auto{margin-top:auto!important}.me-xxl-0{margin-right:0!important}.me-xxl-1{margin-right:.25rem!important}.me-xxl-2{margin-right:.5rem!important}.me-xxl-3{margin-right:1rem!important}.me-xxl-4{margin-right:1.5rem!important}.me-xxl-5{margin-right:3rem!important}.me-xxl-auto{margin-right:auto!important}.mb-xxl-0{margin-bottom:0!important}.mb-xxl-1{margin-bottom:.25rem!important}.mb-xxl-2{margin-bottom:.5rem!important}.mb-xxl-3{margin-bottom:1rem!important}.mb-xxl-4{margin-bottom:1.5rem!important}.mb-xxl-5{margin-bottom:3rem!important}.mb-xxl-auto{margin-bottom:auto!important}.ms-xxl-0{margin-left:0!important}.ms-xxl-1{margin-left:.25rem!important}.ms-xxl-2{margin-left:.5rem!important}.ms-xxl-3{margin-left:1rem!important}.ms-xxl-4{margin-left:1.5rem!important}.ms-xxl-5{margin-left:3rem!important}.ms-xxl-auto{margin-left:auto!important}.p-xxl-0{padding:0!important}.p-xxl-1{padding:.25rem!important}.p-xxl-2{padding:.5rem!important}.p-xxl-3{padding:1rem!important}.p-xxl-4{padding:1.5rem!important}.p-xxl-5{padding:3rem!important}.px-xxl-0{padding-right:0!important;padding-left:0!important}.px-xxl-1{padding-right:.25rem!important;padding-left:.25rem!important}.px-xxl-2{padding-right:.5rem!important;padding-left:.5rem!important}.px-xxl-3{padding-right:1rem!important;padding-left:1rem!important}.px-xxl-4{padding-right:1.5rem!important;padding-left:1.5rem!important}.px-xxl-5{padding-right:3rem!important;padding-left:3rem!important}.py-xxl-0{padding-top:0!important;padding-bottom:0!important}.py-xxl-1{padding-top:.25rem!important;padding-bottom:.25rem!important}.py-xxl-2{padding-top:.5rem!important;padding-bottom:.5rem!important}.py-xxl-3{padding-top:1rem!important;padding-bottom:1rem!important}.py-xxl-4{padding-top:1.5rem!important;padding-bottom:1.5rem!important}.py-xxl-5{padding-top:3rem!important;padding-bottom:3rem!important}.pt-xxl-0{padding-top:0!important}.pt-xxl-1{padding-top:.25rem!important}.pt-xxl-2{padding-top:.5rem!important}.pt-xxl-3{padding-top:1rem!important}.pt-xxl-4{padding-top:1.5rem!important}.pt-xxl-5{padding-top:3rem!important}.pe-xxl-0{padding-right:0!important}.pe-xxl-1{padding-right:.25rem!important}.pe-xxl-2{padding-right:.5rem!important}.pe-xxl-3{padding-right:1rem!important}.pe-xxl-4{padding-right:1.5rem!important}.pe-xxl-5{padding-right:3rem!important}.pb-xxl-0{padding-bottom:0!important}.pb-xxl-1{padding-bottom:.25rem!important}.pb-xxl-2{padding-bottom:.5rem!important}.pb-xxl-3{padding-bottom:1rem!important}.pb-xxl-4{padding-bottom:1.5rem!important}.pb-xxl-5{padding-bottom:3rem!important}.ps-xxl-0{padding-left:0!important}.ps-xxl-1{padding-left:.25rem!important}.ps-xxl-2{padding-left:.5rem!important}.ps-xxl-3{padding-left:1rem!important}.ps-xxl-4{padding-left:1.5rem!important}.ps-xxl-5{padding-left:3rem!important}.gap-xxl-0{gap:0!important}.gap-xxl-1{gap:.25rem!important}.gap-xxl-2{gap:.5rem!important}.gap-xxl-3{gap:1rem!important}.gap-xxl-4{gap:1.5rem!important}.gap-xxl-5{gap:3rem!important}.row-gap-xxl-0{row-gap:0!important}.row-gap-xxl-1{row-gap:.25rem!important}.row-gap-xxl-2{row-gap:.5rem!important}.row-gap-xxl-3{row-gap:1rem!important}.row-gap-xxl-4{row-gap:1.5rem!important}.row-gap-xxl-5{row-gap:3rem!important}.column-gap-xxl-0{-moz-column-gap:0!important;column-gap:0!important}.column-gap-xxl-1{-moz-column-gap:0.25rem!important;column-gap:.25rem!important}.column-gap-xxl-2{-moz-column-gap:0.5rem!important;column-gap:.5rem!important}.column-gap-xxl-3{-moz-column-gap:1rem!important;column-gap:1rem!important}.column-gap-xxl-4{-moz-column-gap:1.5rem!important;column-gap:1.5rem!important}.column-gap-xxl-5{-moz-column-gap:3rem!important;column-gap:3rem!important}.text-xxl-start{text-align:left!important}.text-xxl-end{text-align:right!important}.text-xxl-center{text-align:center!important}}@media (min-width:1200px){.fs-1{font-size:2.5rem!important}.fs-2{font-size:2rem!important}.fs-3{font-size:1.75rem!important}.fs-4{font-size:1.5rem!important}}@media print{.d-print-inline{display:inline!important}.d-print-inline-block{display:inline-block!important}.d-print-block{display:block!important}.d-print-grid{display:grid!important}.d-print-inline-grid{display:inline-grid!important}.d-print-table{display:table!important}.d-print-table-row{display:table-row!important}.d-print-table-cell{display:table-cell!important}.d-print-flex{display:flex!important}.d-print-inline-flex{display:inline-flex!important}.d-print-none{display:none!important}}\n/*# sourceMappingURL=bootstrap.min.css.map */",
      "      <li class=\"bd-links-span-all\">\n        <a href=\"/docs/{{ $.Site.Params.docs_version }}/{{ $group_slug }}/\" class=\"bd-links-link d-inline-block rounded small {{ if $is_active_group }} active{{ end }}\"{{ if $is_active_group }} aria-current=\"page\"{{ end }}>\n          {{ $group.title }}\n        </a>\n      </li>\n    {{- end }}\n  {{- end }}\n  </ul>\n</nav>\n",
      "const CLASS_NAME_SHOW = 'show'\n\n/**\n * Class definition\n */\n\nclass Alert extends BaseComponent {\n  // Getters\n  static get NAME() {\n    return NAME\n  }\n\n  // Public\n  close() {\n    const closeEvent = EventHandler.trigger(this._element, EVENT_CLOSE)\n\n    if (closeEvent.defaultPrevented) {\n      return\n    }\n\n    this._element.classList.remove(CLASS_NAME_SHOW)\n\n    const isAnimated = this._element.classList.contains(CLASS_NAME_FADE)\n    this._queueCallback(() => this._destroyElement(), this._element, isAnimated)\n  }\n\n  // Private\n  _destroyElement() {\n    this._element.remove()\n    EventHandler.trigger(this._element, EVENT_CLOSED)\n    this.dispose()\n  }\n\n  // Static\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = Alert.getOrCreateInstance(this)\n\n      if (typeof config !== 'string') {\n        return\n      }\n\n      if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {\n        throw new TypeError(`No method named \"${config}\"`)\n      }\n\n      data[config](this)\n    })\n  }\n}\n\n/**\n * Data API implementation\n */\n\nenableDismissTrigger(Alert, 'close')\n\n/**\n * jQuery\n */\n\ndefineJQueryPlugin(Alert)\n\nexport default Alert",
      "",
      "}\n\nconst getElement = object => {\n  // it's a jQuery object or a node element\n  if (isElement(object)) {\n    return object.jquery ? object[0] : object\n  }\n\n  if (typeof object === 'string' && object.length > 0) {\n    return document.querySelector(parseSelector(object))\n  }\n\n  return null\n}\n\nconst isVisible = element => {\n  if (!isElement(element) || element.getClientRects().length === 0) {\n    return false\n  }\n\n  const elementIsVisible = getComputedStyle(element).getPropertyValue('visibility') === 'visible'\n  // Handle `details` element as its content may falsie appear visible when it is closed\n  const closedDetails = element.closest('details:not([open])')\n\n  if (!closedDetails) {\n    return elementIsVisible\n  }\n\n  if (closedDetails !== element) {\n    const summary = element.closest('summary')\n    if (summary && summary.parentNode !== closedDetails) {\n      return false\n    }\n\n    if (summary === null) {\n      return false\n    }\n  }\n\n  return elementIsVisible\n}\n\nconst isDisabled = element => {\n  if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n    return true\n  }\n\n  if (element.classList.contains('disabled')) {\n    return true\n  }\n\n  if (typeof element.disabled !== 'undefined') {\n    return element.disabled\n  }\n\n  return element.hasAttribute('disabled') && element.getAttribute('disabled') !== 'false'\n}\n\nconst findShadowRoot = element => {\n  if (!document.documentElement.attachShadow) {\n    return null\n  }\n\n  // Can find the shadow root otherwise it'll return the document",
      "\n/* CUSTOMIZE THE CAROUSEL\n-------------------------------------------------- */\n\n/* Carousel base class */\n.carousel {\n  margin-bottom: 4rem;\n}\n/* Since positioning the image, we need to help out the caption */\n.carousel-caption {\n  bottom: 3rem;\n  z-index: 10;\n}\n\n/* Declare heights because of positioning of img element */\n.carousel-item {\n  height: 32rem;\n}\n\n\n/* MARKETING CONTENT\n-------------------------------------------------- */\n\n/* Center align the text within the three columns below the carousel */\n.marketing .col-lg-4 {\n  margin-bottom: 1.5rem;\n  text-align: center;\n}\n/* rtl:begin:ignore */\n.marketing .col-lg-4 p {\n  margin-right: .75rem;\n  margin-left: .75rem;\n}\n/* rtl:end:ignore */\n\n\n/* Featurettes\n------------------------- */\n\n.featurette-divider {\n  margin: 5rem 0; /* Space out the Bootstrap <hr> more */\n}\n\n/* Thin out the marketing headings */\n/* rtl:begin:remove */\n.featurette-heading {\n  letter-spacing: -.05rem;\n}\n\n/* rtl:end:remove */\n\n/* RESPONSIVE CSS\n-------------------------------------------------- */\n\n@media (min-width: 40em) {\n  /* Bump up size of carousel content */\n  .carousel-caption p {\n    margin-bottom: 1.25rem;\n    font-size: 1.25rem;\n    line-height: 1.4;\n  }\n\n  .featurette-heading {\n    font-size: 50px;",
      "(() => {\n  'use strict'\n\n  document.querySelector('#navbarSideCollapse').addEventListener('click', () => {\n    document.querySelector('.offcanvas-collapse').classList.toggle('open')\n  })\n})()\n",
      "{{- else -}}\n  <svg class=\"bd-placeholder-img{{ with $class }} {{ . }}{{ end }}\" width=\"{{ $width }}\" height=\"{{ $height }}\" xmlns=\"http://www.w3.org/2000/svg\"{{ if (or $show_title $show_text) }} role=\"img\" aria-label=\"{{ if $show_title }}{{ $title }}{{ if $show_text }}: {{ end }}{{ end }}{{ if ($show_text) }}{{ $text }}{{ end }}\"{{ else }} aria-hidden=\"true\"{{ end }} preserveAspectRatio=\"xMidYMid slice\" focusable=\"false\">\n    {{- if $show_title }}<title>{{ $title }}</title>{{ end -}}\n    <rect width=\"100%\" height=\"100%\" fill=\"{{ $background }}\"/>\n    {{- if $show_text }}<text x=\"50%\" y=\"50%\" fill=\"{{ $color }}\" dy=\".3em\">{{ $text }}</text>{{ end -}}\n  </svg>\n{{- end -}}\n",
      "}\n",
      "---\nlayout: redirect\nsitemap_exclude: true\nredirect: \"/docs/5.3/getting-started/introduction/\"\n---\n"
    ]
  },
  {
    "id": "kubernetes/kubernetes",
    "org": "kubernetes",
    "avatarURL": "https://avatars.githubusercontent.com/u/13629408?v=4",
    "name": "kubernetes/kubernetes",
    "url": "https://github.com/kubernetes/kubernetes",
    "lang": "Go",
    "star_num": 101432,
    "fork_num": 37648,
    "snippets": [
      "// Adds the list of known types to the given scheme.\nfunc addKnownTypes(scheme *runtime.Scheme) error {\n\tscheme.AddKnownTypes(SchemeGroupVersion,\n\t\t&example.ReplicaSet{},\n\t)\n\treturn nil\n}\n",
      "\tif err := s.AddGeneratedConversionFunc((*authentication.TokenRequest)(nil), (*v1.TokenRequest)(nil), func(a, b interface{}, scope conversion.Scope) error {\n\t\treturn Convert_authentication_TokenRequest_To_v1_TokenRequest(a.(*authentication.TokenRequest), b.(*v1.TokenRequest), scope)\n\t}); err != nil {\n\t\treturn err\n\t}\n\tif err := s.AddGeneratedConversionFunc((*v1.TokenRequestSpec)(nil), (*authentication.TokenRequestSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {\n\t\treturn Convert_v1_TokenRequestSpec_To_authentication_TokenRequestSpec(a.(*v1.TokenRequestSpec), b.(*authentication.TokenRequestSpec), scope)\n\t}); err != nil {\n\t\treturn err\n\t}\n\tif err := s.AddGeneratedConversionFunc((*authentication.TokenRequestSpec)(nil), (*v1.TokenRequestSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {\n\t\treturn Convert_authentication_TokenRequestSpec_To_v1_TokenRequestSpec(a.(*authentication.TokenRequestSpec), b.(*v1.TokenRequestSpec), scope)\n\t}); err != nil {\n\t\treturn err\n\t}\n\tif err := s.AddGeneratedConversionFunc((*v1.TokenRequestStatus)(nil), (*authentication.TokenRequestStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {\n\t\treturn Convert_v1_TokenRequestStatus_To_authentication_TokenRequestStatus(a.(*v1.TokenRequestStatus), b.(*authentication.TokenRequestStatus), scope)\n\t}); err != nil {\n\t\treturn err\n\t}\n\tif err := s.AddGeneratedConversionFunc((*authentication.TokenRequestStatus)(nil), (*v1.TokenRequestStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {\n\t\treturn Convert_authentication_TokenRequestStatus_To_v1_TokenRequestStatus(a.(*authentication.TokenRequestStatus), b.(*v1.TokenRequestStatus), scope)\n\t}); err != nil {\n\t\treturn err\n\t}\n\tif err := s.AddGeneratedConversionFunc((*v1.TokenReview)(nil), (*authentication.TokenReview)(nil), func(a, b interface{}, scope conversion.Scope) error {\n\t\treturn Convert_v1_TokenReview_To_authentication_TokenReview(a.(*v1.TokenReview), b.(*authentication.TokenReview), scope)\n\t}); err != nil {\n\t\treturn err\n\t}\n\tif err := s.AddGeneratedConversionFunc((*authentication.TokenReview)(nil), (*v1.TokenReview)(nil), func(a, b interface{}, scope conversion.Scope) error {\n\t\treturn Convert_authentication_TokenReview_To_v1_TokenReview(a.(*authentication.TokenReview), b.(*v1.TokenReview), scope)\n\t}); err != nil {\n\t\treturn err\n\t}\n\tif err := s.AddGeneratedConversionFunc((*v1.TokenReviewSpec)(nil), (*authentication.TokenReviewSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {\n\t\treturn Convert_v1_TokenReviewSpec_To_authentication_TokenReviewSpec(a.(*v1.TokenReviewSpec), b.(*authentication.TokenReviewSpec), scope)\n\t}); err != nil {\n\t\treturn err\n\t}\n\tif err := s.AddGeneratedConversionFunc((*authentication.TokenReviewSpec)(nil), (*v1.TokenReviewSpec)(nil), func(a, b interface{}, scope conversion.Scope) error {\n\t\treturn Convert_authentication_TokenReviewSpec_To_v1_TokenReviewSpec(a.(*authentication.TokenReviewSpec), b.(*v1.TokenReviewSpec), scope)\n\t}); err != nil {\n\t\treturn err\n\t}\n\tif err := s.AddGeneratedConversionFunc((*v1.TokenReviewStatus)(nil), (*authentication.TokenReviewStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {\n\t\treturn Convert_v1_TokenReviewStatus_To_authentication_TokenReviewStatus(a.(*v1.TokenReviewStatus), b.(*authentication.TokenReviewStatus), scope)\n\t}); err != nil {\n\t\treturn err\n\t}\n\tif err := s.AddGeneratedConversionFunc((*authentication.TokenReviewStatus)(nil), (*v1.TokenReviewStatus)(nil), func(a, b interface{}, scope conversion.Scope) error {\n\t\treturn Convert_authentication_TokenReviewStatus_To_v1_TokenReviewStatus(a.(*authentication.TokenReviewStatus), b.(*v1.TokenReviewStatus), scope)\n\t}); err != nil {\n\t\treturn err\n\t}\n\tif err := s.AddConversionFunc((*authentication.UserInfo)(nil), (*v1.UserInfo)(nil), func(a, b interface{}, scope conversion.Scope) error {\n\t\treturn Convert_authentication_UserInfo_To_v1_UserInfo(a.(*authentication.UserInfo), b.(*v1.UserInfo), scope)\n\t}); err != nil {\n\t\treturn err\n\t}\n\tif err := s.AddConversionFunc((*v1.UserInfo)(nil), (*authentication.UserInfo)(nil), func(a, b interface{}, scope conversion.Scope) error {\n\t\treturn Convert_v1_UserInfo_To_authentication_UserInfo(a.(*v1.UserInfo), b.(*authentication.UserInfo), scope)\n\t}); err != nil {\n\t\treturn err",
      "\tv2beta1 \"k8s.io/api/apidiscovery/v2beta1\"\n\tv1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n\tconversion \"k8s.io/apimachinery/pkg/conversion\"\n\truntime \"k8s.io/apimachinery/pkg/runtime\"\n\tapidiscovery \"k8s.io/kubernetes/pkg/apis/apidiscovery\"\n)\n\nfunc init() {\n\tlocalSchemeBuilder.Register(RegisterConversions)\n}\n\n// RegisterConversions adds conversion functions to the given scheme.\n// Public to allow building arbitrary schemes.\nfunc RegisterConversions(s *runtime.Scheme) error {\n\tif err := s.AddGeneratedConversionFunc((*v2beta1.APIGroupDiscovery)(nil), (*apidiscovery.APIGroupDiscovery)(nil), func(a, b interface{}, scope conversion.Scope) error {\n\t\treturn Convert_v2beta1_APIGroupDiscovery_To_apidiscovery_APIGroupDiscovery(a.(*v2beta1.APIGroupDiscovery), b.(*apidiscovery.APIGroupDiscovery), scope)\n\t}); err != nil {\n\t\treturn err\n\t}\n\tif err := s.AddGeneratedConversionFunc((*apidiscovery.APIGroupDiscovery)(nil), (*v2beta1.APIGroupDiscovery)(nil), func(a, b interface{}, scope conversion.Scope) error {\n\t\treturn Convert_apidiscovery_APIGroupDiscovery_To_v2beta1_APIGroupDiscovery(a.(*apidiscovery.APIGroupDiscovery), b.(*v2beta1.APIGroupDiscovery), scope)\n\t}); err != nil {\n\t\treturn err\n\t}\n\tif err := s.AddGeneratedConversionFunc((*v2beta1.APIGroupDiscoveryList)(nil), (*apidiscovery.APIGroupDiscoveryList)(nil), func(a, b interface{}, scope conversion.Scope) error {\n\t\treturn Convert_v2beta1_APIGroupDiscoveryList_To_apidiscovery_APIGroupDiscoveryList(a.(*v2beta1.APIGroupDiscoveryList), b.(*apidiscovery.APIGroupDiscoveryList), scope)\n\t}); err != nil {\n\t\treturn err\n\t}\n\tif err := s.AddGeneratedConversionFunc((*apidiscovery.APIGroupDiscoveryList)(nil), (*v2beta1.APIGroupDiscoveryList)(nil), func(a, b interface{}, scope conversion.Scope) error {\n\t\treturn Convert_apidiscovery_APIGroupDiscoveryList_To_v2beta1_APIGroupDiscoveryList(a.(*apidiscovery.APIGroupDiscoveryList), b.(*v2beta1.APIGroupDiscoveryList), scope)\n\t}); err != nil {\n\t\treturn err\n\t}\n\tif err := s.AddGeneratedConversionFunc((*v2beta1.APIResourceDiscovery)(nil), (*apidiscovery.APIResourceDiscovery)(nil), func(a, b interface{}, scope conversion.Scope) error {\n\t\treturn Convert_v2beta1_APIResourceDiscovery_To_apidiscovery_APIResourceDiscovery(a.(*v2beta1.APIResourceDiscovery), b.(*apidiscovery.APIResourceDiscovery), scope)\n\t}); err != nil {\n\t\treturn err\n\t}\n\tif err := s.AddGeneratedConversionFunc((*apidiscovery.APIResourceDiscovery)(nil), (*v2beta1.APIResourceDiscovery)(nil), func(a, b interface{}, scope conversion.Scope) error {\n\t\treturn Convert_apidiscovery_APIResourceDiscovery_To_v2beta1_APIResourceDiscovery(a.(*apidiscovery.APIResourceDiscovery), b.(*v2beta1.APIResourceDiscovery), scope)\n\t}); err != nil {\n\t\treturn err\n\t}\n\tif err := s.AddGeneratedConversionFunc((*v2beta1.APISubresourceDiscovery)(nil), (*apidiscovery.APISubresourceDiscovery)(nil), func(a, b interface{}, scope conversion.Scope) error {\n\t\treturn Convert_v2beta1_APISubresourceDiscovery_To_apidiscovery_APISubresourceDiscovery(a.(*v2beta1.APISubresourceDiscovery), b.(*apidiscovery.APISubresourceDiscovery), scope)\n\t}); err != nil {\n\t\treturn err\n\t}\n\tif err := s.AddGeneratedConversionFunc((*apidiscovery.APISubresourceDiscovery)(nil), (*v2beta1.APISubresourceDiscovery)(nil), func(a, b interface{}, scope conversion.Scope) error {\n\t\treturn Convert_apidiscovery_APISubresourceDiscovery_To_v2beta1_APISubresourceDiscovery(a.(*apidiscovery.APISubresourceDiscovery), b.(*v2beta1.APISubresourceDiscovery), scope)\n\t}); err != nil {\n\t\treturn err\n\t}\n\tif err := s.AddGeneratedConversionFunc((*v2beta1.APIVersionDiscovery)(nil), (*apidiscovery.APIVersionDiscovery)(nil), func(a, b interface{}, scope conversion.Scope) error {\n\t\treturn Convert_v2beta1_APIVersionDiscovery_To_apidiscovery_APIVersionDiscovery(a.(*v2beta1.APIVersionDiscovery), b.(*apidiscovery.APIVersionDiscovery), scope)\n\t}); err != nil {\n\t\treturn err\n\t}\n\tif err := s.AddGeneratedConversionFunc((*apidiscovery.APIVersionDiscovery)(nil), (*v2beta1.APIVersionDiscovery)(nil), func(a, b interface{}, scope conversion.Scope) error {\n\t\treturn Convert_apidiscovery_APIVersionDiscovery_To_v2beta1_APIVersionDiscovery(a.(*apidiscovery.APIVersionDiscovery), b.(*v2beta1.APIVersionDiscovery), scope)\n\t}); err != nil {\n\t\treturn err\n\t}",
      "\t}\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tvar matcher matchconditions.Matcher\n\t\t\tif tc.matcher == nil {\n\t\t\t\tmatcher = &fakeCELMatcher{matches: true}\n\t\t\t} else {\n\t\t\t\tmatcher = tc.matcher\n\t\t\t}\n\t\t\tv := validator{\n\t\t\t\tfailPolicy: tc.failPolicy,\n\t\t\t\tcelMatcher: matcher,\n\t\t\t\tvalidationFilter: &fakeCelFilter{\n\t\t\t\t\tevaluations: tc.evaluations,\n\t\t\t\t\tthrowError:  tc.throwError,\n\t\t\t\t},\n\t\t\t\tmessageFilter: &fakeCelFilter{\n\t\t\t\t\tevaluations: tc.messageEvaluations,\n\t\t\t\t\tthrowError:  tc.throwError,\n\t\t\t\t},\n\t\t\t\tauditAnnotationFilter: &fakeCelFilter{\n\t\t\t\t\tevaluations: tc.auditEvaluations,\n\t\t\t\t\tthrowError:  tc.throwError,\n\t\t\t\t},\n\t\t\t}\n\t\t\tctx := context.TODO()\n\t\t\tvar budget int64 = celconfig.RuntimeCELCostBudget\n\t\t\tif tc.costBudget != 0 {\n\t\t\t\tbudget = tc.costBudget\n\t\t\t}\n\t\t\tvalidateResult := v.Validate(ctx, fakeVersionedAttr.GetResource(), fakeVersionedAttr, nil, nil, budget, nil)\n\n\t\t\trequire.Equal(t, len(validateResult.Decisions), len(tc.policyDecision))\n\n\t\t\tfor i, policyDecision := range tc.policyDecision {\n\t\t\t\tif policyDecision.Action != validateResult.Decisions[i].Action {\n\t\t\t\t\tt.Errorf(\"Expected policy decision kind '%v' but got '%v'\", policyDecision.Action, validateResult.Decisions[i].Action)\n\t\t\t\t}\n\t\t\t\tif !strings.Contains(validateResult.Decisions[i].Message, policyDecision.Message) {\n\t\t\t\t\tt.Errorf(\"Expected policy decision message contains '%v' but got '%v'\", policyDecision.Message, validateResult.Decisions[i].Message)\n\t\t\t\t}\n\t\t\t\tif policyDecision.Reason != validateResult.Decisions[i].Reason {\n\t\t\t\t\tt.Errorf(\"Expected policy decision reason '%v' but got '%v'\", policyDecision.Reason, validateResult.Decisions[i].Reason)\n\t\t\t\t}\n\t\t\t}\n\t\t\trequire.Equal(t, len(tc.auditEvaluations), len(validateResult.AuditAnnotations))\n\n\t\t\tfor i, auditAnnotation := range tc.auditAnnotations {\n\t\t\t\tactual := validateResult.AuditAnnotations[i]\n\t\t\t\tif auditAnnotation.Action != actual.Action {\n\t\t\t\t\tt.Errorf(\"Expected policy audit annotation action '%v' but got '%v'\", auditAnnotation.Action, actual.Action)\n\t\t\t\t}\n\t\t\t\tif auditAnnotation.Error != actual.Error {\n\t\t\t\t\tt.Errorf(\"Expected audit annotation error '%v' but got '%v'\", auditAnnotation.Error, actual.Error)\n\t\t\t\t}\n\t\t\t\tif auditAnnotation.Value != actual.Value {\n\t\t\t\t\tt.Errorf(\"Expected policy audit annotation value '%v' but got '%v'\", auditAnnotation.Value, actual.Value)\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestContextCanceled(t *testing.T) {",
      "\n\td, err := kv.Marshal()\n\tif err != nil {\n\t\tpanic(fmt.Errorf(\"cannot marshal event: %v\", err))\n\t}\n\n\tbe.BatchTx().LockOutsideApply()\n\tbe.BatchTx().UnsafePut(buckets.Key, ibytes, d)\n\tbe.BatchTx().Unlock()\n}\n",
      "\t\tconnc:    make(chan net.Conn, m.bufLen),\n\t\tdonec:    make(chan struct{}),\n\t}\n\tm.sls = append(m.sls, matchersListener{ss: matchers, l: ml})\n\treturn ml\n}\n\nfunc (m *cMux) SetReadTimeout(t time.Duration) {\n\tm.readTimeout = t\n}\n\nfunc (m *cMux) Serve() error {\n\tvar wg sync.WaitGroup\n\n\tdefer func() {\n\t\tm.closeDoneChans()\n\t\twg.Wait()\n\n\t\tfor _, sl := range m.sls {\n\t\t\tclose(sl.l.connc)\n\t\t\t// Drain the connections enqueued for the listener.\n\t\t\tfor c := range sl.l.connc {\n\t\t\t\t_ = c.Close()\n\t\t\t}\n\t\t}\n\t}()\n\n\tfor {\n\t\tc, err := m.root.Accept()\n\t\tif err != nil {\n\t\t\tif !m.handleErr(err) {\n\t\t\t\treturn err\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\n\t\twg.Add(1)\n\t\tgo m.serve(c, m.donec, &wg)\n\t}\n}\n\nfunc (m *cMux) serve(c net.Conn, donec <-chan struct{}, wg *sync.WaitGroup) {\n\tdefer wg.Done()\n\n\tmuc := newMuxConn(c)\n\tif m.readTimeout > noTimeout {\n\t\t_ = c.SetReadDeadline(time.Now().Add(m.readTimeout))\n\t}\n\tfor _, sl := range m.sls {\n\t\tfor _, s := range sl.ss {\n\t\t\tmatched := s(muc.Conn, muc.startSniffing())\n\t\t\tif matched {\n\t\t\t\tmuc.doneSniffing()\n\t\t\t\tif m.readTimeout > noTimeout {\n\t\t\t\t\t_ = c.SetReadDeadline(time.Time{})\n\t\t\t\t}\n\t\t\t\tselect {\n\t\t\t\tcase sl.l.connc <- muc:\n\t\t\t\tcase <-donec:\n\t\t\t\t\t_ = c.Close()\n\t\t\t\t}\n\t\t\t\treturn\n\t\t\t}\n\t\t}",
      "\thwcap_MIPS_MSA = 1 << 1\n)\n\nfunc doinit() {\n\t// HWCAP feature bits\n\tMIPS64X.HasMSA = isSet(hwCap, hwcap_MIPS_MSA)\n}\n\nfunc isSet(hwc uint, value uint) bool {\n\treturn hwc&value != 0\n}\n",
      "func (m *Int32Value) ProtoSize() (n int)        { return m.Size() }\nfunc (m *UInt32Value) ProtoSize() (n int)       { return m.Size() }\nfunc (m *BoolValue) ProtoSize() (n int)         { return m.Size() }\nfunc (m *StringValue) ProtoSize() (n int)       { return m.Size() }\nfunc (m *BytesValue) ProtoSize() (n int)        { return m.Size() }\n",
      "}\n",
      "\treturn nil\n}\n\nfunc init() {\n\tproto.RegisterType((*StatusRequest)(nil), \"v2.StatusRequest\")\n\tproto.RegisterType((*StatusResponse)(nil), \"v2.StatusResponse\")\n\tproto.RegisterType((*DecryptRequest)(nil), \"v2.DecryptRequest\")\n\tproto.RegisterMapType((map[string][]byte)(nil), \"v2.DecryptRequest.AnnotationsEntry\")\n\tproto.RegisterType((*DecryptResponse)(nil), \"v2.DecryptResponse\")\n\tproto.RegisterType((*EncryptRequest)(nil), \"v2.EncryptRequest\")\n\tproto.RegisterType((*EncryptResponse)(nil), \"v2.EncryptResponse\")\n\tproto.RegisterMapType((map[string][]byte)(nil), \"v2.EncryptResponse.AnnotationsEntry\")\n}\n\nfunc init() { proto.RegisterFile(\"api.proto\", fileDescriptor_00212fb1f9d3bf1c) }\n\nvar fileDescriptor_00212fb1f9d3bf1c = []byte{\n\t// 403 bytes of a gzipped FileDescriptorProto\n\t0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x93, 0xcd, 0x6e, 0xda, 0x40,\n\t0x10, 0xc7, 0xb1, 0x5d, 0x40, 0x0c, 0x14, 0xe8, 0x96, 0x4a, 0x16, 0xaa, 0x2a, 0xb4, 0xed, 0x81,\n\t0x93, 0xad, 0xba, 0x3d, 0xa0, 0x1e, 0xaa, 0xb6, 0x2a, 0x95, 0xaa, 0xaa, 0x17, 0x73, 0x6b, 0x0f,\n\t0xd1, 0x06, 0x46, 0x61, 0x65, 0x58, 0x3b, 0xde, 0xb5, 0x15, 0xe7, 0xbd, 0xf2, 0x1e, 0x79, 0x84,\n\t0x3c, 0x4a, 0x64, 0x7b, 0x01, 0x1b, 0x94, 0xe4, 0x94, 0x9b, 0xe7, 0xf3, 0x3f, 0xf3, 0xdb, 0x31,\n\t0x74, 0x58, 0xc4, 0x9d, 0x28, 0x0e, 0x55, 0x48, 0xcc, 0xd4, 0xa3, 0x03, 0x78, 0xb9, 0x50, 0x4c,\n\t0x25, 0xd2, 0xc7, 0xcb, 0x04, 0xa5, 0xa2, 0xff, 0xa1, 0xbf, 0x73, 0xc8, 0x28, 0x14, 0x12, 0x89,\n\t0x0d, 0xed, 0x14, 0x63, 0xc9, 0x43, 0x61, 0x1b, 0x13, 0x63, 0xda, 0xf1, 0x77, 0x66, 0x1e, 0x59,\n\t0x23, 0xdb, 0xa8, 0xf5, 0xb5, 0x6d, 0x96, 0x11, 0x6d, 0x92, 0x37, 0xd0, 0x0a, 0x30, 0x3b, 0xe3,\n\t0x2b, 0xdb, 0x2a, 0x02, 0xcd, 0x00, 0xb3, 0xdf, 0x2b, 0x7a, 0x67, 0x40, 0xff, 0x27, 0x2e, 0xe3,\n\t0x2c, 0x52, 0x5a, 0x8f, 0xbc, 0x03, 0x58, 0xf2, 0x68, 0x8d, 0xb1, 0xc2, 0x2b, 0x55, 0x08, 0xf4,\n\t0xfc, 0x8a, 0x87, 0x0c, 0xc1, 0x4a, 0xf8, 0x4a, 0xf7, 0xcf, 0x3f, 0x1f, 0xe8, 0x4d, 0xe6, 0xd0,\n\t0x65, 0x42, 0x84, 0x8a, 0x29, 0x1e, 0x0a, 0x69, 0xbf, 0x98, 0x58, 0xd3, 0xae, 0xf7, 0xde, 0x49,\n\t0x3d, 0xa7, 0xae, 0xe8, 0x7c, 0x3f, 0x64, 0xcd, 0x85, 0x8a, 0x33, 0xbf, 0x5a, 0x37, 0xfe, 0x0a,\n\t0xc3, 0xe3, 0x84, 0x7c, 0x86, 0x00, 0x33, 0xbd, 0x7d, 0xfe, 0x49, 0x46, 0xd0, 0x4c, 0xd9, 0x26,\n\t0xc1, 0x62, 0xae, 0x9e, 0x5f, 0x1a, 0x5f, 0xcc, 0x99, 0x41, 0x5d, 0x18, 0xec, 0xf5, 0x34, 0xc0,\n\t0xb7, 0xd0, 0x89, 0x36, 0x8c, 0x8b, 0xca, 0x86, 0x07, 0x07, 0xfd, 0x06, 0xfd, 0xb9, 0xa8, 0x21,\n\t0x79, 0x34, 0xff, 0x14, 0x08, 0xbd, 0x35, 0x60, 0xb0, 0x6f, 0xa1, 0x35, 0x9f, 0xc2, 0x7a, 0x80,\n\t0x68, 0x56, 0x21, 0xfe, 0xaa, 0x43, 0xb4, 0x0a, 0x88, 0x1f, 0x72, 0x88, 0x47, 0x02, 0xcf, 0x4b,\n\t0xd1, 0xbb, 0x31, 0x60, 0xf4, 0x07, 0xb3, 0xbf, 0x4c, 0xb0, 0x0b, 0xdc, 0xa2, 0x50, 0x0b, 0x8c,\n\t0x53, 0xbe, 0x44, 0xf2, 0x11, 0x5a, 0xe5, 0x79, 0x92, 0x57, 0xf9, 0x54, 0xb5, 0xdb, 0x1d, 0x93,\n\t0xaa, 0xab, 0x9c, 0x93, 0x36, 0xc8, 0x67, 0x68, 0xeb, 0x17, 0x21, 0xe4, 0xf4, 0x1c, 0xc6, 0xaf,\n\t0x6b, 0xbe, 0x6a, 0x95, 0x5e, 0xb9, 0xac, 0xaa, 0xbf, 0x51, 0x59, 0x75, 0xc4, 0x84, 0x36, 0x7e,\n\t0x8c, 0xfe, 0x91, 0x60, 0x26, 0x1d, 0x1e, 0xba, 0xc1, 0x56, 0xba, 0x2c, 0xe2, 0xd2, 0x4d, 0xbd,\n\t0xf3, 0x56, 0xf1, 0xbf, 0x7d, 0xba, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x5f, 0xf8, 0x49, 0x17, 0x7c,\n\t0x03, 0x00, 0x00,\n}\n\n// Reference imports to suppress errors if they are not otherwise used.\nvar _ context.Context\nvar _ grpc.ClientConn\n\n// This is a compile-time assertion to ensure that this generated file\n// is compatible with the grpc package it is being compiled against.\nconst _ = grpc.SupportPackageIsVersion4\n\n// KeyManagementServiceClient is the client API for KeyManagementService service.\n//\n// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.\ntype KeyManagementServiceClient interface {\n\t// this API is meant to be polled\n\tStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)\n\t// Execute decryption operation in KMS provider.\n\tDecrypt(ctx context.Context, in *DecryptRequest, opts ...grpc.CallOption) (*DecryptResponse, error)\n\t// Execute encryption operation in KMS provider.\n\tEncrypt(ctx context.Context, in *EncryptRequest, opts ...grpc.CallOption) (*EncryptResponse, error)"
    ]
  },
  {
    "id": "docker/docker-ce",
    "org": "docker",
    "avatarURL": "https://avatars.githubusercontent.com/u/5429470?v=4",
    "name": "docker/docker-ce",
    "url": "https://github.com/docker/docker-ce",
    "lang": "Go",
    "star_num": 5668,
    "fork_num": 1551,
    "snippets": [
      "package dispatcher\n\nimport (\n\t\"math/rand\"\n\t\"time\"\n)\n\ntype periodChooser struct {\n\tperiod  time.Duration\n\tepsilon time.Duration\n\trand    *rand.Rand\n}\n\nfunc newPeriodChooser(period, eps time.Duration) *periodChooser {\n\treturn &periodChooser{\n\t\tperiod:  period,\n\t\tepsilon: eps,\n\t\trand:    rand.New(rand.NewSource(time.Now().UnixNano())),\n\t}\n}\n\nfunc (pc *periodChooser) Choose() time.Duration {\n\tvar adj int64\n\tif pc.epsilon > 0 {\n\t\tadj = rand.Int63n(int64(2*pc.epsilon)) - int64(pc.epsilon)\n\t}\n\treturn pc.period + time.Duration(adj)\n}\n",
      "\t\tsum = bi.Main.Sum\n\t}\n\treturn\n}\n",
      "package ini\n\n// Walk will traverse the AST using the v, the Visitor.\nfunc Walk(tree []AST, v Visitor) error {\n\tfor _, node := range tree {\n\t\tswitch node.Kind {\n\t\tcase ASTKindExpr,\n\t\t\tASTKindExprStatement:\n\n\t\t\tif err := v.VisitExpr(node); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\tcase ASTKindStatement,\n\t\t\tASTKindCompletedSectionStatement,\n\t\t\tASTKindNestedSectionStatement,\n\t\t\tASTKindCompletedNestedSectionStatement:\n\n\t\t\tif err := v.VisitStatement(node); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\t}\n\n\treturn nil\n}\n",
      "\tsval = sval[1 : len(sval)-1]\n\t// An empty string would cause a slice with one (empty) string\n\tif len(sval) == 0 {\n\t\treturn []string{}, nil\n\t}\n\treturn readAsCSV(sval)\n}\n\n// GetStringSlice return the []string value of a flag with the given name\nfunc (f *FlagSet) GetStringSlice(name string) ([]string, error) {\n\tval, err := f.getFlagType(name, \"stringSlice\", stringSliceConv)\n\tif err != nil {\n\t\treturn []string{}, err\n\t}\n\treturn val.([]string), nil\n}\n\n// StringSliceVar defines a string flag with specified name, default value, and usage string.\n// The argument p points to a []string variable in which to store the value of the flag.\n// Compared to StringArray flags, StringSlice flags take comma-separated value as arguments and split them accordingly.\n// For example:\n//   --ss=\"v1,v2\" --ss=\"v3\"\n// will result in\n//   []string{\"v1\", \"v2\", \"v3\"}\nfunc (f *FlagSet) StringSliceVar(p *[]string, name string, value []string, usage string) {\n\tf.VarP(newStringSliceValue(value, p), name, \"\", usage)\n}\n\n// StringSliceVarP is like StringSliceVar, but accepts a shorthand letter that can be used after a single dash.\nfunc (f *FlagSet) StringSliceVarP(p *[]string, name, shorthand string, value []string, usage string) {\n\tf.VarP(newStringSliceValue(value, p), name, shorthand, usage)\n}\n\n// StringSliceVar defines a string flag with specified name, default value, and usage string.\n// The argument p points to a []string variable in which to store the value of the flag.\n// Compared to StringArray flags, StringSlice flags take comma-separated value as arguments and split them accordingly.\n// For example:\n//   --ss=\"v1,v2\" --ss=\"v3\"\n// will result in\n//   []string{\"v1\", \"v2\", \"v3\"}\nfunc StringSliceVar(p *[]string, name string, value []string, usage string) {\n\tCommandLine.VarP(newStringSliceValue(value, p), name, \"\", usage)\n}\n\n// StringSliceVarP is like StringSliceVar, but accepts a shorthand letter that can be used after a single dash.\nfunc StringSliceVarP(p *[]string, name, shorthand string, value []string, usage string) {\n\tCommandLine.VarP(newStringSliceValue(value, p), name, shorthand, usage)\n}\n\n// StringSlice defines a string flag with specified name, default value, and usage string.\n// The return value is the address of a []string variable that stores the value of the flag.\n// Compared to StringArray flags, StringSlice flags take comma-separated value as arguments and split them accordingly.\n// For example:\n//   --ss=\"v1,v2\" --ss=\"v3\"\n// will result in\n//   []string{\"v1\", \"v2\", \"v3\"}\nfunc (f *FlagSet) StringSlice(name string, value []string, usage string) *[]string {\n\tp := []string{}\n\tf.StringSliceVarP(&p, name, \"\", value, usage)\n\treturn &p\n}\n\n// StringSliceP is like StringSlice, but accepts a shorthand letter that can be used after a single dash.\nfunc (f *FlagSet) StringSliceP(name, shorthand string, value []string, usage string) *[]string {",
      "func unlock(ref string) {\n\tlocksMu.Lock()\n\tdefer locksMu.Unlock()\n\n\tdelete(locks, ref)\n}\n",
      "\n// UpdateContainer updates configuration of a container. Callers must hold a Lock on the Container.\nfunc (container *Container) UpdateContainer(hostConfig *containertypes.HostConfig) error {\n\t// update resources of container\n\tresources := hostConfig.Resources\n\tcResources := &container.HostConfig.Resources\n\n\t// validate NanoCPUs, CPUPeriod, and CPUQuota\n\t// Because NanoCPU effectively updates CPUPeriod/CPUQuota,\n\t// once NanoCPU is already set, updating CPUPeriod/CPUQuota will be blocked, and vice versa.\n\t// In the following we make sure the intended update (resources) does not conflict with the existing (cResource).\n\tif resources.NanoCPUs > 0 && cResources.CPUPeriod > 0 {\n\t\treturn conflictingUpdateOptions(\"Conflicting options: Nano CPUs cannot be updated as CPU Period has already been set\")\n\t}\n\tif resources.NanoCPUs > 0 && cResources.CPUQuota > 0 {\n\t\treturn conflictingUpdateOptions(\"Conflicting options: Nano CPUs cannot be updated as CPU Quota has already been set\")\n\t}\n\tif resources.CPUPeriod > 0 && cResources.NanoCPUs > 0 {\n\t\treturn conflictingUpdateOptions(\"Conflicting options: CPU Period cannot be updated as NanoCPUs has already been set\")\n\t}\n\tif resources.CPUQuota > 0 && cResources.NanoCPUs > 0 {\n\t\treturn conflictingUpdateOptions(\"Conflicting options: CPU Quota cannot be updated as NanoCPUs has already been set\")\n\t}\n\n\tif resources.BlkioWeight != 0 {\n\t\tcResources.BlkioWeight = resources.BlkioWeight\n\t}\n\tif resources.CPUShares != 0 {\n\t\tcResources.CPUShares = resources.CPUShares\n\t}\n\tif resources.NanoCPUs != 0 {\n\t\tcResources.NanoCPUs = resources.NanoCPUs\n\t}\n\tif resources.CPUPeriod != 0 {\n\t\tcResources.CPUPeriod = resources.CPUPeriod\n\t}\n\tif resources.CPUQuota != 0 {\n\t\tcResources.CPUQuota = resources.CPUQuota\n\t}\n\tif resources.CpusetCpus != \"\" {\n\t\tcResources.CpusetCpus = resources.CpusetCpus\n\t}\n\tif resources.CpusetMems != \"\" {\n\t\tcResources.CpusetMems = resources.CpusetMems\n\t}\n\tif resources.Memory != 0 {\n\t\t// if memory limit smaller than already set memoryswap limit and doesn't\n\t\t// update the memoryswap limit, then error out.\n\t\tif resources.Memory > cResources.MemorySwap && resources.MemorySwap == 0 {\n\t\t\treturn conflictingUpdateOptions(\"Memory limit should be smaller than already set memoryswap limit, update the memoryswap at the same time\")\n\t\t}\n\t\tcResources.Memory = resources.Memory\n\t}\n\tif resources.MemorySwap != 0 {\n\t\tcResources.MemorySwap = resources.MemorySwap\n\t}\n\tif resources.MemoryReservation != 0 {\n\t\tcResources.MemoryReservation = resources.MemoryReservation\n\t}\n\tif resources.KernelMemory != 0 {\n\t\tcResources.KernelMemory = resources.KernelMemory\n\t}\n\tif resources.CPURealtimePeriod != 0 {\n\t\tcResources.CPURealtimePeriod = resources.CPURealtimePeriod",
      "\t\t\t\tConfigID:   \"configRuntime\",\n\t\t\t\tConfigName: \"configRuntime\",\n\t\t\t\tTarget:     &swarmapi.ConfigReference_Runtime{Runtime: &swarmapi.RuntimeTarget{}},\n\t\t\t},\n\t\t\tto: &swarmtypes.ConfigReference{\n\t\t\t\tConfigID:   \"configRuntime\",\n\t\t\t\tConfigName: \"configRuntime\",\n\t\t\t\tRuntime:    &swarmtypes.ConfigReferenceRuntimeTarget{},\n\t\t\t},\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tgrpcService := swarmapi.Service{\n\t\t\t\tSpec: swarmapi.ServiceSpec{\n\t\t\t\t\tTask: swarmapi.TaskSpec{\n\t\t\t\t\t\tRuntime: &swarmapi.TaskSpec_Container{\n\t\t\t\t\t\t\tContainer: &swarmapi.ContainerSpec{\n\t\t\t\t\t\t\t\tConfigs: []*swarmapi.ConfigReference{tc.from},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t}\n\n\t\t\tengineService, err := ServiceFromGRPC(grpcService)\n\t\t\tassert.NilError(t, err)\n\t\t\tassert.DeepEqual(t,\n\t\t\t\tengineService.Spec.TaskTemplate.ContainerSpec.Configs[0],\n\t\t\t\ttc.to,\n\t\t\t)\n\t\t})\n\t}\n}\n\n// TestServiceConvertToGRPCConfigs tests that converting config references to\n// GRPC is correct\nfunc TestServiceConvertToGRPCConfigs(t *testing.T) {\n\tcases := []struct {\n\t\tname        string\n\t\tfrom        *swarmtypes.ConfigReference\n\t\tto          *swarmapi.ConfigReference\n\t\texpectedErr string\n\t}{\n\t\t{\n\t\t\tname: \"file\",\n\t\t\tfrom: &swarmtypes.ConfigReference{\n\t\t\t\tConfigID:   \"configFile\",\n\t\t\t\tConfigName: \"configFile\",\n\t\t\t\tFile:       &swarmtypes.ConfigReferenceFileTarget{Name: \"foo\", UID: \"bar\", GID: \"baz\"},\n\t\t\t},\n\t\t\tto: &swarmapi.ConfigReference{\n\t\t\t\tConfigID:   \"configFile\",\n\t\t\t\tConfigName: \"configFile\",\n\t\t\t\tTarget: &swarmapi.ConfigReference_File{\n\t\t\t\t\t// skip mode, if everything else here works mode will too. otherwise we'd need to import os.\n\t\t\t\t\tFile: &swarmapi.FileTarget{Name: \"foo\", UID: \"bar\", GID: \"baz\"},\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"runtime\",\n\t\t\tfrom: &swarmtypes.ConfigReference{",
      "}\n",
      "\tif _, err := ra.ReadAt(dt, 0); err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn detectManifestBlobMediaType(dt)\n}\n\n// This is used when the manifest store does not know the media type of a sha it\n// was told to get. This would currently only happen when pulling by digest.\n// The media type is needed so the blob can be unmarshalled properly.\nfunc detectManifestBlobMediaType(dt []byte) (string, error) {\n\tvar mfst struct {\n\t\tMediaType string          `json:\"mediaType\"`\n\t\tManifests json.RawMessage `json:\"manifests\"` // oci index, manifest list\n\t\tConfig    json.RawMessage `json:\"config\"`    // schema2 Manifest\n\t\tLayers    json.RawMessage `json:\"layers\"`    // schema2 Manifest\n\t\tFSLayers  json.RawMessage `json:\"fsLayers\"`  // schema1 Manifest\n\t}\n\n\tif err := json.Unmarshal(dt, &mfst); err != nil {\n\t\treturn \"\", err\n\t}\n\n\t// We may have a media type specified in the json, in which case that should be used.\n\t// Docker types should generally have a media type set.\n\t// OCI (golang) types do not have a `mediaType` defined, and it is optional in the spec.\n\t//\n\t// `distribution.UnmarshalManifest`, which is used to unmarshal this for real, checks these media type values.\n\t// If the specified media type does not match it will error, and in some cases (docker media types) it is required.\n\t// So pretty much if we don't have a media type we can fall back to OCI.\n\t// This does have a special fallback for schema1 manifests just because it is easy to detect.\n\tswitch mfst.MediaType {\n\tcase schema2.MediaTypeManifest, specs.MediaTypeImageManifest:\n\t\tif mfst.Manifests != nil || mfst.FSLayers != nil {\n\t\t\treturn \"\", fmt.Errorf(`media-type: %q should not have \"manifests\" or \"fsLayers\"`, mfst.MediaType)\n\t\t}\n\t\treturn mfst.MediaType, nil\n\tcase manifestlist.MediaTypeManifestList, specs.MediaTypeImageIndex:\n\t\tif mfst.Config != nil || mfst.Layers != nil || mfst.FSLayers != nil {\n\t\t\treturn \"\", fmt.Errorf(`media-type: %q should not have \"config\", \"layers\", or \"fsLayers\"`, mfst.MediaType)\n\t\t}\n\t\treturn mfst.MediaType, nil\n\tcase schema1.MediaTypeManifest:\n\t\tif mfst.Manifests != nil || mfst.Layers != nil {\n\t\t\treturn \"\", fmt.Errorf(`media-type: %q should not have \"manifests\" or \"layers\"`, mfst.MediaType)\n\t\t}\n\t\treturn mfst.MediaType, nil\n\tdefault:\n\t\tif mfst.MediaType != \"\" {\n\t\t\treturn mfst.MediaType, nil\n\t\t}\n\t}\n\tswitch {\n\tcase mfst.FSLayers != nil && mfst.Manifests == nil && mfst.Layers == nil && mfst.Config == nil:\n\t\treturn schema1.MediaTypeManifest, nil\n\tcase mfst.Config != nil && mfst.Manifests == nil && mfst.FSLayers == nil,\n\t\tmfst.Layers != nil && mfst.Manifests == nil && mfst.FSLayers == nil:\n\t\treturn specs.MediaTypeImageManifest, nil\n\tcase mfst.Config == nil && mfst.Layers == nil && mfst.FSLayers == nil:\n\t\t// fallback to index\n\t\treturn specs.MediaTypeImageIndex, nil\n\t}\n\treturn \"\", errors.New(\"media-type: cannot determine\")\n}",
      ""
    ]
  },
  {
    "id": "nodejs/node",
    "org": "nodejs",
    "avatarURL": "https://avatars.githubusercontent.com/u/9950313?v=4",
    "name": "nodejs/node",
    "url": "https://github.com/nodejs/node",
    "lang": "JavaScript",
    "star_num": 97501,
    "fork_num": 26796,
    "snippets": [
      "  }\n}));\n",
      "module.exports={A:{A:{\"1\":\"B\",\"2\":\"K F G H A KC\"},B:{\"1\":\"0 1 C L M I N D O P Q R S T U V W X Y Z a b c d e f g h i j k o p q r s t u v w x y z E\"},C:{\"1\":\"0 1 2 3 4 5 6 7 8 9 J K F G H A B C L M I N D O l m AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB 1B fB 2B gB hB iB jB kB lB mB nB oB pB qB n rB sB tB uB vB P Q R 3B S T U V W X Y Z a b c d e f g h i j k o p q r s t u v w x y z E 4B 5B 6B NC\",\"2\":\"LC 0B MC\"},D:{\"1\":\"0 1 2 3 4 5 6 7 8 9 J K F G H A B C L M I N D O l m AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB 1B fB 2B gB hB iB jB kB lB mB nB oB pB qB n rB sB tB uB vB P Q R S T U V W X Y Z a b c d e f g h i j k o p q r s t u v w x y z E 4B 5B 6B\"},E:{\"1\":\"2 J K F G H A B C L M I D PC QC RC SC 8B wB xB 9B TC UC AC BC yB VC zB CC DC EC FC GC HC WC\",\"2\":\"OC 7B\"},F:{\"1\":\"3 4 5 6 7 8 9 I N D O l m AB BB CB DB EB FB GB HB IB JB KB LB MB NB OB PB QB RB SB TB UB VB WB XB YB ZB aB bB cB dB eB fB gB hB iB jB kB lB mB nB oB pB qB n rB sB tB uB vB P Q R 3B S T U V W X Y Z a b c d e f g h i j k\",\"2\":\"H B C XC YC ZC aC wB IC bC xB\"},G:{\"1\":\"G D 7B cC JC dC eC fC gC hC iC jC kC lC mC nC oC pC qC rC sC tC uC vC AC BC yB wC zB CC DC EC FC GC HC\"},H:{\"2\":\"xC\"},I:{\"1\":\"0B J E yC zC 0C 1C JC 2C 3C\"},J:{\"1\":\"F A\"},K:{\"1\":\"n\",\"2\":\"A B C wB IC xB\"},L:{\"1\":\"E\"},M:{\"1\":\"E\"},N:{\"1\":\"B\",\"2\":\"A\"},O:{\"1\":\"yB\"},P:{\"1\":\"J l m 4C 5C 6C 7C 8C 8B 9C AD BD CD DD zB ED FD GD\"},Q:{\"1\":\"9B\"},R:{\"1\":\"HD\"},S:{\"1\":\"ID JD\"}},B:7,C:\"CSS pointer-events (for HTML)\"};\n",
      "'use strict';\n\nconst common = require('../common');\nconst domain = require('domain');\n\nfunction test() {\n  const d = domain.create();\n  const d2 = domain.create();\n\n  d.on('error', function errorHandler() {\n  });\n\n  d.run(() => {\n    d2.run(() => {\n      const fs = require('fs');\n      fs.exists('/non/existing/file', function onExists() {\n        throw new Error('boom!');\n      });\n    });\n  });\n}\n\nif (process.argv[2] === 'child') {\n  test();\n} else {\n  common.childShouldThrowAndAbort();\n}\n",
      "'use strict';\n\nrequire('../common');\nconst assert = require('assert');\n\n// Should be an invalid package path.\nassert.throws(() => require('package.json'),\n              { code: 'MODULE_NOT_FOUND' }\n);\n",
      "module.exports={C:{\"2\":0,\"3\":0,\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0,\"21\":0,\"22\":0,\"23\":0,\"24\":0,\"25\":0,\"26\":0,\"27\":0,\"28\":0,\"29\":0,\"30\":0,\"31\":0,\"32\":0,\"33\":0,\"34\":0,\"35\":0,\"36\":0,\"37\":0,\"38\":0,\"39\":0,\"40\":0.00306,\"41\":0,\"42\":0,\"43\":0,\"44\":0,\"45\":0,\"46\":0,\"47\":0,\"48\":0,\"49\":0,\"50\":0,\"51\":0,\"52\":0.00306,\"53\":0,\"54\":0,\"55\":0,\"56\":0,\"57\":0,\"58\":0,\"59\":0,\"60\":0,\"61\":0,\"62\":0,\"63\":0,\"64\":0,\"65\":0,\"66\":0.00306,\"67\":0,\"68\":0,\"69\":0,\"70\":0,\"71\":0,\"72\":0,\"73\":0,\"74\":0,\"75\":0,\"76\":0,\"77\":0,\"78\":0,\"79\":0,\"80\":0,\"81\":0,\"82\":0,\"83\":0,\"84\":0,\"85\":0,\"86\":0,\"87\":0,\"88\":0,\"89\":0,\"90\":0,\"91\":0,\"92\":0,\"93\":0,\"94\":0,\"95\":0.00612,\"96\":0,\"97\":0,\"98\":0,\"99\":0.00612,\"100\":0,\"101\":0,\"102\":0.00306,\"103\":0,\"104\":0,\"105\":0,\"106\":0,\"107\":0.00306,\"108\":0.00306,\"109\":0,\"110\":0,\"111\":0.00306,\"112\":0.00919,\"113\":0.24496,\"114\":0.41337,\"115\":0.00612,\"116\":0,\"3.5\":0,\"3.6\":0},D:{\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0,\"14\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0,\"21\":0,\"22\":0,\"23\":0,\"24\":0,\"25\":0,\"26\":0,\"27\":0,\"28\":0,\"29\":0,\"30\":0,\"31\":0,\"32\":0,\"33\":0,\"34\":0,\"35\":0,\"36\":0,\"37\":0,\"38\":0,\"39\":0,\"40\":0,\"41\":0,\"42\":0,\"43\":0,\"44\":0,\"45\":0.00306,\"46\":0,\"47\":0,\"48\":0,\"49\":0.00612,\"50\":0,\"51\":0,\"52\":0,\"53\":0,\"54\":0,\"55\":0,\"56\":0,\"57\":0,\"58\":0,\"59\":0,\"60\":0,\"61\":0,\"62\":0,\"63\":0.00306,\"64\":0,\"65\":0,\"66\":0,\"67\":0,\"68\":0.01225,\"69\":0.00306,\"70\":0.00306,\"71\":0,\"72\":0,\"73\":0.00306,\"74\":0.00612,\"75\":0,\"76\":0.01225,\"77\":0.00306,\"78\":0.00306,\"79\":0.00612,\"80\":0,\"81\":0.03674,\"83\":0.01531,\"84\":0,\"85\":0,\"86\":0.03062,\"87\":0.00919,\"88\":0.01531,\"89\":0.00306,\"90\":0.00306,\"91\":0.00612,\"92\":0.01225,\"93\":0.00306,\"94\":0.00306,\"95\":0.00306,\"96\":0.00306,\"97\":0,\"98\":0.00306,\"99\":0.00306,\"100\":0,\"101\":0.01225,\"102\":0.00306,\"103\":0.01531,\"104\":0.00306,\"105\":0.00306,\"106\":0.00612,\"107\":0.00306,\"108\":0.03981,\"109\":0.35825,\"110\":0.00919,\"111\":0.01225,\"112\":0.10411,\"113\":0.86961,\"114\":3.77545,\"115\":0.00612,\"116\":0,\"117\":0},F:{\"9\":0,\"11\":0,\"12\":0,\"15\":0,\"16\":0,\"17\":0,\"18\":0,\"19\":0,\"20\":0,\"21\":0,\"22\":0,\"23\":0,\"24\":0,\"25\":0,\"26\":0,\"27\":0,\"28\":0,\"29\":0,\"30\":0,\"31\":0,\"32\":0,\"33\":0,\"34\":0,\"35\":0,\"36\":0,\"37\":0,\"38\":0,\"39\":0,\"40\":0,\"41\":0,\"42\":0,\"43\":0,\"44\":0,\"45\":0,\"46\":0,\"47\":0,\"48\":0,\"49\":0,\"50\":0,\"51\":0,\"52\":0,\"53\":0,\"54\":0,\"55\":0,\"56\":0,\"57\":0,\"58\":0,\"60\":0,\"62\":0,\"63\":0,\"64\":0.00612,\"65\":0,\"66\":0,\"67\":0,\"68\":0,\"69\":0.00306,\"70\":0.12554,\"71\":0,\"72\":0,\"73\":0,\"74\":0,\"75\":0,\"76\":0.02143,\"77\":0,\"78\":0,\"79\":0,\"80\":0,\"81\":0,\"82\":0,\"83\":0,\"84\":0,\"85\":0,\"86\":0,\"87\":0,\"88\":0,\"89\":0,\"90\":0,\"91\":0,\"92\":0,\"93\":0,\"94\":0,\"95\":0.00612,\"96\":0,\"97\":0,\"98\":0.02143,\"99\":0.10105,\"100\":0,\"9.5-9.6\":0,\"10.0-10.1\":0,\"10.5\":0,\"10.6\":0,\"11.1\":0,\"11.5\":0,\"11.6\":0,\"12.1\":0},B:{\"12\":0,\"13\":0.00306,\"14\":0,\"15\":0,\"16\":0.00306,\"17\":0.00306,\"18\":0.00612,\"79\":0,\"80\":0,\"81\":0,\"83\":0,\"84\":0.00306,\"85\":0,\"86\":0,\"87\":0,\"88\":0,\"89\":0.00306,\"90\":0,\"91\":0,\"92\":0.00306,\"93\":0,\"94\":0,\"95\":0,\"96\":0,\"97\":0,\"98\":0,\"99\":0,\"100\":0,\"101\":0,\"102\":0,\"103\":0,\"104\":0,\"105\":0.00612,\"106\":0.00306,\"107\":0.00306,\"108\":0.00306,\"109\":0.00612,\"110\":0.00612,\"111\":0.00306,\"112\":0.02143,\"113\":0.27252,\"114\":1.18499},E:{\"4\":0,\"5\":0,\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0,\"12\":0,\"13\":0.00306,\"14\":0.00919,\"15\":0.00306,\"17\":0.00306,_:\"0\",\"3.1\":0,\"3.2\":0,\"5.1\":0,\"6.1\":0,\"7.1\":0,\"9.1\":0,\"10.1\":0,\"11.1\":0,\"12.1\":0.00306,\"13.1\":0.00919,\"14.1\":0.01225,\"15.1\":0.00306,\"15.2-15.3\":0,\"15.4\":0.02143,\"15.5\":0.00919,\"15.6\":0.06736,\"16.0\":0.00612,\"16.1\":0.01225,\"16.2\":0.0245,\"16.3\":0.03674,\"16.4\":0.08574,\"16.5\":0.22046,\"16.6\":0},G:{\"8\":0,\"17\":0.00838,\"3.2\":0,\"4.0-4.1\":0,\"4.2-4.3\":0,\"5.0-5.1\":0.0012,\"6.0-6.1\":0,\"7.0-7.1\":0.12937,\"8.1-8.4\":0,\"9.0-9.2\":0,\"9.3\":0.04073,\"10.0-10.2\":0,\"10.3\":0.06109,\"11.0-11.2\":0.00359,\"11.3-11.4\":0.00719,\"12.0-12.1\":0.00359,\"12.2-12.5\":0.49112,\"13.0-13.1\":0.0012,\"13.2\":0.0024,\"13.3\":0.17249,\"13.4-13.7\":0.02156,\"14.0-14.4\":0.10302,\"14.5-14.8\":0.18447,\"15.0-15.1\":0.09583,\"15.2-15.3\":0.17369,\"15.4\":0.13057,\"15.5\":0.16171,\"15.6\":0.32103,\"16.0\":0.37613,\"16.1\":0.82772,\"16.2\":0.61929,\"16.3\":1.11999,\"16.4\":1.0601,\"16.5\":4.6345,\"16.6\":0.02875},P:{\"4\":0.15396,\"20\":2.00145,\"21\":3.06889,\"5.0-5.4\":0,\"6.2-6.4\":0.01026,\"7.2-7.4\":0.56451,\"8.2\":0,\"9.2\":0.03079,\"10.1\":0,\"11.1-11.2\":0.90322,\"12.0\":0.02053,\"13.0\":0.12317,\"14.0\":0.05132,\"15.0\":0.16422,\"16.0\":0.58504,\"17.0\":0.06158,\"18.0\":0.23607,\"19.0\":0.4824},I:{\"0\":0,\"3\":0,\"4\":0,\"2.1\":0,\"2.2\":0,\"2.3\":0,\"4.1\":0,\"4.2-4.3\":0,\"4.4\":0,\"4.4.3-4.4.4\":0.10756},K:{_:\"0 10 11 12 11.1 11.5 12.1\"},A:{\"6\":0,\"7\":0,\"8\":0,\"9\":0,\"10\":0,\"11\":0.00612,\"5.5\":0},S:{\"2.5\":0,_:\"3.0-3.1\"},J:{\"7\":0,\"10\":0},N:{\"10\":0,\"11\":0},R:{_:\"0\"},M:{\"0\":0.35384},Q:{\"13.1\":0.06938},O:{\"0\":0.88806},H:{\"0\":0.86047},L:{\"0\":66.74674}};\n",
      "//\n//     * Redistributions of source code must retain the above copyright\n//       notice, this list of conditions and the following disclaimer.\n//     * Redistributions in binary form must reproduce the above\n//       copyright notice, this list of conditions and the following\n//       disclaimer in the documentation and/or other materials provided\n//       with the distribution.\n//     * Neither the name of Google Inc. nor the names of its\n//       contributors may be used to endorse or promote products derived\n//       from this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n// Check that the perfect mask check isn't overly optimistic.\n\nassertFalse(/[6-9]/.test('2'));\n",
      "// Copyright 2016 the V8 project authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nnew not_declared();\n",
      "// Copyright 2022 the V8 project authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nInspectorTest.log('Checks V8InspectorSession::stop');\n\nInspectorTest.runAsyncTestSuite([\n  async function testSessionStopResumesPause() {\n    let contextGroup = new InspectorTest.ContextGroup();\n    let session = contextGroup.connect();\n    let Protocol = session.Protocol;\n\n    Protocol.Debugger.enable();\n    await Protocol.Debugger.pause();\n    const result = Protocol.Runtime.evaluate({expression: '42'});\n    session.stop();\n    InspectorTest.log(\n        `Evaluation returned: ${(await result).result.result.value}`);\n  },\n  async function testSessionStopResumesInstrumentationPause() {\n    let contextGroup = new InspectorTest.ContextGroup();\n    let session = contextGroup.connect();\n    let Protocol = session.Protocol;\n\n    Protocol.Debugger.enable();\n    await Protocol.Debugger.setInstrumentationBreakpoint(\n        {instrumentation: 'beforeScriptExecution'});\n    const paused = Protocol.Debugger.oncePaused();\n    const result = Protocol.Runtime.evaluate({expression: '42'});\n    InspectorTest.log(`Paused: ${(await paused).params.reason}`);\n    session.stop();\n    InspectorTest.log(\n        `Evaluation returned: ${(await result).result.result.value}`);\n  },\n  async function testSessionStopDisablesDebugger() {\n    let contextGroup = new InspectorTest.ContextGroup();\n    let session = contextGroup.connect();\n    let Protocol = session.Protocol;\n\n    await Protocol.Debugger.enable();\n    session.stop();\n    const pauseResult = await Protocol.Debugger.pause();\n    InspectorTest.log(`Pause error(?): ${pauseResult?.error?.message}`);\n  },\n  async function testSessionStopDisallowsReenabling() {\n    let contextGroup = new InspectorTest.ContextGroup();\n    let session = contextGroup.connect();\n    let Protocol = session.Protocol;\n\n    await Protocol.Debugger.enable();\n    session.stop();\n    const pauseResultAfterStop = await Protocol.Debugger.pause();\n    InspectorTest.log(\n        `Pause error(?) after stop: ${pauseResultAfterStop?.error?.message}`);\n    await Protocol.Debugger.enable();\n    const pauseResult = await Protocol.Debugger.pause();\n    InspectorTest.log(\n        `Pause error(?) after re-enable: ${pauseResult?.error?.message}`);\n  },\n  async function testSessionStopDoesNotDisableOtherSessions() {\n    let contextGroup = new InspectorTest.ContextGroup();\n\n    let session1 = contextGroup.connect();\n    let Protocol1 = session1.Protocol;",
      "  '_handle',\n  '_receiving',\n  '_bindState',\n  '_queue',\n  '_reuseAddr',\n];\n\nconst methodsToTest = [\n  '_healthCheck',\n  '_stopReceiving',\n];\n\nconst propertyCases = propertiesToTest.map((propName) => {\n  return [\n    () => {\n      // Test property getter\n      common.expectWarning(\n        'DeprecationWarning',\n        `Socket.prototype.${propName} is deprecated`,\n        'DEP0112'\n      );\n      sock[propName]; // eslint-disable-line no-unused-expressions\n    },\n    () => {\n      // Test property setter\n      common.expectWarning(\n        'DeprecationWarning',\n        `Socket.prototype.${propName} is deprecated`,\n        'DEP0112'\n      );\n      sock[propName] = null;\n    },\n  ];\n});\n\nconst methodCases = methodsToTest.map((propName) => {\n  return () => {\n    common.expectWarning(\n      'DeprecationWarning',\n      `Socket.prototype.${propName}() is deprecated`,\n      'DEP0112'\n    );\n    sock[propName]();\n  };\n});\n\nconst cases = [].concat(\n  ...propertyCases,\n  ...methodCases\n);\n\n// If we weren't passed a test ID then we need to spawn all of the cases.\n// We run the cases in child processes since deprecations print once.\nif (Number.isNaN(testNumber)) {\n  const children = cases.map((_case, i) =>\n    fork(process.argv[1], [ String(i) ]));\n\n  children.forEach((child) => {\n    child.on('close', (code) => {\n      // Pass on child exit code\n      if (code > 0) {\n        process.exit(code);\n      }\n    });",
      "  { env: { COMMON_DIRECTORY: join(__dirname, '..', 'common') } });\nstrictEqual(singleExecutableApplicationOutput.toString(), 'Hello, world! 😊\\n');\n"
    ]
  },
  {
    "id": "electron/electron",
    "org": "electron",
    "avatarURL": "https://avatars.githubusercontent.com/u/13409222?v=4",
    "name": "electron/electron",
    "url": "https://github.com/electron/electron",
    "lang": "C++, JavaScript",
    "star_num": 109026,
    "fork_num": 15028,
    "snippets": [
      "const semver = require('semver');\nconst { GitProcess } = require('dugite');\n\nconst { ELECTRON_DIR } = require('../lib/utils');\n\nconst preType = {\n  NONE: 'none',\n  PARTIAL: 'partial',\n  FULL: 'full'\n};\n\nconst getCurrentDate = () => {\n  const d = new Date();\n  const dd = `${d.getDate()}`.padStart(2, '0');\n  const mm = `${d.getMonth() + 1}`.padStart(2, '0');\n  const yyyy = d.getFullYear();\n  return `${yyyy}${mm}${dd}`;\n};\n\nconst isNightly = v => v.includes('nightly');\nconst isAlpha = v => v.includes('alpha');\nconst isBeta = v => v.includes('beta');\nconst isStable = v => {\n  const parsed = semver.parse(v);\n  return !!(parsed && parsed.prerelease.length === 0);\n};\n\nconst makeVersion = (components, delim, pre = preType.NONE) => {\n  let version = [components.major, components.minor, components.patch].join(delim);\n  if (pre === preType.PARTIAL) {\n    version += `${delim}${components.pre[1] || 0}`;\n  } else if (pre === preType.FULL) {\n    version += `-${components.pre[0]}${delim}${components.pre[1]}`;\n  }\n  return version;\n};\n\nasync function nextAlpha (v) {\n  const next = semver.coerce(semver.clean(v));\n  const tagBlob = await GitProcess.exec(['tag', '--list', '-l', `v${next}-alpha.*`], ELECTRON_DIR);\n  const tags = tagBlob.stdout.split('\\n').filter(e => e !== '');\n  tags.sort((t1, t2) => {\n    const a = parseInt(t1.split('.').pop(), 10);\n    const b = parseInt(t2.split('.').pop(), 10);\n    return a - b;\n  });\n\n  // increment the latest existing alpha tag or start at alpha.1 if it's a new alpha line\n  return tags.length === 0 ? `${next}-alpha.1` : semver.inc(tags.pop(), 'prerelease');\n}\n\nasync function nextBeta (v) {\n  const next = semver.coerce(semver.clean(v));\n  const tagBlob = await GitProcess.exec(['tag', '--list', '-l', `v${next}-beta.*`], ELECTRON_DIR);\n  const tags = tagBlob.stdout.split('\\n').filter(e => e !== '');\n  tags.sort((t1, t2) => {\n    const a = parseInt(t1.split('.').pop(), 10);\n    const b = parseInt(t2.split('.').pop(), 10);\n    return a - b;\n  });\n\n  // increment the latest existing beta tag or start at beta.1 if it's a new beta line\n  return tags.length === 0 ? `${next}-beta.1` : semver.inc(tags.pop(), 'prerelease');\n}",
      "const { contextBridge, ipcRenderer } = require('electron/renderer')\n\ncontextBridge.exposeInMainWorld('electronAPI', {\n  dragStart: () => ipcRenderer.send('ondragstart')\n})\n",
      "",
      "      cache: !process.env.CI,\n      cacheLocation: `node_modules/.eslintcache.${crypto.createHash('md5').update(fs.readFileSync(__filename)).digest('hex')}`,\n      extensions: ['.js', '.ts'],\n      fix: opts.fix\n    });\n    const formatter = await eslint.loadFormatter();\n    let successCount = 0;\n    const results = await eslint.lintFiles(filenames);\n    for (const result of results) {\n      successCount += result.errorCount === 0 ? 1 : 0;\n      if (opts.verbose && result.errorCount === 0 && result.warningCount === 0) {\n        console.log(`${result.filePath}: no errors or warnings`);\n      }\n    }\n    console.log(formatter.format(results));\n    if (opts.fix) {\n      await ESLint.outputFixes(results);\n    }\n    if (successCount !== filenames.length) {\n      console.error('Linting had errors');\n      process.exit(1);\n    }\n  }\n}, {\n  key: 'gn',\n  roots: ['.'],\n  test: filename => filename.endsWith('.gn') || filename.endsWith('.gni'),\n  run: (opts, filenames) => {\n    const allOk = filenames.map(filename => {\n      const env = {\n        CHROMIUM_BUILDTOOLS_PATH: path.resolve(ELECTRON_ROOT, '..', 'buildtools'),\n        DEPOT_TOOLS_WIN_TOOLCHAIN: '0',\n        ...process.env\n      };\n      // Users may not have depot_tools in PATH.\n      env.PATH = `${env.PATH}${path.delimiter}${DEPOT_TOOLS}`;\n      const args = ['format', filename];\n      if (!opts.fix) args.push('--dry-run');\n      const result = childProcess.spawnSync('gn', args, { env, stdio: 'inherit', shell: true });\n      if (result.status === 0) {\n        return true;\n      } else if (result.status === 2) {\n        console.log(`GN format errors in \"${filename}\". Run 'gn format \"${filename}\"' or rerun with --fix to fix them.`);\n        return false;\n      } else {\n        console.log(`Error running 'gn format --dry-run \"${filename}\"': exit code ${result.status}`);\n        return false;\n      }\n    }).every(x => x);\n    if (!allOk) {\n      process.exit(1);\n    }\n  }\n}, {\n  key: 'patches',\n  roots: ['patches'],\n  test: filename => filename.endsWith('.patch'),\n  run: (opts, filenames) => {\n    const patchesDir = path.resolve(__dirname, '../patches');\n    const patchesConfig = path.resolve(patchesDir, 'config.json');\n    // If the config does not exist, that's a problem\n    if (!fs.existsSync(patchesConfig)) {\n      console.error(`Patches config file: \"${patchesConfig}\" does not exist`);\n      process.exit(1);",
      "\napp.whenReady().then(() => {\n  const win = new BrowserWindow({\n    webPreferences: {\n      contextIsolation: true\n    }\n  });\n  win.close();\n});\n",
      "const { ipcRenderer } = require('electron');\n\nwindow.addEventListener('message', (event) => {\n  ipcRenderer.send('leak-result', event.data);\n});\n",
      "findRelease();\n",
      "module.exports = require('./webpack.config.base')({\n  target: 'utility',\n  alwaysHasNode: true\n});\n",
      "})\n",
      "\n    plugins.push(new webpack.DefinePlugin(defines));\n\n    if (wrapInitWithProfilingTimeout) {\n      plugins.push(new WrapperPlugin({\n        header: 'function ___electron_webpack_init__() {',\n        footer: `\n};\nif ((globalThis.process || binding.process).argv.includes(\"--profile-electron-init\")) {\n  setTimeout(___electron_webpack_init__, 0);\n} else {\n  ___electron_webpack_init__();\n}`\n      }));\n    }\n\n    if (wrapInitWithTryCatch) {\n      plugins.push(new WrapperPlugin({\n        header: 'try {',\n        footer: `\n} catch (err) {\n  console.error('Electron ${outputFilename} script failed to run');\n  console.error(err);\n}`\n      }));\n    }\n\n    return {\n      mode: 'development',\n      devtool: false,\n      entry,\n      target: alwaysHasNode ? 'node' : 'web',\n      output: {\n        filename: outputFilename\n      },\n      resolve: {\n        alias: {\n          '@electron/internal': path.resolve(electronRoot, 'lib'),\n          electron$: electronAPIFile,\n          'electron/main$': electronAPIFile,\n          'electron/renderer$': electronAPIFile,\n          'electron/common$': electronAPIFile,\n          // Force timers to resolve to our dependency that doesn't use window.postMessage\n          timers: path.resolve(electronRoot, 'node_modules', 'timers-browserify', 'main.js')\n        },\n        extensions: ['.ts', '.js'],\n        fallback: {\n          // We provide our own \"timers\" import above, any usage of setImmediate inside\n          // one of our renderer bundles should import it from the 'timers' package\n          setImmediate: false\n        }\n      },\n      module: {\n        rules: [{\n          test: (moduleName) => !onlyPrintingGraph && ignoredModules.includes(moduleName),\n          loader: 'null-loader'\n        }, {\n          test: /\\.ts$/,\n          loader: 'ts-loader',\n          options: {\n            configFile: path.resolve(electronRoot, 'tsconfig.electron.json'),\n            transpileOnly: onlyPrintingGraph,\n            ignoreDiagnostics: [\n              // File '{0}' is not under 'rootDir' '{1}'."
    ]
  },
  {
    "id": "vuejs/vue",
    "org": "vuejs",
    "avatarURL": "https://avatars.githubusercontent.com/u/6128107?v=4",
    "name": "vuejs/vue",
    "url": "https://github.com/vuejs/vue",
    "lang": "JavaScript",
    "star_num": 205166,
    "fork_num": 34343,
    "snippets": [
      "\n  if (isDryRun) {\n    console.log(`\\nDry run finished - run git diff to see package changes.`)\n  }\n  console.log()\n}\n\nfunction updatePackage(pkgRoot, version) {\n  const pkgPath = path.resolve(pkgRoot, 'package.json')\n  const pkg = JSON.parse(fs.readFileSync(pkgPath, 'utf-8'))\n  pkg.version = version\n  fs.writeFileSync(pkgPath, JSON.stringify(pkg, null, 2) + '\\n')\n}\n\nconst getPkgRoot = pkg =>\n  pkg === 'vue'\n    ? path.resolve(__dirname, '../')\n    : path.resolve(__dirname, '../packages/' + pkg)\n\nasync function publishPackage(pkgName, version, runIfNotDry) {\n  const pkgRoot = getPkgRoot(pkgName)\n  const pkgPath = path.resolve(pkgRoot, 'package.json')\n  const pkg = JSON.parse(fs.readFileSync(pkgPath, 'utf-8'))\n  const publishedName = pkg.name\n  if (pkg.private) {\n    return\n  }\n\n  let releaseTag = null\n  if (args.tag) {\n    releaseTag = args.tag\n  } else if (version.includes('alpha')) {\n    releaseTag = 'alpha'\n  } else if (version.includes('beta')) {\n    releaseTag = 'beta'\n  } else if (version.includes('rc')) {\n    releaseTag = 'rc'\n  }\n\n  // avoid overwriting tags for v3\n  if (pkgName === 'vue' || pkgName === 'compiler-sfc') {\n    if (releaseTag) {\n      releaseTag = `v2-${releaseTag}`\n    } else {\n      releaseTag = 'v2-latest'\n    }\n  }\n\n  step(`Publishing ${publishedName}...`)\n  try {\n    await runIfNotDry(\n      'pnpm',\n      [\n        'publish',\n        ...(releaseTag ? ['--tag', releaseTag] : []),\n        '--access',\n        'public'\n      ],\n      {\n        cwd: pkgRoot,\n        stdio: 'pipe'\n      }\n    )\n    console.log(",
      "      `invalid commit message format.`\n    )}\\n\\n` +\n      chalk.red(\n        `  Proper commit message format is required for automated changelog generation. Examples:\\n\\n`\n      ) +\n      `    ${chalk.green(`feat(compiler): add 'comments' option`)}\\n` +\n      `    ${chalk.green(\n        `fix(v-model): handle events on blur (close #28)`\n      )}\\n\\n` +\n      chalk.red(`  See .github/COMMIT_CONVENTION.md for more details.\\n`)\n  )\n  process.exit(1)\n}\n",
      "  }\n}\n",
      "var app = new Vue({\n  el: '#app',\n  data: {\n    databases: []\n  }\n})\n\nfunction loadSamples() {\n  app.databases = Object.freeze(ENV.generateData().toArray());\n  Monitoring.renderRate.ping();\n  setTimeout(loadSamples, ENV.timeout);\n}\n\nloadSamples()\n",
      "}\n",
      "})();\n",
      "const version = process.argv[2] || process.env.VERSION\nconst cc = require('conventional-changelog')\nconst file = `./RELEASE_NOTE${version ? `_${version}` : ``}.md`\nconst fileStream = require('fs').createWriteStream(file)\n\ncc({\n  preset: 'angular',\n  pkg: {\n    transform (pkg) {\n      pkg.version = `v${version}`\n      return pkg\n    }\n  }\n}).pipe(fileStream).on('close', () => {\n  console.log(`Generated release note at ${file}`)\n})\n",
      "if (process.env.NODE_ENV === 'production') {\n  module.exports = require('./vue.common.prod.js')\n} else {\n  module.exports = require('./vue.common.dev.js')\n}\n",
      "import Vue from '../../../../dist/vue.runtime.common.js'\n\nconst app = {\n  name: 'app',\n  props: ['id'],\n  serverCacheKey: props => (props.id === 1 ? false : props.id),\n  render(h) {\n    return h('div', '/test')\n  }\n}\n\nexport default () => {\n  return Promise.resolve(\n    new Vue({\n      render: h => h(app, { props: { id: 1 } })\n    })\n  )\n}\n",
      "const path = require('path')\n\nconst resolve = p => path.resolve(__dirname, '../', p)\n\nmodule.exports = {\n  vue: resolve('src/platforms/web/entry-runtime-with-compiler'),\n  compiler: resolve('src/compiler'),\n  core: resolve('src/core'),\n  shared: resolve('src/shared'),\n  web: resolve('src/platforms/web'),\n  server: resolve('packages/server-renderer/src'),\n  sfc: resolve('packages/compiler-sfc/src')\n}\n"
    ]
  },
  {
    "id": "atom/atom",
    "org": "atom",
    "avatarURL": "https://avatars.githubusercontent.com/u/1089146?v=4",
    "name": "atom/atom",
    "url": "https://github.com/atom/atom",
    "lang": "JavaScript",
    "star_num": 59585,
    "fork_num": 18353,
    "snippets": [
      "",
      "  // node-gyp 5.x accepts Python ^2.6 || >= 3.5, node-gyp 6+ only accepts Python == 2.7 || >= 3.5.\n  // node-gyp 7.x stopped using the \"-2\" flag for \"py.exe\",\n  // so as to allow finding Python 3 as well, not just Python 2.\n  // https://github.com/nodejs/node-gyp/blob/master/CHANGELOG.md#v700-2020-06-03\n\n  let stdout;\n  let fullVersion;\n  let usablePythonWasFound;\n  let triedLog = '';\n  let binaryPlusFlag;\n\n  function verifyBinary(binary, prependFlag) {\n    if (binary && !usablePythonWasFound) {\n      // clear re-used \"result\" variables now that we're checking another python binary.\n      stdout = '';\n      fullVersion = '';\n\n      let allFlags = [\n        '-c',\n        'import platform\\nprint(platform.python_version())'\n      ];\n      if (prependFlag) {\n        // prependFlag is an optional argument,\n        // used to prepend \"-2\" for the \"py.exe\" launcher.\n        //\n        // TODO: Refactor this script by eliminating \"prependFlag\"\n        // once we update to node-gyp v7.x or newer;\n        // the \"-2\" flag is not used in node-gyp v7.x.\n        allFlags.unshift(prependFlag);\n      }\n\n      try {\n        stdout = childProcess.execFileSync(binary, allFlags, {\n          env: process.env,\n          stdio: ['ignore', 'pipe', 'ignore']\n        });\n      } catch (e) {}\n\n      if (stdout) {\n        if (stdout.indexOf('+') !== -1)\n          stdout = stdout.toString().replace(/\\+/g, '');\n        if (stdout.indexOf('rc') !== -1)\n          stdout = stdout.toString().replace(/rc(.*)$/gi, '');\n        fullVersion = stdout.toString().trim();\n      }\n\n      if (fullVersion) {\n        let versionComponents = fullVersion.split('.');\n        let majorVersion = Number(versionComponents[0]);\n        let minorVersion = Number(versionComponents[1]);\n        if (\n          (majorVersion === 2 && minorVersion >= 6) ||\n          (majorVersion === 3 && minorVersion >= 5)\n        ) {\n          usablePythonWasFound = true;\n        }\n      }\n\n      // Prepare to log which commands were tried, and the results, in case no usable Python can be found.\n      if (prependFlag) {\n        binaryPlusFlag = binary + ' ' + prependFlag;\n      } else {\n        binaryPlusFlag = binary;\n      }",
      "  constructor(key, parts) {\n    this.isRegistered = this.isRegistered.bind(this);\n    this.register = this.register.bind(this);\n    this.deregister = this.deregister.bind(this);\n    this.update = this.update.bind(this);\n    this.key = key;\n    this.parts = parts;\n  }\n\n  isRegistered(callback) {\n    new Registry({\n      hive: 'HKCU',\n      key: `${this.key}\\\\${this.parts[0].key}`\n    }).get(this.parts[0].name, (err, val) =>\n      callback(err == null && val != null && val.value === this.parts[0].value)\n    );\n  }\n\n  register(callback) {\n    let doneCount = this.parts.length;\n    this.parts.forEach(part => {\n      let reg = new Registry({\n        hive: 'HKCU',\n        key: part.key != null ? `${this.key}\\\\${part.key}` : this.key\n      });\n      return reg.create(() =>\n        reg.set(part.name, Registry.REG_SZ, part.value, () => {\n          if (--doneCount === 0) return callback();\n        })\n      );\n    });\n  }\n\n  deregister(callback) {\n    this.isRegistered(isRegistered => {\n      if (isRegistered) {\n        new Registry({ hive: 'HKCU', key: this.key }).destroy(() =>\n          callback(null, true)\n        );\n      } else {\n        callback(null, false);\n      }\n    });\n  }\n\n  update(callback) {\n    new Registry({\n      hive: 'HKCU',\n      key: `${this.key}\\\\${this.parts[0].key}`\n    }).get(this.parts[0].name, (err, val) => {\n      if (err != null || val == null) {\n        callback(err);\n      } else {\n        this.register(callback);\n      }\n    });\n  }\n}\n\nexports.appName = appName;\n\nexports.fileHandler = new ShellOption(\n  `\\\\Software\\\\Classes\\\\Applications\\\\${exeName}`,\n  [",
      "        this.element.tabIndex = -1;\n        this.element.className = 'test-root';\n      }\n      return this.element;\n    }\n  }\n\n  it(\"adds the item's element as a child of the panel\", () => {\n    const panel = new Panel({ item: new TestPanelItem() }, atom.views);\n    const element = panel.getElement();\n    expect(element.tagName.toLowerCase()).toBe('atom-panel');\n    expect(element.firstChild).toBe(panel.getItem().getElement());\n  });\n\n  describe('destroying the panel', () => {\n    it('removes the element when the panel is destroyed', () => {\n      const panel = new Panel({ item: new TestPanelItem() }, atom.views);\n      const element = panel.getElement();\n      const jasmineContent = document.getElementById('jasmine-content');\n      jasmineContent.appendChild(element);\n\n      expect(element.parentNode).toBe(jasmineContent);\n      panel.destroy();\n      expect(element.parentNode).not.toBe(jasmineContent);\n    });\n\n    it('does not try to remove the element twice', () => {\n      const item = new TestPanelItem();\n      const panel = new Panel({ item }, atom.views);\n      const element = panel.getElement();\n      const jasmineContent = document.getElementById('jasmine-content');\n      jasmineContent.appendChild(element);\n\n      item.getElement().focus();\n      expect(item.getElement()).toHaveFocus();\n\n      // Avoid this error:\n      //   NotFoundError: Failed to execute 'remove' on 'Element':\n      //   The node to be removed is no longer a child of this node.\n      //   Perhaps it was moved in a 'blur' event handler?\n      item.getElement().addEventListener('blur', () => panel.destroy());\n      panel.destroy();\n    });\n  });\n\n  describe('changing panel visibility', () => {\n    it('notifies observers added with onDidChangeVisible', () => {\n      const panel = new Panel({ item: new TestPanelItem() }, atom.views);\n\n      const spy = jasmine.createSpy();\n      panel.onDidChangeVisible(spy);\n\n      panel.hide();\n      expect(panel.isVisible()).toBe(false);\n      expect(spy).toHaveBeenCalledWith(false);\n      spy.reset();\n\n      panel.show();\n      expect(panel.isVisible()).toBe(true);\n      expect(spy).toHaveBeenCalledWith(true);\n\n      panel.destroy();\n      expect(panel.isVisible()).toBe(false);\n      expect(spy).toHaveBeenCalledWith(false);",
      "};\n",
      "      document.documentElement.getAttribute(`theme-${themeName}-sticky-headers`)\n    ).toBe(null);\n  });\n});\n",
      "",
      "// `package.json` called \"uriHandler\". The value of this key should be an object\n// that contains, at minimum, a key named \"method\". This is the name of the method\n// on your package object that Atom will call when it receives a URI your package\n// is responsible for handling. It will pass the parsed URI as the first argument (by using\n// [Node's `url.parse(uri, true)`](https://nodejs.org/docs/latest/api/url.html#url_url_parse_urlstring_parsequerystring_slashesdenotehost))\n// and the raw URI string as the second argument.\n//\n// By default, Atom will defer activation of your package until a URI it needs to handle\n// is triggered. If you need your package to activate right away, you can add\n// `\"deferActivation\": false` to your \"uriHandler\" configuration object. When activation\n// is deferred, once Atom receives a request for a URI in your package's namespace, it will\n// activate your package and then call `methodName` on it as before.\n//\n// If your package specifies a deprecated `urlMain` property, you cannot register URI handlers\n// via the `uriHandler` key.\n//\n// ## Example\n//\n// Here is a sample package that will be activated and have its `handleURI` method called\n// when a URI beginning with `atom://my-package` is triggered:\n//\n// `package.json`:\n//\n// ```javascript\n// {\n//   \"name\": \"my-package\",\n//   \"main\": \"./lib/my-package.js\",\n//   \"uriHandler\": {\n//     \"method\": \"handleURI\"\n//   }\n// }\n// ```\n//\n// `lib/my-package.js`\n//\n// ```javascript\n// module.exports = {\n//   activate: function() {\n//     // code to activate your package\n//   }\n//\n//   handleURI(parsedUri, rawUri) {\n//     // parse and handle uri\n//   }\n// }\n// ```\nmodule.exports = class URIHandlerRegistry {\n  constructor(maxHistoryLength = 50) {\n    this.registrations = new Map();\n    this.history = [];\n    this.maxHistoryLength = maxHistoryLength;\n    this._id = 0;\n\n    this.emitter = new Emitter();\n  }\n\n  registerHostHandler(host, callback) {\n    if (typeof callback !== 'function') {\n      throw new Error(\n        'Cannot register a URI host handler with a non-function callback'\n      );\n    }\n\n    if (this.registrations.has(host)) {",
      "  oldReleaseNotes\n) {\n  let oldVersion = null;\n  let oldVersionName = null;\n  const parsedVersion = semver.parse(releaseVersion);\n  const newVersionBranch = getBranchForVersion(parsedVersion);\n\n  if (githubToken) {\n    changelog.setGithubAccessToken(githubToken);\n    octokit.authenticate({\n      type: 'token',\n      token: githubToken\n    });\n  }\n\n  if (parsedVersion.prerelease && parsedVersion.prerelease[0] === 'beta0') {\n    // For beta0 releases, stable hasn't been released yet so compare against\n    // the stable version's release branch\n    oldVersion = `${parsedVersion.major}.${parsedVersion.minor - 1}-releases`;\n    oldVersionName = `v${parsedVersion.major}.${parsedVersion.minor - 1}.0`;\n  } else {\n    let releases = await octokit.repos.getReleases({\n      owner: 'atom',\n      repo: 'atom'\n    });\n    oldVersion = 'v' + getPreviousRelease(releaseVersion, releases.data).name;\n    oldVersionName = oldVersion;\n  }\n\n  const allChangesText = await changelog.getChangelog({\n    owner: 'atom',\n    repo: 'atom',\n    fromTag: oldVersion,\n    toTag: newVersionBranch,\n    dependencyKey: 'packageDependencies',\n    changelogFormatter: function({\n      pullRequests,\n      owner,\n      repo,\n      fromTag,\n      toTag\n    }) {\n      let prString = changelog.pullRequestsToString(pullRequests);\n      let title = repo;\n      if (repo === 'atom') {\n        title = 'Atom Core';\n        fromTag = oldVersionName;\n        toTag = releaseVersion;\n      }\n      return `### [${title}](https://github.com/${owner}/${repo})\\n\\n${fromTag}...${toTag}\\n\\n${prString}`;\n    }\n  });\n\n  const writtenReleaseNotes =\n    extractWrittenReleaseNotes(oldReleaseNotes) ||\n    '**TODO**: Pull relevant changes here!';\n\n  return `## Notable Changes\\n\n${writtenReleaseNotes}\\n\n<details>\n<summary>All Changes</summary>\\n\n${allChangesText}\n</details>\n`;",
      "    } else if (rightEdgeOffset > viewportDimensions.right) {\n      // right overflow\n      delta.left =\n        viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n    }\n  }\n\n  return delta;\n};\n\nTooltip.prototype.getTitle = function() {\n  const title = this.element.getAttribute('data-original-title');\n  if (title) {\n    return title;\n  } else {\n    return typeof this.options.title === 'function'\n      ? this.options.title.call(this.element)\n      : this.options.title;\n  }\n};\n\nTooltip.prototype.getUID = function(prefix) {\n  do prefix += ~~(Math.random() * 1000000);\n  while (document.getElementById(prefix));\n  return prefix;\n};\n\nTooltip.prototype.getTooltipElement = function() {\n  if (!this.tip) {\n    let div = document.createElement('div');\n    div.innerHTML = this.options.template;\n    if (div.children.length !== 1) {\n      throw new Error(\n        'Tooltip `template` option must consist of exactly 1 top-level element!'\n      );\n    }\n    this.tip = div.firstChild;\n  }\n  return this.tip;\n};\n\nTooltip.prototype.getArrowElement = function() {\n  this.arrow =\n    this.arrow || this.getTooltipElement().querySelector('.tooltip-arrow');\n  return this.arrow;\n};\n\nTooltip.prototype.enable = function() {\n  this.enabled = true;\n};\n\nTooltip.prototype.disable = function() {\n  this.enabled = false;\n};\n\nTooltip.prototype.toggleEnabled = function() {\n  this.enabled = !this.enabled;\n};\n\nTooltip.prototype.toggle = function(event) {\n  if (event) {\n    if (event.currentTarget !== this.element) {\n      this.getDelegateComponent(event.currentTarget).toggle(event);\n      return;"
    ]
  },
  {
    "id": "golang/go",
    "org": "golang",
    "avatarURL": "https://avatars.githubusercontent.com/u/4314092?v=4",
    "name": "golang/go",
    "url": "https://github.com/golang/go",
    "lang": "Go",
    "star_num": 114112,
    "fork_num": 17090,
    "snippets": [
      "\tif i < 0 || i >= Kind(len(_Kind_index)-1) {\n\t\treturn \"Kind(\" + strconv.FormatInt(int64(i), 10) + \")\"\n\t}\n\treturn _Kind_name[_Kind_index[i]:_Kind_index[i+1]]\n}\n",
      "}\n",
      "\tEvents uint32\n\tData   [8]byte // to match amd64\n}\n",
      "// compile\n\n// Copyright 2010 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\npackage main\n\ntype T []int\nfunc (t T) m()\n\nfunc main() {\n\t_ = T{}\n}\n\n// bug245.go:14: fatal error: method mismatch: T for T\n",
      "\n// Copyright 2023 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\npackage main\n\nimport (\n\t\"arena\"\n\t\"log\"\n\t\"reflect\"\n)\n\nfunc main() {\n\ta := arena.NewArena()\n\tdefer a.Free()\n\n\tconst iValue = 10\n\n\ti := arena.New[int](a)\n\t*i = iValue\n\n\tif *i != iValue {\n\t\t// This test doesn't reasonably expect this to fail. It's more likely\n\t\t// that *i crashes for some reason. Still, why not check it.\n\t\tlog.Fatalf(\"bad i value: got %d, want %d\", *i, iValue)\n\t}\n\n\tconst wantLen = 125\n\tconst wantCap = 1912\n\n\tsl := arena.MakeSlice[*int](a, wantLen, wantCap)\n\tif len(sl) != wantLen {\n\t\tlog.Fatalf(\"bad arena slice length: got %d, want %d\", len(sl), wantLen)\n\t}\n\tif cap(sl) != wantCap {\n\t\tlog.Fatalf(\"bad arena slice capacity: got %d, want %d\", cap(sl), wantCap)\n\t}\n\tsl = sl[:cap(sl)]\n\tfor j := range sl {\n\t\tsl[j] = i\n\t}\n\tfor j := range sl {\n\t\tif *sl[j] != iValue {\n\t\t\t// This test doesn't reasonably expect this to fail. It's more likely\n\t\t\t// that sl[j] crashes for some reason. Still, why not check it.\n\t\t\tlog.Fatalf(\"bad sl[j] value: got %d, want %d\", *sl[j], iValue)\n\t\t}\n\t}\n\n\tt := reflect.TypeOf(int(0))\n\tv := reflect.ArenaNew(a, t)\n\tif want := reflect.PointerTo(t); v.Type() != want {\n\t\tlog.Fatalf(\"unexpected type for arena-allocated value: got %s, want %s\", v.Type(), want)\n\t}\n\ti2 := v.Interface().(*int)\n\t*i2 = iValue\n\n\tif *i2 != iValue {\n\t\t// This test doesn't reasonably expect this to fail. It's more likely\n\t\t// that *i crashes for some reason. Still, why not check it.\n\t\tlog.Fatalf(\"bad i2 value: got %d, want %d\", *i2, iValue)\n\t}\n}",
      "\t\"syscall\"\n)\n\nfunc hostname() (name string, err error) {\n\t// Use PhysicalDnsHostname to uniquely identify host in a cluster\n\tconst format = windows.ComputerNamePhysicalDnsHostname\n\n\tn := uint32(64)\n\tfor {\n\t\tb := make([]uint16, n)\n\t\terr := windows.GetComputerNameEx(format, &b[0], &n)\n\t\tif err == nil {\n\t\t\treturn syscall.UTF16ToString(b[:n]), nil\n\t\t}\n\t\tif err != syscall.ERROR_MORE_DATA {\n\t\t\treturn \"\", NewSyscallError(\"ComputerNameEx\", err)\n\t\t}\n\n\t\t// If we received an ERROR_MORE_DATA, but n doesn't get larger,\n\t\t// something has gone wrong and we may be in an infinite loop\n\t\tif n <= uint32(len(b)) {\n\t\t\treturn \"\", NewSyscallError(\"ComputerNameEx\", err)\n\t\t}\n\t}\n}\n",
      "\t}))\n\n\tmw := w\n\t// chain a bunch of multiWriters\n\tfor i := 0; i < 100; i++ {\n\t\tmw = MultiWriter(w)\n\t}\n\n\tmw = MultiWriter(w, mw, w, mw)\n\tmw.Write(nil) // don't care about errors, just want to check the call-depth for Write\n\n\tif writeDepth != 4*(myDepth+2) { // 2 should be multiWriter.Write and writerFunc.Write\n\t\tt.Errorf(\"multiWriter did not flatten chained multiWriters: expected writeDepth %d, got %d\",\n\t\t\t4*(myDepth+2), writeDepth)\n\t}\n}\n\nfunc TestMultiWriterError(t *testing.T) {\n\tf1 := writerFunc(func(p []byte) (int, error) {\n\t\treturn len(p) / 2, ErrShortWrite\n\t})\n\tf2 := writerFunc(func(p []byte) (int, error) {\n\t\tt.Errorf(\"MultiWriter called f2.Write\")\n\t\treturn len(p), nil\n\t})\n\tw := MultiWriter(f1, f2)\n\tn, err := w.Write(make([]byte, 100))\n\tif n != 50 || err != ErrShortWrite {\n\t\tt.Errorf(\"Write = %d, %v, want 50, ErrShortWrite\", n, err)\n\t}\n}\n\n// Test that MultiReader copies the input slice and is insulated from future modification.\nfunc TestMultiReaderCopy(t *testing.T) {\n\tslice := []Reader{strings.NewReader(\"hello world\")}\n\tr := MultiReader(slice...)\n\tslice[0] = nil\n\tdata, err := ReadAll(r)\n\tif err != nil || string(data) != \"hello world\" {\n\t\tt.Errorf(\"ReadAll() = %q, %v, want %q, nil\", data, err, \"hello world\")\n\t}\n}\n\n// Test that MultiWriter copies the input slice and is insulated from future modification.\nfunc TestMultiWriterCopy(t *testing.T) {\n\tvar buf strings.Builder\n\tslice := []Writer{&buf}\n\tw := MultiWriter(slice...)\n\tslice[0] = nil\n\tn, err := w.Write([]byte(\"hello world\"))\n\tif err != nil || n != 11 {\n\t\tt.Errorf(\"Write(`hello world`) = %d, %v, want 11, nil\", n, err)\n\t}\n\tif buf.String() != \"hello world\" {\n\t\tt.Errorf(\"buf.String() = %q, want %q\", buf.String(), \"hello world\")\n\t}\n}\n\n// readerFunc is a Reader implemented by the underlying func.\ntype readerFunc func(p []byte) (int, error)\n\nfunc (f readerFunc) Read(p []byte) (int, error) {\n\treturn f(p)\n}",
      "\t}\n\treturn written, err\n}\n",
      "\tr, err := zlib.NewReader(b)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tio.Copy(os.Stdout, r)\n\t// Output: hello, world\n\tr.Close()\n}\n",
      "\n\t\t// Test adding to the bucket overall with 100% GC work.\n\t\tl.AddAssistTime(assistTime(time.Millisecond, 1.0-GCBackgroundUtilization))\n\t\tl.Update(advance(time.Millisecond))\n\t\tif expect := uint64(procs * time.Millisecond); l.Fill() != expect {\n\t\t\tt.Errorf(\"expected %d fill from 100%% GC CPU, got fill of %d cpu-ns\", expect, l.Fill())\n\t\t}\n\t\tif l.Limiting() {\n\t\t\tt.Errorf(\"limiter is enabled after filling bucket but shouldn't be\")\n\t\t}\n\t\tif t.Failed() {\n\t\t\tt.FailNow()\n\t\t}\n\n\t\t// Test filling the bucket exactly full.\n\t\tl.AddAssistTime(assistTime(CapacityPerProc-time.Millisecond, 1.0-GCBackgroundUtilization))\n\t\tl.Update(advance(CapacityPerProc - time.Millisecond))\n\t\tif l.Fill() != l.Capacity() {\n\t\t\tt.Errorf(\"expected bucket filled to capacity %d, got %d\", l.Capacity(), l.Fill())\n\t\t}\n\t\tif !l.Limiting() {\n\t\t\tt.Errorf(\"limiter is not enabled after filling bucket but should be\")\n\t\t}\n\t\tif l.Overflow() != 0+baseOverflow {\n\t\t\tt.Errorf(\"bucket filled exactly should not have overflow, found %d\", l.Overflow())\n\t\t}\n\t\tif t.Failed() {\n\t\t\tt.FailNow()\n\t\t}\n\n\t\t// Test adding with a delta of exactly zero. That is, GC work is exactly 50% of all resources.\n\t\t// Specifically, the limiter should still be on, and no overflow should accumulate.\n\t\tl.AddAssistTime(assistTime(1*time.Second, 0.5-GCBackgroundUtilization))\n\t\tl.Update(advance(1 * time.Second))\n\t\tif l.Fill() != l.Capacity() {\n\t\t\tt.Errorf(\"expected bucket filled to capacity %d, got %d\", l.Capacity(), l.Fill())\n\t\t}\n\t\tif !l.Limiting() {\n\t\t\tt.Errorf(\"limiter is not enabled after filling bucket but should be\")\n\t\t}\n\t\tif l.Overflow() != 0+baseOverflow {\n\t\t\tt.Errorf(\"bucket filled exactly should not have overflow, found %d\", l.Overflow())\n\t\t}\n\t\tif t.Failed() {\n\t\t\tt.FailNow()\n\t\t}\n\n\t\t// Drain the bucket by half.\n\t\tl.AddAssistTime(assistTime(CapacityPerProc, 0))\n\t\tl.Update(advance(CapacityPerProc))\n\t\tif expect := l.Capacity() / 2; l.Fill() != expect {\n\t\t\tt.Errorf(\"failed to drain to %d, got fill %d\", expect, l.Fill())\n\t\t}\n\t\tif l.Limiting() {\n\t\t\tt.Errorf(\"limiter is enabled after draining bucket but shouldn't be\")\n\t\t}\n\t\tif t.Failed() {\n\t\t\tt.FailNow()\n\t\t}\n\n\t\t// Test overfilling the bucket.\n\t\tl.AddAssistTime(assistTime(CapacityPerProc, 1.0-GCBackgroundUtilization))\n\t\tl.Update(advance(CapacityPerProc))\n\t\tif l.Fill() != l.Capacity() {"
    ]
  },
  {
    "id": "facebook/jest",
    "org": "facebook",
    "avatarURL": "https://avatars.githubusercontent.com/u/103283236?v=4",
    "name": "facebook/jest",
    "url": "https://github.com/jestjs/jest",
    "lang": "JavaScript",
    "star_num": 42630,
    "fork_num": 6462,
    "snippets": [
      "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nlet state = 1;\n\nexport const set = i => {\n  state = i;\n};\n\nexport const increment = () => {\n  state += 1;\n};\n\nexport const getState = () => state;\n",
      "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @jest-environment ./DocblockPragmasEnvironment.js\n * @my-custom-pragma pragma-value\n */\n\ntest('docblock pragmas', () => {\n  expect(myCustomPragma).toBe('pragma-value'); // eslint-disable-line no-undef\n});\n",
      " *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n'use strict';\n\nrequire('@myorg/pkg');\n",
      "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst m = require('../');\n\ntest('some test', () => {\n  expect(m.found).toBe(true);\n});\n",
      "});\n",
      "export function isLocalhost() {\n  return process.env.HOSTNAME === 'localhost';\n}\n",
      "module.exports = {\n  thisFunctionIsNeverInstrumented,\n};\n",
      "\nrequire('./someOtherFile');\n\nmodule.exports = {a: 1};\n",
      "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @noflow\n */\n\nconst path = require('path');\n\nmodule.exports = {\n  getHasteName(filePath) {\n    const name = path.parse(filePath).name;\n    const isMock = filePath.indexOf('__mocks__') !== -1;\n\n    // Mocks are automatically parsed by Jest already.\n    return name.startsWith('Test') && !isMock ? name : null;\n  },\n};\n",
      "/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\ntest('can require by absolute path', () => {\n  expect(require('path/file.js')).toBe(42);\n});\n"
    ]
  },
  {
    "id": "reduxjs/redux",
    "org": "reduxjs",
    "avatarURL": "https://avatars.githubusercontent.com/u/13142323?v=4",
    "name": "reduxjs/redux",
    "url": "https://github.com/reduxjs/redux",
    "lang": "JavaScript",
    "star_num": 59882,
    "fork_num": 15443,
    "snippets": [
      "      onClick()\n    }}>\n      {children}\n    </a>\n  )\n}\n\nLink.propTypes = {\n  active: PropTypes.bool.isRequired,\n  children: PropTypes.node.isRequired,\n  onClick: PropTypes.func.isRequired\n}\n\nexport default Link\n",
      "import { SET_VISIBILITY_FILTER } from '../constants/ActionTypes'\nimport { SHOW_ALL } from '../constants/TodoFilters'\n\nconst visibilityFilter = (state = SHOW_ALL, action) => {\n  switch (action.type) {\n    case SET_VISIBILITY_FILTER:\n      return action.filter\n    default:\n      return state\n  }\n}\n\nexport default visibilityFilter",
      "import React from 'react'\nimport { createDevTools } from 'redux-devtools'\nimport LogMonitor from 'redux-devtools-log-monitor'\nimport DockMonitor from 'redux-devtools-dock-monitor'\n\nexport default createDevTools(\n  <DockMonitor toggleVisibilityKey=\"ctrl-h\"\n               changePositionKey=\"ctrl-w\">\n    <LogMonitor />\n  </DockMonitor>\n)\n",
      "\nconst childIds = (state, action) => {\n  switch (action.type) {\n    case ADD_CHILD:\n      return [ ...state, action.childId ]\n    case REMOVE_CHILD:\n      return state.filter(id => id !== action.childId)\n    default:\n      return state\n  }\n}\n\nconst node = (state, action) => {\n  switch (action.type) {\n    case CREATE_NODE:\n      return {\n        id: action.nodeId,\n        counter: 0,\n        childIds: []\n      }\n    case INCREMENT:\n      return {\n        ...state,\n        counter: state.counter + 1\n      }\n    case ADD_CHILD:\n    case REMOVE_CHILD:\n      return {\n        ...state,\n        childIds: childIds(state.childIds, action)\n      }\n    default:\n      return state\n  }\n}\n\nconst getAllDescendantIds = (state, nodeId) => (\n  state[nodeId].childIds.reduce((acc, childId) => (\n    [ ...acc, childId, ...getAllDescendantIds(state, childId) ]\n  ), [])\n)\n\nconst deleteMany = (state, ids) => {\n  state = { ...state }\n  ids.forEach(id => delete state[id])\n  return state\n}\n\nexport default (state = {}, action) => {\n  const { nodeId } = action\n  if (typeof nodeId === 'undefined') {\n    return state\n  }\n\n  if (action.type === DELETE_NODE) {\n    const descendantIds = getAllDescendantIds(state, nodeId)\n    return deleteMany(state, [ nodeId, ...descendantIds ])\n  }\n\n  return {\n    ...state,\n    [nodeId]: node(state[nodeId], action)\n  }\n}",
      "import React from 'react'\nimport { createRenderer } from 'react-test-renderer/shallow'\nimport App from './App'\nimport Header from '../containers/Header'\nimport MainSection from '../containers/MainSection'\n\nconst setup = _propOverrides => {\n  const renderer = createRenderer()\n  renderer.render(<App />)\n  const output = renderer.getRenderOutput()\n  return output\n}\n\ndescribe('components', () => {\n  describe('Header', () => {\n    it('should render', () => {\n      const output = setup()\n      const [header] = output.props.children\n      expect(header.type).toBe(Header)\n    })\n  })\n\n  describe('Mainsection', () => {\n    it('should render', () => {\n      const output = setup()\n      const [, mainSection] = output.props.children\n      expect(mainSection.type).toBe(MainSection)\n    })\n  })\n})\n",
      "export const ADD_TO_CART = 'ADD_TO_CART'\nexport const CHECKOUT_REQUEST = 'CHECKOUT_REQUEST'\nexport const CHECKOUT_SUCCESS = 'CHECKOUT_SUCCESS'\nexport const CHECKOUT_FAILURE = 'CHECKOUT_FAILURE'\nexport const RECEIVE_PRODUCTS = 'RECEIVE_PRODUCTS'\n",
      "import React from 'react'\nimport Footer from './Footer'\nimport AddTodo from '../containers/AddTodo'\nimport VisibleTodoList from '../containers/VisibleTodoList'\n\nconst App = () => (\n  <div>\n    <AddTodo />\n    <VisibleTodoList />\n    <Footer />\n  </div>\n)\n\nexport default App\n",
      "import React from 'react'\nimport Footer from './Footer'\nimport AddTodo from '../containers/AddTodo'\nimport VisibleTodoList from '../containers/VisibleTodoList'\n\nconst App = () => (\n  <div>\n    <AddTodo />\n    <VisibleTodoList />\n    <Footer />\n  </div>\n)\n\nexport default App\n",
      "",
      "  })\n})\n"
    ]
  },
  {
    "id": "moby/moby",
    "org": "moby",
    "avatarURL": "https://avatars.githubusercontent.com/u/27259197?v=4",
    "name": "moby/moby",
    "url": "https://github.com/moby/moby",
    "lang": "Go",
    "star_num": 66625,
    "fork_num": 18834,
    "snippets": [
      "// Package identifier defines the contract between implementations of Encoding\n// and Index by defining identifiers that uniquely identify standardized coded\n// character sets (CCS) and character encoding schemes (CES), which we will\n// together refer to as encodings, for which Encoding implementations provide\n// converters to and from UTF-8. This package is typically only of concern to\n// implementers of Indexes and Encodings.\n//\n// One part of the identifier is the MIB code, which is defined by IANA and\n// uniquely identifies a CCS or CES. Each code is associated with data that\n// references authorities, official documentation as well as aliases and MIME\n// names.\n//\n// Not all CESs are covered by the IANA registry. The \"other\" string that is\n// returned by ID can be used to identify other character sets or versions of\n// existing ones.\n//\n// It is recommended that each package that provides a set of Encodings provide\n// the All and Common variables to reference all supported encodings and\n// commonly used subset. This allows Index implementations to include all\n// available encodings without explicitly referencing or knowing about them.\npackage identifier\n\n// Note: this package is internal, but could be made public if there is a need\n// for writing third-party Indexes and Encodings.\n\n// References:\n// - http://source.icu-project.org/repos/icu/icu/trunk/source/data/mappings/convrtrs.txt\n// - http://www.iana.org/assignments/character-sets/character-sets.xhtml\n// - http://www.iana.org/assignments/ianacharset-mib/ianacharset-mib\n// - http://www.ietf.org/rfc/rfc2978.txt\n// - https://www.unicode.org/reports/tr22/\n// - http://www.w3.org/TR/encoding/\n// - https://encoding.spec.whatwg.org/\n// - https://encoding.spec.whatwg.org/encodings.json\n// - https://tools.ietf.org/html/rfc6657#section-5\n\n// Interface can be implemented by Encodings to define the CCS or CES for which\n// it implements conversions.\ntype Interface interface {\n\t// ID returns an encoding identifier. Exactly one of the mib and other\n\t// values should be non-zero.\n\t//\n\t// In the usual case it is only necessary to indicate the MIB code. The\n\t// other string can be used to specify encodings for which there is no MIB,\n\t// such as \"x-mac-dingbat\".\n\t//\n\t// The other string may only contain the characters a-z, A-Z, 0-9, - and _.\n\tID() (mib MIB, other string)\n\n\t// NOTE: the restrictions on the encoding are to allow extending the syntax\n\t// with additional information such as versions, vendors and other variants.\n}\n\n// A MIB identifies an encoding. It is derived from the IANA MIB codes and adds\n// some identifiers for some encodings that are not covered by the IANA\n// standard.\n//\n// See http://www.iana.org/assignments/ianacharset-mib.\ntype MIB uint16\n\n// These additional MIB types are not defined in IANA. They are added because\n// they are common and defined within the text repo.\nconst (\n\t// Unofficial marks the start of encodings not registered by IANA.",
      "\n/*\n * ZLint Copyright 2021 Regents of the University of Michigan\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n * implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\n\nimport (\n\t\"encoding/asn1\"\n\n\t\"github.com/zmap/zcrypto/x509\"\n\t\"github.com/zmap/zlint/v3/lint\"\n\t\"github.com/zmap/zlint/v3/util\"\n)\n\ntype SubjectDNSerialNumberNotPrintableString struct{}\n\nfunc init() {\n\tlint.RegisterLint(&lint.Lint{\n\t\tName:          \"e_subject_dn_serial_number_not_printable_string\",\n\t\tDescription:   \"X520 Distinguished Name SerialNumber MUST be encoded as PrintableString\",\n\t\tCitation:      \"RFC 5280: Appendix A\",\n\t\tSource:        lint.RFC5280,\n\t\tEffectiveDate: util.ZeroDate,\n\t\tLint:          &SubjectDNSerialNumberNotPrintableString{},\n\t})\n}\n\nfunc (l *SubjectDNSerialNumberNotPrintableString) Initialize() error {\n\treturn nil\n}\n\nfunc (l *SubjectDNSerialNumberNotPrintableString) CheckApplies(c *x509.Certificate) bool {\n\treturn len(c.Subject.SerialNumber) > 0\n}\n\nfunc (l *SubjectDNSerialNumberNotPrintableString) Execute(c *x509.Certificate) *lint.LintResult {\n\trdnSequence := util.RawRDNSequence{}\n\trest, err := asn1.Unmarshal(c.RawSubject, &rdnSequence)\n\tif err != nil {\n\t\treturn &lint.LintResult{Status: lint.Fatal}\n\t}\n\tif len(rest) > 0 {\n\t\treturn &lint.LintResult{Status: lint.Fatal}\n\t}\n\n\tfor _, attrTypeAndValueSet := range rdnSequence {\n\t\tfor _, attrTypeAndValue := range attrTypeAndValueSet {\n\t\t\tif attrTypeAndValue.Type.Equal(util.SerialOID) && attrTypeAndValue.Value.Tag != asn1.TagPrintableString {\n\t\t\t\treturn &lint.LintResult{Status: lint.Error}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn &lint.LintResult{Status: lint.Pass}\n}",
      "//go:generate go-winres make --arch=386,amd64,arm,arm64 --in=../../cli/winresources/docker-proxy/winres.json --out=../../cli/winresources/docker-proxy/resource\n\npackage main\n\nimport _ \"github.com/docker/docker/cli/winresources/docker-proxy\"\n",
      "package overlay\n\nimport (\n\t\"testing\"\n)\n\nfunc FuzzVNIMatchBPFDoesNotPanic(f *testing.F) {\n\tfor _, seed := range []uint32{0, 1, 42, 0xfffffe, 0xffffff, 0xfffffffe, 0xffffffff} {\n\t\tf.Add(seed)\n\t}\n\tf.Fuzz(func(t *testing.T, vni uint32) {\n\t\t_ = vniMatchBPF(vni)\n\t})\n}\n",
      "package container // import \"github.com/docker/docker/container\"\n\n// Mount contains information for a mount operation.\ntype Mount struct {\n\tSource      string `json:\"source\"`\n\tDestination string `json:\"destination\"`\n\tWritable    bool   `json:\"writable\"`\n}\n",
      "\nfunc ReadFile(ctx context.Context, mount snapshot.Mountable, req ReadRequest) ([]byte, error) {\n\tvar dt []byte\n\n\terr := withMount(ctx, mount, func(root string) error {\n\t\tfp, err := fs.RootPath(root, req.Filename)\n\t\tif err != nil {\n\t\t\treturn errors.WithStack(err)\n\t\t}\n\n\t\tif req.Range == nil {\n\t\t\tdt, err = os.ReadFile(fp)\n\t\t\tif err != nil {\n\t\t\t\treturn errors.WithStack(err)\n\t\t\t}\n\t\t} else {\n\t\t\tf, err := os.Open(fp)\n\t\t\tif err != nil {\n\t\t\t\treturn errors.WithStack(err)\n\t\t\t}\n\t\t\tdt, err = io.ReadAll(io.NewSectionReader(f, int64(req.Range.Offset), int64(req.Range.Length)))\n\t\t\tf.Close()\n\t\t\tif err != nil {\n\t\t\t\treturn errors.WithStack(err)\n\t\t\t}\n\t\t}\n\t\treturn nil\n\t})\n\treturn dt, err\n}\n\ntype ReadDirRequest struct {\n\tPath           string\n\tIncludePattern string\n}\n\nfunc ReadDir(ctx context.Context, mount snapshot.Mountable, req ReadDirRequest) ([]*fstypes.Stat, error) {\n\tvar (\n\t\trd []*fstypes.Stat\n\t\two fsutil.WalkOpt\n\t)\n\tif req.IncludePattern != \"\" {\n\t\two.IncludePatterns = append(wo.IncludePatterns, req.IncludePattern)\n\t}\n\terr := withMount(ctx, mount, func(root string) error {\n\t\tfp, err := fs.RootPath(root, req.Path)\n\t\tif err != nil {\n\t\t\treturn errors.WithStack(err)\n\t\t}\n\t\treturn fsutil.Walk(ctx, fp, &wo, func(path string, info os.FileInfo, err error) error {\n\t\t\tif err != nil {\n\t\t\t\treturn errors.Wrapf(err, \"walking %q\", root)\n\t\t\t}\n\t\t\tstat, ok := info.Sys().(*fstypes.Stat)\n\t\t\tif !ok {\n\t\t\t\t// This \"can't happen(tm)\".\n\t\t\t\treturn errors.Errorf(\"expected a *fsutil.Stat but got %T\", info.Sys())\n\t\t\t}\n\t\t\trd = append(rd, stat)\n\n\t\t\tif info.IsDir() {\n\t\t\t\treturn filepath.SkipDir\n\t\t\t}\n\t\t\treturn nil",
      "\tif err = driver.Create(\"volume\", nil); err == nil {\n\t\tt.Fatal(\"Expected error, was nil\")\n\t}\n\n\tif !strings.Contains(err.Error(), \"Cannot create volume\") {\n\t\tt.Fatalf(\"Unexpected error: %v\\n\", err)\n\t}\n\n\t_, err = driver.Mount(\"volume\", \"123\")\n\tif err == nil {\n\t\tt.Fatal(\"Expected error, was nil\")\n\t}\n\n\tif !strings.Contains(err.Error(), \"Cannot mount volume\") {\n\t\tt.Fatalf(\"Unexpected error: %v\\n\", err)\n\t}\n\n\terr = driver.Unmount(\"volume\", \"123\")\n\tif err == nil {\n\t\tt.Fatal(\"Expected error, was nil\")\n\t}\n\n\tif !strings.Contains(err.Error(), \"Cannot unmount volume\") {\n\t\tt.Fatalf(\"Unexpected error: %v\\n\", err)\n\t}\n\n\terr = driver.Remove(\"volume\")\n\tif err == nil {\n\t\tt.Fatal(\"Expected error, was nil\")\n\t}\n\n\tif !strings.Contains(err.Error(), \"Cannot remove volume\") {\n\t\tt.Fatalf(\"Unexpected error: %v\\n\", err)\n\t}\n\n\t_, err = driver.Path(\"volume\")\n\tif err == nil {\n\t\tt.Fatal(\"Expected error, was nil\")\n\t}\n\n\tif !strings.Contains(err.Error(), \"Unknown volume\") {\n\t\tt.Fatalf(\"Unexpected error: %v\\n\", err)\n\t}\n\n\t_, err = driver.List()\n\tif err == nil {\n\t\tt.Fatal(\"Expected error, was nil\")\n\t}\n\tif !strings.Contains(err.Error(), \"Cannot list volumes\") {\n\t\tt.Fatalf(\"Unexpected error: %v\\n\", err)\n\t}\n\n\t_, err = driver.Get(\"volume\")\n\tif err == nil {\n\t\tt.Fatal(\"Expected error, was nil\")\n\t}\n\tif !strings.Contains(err.Error(), \"Cannot get volume\") {\n\t\tt.Fatalf(\"Unexpected error: %v\\n\", err)\n\t}\n\n\t_, err = driver.Capabilities()\n\tif err == nil {\n\t\tt.Fatal(err)\n\t}",
      "/*\n   Copyright The containerd Authors.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n*/\n\npackage fs\n\nimport \"os\"\n\nfunc getLinkInfo(fi os.FileInfo) (uint64, bool) {\n\treturn 0, false\n}\n",
      "\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/codes\"\n\t\"go.opentelemetry.io/otel/sdk/instrumentation\"\n\ttracesdk \"go.opentelemetry.io/otel/sdk/trace\"\n\t\"go.opentelemetry.io/otel/trace\"\n\ttracepb \"go.opentelemetry.io/proto/otlp/trace/v1\"\n)\n\nconst (\n\tmaxEventsPerSpan = 128\n)\n\n// Spans transforms a slice of OpenTelemetry spans into a slice of OTLP\n// ResourceSpans.\nfunc Spans(sdl []tracesdk.ReadOnlySpan) []*tracepb.ResourceSpans {\n\tif len(sdl) == 0 {\n\t\treturn nil\n\t}\n\n\trsm := make(map[attribute.Distinct]*tracepb.ResourceSpans)\n\n\ttype ilsKey struct {\n\t\tr  attribute.Distinct\n\t\til instrumentation.Library\n\t}\n\tilsm := make(map[ilsKey]*tracepb.InstrumentationLibrarySpans)\n\n\tvar resources int\n\tfor _, sd := range sdl {\n\t\tif sd == nil {\n\t\t\tcontinue\n\t\t}\n\n\t\trKey := sd.Resource().Equivalent()\n\t\tiKey := ilsKey{\n\t\t\tr:  rKey,\n\t\t\til: sd.InstrumentationLibrary(),\n\t\t}\n\t\tils, iOk := ilsm[iKey]\n\t\tif !iOk {\n\t\t\t// Either the resource or instrumentation library were unknown.\n\t\t\tils = &tracepb.InstrumentationLibrarySpans{\n\t\t\t\tInstrumentationLibrary: InstrumentationLibrary(sd.InstrumentationLibrary()),\n\t\t\t\tSpans:                  []*tracepb.Span{},\n\t\t\t\tSchemaUrl:              sd.InstrumentationLibrary().SchemaURL,\n\t\t\t}\n\t\t}\n\t\tils.Spans = append(ils.Spans, span(sd))\n\t\tilsm[iKey] = ils\n\n\t\trs, rOk := rsm[rKey]\n\t\tif !rOk {\n\t\t\tresources++\n\t\t\t// The resource was unknown.\n\t\t\trs = &tracepb.ResourceSpans{\n\t\t\t\tResource:                    Resource(sd.Resource()),\n\t\t\t\tInstrumentationLibrarySpans: []*tracepb.InstrumentationLibrarySpans{ils},\n\t\t\t\tSchemaUrl:                   sd.Resource().SchemaURL(),\n\t\t\t}\n\t\t\trsm[rKey] = rs\n\t\t\tcontinue\n\t\t}\n\n\t\t// The resource has been seen before. Check if the instrumentation",
      "\t\t\tfor shift := uint(0); ; shift += 7 {\n\t\t\t\tif shift >= 64 {\n\t\t\t\t\treturn ErrIntOverflowOci\n\t\t\t\t}\n\t\t\t\tif iNdEx >= l {\n\t\t\t\t\treturn io.ErrUnexpectedEOF\n\t\t\t\t}\n\t\t\t\tb := dAtA[iNdEx]\n\t\t\t\tiNdEx++\n\t\t\t\tv |= int(b&0x7F) << shift\n\t\t\t\tif b < 0x80 {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\tm.ExternalUnixSockets = bool(v != 0)\n\t\tcase 4:\n\t\t\tif wireType != 0 {\n\t\t\t\treturn fmt.Errorf(\"proto: wrong wireType = %d for field Terminal\", wireType)\n\t\t\t}\n\t\t\tvar v int\n\t\t\tfor shift := uint(0); ; shift += 7 {\n\t\t\t\tif shift >= 64 {\n\t\t\t\t\treturn ErrIntOverflowOci\n\t\t\t\t}\n\t\t\t\tif iNdEx >= l {\n\t\t\t\t\treturn io.ErrUnexpectedEOF\n\t\t\t\t}\n\t\t\t\tb := dAtA[iNdEx]\n\t\t\t\tiNdEx++\n\t\t\t\tv |= int(b&0x7F) << shift\n\t\t\t\tif b < 0x80 {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\tm.Terminal = bool(v != 0)\n\t\tcase 5:\n\t\t\tif wireType != 0 {\n\t\t\t\treturn fmt.Errorf(\"proto: wrong wireType = %d for field FileLocks\", wireType)\n\t\t\t}\n\t\t\tvar v int\n\t\t\tfor shift := uint(0); ; shift += 7 {\n\t\t\t\tif shift >= 64 {\n\t\t\t\t\treturn ErrIntOverflowOci\n\t\t\t\t}\n\t\t\t\tif iNdEx >= l {\n\t\t\t\t\treturn io.ErrUnexpectedEOF\n\t\t\t\t}\n\t\t\t\tb := dAtA[iNdEx]\n\t\t\t\tiNdEx++\n\t\t\t\tv |= int(b&0x7F) << shift\n\t\t\t\tif b < 0x80 {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\tm.FileLocks = bool(v != 0)\n\t\tcase 6:\n\t\t\tif wireType != 2 {\n\t\t\t\treturn fmt.Errorf(\"proto: wrong wireType = %d for field EmptyNamespaces\", wireType)\n\t\t\t}\n\t\t\tvar stringLen uint64\n\t\t\tfor shift := uint(0); ; shift += 7 {\n\t\t\t\tif shift >= 64 {\n\t\t\t\t\treturn ErrIntOverflowOci\n\t\t\t\t}"
    ]
  },
  {
    "id": "apple/swift",
    "org": "apple",
    "avatarURL": "https://avatars.githubusercontent.com/u/10639145?v=4",
    "name": "apple/swift",
    "url": "https://github.com/apple/swift",
    "lang": "Swift",
    "star_num": 63966,
    "fork_num": 10275,
    "snippets": [
      "\tcase /*last-enum-element:def*/lastOccurrence(a: Int)\n}\n\n// RUN: %refactor -syntactic-rename -source-filename %s -pos=\"last-enum-element\" -is-function-like -old-name \"lastOccurrence(a:)\" -new-name \"lastOccurrence(b:)\"\n// REQUIRES asserts\n",
      "}\n\n// CHECK-LABEL: .Q@\n// CHECK-NEXT: Requirement signature: <Self where Self.[Q]A == Self.[Q]C.[P]A, Self.[Q]C : P>\nprotocol Q {\n  associatedtype A : P // expected-warning {{redundant conformance constraint 'Self.A' : 'P'}}\n  associatedtype C : P where A == C.A\n}\n",
      "func a(\"A, a)\nlet v: c: S) -> (t: c(n: end: A {\ntypealias d>(\")\nprotocol c : d {\ntypealias d.B<\n",
      "// Licensed under Apache License v2.0 with Runtime Library Exception\n//\n// See https://swift.org/LICENSE.txt for license information\n// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors\n\n// RUN: not %target-swift-frontend %s -typecheck\nclass T{class A{\nstruct S{\nenum b<T where k:A{\nstruct A{struct A{let:Boolean\nlet:{struct b{enum S{struct B{\nlet a=A{\n",
      "  private var stored: Wrapped\n\n  nonisolated init(wrappedValue: Wrapped) {\n    stored = wrappedValue\n  }\n\n  @MainActor var wrappedValue: Wrapped { // expected-note {{property declared here}}\n    get { }\n    set { }\n  }\n\n  @SomeGlobalActor var projectedValue: Wrapped {\n    get {  }\n    set { }\n  }\n}\n\n@MainActor\n@propertyWrapper\npublic struct WrapperOnMainActor<Wrapped> {\n  // Make sure inference of @MainActor on wrappedValue doesn't crash.\n\n  public var wrappedValue: Wrapped // expected-note {{property declared here}}\n\n  public var accessCount: Int\n\n  nonisolated public init(wrappedValue: Wrapped) {\n    self.wrappedValue = wrappedValue\n  }\n}\n\nstruct HasMainActorWrappedProp {\n  @WrapperOnMainActor var thing: Int = 1 // expected-note {{property declared here}}\n\n  var plainStorage: Int\n\n  var computedProp: Int { 0 }\n\n  nonisolated func testErrors() {\n    _ = thing // expected-error {{main actor-isolated property 'thing' can not be referenced from a non-isolated context}}\n    _ = _thing.wrappedValue // expected-error {{main actor-isolated property 'wrappedValue' can not be referenced from a non-isolated context}}\n\n    _ = _thing\n    _ = _thing.accessCount\n\n    _ = plainStorage\n\n    _ = computedProp\n  }\n}\n\nstruct HasWrapperOnActor {\n  @WrapperOnActor var synced: Int = 0\n  // expected-note@-1 2{{property declared here}}\n\n  // expected-note@+1 3{{to make instance method 'testErrors()'}}\n  func testErrors() {\n    _ = synced // expected-error{{main actor-isolated property 'synced' can not be referenced from a non-isolated context}}\n    _ = $synced // expected-error{{global actor 'SomeGlobalActor'-isolated property '$synced' can not be referenced from a non-isolated context}}\n    _ = _synced\n    _ = _synced.wrappedValue // expected-error{{main actor-isolated property 'wrappedValue' can not be referenced from a non-isolated context}}\n  }\n\n  @MainActor mutating func testOnMain() {",
      "// RUN: %swift -typecheck %s -verify -target x86_64-unknown-windows-msvc -disable-objc-interop -parse-stdlib\n// RUN: %swift-ide-test -test-input-complete -source-filename=%s -target x86_64-unknown-windows-msvc\n\n#if arch(x86_64) && os(Windows) && _runtime(_Native) && _endian(little) && _pointerBitWidth(_64)\nclass C {}\nvar x = C()\n#endif\nvar y = x\n",
      "// This source file is part of the Swift.org open source project\n// Copyright (c) 2014 - 2017 Apple Inc. and the Swift project authors\n// Licensed under Apache License v2.0 with Runtime Library Exception\n//\n// See https://swift.org/LICENSE.txt for license information\n// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors\n\n// RUN: not %target-swift-frontend %s -typecheck\nclass b\nstruct P{\nstruct A{let g=b{}}}\nclass d{enum A{\nclass C<T where g:a{\nclass C<f{var _=b.h.A\nclass b\n",
      "// REQUIRES: OS=linux-gnu || OS=freebsd\n// RUN: %empty-directory(%t)\n// RUN: %target-build-swift -Xfrontend -function-sections -emit-module -emit-library -static -parse-stdlib %S/Inputs/FunctionSections.swift\n// RUN: %target-build-swift -Xlinker --gc-sections -Xlinker -Map=%t/../../FunctionSections.map -I%t/../.. -L%t/../.. -lFunctionSections %S/Inputs/FunctionSectionsUse.swift\n// RUN: %FileCheck %s < %t/../../FunctionSections.map\n\n// CHECK: Discarded input sections\n// CHECK: .text.$s16FunctionSections5func2yyF\n// CHECK: Memory map\n// CHECK: .text.$s16FunctionSections5func1yyF\n",
      "}\n\n// CHECK-LABEL: .QuadTree@\n// CHECK-NEXT: Requirement signature: <Self where Self : Tree, Self.[Tree]Point == SIMD2<Self.[Tree]Distance>>\nprotocol QuadTree : Tree where Point == SIMD2<Distance> {}\n\n// CHECK-LABEL: .OctTree@\n// CHECK-NEXT: Requirement signature: <Self where Self : Tree, Self.[Tree]Point == SIMD3<Self.[Tree]Distance>>\nprotocol OctTree : Tree where Point == SIMD3<Distance> {}\n\nfunc sameType<T>(_: T.Type, _: T.Type) {}\n\nextension QuadTree {\n  func foo() {\n    sameType(Point.MaskStorage.self, SIMD2<Distance.SIMDMaskScalar>.self)\n    sameType(Point.MaskStorage.MaskStorage.self, SIMD2<Distance.SIMDMaskScalar>.self)\n  }\n}\n\nextension OctTree {\n  func foo() {\n    sameType(Point.MaskStorage.self, SIMD3<Distance.SIMDMaskScalar>.self)\n    sameType(Point.MaskStorage.MaskStorage.self, SIMD3<Distance.SIMDMaskScalar>.self)\n  }\n}\n",
      "}\nclass B {\n}\n}\nprint()\nprotocol b : P {\ntypealias e = a\nvar a: B) ->\n"
    ]
  },
  {
    "id": "openssl/openssl",
    "org": "openssl",
    "avatarURL": "https://avatars.githubusercontent.com/u/3279138?v=4",
    "name": "openssl/openssl",
    "url": "https://github.com/openssl/openssl",
    "lang": "C",
    "star_num": 22588,
    "fork_num": 9970,
    "snippets": [
      "    0x2e, 0xaf, 0x30, 0xd9, 0x2e, 0x22, 0xa3, 0x88,\n    0x6f, 0xf1, 0x09, 0x27, 0x9d, 0x98, 0x30, 0xda,\n    0xc7, 0x27, 0xaf, 0xb9, 0x4a, 0x83, 0xee, 0x6d,\n    0x83, 0x60, 0xcb, 0xdf, 0xa2, 0xcc, 0x06, 0x40\n};\n\nint main(int argc, char **argv)\n{\n    int ret = EXIT_FAILURE;\n    EVP_KDF *kdf = NULL;\n    EVP_KDF_CTX *kctx = NULL;\n    unsigned char out[64];\n    OSSL_PARAM params[6], *p = params;\n    OSSL_LIB_CTX *library_context = NULL;\n\n    library_context = OSSL_LIB_CTX_new();\n    if (library_context == NULL) {\n        fprintf(stderr, \"OSSL_LIB_CTX_new() returned NULL\\n\");\n        goto end;\n    }\n\n    /* Fetch the key derivation function implementation */\n    kdf = EVP_KDF_fetch(library_context, \"SCRYPT\", NULL);\n    if (kdf == NULL) {\n        fprintf(stderr, \"EVP_KDF_fetch() returned NULL\\n\");\n        goto end;\n    }\n\n    /* Create a context for the key derivation operation */\n    kctx = EVP_KDF_CTX_new(kdf);\n    if (kctx == NULL) {\n        fprintf(stderr, \"EVP_KDF_CTX_new() returned NULL\\n\");\n        goto end;\n    }\n\n    /* Set password */\n    *p++ = OSSL_PARAM_construct_octet_string(OSSL_KDF_PARAM_PASSWORD, password,\n                                             sizeof(password));\n    /* Set salt */\n    *p++ = OSSL_PARAM_construct_octet_string(OSSL_KDF_PARAM_SALT, scrypt_salt,\n                                             sizeof(scrypt_salt));\n    /* Set N (default 1048576) */\n    *p++ = OSSL_PARAM_construct_uint(OSSL_KDF_PARAM_SCRYPT_N, &scrypt_n);\n    /* Set R (default 8) */\n    *p++ = OSSL_PARAM_construct_uint(OSSL_KDF_PARAM_SCRYPT_R, &scrypt_r);\n    /* Set P (default 1) */\n    *p++ = OSSL_PARAM_construct_uint(OSSL_KDF_PARAM_SCRYPT_P, &scrypt_p);\n    *p = OSSL_PARAM_construct_end();\n\n    /* Derive the key */\n    if (EVP_KDF_derive(kctx, out, sizeof(out), params) != 1) {\n        fprintf(stderr, \"EVP_KDF_derive() failed\\n\");\n        goto end;\n    }\n\n    if (CRYPTO_memcmp(expected_output, out, sizeof(expected_output)) != 0) {\n        fprintf(stderr, \"Generated key does not match expected value\\n\");\n        goto end;\n    }\n\n    ret = EXIT_SUCCESS;\nend:\n    EVP_KDF_CTX_free(kctx);\n    EVP_KDF_free(kdf);",
      "\nint ossl_cms_check_signing_certs(const CMS_SignerInfo *si,\n                                 const STACK_OF(X509) *chain)\n{\n    ESS_SIGNING_CERT *ss = NULL;\n    ESS_SIGNING_CERT_V2 *ssv2 = NULL;\n    int ret = ossl_cms_signerinfo_get_signing_cert(si, &ss) >= 0\n        && ossl_cms_signerinfo_get_signing_cert_v2(si, &ssv2) >= 0\n        && OSSL_ESS_check_signing_certs(ss, ssv2, chain, 1) > 0;\n\n    ESS_SIGNING_CERT_free(ss);\n    ESS_SIGNING_CERT_V2_free(ssv2);\n    return ret;\n}\n\nCMS_ReceiptRequest *CMS_ReceiptRequest_create0_ex(\n    unsigned char *id, int idlen, int allorfirst,\n    STACK_OF(GENERAL_NAMES) *receiptList, STACK_OF(GENERAL_NAMES) *receiptsTo,\n    OSSL_LIB_CTX *libctx)\n{\n    CMS_ReceiptRequest *rr;\n\n    rr = CMS_ReceiptRequest_new();\n    if (rr == NULL) {\n        ERR_raise(ERR_LIB_CMS, ERR_R_CMS_LIB);\n        goto err;\n    }\n    if (id)\n        ASN1_STRING_set0(rr->signedContentIdentifier, id, idlen);\n    else {\n        if (!ASN1_STRING_set(rr->signedContentIdentifier, NULL, 32)) {\n            ERR_raise(ERR_LIB_CMS, ERR_R_ASN1_LIB);\n            goto err;\n        }\n        if (RAND_bytes_ex(libctx, rr->signedContentIdentifier->data, 32,\n                          0) <= 0)\n            goto err;\n    }\n\n    sk_GENERAL_NAMES_pop_free(rr->receiptsTo, GENERAL_NAMES_free);\n    rr->receiptsTo = receiptsTo;\n\n    if (receiptList != NULL) {\n        rr->receiptsFrom->type = 1;\n        rr->receiptsFrom->d.receiptList = receiptList;\n    } else {\n        rr->receiptsFrom->type = 0;\n        rr->receiptsFrom->d.allOrFirstTier = allorfirst;\n    }\n\n    return rr;\n\n err:\n    CMS_ReceiptRequest_free(rr);\n    return NULL;\n\n}\n\nCMS_ReceiptRequest *CMS_ReceiptRequest_create0(\n    unsigned char *id, int idlen, int allorfirst,\n    STACK_OF(GENERAL_NAMES) *receiptList, STACK_OF(GENERAL_NAMES) *receiptsTo)\n{\n    return CMS_ReceiptRequest_create0_ex(id, idlen, allorfirst, receiptList,\n                                         receiptsTo, NULL);",
      "    OPENSSL_clear_free(pdhctx->kdf_ukm, pdhctx->kdf_ukmlen);\n\n    OPENSSL_free(pdhctx);\n}\n\nstatic void *dh_dupctx(void *vpdhctx)\n{\n    PROV_DH_CTX *srcctx = (PROV_DH_CTX *)vpdhctx;\n    PROV_DH_CTX *dstctx;\n\n    if (!ossl_prov_is_running())\n        return NULL;\n\n    dstctx = OPENSSL_zalloc(sizeof(*srcctx));\n    if (dstctx == NULL)\n        return NULL;\n\n    *dstctx = *srcctx;\n    dstctx->dh = NULL;\n    dstctx->dhpeer = NULL;\n    dstctx->kdf_md = NULL;\n    dstctx->kdf_ukm = NULL;\n    dstctx->kdf_cekalg = NULL;\n\n    if (srcctx->dh != NULL && !DH_up_ref(srcctx->dh))\n        goto err;\n    else\n        dstctx->dh = srcctx->dh;\n\n    if (srcctx->dhpeer != NULL && !DH_up_ref(srcctx->dhpeer))\n        goto err;\n    else\n        dstctx->dhpeer = srcctx->dhpeer;\n\n    if (srcctx->kdf_md != NULL && !EVP_MD_up_ref(srcctx->kdf_md))\n        goto err;\n    else\n        dstctx->kdf_md = srcctx->kdf_md;\n\n    /* Duplicate UKM data if present */\n    if (srcctx->kdf_ukm != NULL && srcctx->kdf_ukmlen > 0) {\n        dstctx->kdf_ukm = OPENSSL_memdup(srcctx->kdf_ukm,\n                                         srcctx->kdf_ukmlen);\n        if (dstctx->kdf_ukm == NULL)\n            goto err;\n    }\n\n    if (srcctx->kdf_cekalg != NULL) {\n        dstctx->kdf_cekalg = OPENSSL_strdup(srcctx->kdf_cekalg);\n        if (dstctx->kdf_cekalg == NULL)\n            goto err;\n    }\n\n    return dstctx;\nerr:\n    dh_freectx(dstctx);\n    return NULL;\n}\n\nstatic int dh_set_ctx_params(void *vpdhctx, const OSSL_PARAM params[])\n{\n    PROV_DH_CTX *pdhctx = (PROV_DH_CTX *)vpdhctx;\n    const OSSL_PARAM *p;\n    unsigned int pad;",
      "    }\n#ifndef FIPS_MODULE\n    /*\n     * This trick doesn't work in the FIPS provider because libcrypto manages\n     * the error stack. Instead we opt not to put an error on the stack at all\n     * in case of padding failure in the FIPS provider.\n     */\n    ERR_raise(ERR_LIB_RSA, RSA_R_PADDING_CHECK_FAILED);\n    err_clear_last_constant_time(1 & ~constant_time_msb(r));\n#endif\n\n err:\n    BN_CTX_end(ctx);\n    BN_CTX_free(ctx);\n    OPENSSL_clear_free(buf, num);\n    return r;\n}\n\n/* signature verification */\nstatic int rsa_ossl_public_decrypt(int flen, const unsigned char *from,\n                                  unsigned char *to, RSA *rsa, int padding)\n{\n    BIGNUM *f, *ret;\n    int i, num = 0, r = -1;\n    unsigned char *buf = NULL;\n    BN_CTX *ctx = NULL;\n\n    if (BN_num_bits(rsa->n) > OPENSSL_RSA_MAX_MODULUS_BITS) {\n        ERR_raise(ERR_LIB_RSA, RSA_R_MODULUS_TOO_LARGE);\n        return -1;\n    }\n\n    if (BN_ucmp(rsa->n, rsa->e) <= 0) {\n        ERR_raise(ERR_LIB_RSA, RSA_R_BAD_E_VALUE);\n        return -1;\n    }\n\n    /* for large moduli, enforce exponent limit */\n    if (BN_num_bits(rsa->n) > OPENSSL_RSA_SMALL_MODULUS_BITS) {\n        if (BN_num_bits(rsa->e) > OPENSSL_RSA_MAX_PUBEXP_BITS) {\n            ERR_raise(ERR_LIB_RSA, RSA_R_BAD_E_VALUE);\n            return -1;\n        }\n    }\n\n    if ((ctx = BN_CTX_new_ex(rsa->libctx)) == NULL)\n        goto err;\n    BN_CTX_start(ctx);\n    f = BN_CTX_get(ctx);\n    ret = BN_CTX_get(ctx);\n    if (ret == NULL) {\n        ERR_raise(ERR_LIB_RSA, ERR_R_BN_LIB);\n        goto err;\n    }\n    num = BN_num_bytes(rsa->n);\n    buf = OPENSSL_malloc(num);\n    if (buf == NULL)\n        goto err;\n\n    /*\n     * This check was for equality but PGP does evil things and chops off the\n     * top '0' bytes\n     */\n    if (flen > num) {",
      "        ADB_ENTRY(NID_pkcs7_digest, ASN1_NDEF_EXP_OPT(PKCS7, d.digest, PKCS7_DIGEST, 0)),\n        ADB_ENTRY(NID_pkcs7_encrypted, ASN1_NDEF_EXP_OPT(PKCS7, d.encrypted, PKCS7_ENCRYPT, 0))\n} ASN1_ADB_END(PKCS7, 0, type, 0, &p7default_tt, NULL);\n\n/* PKCS#7 streaming support */\nstatic int pk7_cb(int operation, ASN1_VALUE **pval, const ASN1_ITEM *it,\n                  void *exarg)\n{\n    ASN1_STREAM_ARG *sarg = exarg;\n    PKCS7 **pp7 = (PKCS7 **)pval;\n\n    switch (operation) {\n\n    case ASN1_OP_STREAM_PRE:\n        if (PKCS7_stream(&sarg->boundary, *pp7) <= 0)\n            return 0;\n        /* fall through */\n    case ASN1_OP_DETACHED_PRE:\n        sarg->ndef_bio = PKCS7_dataInit(*pp7, sarg->out);\n        if (!sarg->ndef_bio)\n            return 0;\n        break;\n\n    case ASN1_OP_STREAM_POST:\n    case ASN1_OP_DETACHED_POST:\n        if (PKCS7_dataFinal(*pp7, sarg->ndef_bio) <= 0)\n            return 0;\n        break;\n\n    }\n    return 1;\n}\n\nASN1_NDEF_SEQUENCE_cb(PKCS7, pk7_cb) = {\n        ASN1_SIMPLE(PKCS7, type, ASN1_OBJECT),\n        ASN1_ADB_OBJECT(PKCS7)\n}ASN1_NDEF_SEQUENCE_END_cb(PKCS7, PKCS7)\n\nPKCS7 *d2i_PKCS7(PKCS7 **a, const unsigned char **in, long len)\n{\n    PKCS7 *ret;\n    OSSL_LIB_CTX *libctx = NULL;\n    const char *propq = NULL;\n\n    if (a != NULL && *a != NULL) {\n        libctx = (*a)->ctx.libctx;\n        propq = (*a)->ctx.propq;\n    }\n\n    ret = (PKCS7 *)ASN1_item_d2i_ex((ASN1_VALUE **)a, in, len, (PKCS7_it()),\n                                    libctx, propq);\n    if (ret != NULL)\n        ossl_pkcs7_resolve_libctx(ret);\n    return ret;\n}\n\nint i2d_PKCS7(const PKCS7 *a, unsigned char **out)\n{\n    return ASN1_item_i2d((const ASN1_VALUE *)a, out, (PKCS7_it()));\\\n}\n\nPKCS7 *PKCS7_new(void)\n{\n    return (PKCS7 *)ASN1_item_new(ASN1_ITEM_rptr(PKCS7));",
      "    if ((*sigctx & FAKE_DGSTSGN_VERIFY) != 0 && (siglen != NULL))\n        return 0;\n\n    /* this is sign op */\n    if (siglen) {\n        *siglen = 256;\n        /* record that the real sign operation was called */\n        if (sig != NULL) {\n            if (!TEST_int_ge(sigsize, *siglen))\n                return 0;\n            /* produce a fake signature */\n            memset(sig, 'a', *siglen);\n        }\n    }\n\n    /* simulate inability to duplicate context and finalise it */\n    if ((*sigctx & FAKE_DGSTSGN_NO_DUP) != 0) {\n        *sigctx |= FAKE_DGSTSGN_FINALISED;\n    }\n    return 1;\n}\n\nstatic int fake_rsa_dgstvfy_final(void *ctx, unsigned char *sig,\n                                  size_t siglen)\n{\n    return fake_rsa_dgstsgnvfy_final(ctx, sig, NULL, siglen);\n}\n\nstatic int fake_rsa_dgstsgn(void *ctx, unsigned char *sig, size_t *siglen,\n                            size_t sigsize, const unsigned char *tbs,\n                            size_t tbslen)\n{\n    if (!fake_rsa_dgstsgnvfy_update(ctx, tbs, tbslen))\n        return 0;\n\n    return fake_rsa_dgstsgnvfy_final(ctx, sig, siglen, sigsize);\n}\n\nstatic int fake_rsa_dgstvfy(void *ctx, unsigned char *sig, size_t siglen,\n                            const unsigned char *tbv, size_t tbvlen)\n{\n    if (!fake_rsa_dgstsgnvfy_update(ctx, tbv, tbvlen))\n        return 0;\n\n    return fake_rsa_dgstvfy_final(ctx, sig, siglen);\n}\n\nstatic const OSSL_DISPATCH fake_rsa_sig_funcs[] = {\n    { OSSL_FUNC_SIGNATURE_NEWCTX, (void (*)(void))fake_rsa_sig_newctx },\n    { OSSL_FUNC_SIGNATURE_FREECTX, (void (*)(void))fake_rsa_sig_freectx },\n    { OSSL_FUNC_SIGNATURE_SIGN_INIT, (void (*)(void))fake_rsa_sig_sign_init },\n    { OSSL_FUNC_SIGNATURE_SIGN, (void (*)(void))fake_rsa_sig_sign },\n    { OSSL_FUNC_SIGNATURE_DUPCTX, (void (*)(void))fake_rsa_sig_dupctx },\n    { OSSL_FUNC_SIGNATURE_DIGEST_SIGN_INIT,\n        (void (*)(void))fake_rsa_dgstsgn_init },\n    { OSSL_FUNC_SIGNATURE_DIGEST_SIGN_UPDATE,\n        (void (*)(void))fake_rsa_dgstsgnvfy_update },\n    { OSSL_FUNC_SIGNATURE_DIGEST_SIGN_FINAL,\n        (void (*)(void))fake_rsa_dgstsgnvfy_final },\n    { OSSL_FUNC_SIGNATURE_DIGEST_SIGN,\n        (void (*)(void))fake_rsa_dgstsgn },\n    { OSSL_FUNC_SIGNATURE_DIGEST_VERIFY_INIT,\n        (void (*)(void))fake_rsa_dgstvfy_init },\n    { OSSL_FUNC_SIGNATURE_DIGEST_VERIFY_UPDATE,",
      "     * It would make sense to use ossl_isxdigit and ossl_isdigit here,\n     * but ossl_ctype_check is a local symbol in libcrypto.so.\n     */\n    if (is_hex) {\n        for (i = 0; ('0' <= s[i] && s[i] <= '9')\n                    || ('A' <= s[i] && s[i] <= 'F')\n                    || ('a' <= s[i] && s[i] <= 'f'); i++);\n    } else {\n        for (i = 0;  '0' <= s[i] && s[i] <= '9'; i++);\n    }\n    return s[i] == 0;\n}\n\nconst OPTIONS prime_options[] = {\n    {OPT_HELP_STR, 1, '-', \"Usage: %s [options] [number...]\\n\"},\n\n    OPT_SECTION(\"General\"),\n    {\"help\", OPT_HELP, '-', \"Display this summary\"},\n    {\"bits\", OPT_BITS, 'p', \"Size of number in bits\"},\n    {\"checks\", OPT_CHECKS, 'p', \"Number of checks\"},\n\n    OPT_SECTION(\"Output\"),\n    {\"hex\", OPT_HEX, '-', \"Hex output\"},\n    {\"generate\", OPT_GENERATE, '-', \"Generate a prime\"},\n    {\"safe\", OPT_SAFE, '-',\n     \"When used with -generate, generate a safe prime\"},\n\n    OPT_PROV_OPTIONS,\n\n    OPT_PARAMETERS(),\n    {\"number\", 0, 0, \"Number(s) to check for primality if not generating\"},\n    {NULL}\n};\n\nint prime_main(int argc, char **argv)\n{\n    BIGNUM *bn = NULL;\n    int hex = 0, generate = 0, bits = 0, safe = 0, ret = 1;\n    char *prog;\n    OPTION_CHOICE o;\n\n    prog = opt_init(argc, argv, prime_options);\n    while ((o = opt_next()) != OPT_EOF) {\n        switch (o) {\n        case OPT_EOF:\n        case OPT_ERR:\nopthelp:\n            BIO_printf(bio_err, \"%s: Use -help for summary.\\n\", prog);\n            goto end;\n        case OPT_HELP:\n            opt_help(prime_options);\n            ret = 0;\n            goto end;\n        case OPT_HEX:\n            hex = 1;\n            break;\n        case OPT_GENERATE:\n            generate = 1;\n            break;\n        case OPT_BITS:\n            bits = atoi(opt_arg());\n            break;\n        case OPT_SAFE:\n            safe = 1;",
      "}\n\nint FuzzerTestOneInput(const uint8_t *buf, size_t len)\n{\n    (void)ASN1_parse_dump(bio_out, buf, len, 0, 0);\n    ERR_clear_error();\n    return 0;\n}\n\nvoid FuzzerCleanup(void)\n{\n    BIO_free(bio_out);\n}\n",
      "    /* table[15] */\n    rsaz_1024_gather5_avx2(result, table_s, 14);\n    rsaz_1024_mul_avx2(result, result, a_inv, m, k0);\n    rsaz_1024_scatter5_avx2(table_s, result, 15);\n    /* table[30] */\n    rsaz_1024_sqr_avx2(result, result, m, k0, 1);\n    rsaz_1024_scatter5_avx2(table_s, result, 30);\n    /* table[31] */\n    rsaz_1024_mul_avx2(result, result, a_inv, m, k0);\n    rsaz_1024_scatter5_avx2(table_s, result, 31);\n#endif\n\n    /* load first window */\n    p_str = (unsigned char *)exponent;\n    wvalue = p_str[127] >> 3;\n    rsaz_1024_gather5_avx2(result, table_s, wvalue);\n\n    index = 1014;\n\n    while (index > -1) {        /* loop for the remaining 127 windows */\n\n        rsaz_1024_sqr_avx2(result, result, m, k0, 5);\n\n        wvalue = (p_str[(index / 8) + 1] << 8) | p_str[index / 8];\n        wvalue = (wvalue >> (index % 8)) & 31;\n        index -= 5;\n\n        rsaz_1024_gather5_avx2(a_inv, table_s, wvalue); /* borrow a_inv */\n        rsaz_1024_mul_avx2(result, result, a_inv, m, k0);\n    }\n\n    /* square four times */\n    rsaz_1024_sqr_avx2(result, result, m, k0, 4);\n\n    wvalue = p_str[0] & 15;\n\n    rsaz_1024_gather5_avx2(a_inv, table_s, wvalue); /* borrow a_inv */\n    rsaz_1024_mul_avx2(result, result, a_inv, m, k0);\n\n    /* from Montgomery */\n    rsaz_1024_mul_avx2(result, result, one, m, k0);\n\n    rsaz_1024_red2norm_avx2(result_norm, result);\n\n    bn_reduce_once_in_place(result_norm, /*carry=*/0, m_norm, tmp, 16);\n\n    OPENSSL_cleanse(storage, sizeof(storage));\n    OPENSSL_cleanse(tmp, sizeof(tmp));\n}\n\n/*\n * See crypto/bn/rsaz-x86_64.pl for further details.\n */\nvoid rsaz_512_mul(void *ret, const void *a, const void *b, const void *n,\n                  BN_ULONG k);\nvoid rsaz_512_mul_scatter4(void *ret, const void *a, const void *n,\n                           BN_ULONG k, const void *tbl, unsigned int power);\nvoid rsaz_512_mul_gather4(void *ret, const void *a, const void *tbl,\n                          const void *n, BN_ULONG k, unsigned int power);\nvoid rsaz_512_mul_by_one(void *ret, const void *a, const void *n, BN_ULONG k);\nvoid rsaz_512_sqr(void *ret, const void *a, const void *n, BN_ULONG k,\n                  int cnt);\nvoid rsaz_512_scatter4(void *tbl, const BN_ULONG *val, int power);\nvoid rsaz_512_gather4(BN_ULONG *val, const void *tbl, int power);",
      "        case OPT_EOF:\n        case OPT_ERR:\n opthelp:\n            BIO_printf(bio_err, \"%s: Use -help for summary.\\n\", prog);\n            goto end;\n        case OPT_HELP:\n            opt_help(sess_id_options);\n            ret = 0;\n            goto end;\n        case OPT_INFORM:\n            if (!opt_format(opt_arg(), OPT_FMT_PEMDER, &informat))\n                goto opthelp;\n            break;\n        case OPT_OUTFORM:\n            if (!opt_format(opt_arg(), OPT_FMT_PEMDER | OPT_FMT_NSS,\n                            &outformat))\n                goto opthelp;\n            break;\n        case OPT_IN:\n            infile = opt_arg();\n            break;\n        case OPT_OUT:\n            outfile = opt_arg();\n            break;\n        case OPT_TEXT:\n            text = ++num;\n            break;\n        case OPT_CERT:\n            cert = ++num;\n            break;\n        case OPT_NOOUT:\n            noout = ++num;\n            break;\n        case OPT_CONTEXT:\n            context = opt_arg();\n            break;\n        }\n    }\n\n    /* No extra arguments. */\n    if (!opt_check_rest_arg(NULL))\n        goto opthelp;\n\n    x = load_sess_id(infile, informat);\n    if (x == NULL) {\n        goto end;\n    }\n    peer = SSL_SESSION_get0_peer(x);\n\n    if (context != NULL) {\n        size_t ctx_len = strlen(context);\n        if (ctx_len > SSL_MAX_SID_CTX_LENGTH) {\n            BIO_printf(bio_err, \"Context too long\\n\");\n            goto end;\n        }\n        if (!SSL_SESSION_set1_id_context(x, (unsigned char *)context,\n                                         ctx_len)) {\n            BIO_printf(bio_err, \"Error setting id context\\n\");\n            goto end;\n        }\n    }\n\n    if (!noout || text) {\n        out = bio_open_default(outfile, 'w', outformat);"
    ]
  },
  {
    "id": "apache/spark",
    "org": "apache",
    "avatarURL": "https://avatars.githubusercontent.com/u/47359?v=4",
    "name": "apache/spark",
    "url": "https://github.com/apache/spark",
    "lang": "Scala",
    "star_num": 36634,
    "fork_num": 27591,
    "snippets": [
      "        val keyPrefix = cs.keyPrefix()\n        require(keyPrefix != null, \"The data source config key prefix can't be null.\")\n\n        val pattern = Pattern.compile(s\"^spark\\\\.datasource\\\\.$keyPrefix\\\\.(.+)\")\n\n        conf.getAllConfs.flatMap { case (key, value) =>\n          val m = pattern.matcher(key)\n          if (m.matches() && m.groupCount() > 0) {\n            Seq((m.group(1), value))\n          } else {\n            Seq.empty\n          }\n        }\n\n      case _ => Map.empty\n    }\n  }\n\n  def getTableFromProvider(\n      provider: TableProvider,\n      options: CaseInsensitiveStringMap,\n      userSpecifiedSchema: Option[StructType]): Table = {\n    userSpecifiedSchema match {\n      case Some(schema) =>\n        if (provider.supportsExternalMetadata()) {\n          provider.getTable(\n            schema,\n            provider.inferPartitioning(options),\n            options.asCaseSensitiveMap())\n        } else {\n          throw QueryExecutionErrors.userSpecifiedSchemaUnsupportedByDataSourceError(provider)\n        }\n\n      case None =>\n        provider.getTable(\n          provider.inferSchema(options),\n          provider.inferPartitioning(options),\n          options.asCaseSensitiveMap())\n    }\n  }\n\n  def loadV2Source(\n      sparkSession: SparkSession,\n      provider: TableProvider,\n      userSpecifiedSchema: Option[StructType],\n      extraOptions: CaseInsensitiveMap[String],\n      source: String,\n      paths: String*): Option[DataFrame] = {\n    val catalogManager = sparkSession.sessionState.catalogManager\n    val conf = sparkSession.sessionState.conf\n    val sessionOptions = DataSourceV2Utils.extractSessionConfigs(provider, conf)\n\n    val optionsWithPath = getOptionsWithPaths(extraOptions, paths: _*)\n\n    val finalOptions = sessionOptions.filterKeys(!optionsWithPath.contains(_)).toMap ++\n      optionsWithPath.originalMap\n    val dsOptions = new CaseInsensitiveStringMap(finalOptions.asJava)\n    val (table, catalog, ident) = provider match {\n      case _: SupportsCatalogOptions if userSpecifiedSchema.nonEmpty =>\n        throw new IllegalArgumentException(\n          s\"$source does not support user specified schema. Please don't specify the schema.\")\n      case hasCatalog: SupportsCatalogOptions =>\n        val ident = hasCatalog.extractIdentifier(dsOptions)\n        val catalog = CatalogV2Util.getTableProviderCatalog(",
      "      maxOnHeapMemSize: Long,\n      maxOffHeapMemSize: Long,\n      storageEndpoint: RpcEndpointRef,\n      isReRegister: Boolean = false): BlockManagerId = {\n    logInfo(s\"Registering BlockManager $id\")\n    val updatedId = driverEndpoint.askSync[BlockManagerId](\n      RegisterBlockManager(\n        id,\n        localDirs,\n        maxOnHeapMemSize,\n        maxOffHeapMemSize,\n        storageEndpoint,\n        isReRegister\n      )\n    )\n    if (updatedId.executorId == BlockManagerId.INVALID_EXECUTOR_ID) {\n      assert(isReRegister, \"Got invalid executor id from non re-register case\")\n      logInfo(s\"Re-register BlockManager $id failed\")\n    } else {\n      logInfo(s\"Registered BlockManager $updatedId\")\n    }\n    updatedId\n  }\n\n  def updateBlockInfo(\n      blockManagerId: BlockManagerId,\n      blockId: BlockId,\n      storageLevel: StorageLevel,\n      memSize: Long,\n      diskSize: Long): Boolean = {\n    val res = driverEndpoint.askSync[Boolean](\n      UpdateBlockInfo(blockManagerId, blockId, storageLevel, memSize, diskSize))\n    logDebug(s\"Updated info of block $blockId\")\n    res\n  }\n\n  def updateRDDBlockTaskInfo(blockId: RDDBlockId, taskId: Long): Unit = {\n    driverEndpoint.askSync[Unit](UpdateRDDBlockTaskInfo(blockId, taskId))\n  }\n\n  def updateRDDBlockVisibility(taskId: Long, visible: Boolean): Unit = {\n    driverEndpoint.ask[Unit](UpdateRDDBlockVisibility(taskId, visible))\n  }\n\n  /** Check whether a block is visible */\n  def isRDDBlockVisible(blockId: RDDBlockId): Boolean = {\n    driverEndpoint.askSync[Boolean](GetRDDBlockVisibility(blockId))\n  }\n\n  /** Get locations of the blockId from the driver */\n  def getLocations(blockId: BlockId): Seq[BlockManagerId] = {\n    driverEndpoint.askSync[Seq[BlockManagerId]](GetLocations(blockId))\n  }\n\n  /** Get locations as well as status of the blockId from the driver */\n  def getLocationsAndStatus(\n      blockId: BlockId,\n      requesterHost: String): Option[BlockLocationsAndStatus] = {\n    driverEndpoint.askSync[Option[BlockLocationsAndStatus]](\n      GetLocationsAndStatus(blockId, requesterHost))\n  }\n\n  /** Get locations of multiple blockIds from the driver */\n  def getLocations(blockIds: Array[BlockId]): IndexedSeq[Seq[BlockManagerId]] = {",
      "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.spark.sql.execution.datasources.v2.text\n\nimport org.apache.hadoop.mapreduce.{Job, TaskAttemptContext}\n\nimport org.apache.spark.sql.catalyst.util.CompressionCodecs\nimport org.apache.spark.sql.connector.write.LogicalWriteInfo\nimport org.apache.spark.sql.errors.QueryCompilationErrors\nimport org.apache.spark.sql.execution.datasources.{CodecStreams, OutputWriter, OutputWriterFactory}\nimport org.apache.spark.sql.execution.datasources.text.{TextOptions, TextOutputWriter}\nimport org.apache.spark.sql.execution.datasources.v2.FileWrite\nimport org.apache.spark.sql.internal.SQLConf\nimport org.apache.spark.sql.types._\n\ncase class TextWrite(\n    paths: Seq[String],\n    formatName: String,\n    supportsDataType: DataType => Boolean,\n    info: LogicalWriteInfo) extends FileWrite {\n  private def verifySchema(schema: StructType): Unit = {\n    if (schema.size != 1) {\n      throw QueryCompilationErrors.textDataSourceWithMultiColumnsError(schema)\n    }\n  }\n\n  override def prepareWrite(\n      sqlConf: SQLConf,\n      job: Job,\n      options: Map[String, String],\n      dataSchema: StructType): OutputWriterFactory = {\n    verifySchema(dataSchema)\n\n    val textOptions = new TextOptions(options)\n    val conf = job.getConfiguration\n\n    textOptions.compressionCodec.foreach { codec =>\n      CompressionCodecs.setCodecConfiguration(conf, codec)\n    }\n\n    new OutputWriterFactory {\n      override def newInstance(\n          path: String,\n          dataSchema: StructType,\n          context: TaskAttemptContext): OutputWriter = {\n        new TextOutputWriter(path, dataSchema, textOptions.lineSeparatorInWrite, context)\n      }\n\n      override def getFileExtension(context: TaskAttemptContext): String = {\n        \".txt\" + CodecStreams.getCompressionExtension(context)",
      "    assert(columnVector.isNullAt(2))\n\n    val array3 = columnVector.getArray(3)\n    assert(array3.numElements() === 0)\n\n    columnVector.close()\n    allocator.close()\n  }\n\n  test(\"non nullable struct\") {\n    val allocator = ArrowUtils.rootAllocator.newChildAllocator(\"struct\", 0, Long.MaxValue)\n    val schema = new StructType().add(\"int\", IntegerType).add(\"long\", LongType)\n    val vector = ArrowUtils.toArrowField(\"struct\", schema, nullable = false, null)\n      .createVector(allocator).asInstanceOf[StructVector]\n\n    vector.allocateNew()\n    val intVector = vector.getChildByOrdinal(0).asInstanceOf[IntVector]\n    val longVector = vector.getChildByOrdinal(1).asInstanceOf[BigIntVector]\n\n    vector.setIndexDefined(0)\n    intVector.setSafe(0, 1)\n    longVector.setSafe(0, 1L)\n\n    vector.setIndexDefined(1)\n    intVector.setSafe(1, 2)\n    longVector.setNull(1)\n\n    vector.setValueCount(2)\n\n    val columnVector = new ArrowColumnVector(vector)\n    assert(columnVector.dataType === schema)\n    assert(!columnVector.hasNull)\n    assert(columnVector.numNulls === 0)\n\n    val row0 = columnVector.getStruct(0)\n    assert(row0.getInt(0) === 1)\n    assert(row0.getLong(1) === 1L)\n\n    val row1 = columnVector.getStruct(1)\n    assert(row1.getInt(0) === 2)\n    assert(row1.isNullAt(1))\n\n    columnVector.close()\n    allocator.close()\n  }\n\n  test(\"struct\") {\n    val allocator = ArrowUtils.rootAllocator.newChildAllocator(\"struct\", 0, Long.MaxValue)\n    val schema = new StructType().add(\"int\", IntegerType).add(\"long\", LongType)\n    val vector = ArrowUtils.toArrowField(\"struct\", schema, nullable = true, null)\n      .createVector(allocator).asInstanceOf[StructVector]\n    vector.allocateNew()\n    val intVector = vector.getChildByOrdinal(0).asInstanceOf[IntVector]\n    val longVector = vector.getChildByOrdinal(1).asInstanceOf[BigIntVector]\n\n    // (1, 1L)\n    vector.setIndexDefined(0)\n    intVector.setSafe(0, 1)\n    longVector.setSafe(0, 1L)\n\n    // (2, null)\n    vector.setIndexDefined(1)\n    intVector.setSafe(1, 2)\n    longVector.setNull(1)",
      "",
      " * Accelerated failure time model (Wikipedia)</a>)\n * based on the Weibull distribution of the survival time.\n *\n * Since 3.1.0, it supports stacking instances into blocks and using GEMV for\n * better performance.\n * The block size will be 1.0 MB, if param maxBlockSizeInMB is set 0.0 by default.\n */\n@Since(\"1.6.0\")\nclass AFTSurvivalRegression @Since(\"1.6.0\") (@Since(\"1.6.0\") override val uid: String)\n  extends Regressor[Vector, AFTSurvivalRegression, AFTSurvivalRegressionModel]\n  with AFTSurvivalRegressionParams with DefaultParamsWritable with Logging {\n\n  @Since(\"1.6.0\")\n  def this() = this(Identifiable.randomUID(\"aftSurvReg\"))\n\n  /** @group setParam */\n  @Since(\"1.6.0\")\n  def setCensorCol(value: String): this.type = set(censorCol, value)\n\n  /** @group setParam */\n  @Since(\"1.6.0\")\n  def setQuantileProbabilities(value: Array[Double]): this.type = set(quantileProbabilities, value)\n\n  /** @group setParam */\n  @Since(\"1.6.0\")\n  def setQuantilesCol(value: String): this.type = set(quantilesCol, value)\n\n  /**\n   * Set if we should fit the intercept\n   * Default is true.\n   * @group setParam\n   */\n  @Since(\"1.6.0\")\n  def setFitIntercept(value: Boolean): this.type = set(fitIntercept, value)\n\n  /**\n   * Set the maximum number of iterations.\n   * Default is 100.\n   * @group setParam\n   */\n  @Since(\"1.6.0\")\n  def setMaxIter(value: Int): this.type = set(maxIter, value)\n\n  /**\n   * Set the convergence tolerance of iterations.\n   * Smaller value will lead to higher accuracy with the cost of more iterations.\n   * Default is 1E-6.\n   * @group setParam\n   */\n  @Since(\"1.6.0\")\n  def setTol(value: Double): this.type = set(tol, value)\n\n  /**\n   * Suggested depth for treeAggregate (greater than or equal to 2).\n   * If the dimensions of features or the number of partitions are large,\n   * this param could be adjusted to a larger size.\n   * Default is 2.\n   * @group expertSetParam\n   */\n  @Since(\"2.1.0\")\n  def setAggregationDepth(value: Int): this.type = set(aggregationDepth, value)\n\n  /**\n   * Sets the value of param [[maxBlockSizeInMB]].",
      "    sc.stop()\n  }\n}\n// scalastyle:on println\n\n",
      "        fragment = \"element_at(array(1, 2, 3, 4, 5), 0)\",\n        start = 7,\n        stop = 41)\n    )\n  }\n\n  test(\"CAST_INVALID_INPUT: cast string to double\") {\n    checkError(\n      exception = intercept[SparkNumberFormatException] {\n        sql(\"select CAST('111111111111xe23' AS DOUBLE)\").collect()\n      },\n      errorClass = \"CAST_INVALID_INPUT\",\n      parameters = Map(\n        \"expression\" -> \"'111111111111xe23'\",\n        \"sourceType\" -> \"\\\"STRING\\\"\",\n        \"targetType\" -> \"\\\"DOUBLE\\\"\",\n        \"ansiConfig\" -> ansiConf),\n      context = ExpectedContext(\n        fragment = \"CAST('111111111111xe23' AS DOUBLE)\",\n        start = 7,\n        stop = 40))\n  }\n\n  test(\"CANNOT_PARSE_TIMESTAMP: parse string to timestamp\") {\n    checkError(\n      exception = intercept[SparkDateTimeException] {\n        sql(\"select to_timestamp('abc', 'yyyy-MM-dd HH:mm:ss')\").collect()\n      },\n      errorClass = \"CANNOT_PARSE_TIMESTAMP\",\n      parameters = Map(\n        \"message\" -> \"Text 'abc' could not be parsed at index 0\",\n        \"ansiConfig\" -> ansiConf)\n    )\n  }\n\n  test(\"CAST_OVERFLOW_IN_TABLE_INSERT: overflow during table insertion\") {\n    Seq(\"TINYINT\", \"SMALLINT\", \"INT\", \"BIGINT\", \"DECIMAL(7,2)\").foreach { targetType =>\n      val tableName = \"overflowTable\"\n      withTable(tableName) {\n        sql(s\"CREATE TABLE $tableName(i $targetType) USING parquet\")\n        checkError(\n          exception = intercept[SparkException] {\n            sql(s\"insert into $tableName values 12345678901234567890D\")\n          }.getCause.getCause.asInstanceOf[SparkThrowable],\n          errorClass = \"CAST_OVERFLOW_IN_TABLE_INSERT\",\n          parameters = Map(\n            \"sourceType\" -> \"\\\"DOUBLE\\\"\",\n            \"targetType\" -> (\"\\\"\" + targetType + \"\\\"\"),\n            \"columnName\" -> \"`i`\")\n        )\n      }\n    }\n  }\n\n  test(\"SPARK-42286: CheckOverflowInTableInsert with CaseWhen should throw an exception\") {\n    val caseWhen = CaseWhen(\n      Seq((Literal(true), Cast(Literal.apply(12345678901234567890D), ByteType))), None)\n    checkError(\n      exception = intercept[SparkArithmeticException] {\n        CheckOverflowInTableInsert(caseWhen, \"col\").eval(null)\n      }.asInstanceOf[SparkThrowable],\n      errorClass = \"CAST_OVERFLOW\",\n      parameters = Map(\"value\" -> \"1.2345678901234567E19D\",\n        \"sourceType\" -> \"\\\"DOUBLE\\\"\",",
      "",
      "/*\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage org.apache.spark.sql.connect.common.config\n\nprivate[sql] object ConnectCommon {\n  val CONNECT_GRPC_BINDING_PORT: Int = 15002\n  val CONNECT_GRPC_MAX_MESSAGE_SIZE: Int = 128 * 1024 * 1024;\n}\n"
    ]
  },
  {
    "id": "microsoft/TypeScript",
    "org": "microsoft",
    "avatarURL": "https://avatars.githubusercontent.com/u/6154722?v=4",
    "name": "microsoft/TypeScript",
    "url": "https://github.com/microsoft/TypeScript",
    "lang": "TypeScript",
    "star_num": 93884,
    "fork_num": 12162,
    "snippets": [
      "﻿// @module: commonjs\r\nvar x;\r\nexport export = x;",
      "interface F {\r\n    (): number;\r\n}\r\n\r\nclass C<T> {\r\n    constructor(public a: T, public b: F) {}\r\n    foo() {\r\n        if (this.a instanceof this.b) {\r\n        }\r\n    }\r\n}",
      "// @declaration: true\r\ntype props = \"a\" | \"b\" | \"c\" | \"d\" | \"e\" | \"f\" | \"g\" | \"h\" | \"i\" | \"j\" | \"k\" | \"l\" | \"m\" | \"n\" | \"o\" | \"p\" | \"q\" | \"r\" | \"s\" | \"t\" | \"u\" | \"v\" | \"w\" | \"x\" | \"y\" | \"z\";\r\n\r\ntype manyprops = `${props}${props}`;\r\n\r\nexport const c = null as any as {[K in manyprops]: {[K2 in manyprops]: `${K}.${K2}`}};",
      "    constructor ()\n    {\n\n    }\n\n    public B()\n    {\n        return 42;\n    }\n}\n",
      "var f: {\r\n    x: number;\r\n    <-\r\n};",
      "onlyNullablePlease(y); // error as expected\r\nonlyNullablePlease2(y); // error as expected\r\n\r\nfunction f<T>(t: T) {\r\n  var x: T | null = Math.random() > 0.5 ? null : t;\r\n  onlyNullablePlease(x); // should work\r\n  onlyNullablePlease2(x); // should work\r\n}\r\n\r\nfunction f2<T>(t1: { x: T; y: T }, t2: T extends T ? { x: T; y: T } : never) {\r\n  t1 = t2; // OK\r\n  t2 = t1; // should fail\r\n}\r\n\r\ntype Foo<T> = T extends true ? string : \"a\";\r\n\r\nfunction test<T>(x: Foo<T>, s: string) {\r\n  x = \"a\"; // Currently an error, should be ok\r\n  x = s; // Error\r\n}\r\n\r\n// #26933\r\ntype Distributive<T> = T extends { a: number } ? { a: number } : { b: number };\r\nfunction testAssignabilityToConditionalType<T>() {\r\n  const o = { a: 1, b: 2 };\r\n  const x: [T] extends [string]\r\n    ? { y: number }\r\n    : { a: number; b: number } = undefined!;\r\n  // Simple case: OK\r\n  const o1: [T] extends [number] ? { a: number } : { b: number } = o;\r\n  // Simple case where source happens to be a conditional type: also OK\r\n  const x1: [T] extends [number]\r\n    ? ([T] extends [string] ? { y: number } : { a: number })\r\n    : ([T] extends [string] ? { y: number } : { b: number }) = x;\r\n  // Infer type parameters: no good\r\n  const o2: [T] extends [[infer U]] ? U : { b: number } = o;\r\n\r\n  // The next 4 are arguable - if you choose to ignore the `never` distribution case,\r\n  // then they're all good. The `never` case _is_ a bit of an outlier - we say distributive types\r\n  // look approximately like the sum of their branches, but the `never` case bucks that.\r\n  // There's an argument for the result of dumping `never` into a distributive conditional\r\n  // being not `never`, but instead the intersection of the branches - a much more precise bound\r\n  // on that \"impossible\" input.\r\n\r\n  // Distributive where T might instantiate to never: no good\r\n  const o3: Distributive<T> = o;\r\n  // Distributive where T & string might instantiate to never: also no good\r\n  const o4: Distributive<T & string> = o;\r\n  // Distributive where {a: T} cannot instantiate to never: OK\r\n  const o5: Distributive<{ a: T }> = o;\r\n  // Distributive where check type is a conditional which returns a non-never type upon instantiation with `never` but can still return never otherwise: no good\r\n  const o6: Distributive<[T] extends [never] ? { a: number } : never> = o;\r\n}\r\n\r\ntype Wrapped<T> = { ___secret: T };\r\ntype Unwrap<T> = T extends Wrapped<infer U> ? U : T;\r\n\r\ndeclare function set<T, K extends keyof T>(\r\n  obj: T,\r\n  key: K,\r\n  value: Unwrap<T[K]>\r\n): Unwrap<T[K]>;\r\n\r\nclass Foo2 {\r",
      "declare var m1_a1: number;\r\ndeclare class m1_c1 {\r\n    m1_c1_p1: number;\r\n}\r\ndeclare var m1_instance1: m1_c1;\r\ndeclare function m1_f1(): m1_c1;\r\ndeclare module \"ref/m2\" {\r\n    export var m2_a1: number;\r\n    export class m2_c1 {\r\n        m2_c1_p1: number;\r\n    }\r\n    export var m2_instance1: m2_c1;\r\n    export function m2_f1(): m2_c1;\r\n}\r\ndeclare var a1: number;\r\ndeclare class c1 {\r\n    p1: number;\r\n}\r\ndeclare var instance1: c1;\r\ndeclare function f1(): c1;\r\n",
      "interface Collection<T, U> {\r\n    length: number;\r\n    add(x: T, y: U): void;\r\n    remove(x: T, y: U): boolean;\r\n}\r\n\r\ninterface Combinators {\r\n    map<T, U>(c: Collection<T, U>, f: (x: T, y: U) => any): Collection<any, any>;\r\n    map<T, U, V>(c: Collection<T, U>, f: (x: T, y: U) => V): Collection<T, V>;\r\n}\r\n\r\nvar _: Combinators;\r\nvar c2: Collection<number, string>;\r\nvar rf1 = (x: number, y: string) => { return x.toFixed() };\r\nvar r5a = _.map<number, string, Date>(c2, (x, y) => { return x.toFixed() });\r\nvar r5b = _.map<number, string, Date>(c2, rf1);",
      "// @noEmit: true\n// @strict: true\n\n// repro #49339\nexport class Cls {\n    x;\n    y;\n    z;\n    \n    0;\n\n    constructor(seed: number) {\n        this['x'] = [seed];\n        this['y'] = { seed };\n        this['z'] = `${seed}`;\n\n        this[0] = [seed];\n    }\n}",
      "\r\n            const isDefault = exportKind === ExportKind.Default;\r\n            const namedSymbol = isDefault && getLocalSymbolForExportDefault(symbol) || symbol;\r\n            // 1. A named export must be imported by its key in `moduleSymbol.exports` or `moduleSymbol.members`.\r\n            // 2. A re-export merged with an export from a module augmentation can result in `symbol`\r\n            //    being an external module symbol; the name it is re-exported by will be `symbolTableKey`\r\n            //    (which comes from the keys of `moduleSymbol.exports`.)\r\n            // 3. Otherwise, we have a default/namespace import that can be imported by any name, and\r\n            //    `symbolTableKey` will be something undesirable like `export=` or `default`, so we try to\r\n            //    get a better name.\r\n            const names = exportKind === ExportKind.Named || isExternalModuleSymbol(namedSymbol)\r\n                ? unescapeLeadingUnderscores(symbolTableKey)\r\n                : getNamesForExportedSymbol(namedSymbol, /*scriptTarget*/ undefined);\r\n\r\n            const symbolName = typeof names === \"string\" ? names : names[0];\r\n            const capitalizedSymbolName = typeof names === \"string\" ? undefined : names[1];\r\n\r\n            const moduleName = stripQuotes(moduleSymbol.name);\r\n            const id = exportInfoId++;\r\n            const target = skipAlias(symbol, checker);\r\n            const storedSymbol = symbol.flags & SymbolFlags.Transient ? undefined : symbol;\r\n            const storedModuleSymbol = moduleSymbol.flags & SymbolFlags.Transient ? undefined : moduleSymbol;\r\n            if (!storedSymbol || !storedModuleSymbol) symbols.set(id, [symbol, moduleSymbol]);\r\n\r\n            exportInfo.add(key(symbolName, symbol, isExternalModuleNameRelative(moduleName) ? undefined : moduleName, checker), {\r\n                id,\r\n                symbolTableKey,\r\n                symbolName,\r\n                capitalizedSymbolName,\r\n                moduleName,\r\n                moduleFile,\r\n                moduleFileName: moduleFile?.fileName,\r\n                packageName,\r\n                exportKind,\r\n                targetFlags: target.flags,\r\n                isFromPackageJson,\r\n                symbol: storedSymbol,\r\n                moduleSymbol: storedModuleSymbol,\r\n            });\r\n        },\r\n        get: (importingFile, key) => {\r\n            if (importingFile !== usableByFileName) return;\r\n            const result = exportInfo.get(key);\r\n            return result?.map(rehydrateCachedInfo);\r\n        },\r\n        search: (importingFile, preferCapitalized, matches, action) => {\r\n            if (importingFile !== usableByFileName) return;\r\n            return forEachEntry(exportInfo, (info, key) => {\r\n                const { symbolName, ambientModuleName } = parseKey(key);\r\n                const name = preferCapitalized && info[0].capitalizedSymbolName || symbolName;\r\n                if (matches(name, info[0].targetFlags)) {\r\n                    const rehydrated = info.map(rehydrateCachedInfo);\r\n                    const filtered = rehydrated.filter((r, i) => isNotShadowedByDeeperNodeModulesPackage(r, info[i].packageName));\r\n                    if (filtered.length) {\r\n                        const res = action(filtered, name, !!ambientModuleName, key);\r\n                        if (res !== undefined) return res;\r\n                    }\r\n                }\r\n            });\r\n        },\r\n        releaseSymbols: () => {\r\n            symbols.clear();\r\n        },\r\n        onFileChanged: (oldSourceFile: SourceFile, newSourceFile: SourceFile, typeAcquisitionEnabled: boolean) => {\r"
    ]
  },
  {
    "id": "spring-projects/spring-boot",
    "org": "spring-projects",
    "avatarURL": "https://avatars.githubusercontent.com/u/317776?v=4",
    "name": "spring-projects/spring-boot",
    "url": "https://github.com/spring-projects/spring-boot",
    "lang": "Java",
    "star_num": 69210,
    "fork_num": 39397,
    "snippets": [
      "\n/**\n * Annotation that can be used for a MongoDB test that focuses <strong>only</strong> on\n * MongoDB components.\n * <p>\n * Using this annotation will disable full auto-configuration and instead apply only\n * configuration relevant to MongoDB tests.\n * <p>\n * When using JUnit 4, this annotation should be used in combination with\n * {@code @RunWith(SpringRunner.class)}.\n *\n * @author Michael Simons\n * @author Stephane Nicoll\n * @author Artsiom Yudovin\n * @since 1.5.0\n */\n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Inherited\n@BootstrapWith(DataMongoTestContextBootstrapper.class)\n@ExtendWith(SpringExtension.class)\n@OverrideAutoConfiguration(enabled = false)\n@TypeExcludeFilters(DataMongoTypeExcludeFilter.class)\n@AutoConfigureCache\n@AutoConfigureDataMongo\n@ImportAutoConfiguration\npublic @interface DataMongoTest {\n\n\t/**\n\t * Properties in form {@literal key=value} that should be added to the Spring\n\t * {@link Environment} before the test runs.\n\t * @return the properties to add\n\t * @since 2.1.0\n\t */\n\tString[] properties() default {};\n\n\t/**\n\t * Determines if default filtering should be used with\n\t * {@link SpringBootApplication @SpringBootApplication}. By default no beans are\n\t * included.\n\t * @see #includeFilters()\n\t * @see #excludeFilters()\n\t * @return if default filters should be used\n\t */\n\tboolean useDefaultFilters() default true;\n\n\t/**\n\t * A set of include filters which can be used to add otherwise filtered beans to the\n\t * application context.\n\t * @return include filters to apply\n\t */\n\tFilter[] includeFilters() default {};\n\n\t/**\n\t * A set of exclude filters which can be used to filter beans that would otherwise be\n\t * added to the application context.\n\t * @return exclude filters to apply\n\t */\n\tFilter[] excludeFilters() default {};\n\n\t/**\n\t * Auto-configuration exclusions that should be applied for this test.\n\t * @return auto-configuration exclusions to apply",
      "}\n",
      "import org.springframework.core.env.MapPropertySource;\nimport org.springframework.mock.env.MockEnvironment;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link InvalidConfigurationPropertyValueFailureAnalyzer}.\n *\n * @author Stephane Nicoll\n * @author Scott Frederick\n */\nclass InvalidConfigurationPropertyValueFailureAnalyzerTests {\n\n\tprivate final MockEnvironment environment = new MockEnvironment();\n\n\t@Test\n\tvoid analysisWithNullEnvironment() {\n\t\tInvalidConfigurationPropertyValueException failure = new InvalidConfigurationPropertyValueException(\n\t\t\t\t\"test.property\", \"invalid\", \"This is not valid.\");\n\t\tFailureAnalysis analysis = new InvalidConfigurationPropertyValueFailureAnalyzer(null).analyze(failure);\n\t\tassertThat(analysis).isNull();\n\t}\n\n\t@Test\n\tvoid analysisWithKnownProperty() {\n\t\tMapPropertySource source = new MapPropertySource(\"test\", Collections.singletonMap(\"test.property\", \"invalid\"));\n\t\tthis.environment.getPropertySources().addFirst(OriginCapablePropertySource.get(source));\n\t\tInvalidConfigurationPropertyValueException failure = new InvalidConfigurationPropertyValueException(\n\t\t\t\t\"test.property\", \"invalid\", \"This is not valid.\");\n\t\tFailureAnalysis analysis = performAnalysis(failure);\n\t\tassertCommonParts(failure, analysis);\n\t\tassertThat(analysis.getAction()).contains(\"Review the value of the property with the provided reason.\");\n\t\tassertThat(analysis.getDescription()).contains(\"Validation failed for the following reason\")\n\t\t\t.contains(\"This is not valid.\")\n\t\t\t.doesNotContain(\"Additionally, this property is also set\");\n\t}\n\n\t@Test\n\tvoid analysisWithKnownPropertyAndNoReason() {\n\t\tMapPropertySource source = new MapPropertySource(\"test\", Collections.singletonMap(\"test.property\", \"invalid\"));\n\t\tthis.environment.getPropertySources().addFirst(OriginCapablePropertySource.get(source));\n\t\tInvalidConfigurationPropertyValueException failure = new InvalidConfigurationPropertyValueException(\n\t\t\t\t\"test.property\", \"invalid\", null);\n\t\tFailureAnalysis analysis = performAnalysis(failure);\n\t\tassertThat(analysis.getAction()).contains(\"Review the value of the property.\");\n\t\tassertThat(analysis.getDescription()).contains(\"No reason was provided.\")\n\t\t\t.doesNotContain(\"Additionally, this property is also set\");\n\t}\n\n\t@Test\n\tvoid analysisWithKnownPropertyAndOtherCandidates() {\n\t\tMapPropertySource source = new MapPropertySource(\"test\", Collections.singletonMap(\"test.property\", \"invalid\"));\n\t\tMapPropertySource additional = new MapPropertySource(\"additional\",\n\t\t\t\tCollections.singletonMap(\"test.property\", \"valid\"));\n\t\tMapPropertySource another = new MapPropertySource(\"another\", Collections.singletonMap(\"test.property\", \"test\"));\n\t\tthis.environment.getPropertySources().addFirst(OriginCapablePropertySource.get(source));\n\t\tthis.environment.getPropertySources().addLast(additional);\n\t\tthis.environment.getPropertySources().addLast(OriginCapablePropertySource.get(another));\n\t\tInvalidConfigurationPropertyValueException failure = new InvalidConfigurationPropertyValueException(\n\t\t\t\t\"test.property\", \"invalid\", \"This is not valid.\");\n\t\tFailureAnalysis analysis = performAnalysis(failure);\n\t\tassertCommonParts(failure, analysis);\n\t\tassertThat(analysis.getAction()).contains(\"Review the value of the property with the provided reason.\");\n\t\tassertThat(analysis.getDescription())",
      "\n\tprivate String asCanonicalName(String name) {\n\t\treturn ImageReference.of(name).getName();\n\t}\n\n}\n",
      "public class MyDataSourceConfiguration {\n\n\t@Bean\n\t@ConfigurationProperties(\"app.datasource\")\n\tpublic HikariDataSource dataSource() {\n\t\treturn DataSourceBuilder.create().type(HikariDataSource.class).build();\n\t}\n\n}\n",
      "/*\n * Copyright 2012-2019 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.configurationsample.specific;\n\nimport java.io.PrintWriter;\nimport java.io.Writer;\n\nimport javax.sql.DataSource;\n\nimport org.springframework.boot.configurationsample.ConfigurationProperties;\n\n/**\n * Sample config with types that should not be added to the meta-data as we have no way to\n * bind them from simple strings.\n *\n * @author Stephane Nicoll\n */\n@ConfigurationProperties(prefix = \"excluded\")\npublic class ExcludedTypesPojo {\n\n\tprivate String name;\n\n\tprivate ClassLoader classLoader;\n\n\tprivate DataSource dataSource;\n\n\tprivate PrintWriter printWriter;\n\n\tprivate Writer writer;\n\n\tprivate Writer[] writerArray;\n\n\tpublic String getName() {\n\t\treturn this.name;\n\t}\n\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\n\tpublic ClassLoader getClassLoader() {\n\t\treturn this.classLoader;\n\t}\n\n\tpublic void setClassLoader(ClassLoader classLoader) {\n\t\tthis.classLoader = classLoader;\n\t}\n\n\tpublic DataSource getDataSource() {\n\t\treturn this.dataSource;",
      "/*\n * Copyright 2012-2023 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.docs.features.testing.testcontainers.atdevelopmenttime.launch;\n\nimport org.springframework.boot.SpringApplication;\n\npublic class TestMyApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.from(MyApplication::main).run(args);\n\t}\n\n}\n",
      " * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage org.springframework.boot.configurationmetadata.changelog;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.nio.charset.StandardCharsets;\nimport java.util.jar.JarOutputStream;\nimport java.util.zip.ZipEntry;\n\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.io.TempDir;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n/**\n * Tests for {@link ChangelogGenerator}.\n *\n * @author Phillip Webb\n */\nclass ChangelogGeneratorTests {\n\n\t@TempDir\n\tFile temp;\n\n\t@Test\n\tvoid generateChangeLog() throws IOException {\n\t\tFile oldJars = new File(this.temp, \"1.0\");\n\t\taddJar(oldJars, \"sample-1.0.json\");\n\t\tFile newJars = new File(this.temp, \"2.0\");\n\t\taddJar(newJars, \"sample-2.0.json\");\n\t\tFile out = new File(this.temp, \"changes.adoc\");\n\t\tString[] args = new String[] { oldJars.getAbsolutePath(), newJars.getAbsolutePath(), out.getAbsolutePath() };\n\t\tChangelogGenerator.main(args);\n\t\tassertThat(out).usingCharset(StandardCharsets.UTF_8)\n\t\t\t.hasSameTextualContentAs(new File(\"src/test/resources/sample.adoc\"));\n\t}\n\n\tprivate void addJar(File directory, String filename) throws IOException {\n\t\tdirectory.mkdirs();\n\t\ttry (JarOutputStream out = new JarOutputStream(new FileOutputStream(new File(directory, \"sample.jar\")))) {\n\t\t\tout.putNextEntry(new ZipEntry(\"META-INF/spring-configuration-metadata.json\"));\n\t\t\ttry (InputStream in = new FileInputStream(\"src/test/resources/\" + filename)) {\n\t\t\t\tin.transferTo(out);\n\t\t\t\tout.closeEntry();\n\t\t\t}\n\t\t}\n\n\t}\n\n}",
      "\t@Test\n\tvoid ofWhenContributorIsNullThrowsException() {\n\t\tassertThatIllegalArgumentException().isThrownBy(() -> NamedContributor.of(\"one\", null))\n\t\t\t.withMessage(\"Contributor must not be null\");\n\n\t}\n\n}\n",
      "\t\t}\n\t\treturn super.getResources(name);\n\t}\n\n}\n"
    ]
  },
  {
    "id": "rails/rails",
    "org": "rails",
    "avatarURL": "https://avatars.githubusercontent.com/u/4223?v=4",
    "name": "rails/rails",
    "url": "https://github.com/rails/rails",
    "lang": "Ruby",
    "star_num": 53437,
    "fork_num": 21296,
    "snippets": [
      "module ActionDispatch\n  module Journey # :nodoc:\n    # The Routing table. Contains all routes for a system. Routes can be\n    # added to the table by calling Routes#add_route.\n    class Routes # :nodoc:\n      include Enumerable\n\n      attr_reader :routes, :custom_routes, :anchored_routes\n\n      def initialize(routes = [])\n        @routes             = routes\n        @ast                = nil\n        @anchored_routes    = []\n        @custom_routes      = []\n        @simulator          = nil\n      end\n\n      def empty?\n        routes.empty?\n      end\n\n      def length\n        routes.length\n      end\n      alias :size :length\n\n      def last\n        routes.last\n      end\n\n      def each(&block)\n        routes.each(&block)\n      end\n\n      def clear\n        routes.clear\n        anchored_routes.clear\n        custom_routes.clear\n      end\n\n      def partition_route(route)\n        if route.path.anchored && route.path.requirements_anchored?\n          anchored_routes << route\n        else\n          custom_routes << route\n        end\n      end\n\n      def ast\n        @ast ||= begin\n          nodes = anchored_routes.map(&:ast)\n          Nodes::Or.new(nodes)\n        end\n      end\n\n      def simulator\n        @simulator ||= begin\n          gtg = GTG::Builder.new(ast).transition_table\n          GTG::Simulator.new(gtg)\n        end\n      end\n\n      def add_route(name, mapping)\n        route = mapping.make_route name, routes.length",
      "    collection.reload\n\n    # It should return a different object, since the association has been reloaded\n    assert_not_same original_object, collection.first, \"Expected #first after #reload to return a new object\"\n  end\n\n  def test_reload_with_query_cache\n    connection = ActiveRecord::Base.connection\n    connection.enable_query_cache!\n    connection.clear_query_cache\n\n    # Populate the cache with a query\n    firm = Firm.first\n    # Populate the cache with a second query\n    firm.clients.load\n\n    assert_equal 2, connection.query_cache.size\n\n    # Clear the cache and fetch the clients again, populating the cache with a query\n    assert_queries(1) { firm.clients.reload }\n    # This query is cached, so it shouldn't make a real SQL query\n    assert_queries(0) { firm.clients.load }\n\n    assert_equal 1, connection.query_cache.size\n  ensure\n    ActiveRecord::Base.connection.disable_query_cache!\n  end\n\n  def test_reloading_unloaded_associations_with_query_cache\n    connection = ActiveRecord::Base.connection\n    connection.enable_query_cache!\n    connection.clear_query_cache\n\n    firm = Firm.create!(name: \"firm name\")\n    client = firm.clients.create!(name: \"client name\")\n    firm.clients.to_a # add request to cache\n\n    connection.uncached do\n      client.update!(name: \"new client name\")\n    end\n\n    firm = Firm.find(firm.id)\n\n    assert_equal [client.name], firm.clients.reload.map(&:name)\n  ensure\n    ActiveRecord::Base.connection.disable_query_cache!\n  end\n\n  def test_find_all_with_include_and_conditions\n    assert_nothing_raised do\n      Developer.all.merge!(joins: :audit_logs, where: { \"audit_logs.message\" => nil, :name => \"Smith\" }).to_a\n    end\n  end\n\n  def test_find_in_collection\n    assert_equal Client.find(2).name, companies(:first_firm).clients.find(2).name\n    assert_raise(ActiveRecord::RecordNotFound) { companies(:first_firm).clients.find(6) }\n  end\n\n  def test_find_grouped\n    all_clients_of_firm1 = Client.all.merge!(where: \"firm_id = 1\").to_a\n    grouped_clients_of_firm1 = Client.all.merge!(where: \"firm_id = 1\", group: \"firm_id\", select: \"firm_id, count(id) as clients_count\").to_a\n    assert_equal 3, all_clients_of_firm1.size\n    assert_equal 1, grouped_clients_of_firm1.size",
      "  module Generators\n    class GeneratorGenerator < NamedBase # :nodoc:\n      check_class_collision suffix: \"Generator\"\n\n      class_option :namespace, type: :boolean, default: true,\n                               desc: \"Namespace generator under lib/generators/name\"\n\n      def create_generator_files\n        directory \".\", generator_dir\n      end\n\n      hook_for :test_framework\n\n      private\n        def generator_dir\n          if options[:namespace]\n            File.join(\"lib\", \"generators\", regular_class_path, file_name)\n          else\n            File.join(\"lib\", \"generators\", regular_class_path)\n          end\n        end\n    end\n  end\nend\n",
      "    end\n  end\n\n  class BasicModel\n    include DefaultValue\n    include ActiveModel::Model\n    attr_accessor :attr\n  end\n\n  class BasicModelWithReversedMixins\n    include ActiveModel::Model\n    include DefaultValue\n    attr_accessor :attr\n  end\n\n  class SimpleModel\n    include ActiveModel::Model\n    attr_accessor :attr\n  end\n\n  def setup\n    @model = BasicModel.new\n  end\n\n  def test_initialize_with_params\n    object = BasicModel.new(attr: \"value\")\n    assert_equal \"value\", object.attr\n  end\n\n  def test_initialize_with_params_and_mixins_reversed\n    object = BasicModelWithReversedMixins.new(attr: \"value\")\n    assert_equal \"value\", object.attr\n  end\n\n  def test_initialize_with_nil_or_empty_hash_params_does_not_explode\n    assert_nothing_raised do\n      BasicModel.new()\n      BasicModel.new(nil)\n      BasicModel.new({})\n      SimpleModel.new(attr: \"value\")\n    end\n  end\n\n  def test_persisted_is_always_false\n    object = BasicModel.new(attr: \"value\")\n    assert_not object.persisted?\n  end\n\n  def test_mixin_inclusion_chain\n    object = BasicModel.new\n    assert_equal \"default value\", object.attr\n  end\n\n  def test_mixin_initializer_when_args_exist\n    object = BasicModel.new(hello: \"world\")\n    assert_equal \"world\", object.hello\n  end\n\n  def test_mixin_initializer_when_args_dont_exist\n    assert_raises(ActiveModel::UnknownAttributeError) do\n      SimpleModel.new(hello: \"world\")\n    end\n  end\n",
      "module ActiveModel\n  # = Active \\Model \\Translation\n  #\n  # Provides integration between your object and the \\Rails internationalization\n  # (i18n) framework.\n  #\n  # A minimal implementation could be:\n  #\n  #   class TranslatedPerson\n  #     extend ActiveModel::Translation\n  #   end\n  #\n  #   TranslatedPerson.human_attribute_name('my_attribute')\n  #   # => \"My attribute\"\n  #\n  # This also provides the required class methods for hooking into the\n  # \\Rails internationalization API, including being able to define a\n  # class-based +i18n_scope+ and +lookup_ancestors+ to find translations in\n  # parent classes.\n  module Translation\n    include ActiveModel::Naming\n\n    # Returns the +i18n_scope+ for the class. Override if you want custom lookup.\n    def i18n_scope\n      :activemodel\n    end\n\n    # When localizing a string, it goes through the lookup returned by this\n    # method, which is used in ActiveModel::Name#human,\n    # ActiveModel::Errors#full_messages and\n    # ActiveModel::Translation#human_attribute_name.\n    def lookup_ancestors\n      ancestors.select { |x| x.respond_to?(:model_name) }\n    end\n\n    MISSING_TRANSLATION = -(2**60) # :nodoc:\n\n    # Transforms attribute names into a more human format, such as \"First name\"\n    # instead of \"first_name\".\n    #\n    #   Person.human_attribute_name(\"first_name\") # => \"First name\"\n    #\n    # Specify +options+ with additional translating options.\n    def human_attribute_name(attribute, options = {})\n      attribute = attribute.to_s\n\n      if attribute.include?(\".\")\n        namespace, _, attribute = attribute.rpartition(\".\")\n        namespace.tr!(\".\", \"/\")\n\n        defaults = lookup_ancestors.map do |klass|\n          :\"#{i18n_scope}.attributes.#{klass.model_name.i18n_key}/#{namespace}.#{attribute}\"\n        end\n        defaults << :\"#{i18n_scope}.attributes.#{namespace}.#{attribute}\"\n      else\n        defaults = lookup_ancestors.map do |klass|\n          :\"#{i18n_scope}.attributes.#{klass.model_name.i18n_key}.#{attribute}\"\n        end\n      end\n\n      defaults << :\"attributes.#{attribute}\"\n      defaults << options[:default] if options[:default]\n      defaults << MISSING_TRANSLATION\n",
      "    rescue *error_classes => error\n      report(error, handled: false, severity: severity, context: context, source: source)\n      raise\n    end\n\n    # Register a new error subscriber. The subscriber must respond to\n    #\n    #   report(Exception, handled: Boolean, severity: (:error OR :warning OR :info), context: Hash, source: String)\n    #\n    # The +report+ method <b>should never</b> raise an error.\n    def subscribe(subscriber)\n      unless subscriber.respond_to?(:report)\n        raise ArgumentError, \"Error subscribers must respond to #report\"\n      end\n      @subscribers << subscriber\n    end\n\n    # Unregister an error subscriber. Accepts either a subscriber or a class.\n    #\n    #   subscriber = MyErrorSubscriber.new\n    #   Rails.error.subscribe(subscriber)\n    #\n    #   Rails.error.unsubscribe(subscriber)\n    #   # or\n    #   Rails.error.unsubscribe(MyErrorSubscriber)\n    def unsubscribe(subscriber)\n      @subscribers.delete_if { |s| subscriber === s }\n    end\n\n    # Prevent a subscriber from being notified of errors for the\n    # duration of the block. You may pass in the subscriber itself, or its class.\n    #\n    # This can be helpful for error reporting service integrations, when they wish\n    # to handle any errors higher in the stack.\n    def disable(subscriber)\n      disabled_subscribers = (ActiveSupport::IsolatedExecutionState[self] ||= [])\n      disabled_subscribers << subscriber\n      begin\n        yield\n      ensure\n        disabled_subscribers.delete(subscriber)\n      end\n    end\n\n    # Update the execution context that is accessible to error subscribers. Any\n    # context passed to #handle, #record, or #report will be merged with the\n    # context set here.\n    #\n    #   Rails.error.set_context(section: \"checkout\", user_id: @user.id)\n    #\n    def set_context(...)\n      ActiveSupport::ExecutionContext.set(...)\n    end\n\n    # Report an error directly to subscribers. You can use this method when the\n    # block-based #handle and #record methods are not suitable.\n    #\n    #   Rails.error.report(error)\n    #\n    def report(error, handled: true, severity: handled ? :warning : :error, context: {}, source: DEFAULT_SOURCE)\n      return if error.instance_variable_defined?(:@__rails_error_reported)\n\n      unless SEVERITIES.include?(severity)\n        raise ArgumentError, \"severity must be one of #{SEVERITIES.map(&:inspect).join(\", \")}, got: #{severity.inspect}\"",
      "# frozen_string_literal: true\n\nrequire \"action_mailbox/test_helper\"\nrequire \"active_support/test_case\"\n\nmodule ActionMailbox\n  class TestCase < ActiveSupport::TestCase\n    include ActionMailbox::TestHelper\n  end\nend\n\nActiveSupport.run_load_hooks :action_mailbox_test_case, ActionMailbox::TestCase\n",
      "    end\nend\n",
      "  ensure\n    ActiveRecord::Base.belongs_to_required_by_default = previous_value\n  end\n\n  attr_accessor :developers_log\n  after_initialize :set_developers_log\n\n  def set_developers_log\n    @developers_log = []\n  end\n\n  def self.all_as_method\n    all\n  end\n  scope :all_as_scope, -> { all }\nend\n\nclass SpecialProject < Project\nend\n",
      "  end\nend\n"
    ]
  },
  {
    "id": "django/django",
    "org": "django",
    "avatarURL": "https://avatars.githubusercontent.com/u/27804?v=4",
    "name": "django/django",
    "url": "https://github.com/django/django",
    "lang": "Python",
    "star_num": 72878,
    "fork_num": 29863,
    "snippets": [
      "from django.db import models\n\n\nclass Thing(models.Model):\n    num = models.IntegerField()\n",
      "                    else:\n                        val_fmt = \" (%s)\"\n                    output += val_fmt % val\n                else:\n                    output += \" (None)\"\n                print(output)\n",
      "class FlatpageViewTests(TestDataMixin, TestCase):\n    def test_view_flatpage(self):\n        \"A flatpage can be served through a view\"\n        response = self.client.get(\"/flatpage_root/flatpage/\")\n        self.assertContains(response, \"<p>Isn't it flat!</p>\")\n\n    def test_view_non_existent_flatpage(self):\n        \"\"\"A nonexistent flatpage raises 404 when served through a view.\"\"\"\n        response = self.client.get(\"/flatpage_root/no_such_flatpage/\")\n        self.assertEqual(response.status_code, 404)\n\n    def test_view_authenticated_flatpage(self):\n        \"A flatpage served through a view can require authentication\"\n        response = self.client.get(\"/flatpage_root/sekrit/\")\n        self.assertRedirects(response, \"/accounts/login/?next=/flatpage_root/sekrit/\")\n        user = User.objects.create_user(\"testuser\", \"test@example.com\", \"s3krit\")\n        self.client.force_login(user)\n        response = self.client.get(\"/flatpage_root/sekrit/\")\n        self.assertContains(response, \"<p>Isn't it sekrit!</p>\")\n\n    def test_fallback_flatpage(self):\n        \"A fallback flatpage won't be served if the middleware is disabled\"\n        response = self.client.get(\"/flatpage/\")\n        self.assertEqual(response.status_code, 404)\n\n    def test_fallback_non_existent_flatpage(self):\n        \"\"\"\n        A nonexistent flatpage won't be served if the fallback middleware is\n        disabled.\n        \"\"\"\n        response = self.client.get(\"/no_such_flatpage/\")\n        self.assertEqual(response.status_code, 404)\n\n    def test_view_flatpage_special_chars(self):\n        \"A flatpage with special chars in the URL can be served through a view\"\n        fp = FlatPage.objects.create(\n            url=\"/some.very_special~chars-here/\",\n            title=\"A very special page\",\n            content=\"Isn't it special!\",\n            enable_comments=False,\n            registration_required=False,\n        )\n        fp.sites.add(settings.SITE_ID)\n\n        response = self.client.get(\"/flatpage_root/some.very_special~chars-here/\")\n        self.assertContains(response, \"<p>Isn't it special!</p>\")\n\n\n@modify_settings(INSTALLED_APPS={\"append\": \"django.contrib.flatpages\"})\n@override_settings(\n    APPEND_SLASH=True,\n    LOGIN_URL=\"/accounts/login/\",\n    MIDDLEWARE=[\n        \"django.middleware.common.CommonMiddleware\",\n        \"django.contrib.sessions.middleware.SessionMiddleware\",\n        \"django.middleware.csrf.CsrfViewMiddleware\",\n        \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n        \"django.contrib.messages.middleware.MessageMiddleware\",\n        # no 'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware'\n    ],\n    ROOT_URLCONF=\"flatpages_tests.urls\",\n    TEMPLATES=FLATPAGES_TEMPLATES,\n    SITE_ID=1,\n)",
      "",
      "        )\n        for lookup in lookups:\n            with self.subTest(lookup=lookup):\n                self.assertIn(\"::text\", do.lookup_cast(lookup))\n        # RemovedInDjango51Warning.\n        for lookup in lookups:\n            for field_type in (\"CICharField\", \"CIEmailField\", \"CITextField\"):\n                with self.subTest(lookup=lookup, field_type=field_type):\n                    self.assertIn(\n                        \"::citext\", do.lookup_cast(lookup, internal_type=field_type)\n                    )\n\n    def test_correct_extraction_psycopg_version(self):\n        from django.db.backends.postgresql.base import Database, psycopg_version\n\n        with mock.patch.object(Database, \"__version__\", \"4.2.1 (dt dec pq3 ext lo64)\"):\n            self.assertEqual(psycopg_version(), (4, 2, 1))\n        with mock.patch.object(\n            Database, \"__version__\", \"4.2b0.dev1 (dt dec pq3 ext lo64)\"\n        ):\n            self.assertEqual(psycopg_version(), (4, 2))\n\n    @override_settings(DEBUG=True)\n    @unittest.skipIf(is_psycopg3, \"psycopg2 specific test\")\n    def test_copy_to_expert_cursors(self):\n        out = StringIO()\n        copy_expert_sql = \"COPY django_session TO STDOUT (FORMAT CSV, HEADER)\"\n        with connection.cursor() as cursor:\n            cursor.copy_expert(copy_expert_sql, out)\n            cursor.copy_to(out, \"django_session\")\n        self.assertEqual(\n            [q[\"sql\"] for q in connection.queries],\n            [copy_expert_sql, \"COPY django_session TO STDOUT\"],\n        )\n\n    @override_settings(DEBUG=True)\n    @unittest.skipUnless(is_psycopg3, \"psycopg3 specific test\")\n    def test_copy_cursors(self):\n        copy_sql = \"COPY django_session TO STDOUT (FORMAT CSV, HEADER)\"\n        with connection.cursor() as cursor:\n            with cursor.copy(copy_sql) as copy:\n                for row in copy:\n                    pass\n        self.assertEqual([q[\"sql\"] for q in connection.queries], [copy_sql])\n\n    def test_get_database_version(self):\n        new_connection = connection.copy()\n        new_connection.pg_version = 110009\n        self.assertEqual(new_connection.get_database_version(), (11, 9))\n\n    @mock.patch.object(connection, \"get_database_version\", return_value=(11,))\n    def test_check_database_version_supported(self, mocked_get_database_version):\n        msg = \"PostgreSQL 12 or later is required (found 11).\"\n        with self.assertRaisesMessage(NotSupportedError, msg):\n            connection.check_database_version_supported()\n        self.assertTrue(mocked_get_database_version.called)\n\n    def test_compose_sql_when_no_connection(self):\n        new_connection = connection.copy()\n        try:\n            self.assertEqual(\n                new_connection.ops.compose_sql(\"SELECT %s\", [\"test\"]),\n                \"SELECT 'test'\",\n            )",
      "    from django.db.backends.postgresql.psycopg_any import (\n        DateRange,\n        DateTimeRange,\n        DateTimeTZRange,\n        NumericRange,\n        is_psycopg3,\n    )\nexcept ImportError:\n    pass\n\n\n@unittest.skipUnless(connection.vendor == \"postgresql\", \"PostgreSQL specific tests\")\nclass PostgresConfigTests(TestCase):\n    def test_register_type_handlers_connection(self):\n        from django.contrib.postgres.signals import register_type_handlers\n\n        self.assertNotIn(\n            register_type_handlers, connection_created._live_receivers(None)[0]\n        )\n        with modify_settings(INSTALLED_APPS={\"append\": \"django.contrib.postgres\"}):\n            self.assertIn(\n                register_type_handlers, connection_created._live_receivers(None)[0]\n            )\n        self.assertNotIn(\n            register_type_handlers, connection_created._live_receivers(None)[0]\n        )\n\n    def test_register_serializer_for_migrations(self):\n        tests = (\n            (DateRange(empty=True), DateRangeField),\n            (DateTimeRange(empty=True), DateRangeField),\n            (DateTimeTZRange(None, None, \"[]\"), DateTimeRangeField),\n            (NumericRange(Decimal(\"1.0\"), Decimal(\"5.0\"), \"()\"), DecimalRangeField),\n            (NumericRange(1, 10), IntegerRangeField),\n        )\n\n        def assertNotSerializable():\n            for default, test_field in tests:\n                with self.subTest(default=default):\n                    field = test_field(default=default)\n                    with self.assertRaisesMessage(\n                        ValueError, \"Cannot serialize: %s\" % default.__class__.__name__\n                    ):\n                        MigrationWriter.serialize(field)\n\n        assertNotSerializable()\n        import_name = \"psycopg.types.range\" if is_psycopg3 else \"psycopg2.extras\"\n        with self.modify_settings(INSTALLED_APPS={\"append\": \"django.contrib.postgres\"}):\n            for default, test_field in tests:\n                with self.subTest(default=default):\n                    field = test_field(default=default)\n                    serialized_field, imports = MigrationWriter.serialize(field)\n                    self.assertEqual(\n                        imports,\n                        {\n                            \"import django.contrib.postgres.fields.ranges\",\n                            f\"import {import_name}\",\n                        },\n                    )\n                    self.assertIn(\n                        f\"{field.__module__}.{field.__class__.__name__}\"\n                        f\"(default={import_name}.{default!r})\",\n                        serialized_field,\n                    )",
      "#\n# The *_FORMAT strings use the Django date format syntax,\n# see https://docs.djangoproject.com/en/dev/ref/templates/builtins/#date\n\n# Formatting for date objects.\nDATE_FORMAT = \"N j, Y\"\n# Formatting for time objects.\nTIME_FORMAT = \"P\"\n# Formatting for datetime objects.\nDATETIME_FORMAT = \"N j, Y, P\"\n# Formatting for date objects when only the year and month are relevant.\nYEAR_MONTH_FORMAT = \"F Y\"\n# Formatting for date objects when only the month and day are relevant.\nMONTH_DAY_FORMAT = \"F j\"\n# Short formatting for date objects.\nSHORT_DATE_FORMAT = \"m/d/Y\"\n# Short formatting for datetime objects.\nSHORT_DATETIME_FORMAT = \"m/d/Y P\"\n# First day of week, to be used on calendars.\n# 0 means Sunday, 1 means Monday...\nFIRST_DAY_OF_WEEK = 0\n\n# Formats to be used when parsing dates from input boxes, in order.\n# The *_INPUT_FORMATS strings use the Python strftime format syntax,\n# see https://docs.python.org/library/datetime.html#strftime-strptime-behavior\n# Note that these format strings are different from the ones to display dates.\n# Kept ISO formats as they are in first position\nDATE_INPUT_FORMATS = [\n    \"%Y-%m-%d\",  # '2006-10-25'\n    \"%m/%d/%Y\",  # '10/25/2006'\n    \"%m/%d/%y\",  # '10/25/06'\n    \"%b %d %Y\",  # 'Oct 25 2006'\n    \"%b %d, %Y\",  # 'Oct 25, 2006'\n    \"%d %b %Y\",  # '25 Oct 2006'\n    \"%d %b, %Y\",  # '25 Oct, 2006'\n    \"%B %d %Y\",  # 'October 25 2006'\n    \"%B %d, %Y\",  # 'October 25, 2006'\n    \"%d %B %Y\",  # '25 October 2006'\n    \"%d %B, %Y\",  # '25 October, 2006'\n]\nDATETIME_INPUT_FORMATS = [\n    \"%Y-%m-%d %H:%M:%S\",  # '2006-10-25 14:30:59'\n    \"%Y-%m-%d %H:%M:%S.%f\",  # '2006-10-25 14:30:59.000200'\n    \"%Y-%m-%d %H:%M\",  # '2006-10-25 14:30'\n    \"%m/%d/%Y %H:%M:%S\",  # '10/25/2006 14:30:59'\n    \"%m/%d/%Y %H:%M:%S.%f\",  # '10/25/2006 14:30:59.000200'\n    \"%m/%d/%Y %H:%M\",  # '10/25/2006 14:30'\n    \"%m/%d/%y %H:%M:%S\",  # '10/25/06 14:30:59'\n    \"%m/%d/%y %H:%M:%S.%f\",  # '10/25/06 14:30:59.000200'\n    \"%m/%d/%y %H:%M\",  # '10/25/06 14:30'\n]\nTIME_INPUT_FORMATS = [\n    \"%H:%M:%S\",  # '14:30:59'\n    \"%H:%M:%S.%f\",  # '14:30:59.000200'\n    \"%H:%M\",  # '14:30'\n]\n\n# Decimal separator symbol.\nDECIMAL_SEPARATOR = \".\"\n# Thousand separator symbol.\nTHOUSAND_SEPARATOR = \",\"\n# Number of digits that will be together, when splitting them by\n# THOUSAND_SEPARATOR. 0 means no grouping, 3 means splitting by thousands.\nNUMBER_GROUPING = 3",
      "                value = self._handle_fk_field_node(field_node, field)\n                if value == base.DEFER_FIELD:\n                    deferred_fields[field] = [\n                        getInnerText(k).strip()\n                        for k in field_node.getElementsByTagName(\"natural\")\n                    ]\n                else:\n                    data[field.attname] = value\n            else:\n                if field_node.getElementsByTagName(\"None\"):\n                    value = None\n                else:\n                    value = field.to_python(getInnerText(field_node).strip())\n                    # Load value since JSONField.to_python() outputs strings.\n                    if field.get_internal_type() == \"JSONField\":\n                        value = json.loads(value, cls=field.decoder)\n                data[field.name] = value\n\n        obj = base.build_instance(Model, data, self.db)\n\n        # Return a DeserializedObject so that the m2m data has a place to live.\n        return base.DeserializedObject(obj, m2m_data, deferred_fields)\n\n    def _handle_fk_field_node(self, node, field):\n        \"\"\"\n        Handle a <field> node for a ForeignKey\n        \"\"\"\n        # Check if there is a child node named 'None', returning None if so.\n        if node.getElementsByTagName(\"None\"):\n            return None\n        else:\n            model = field.remote_field.model\n            if hasattr(model._default_manager, \"get_by_natural_key\"):\n                keys = node.getElementsByTagName(\"natural\")\n                if keys:\n                    # If there are 'natural' subelements, it must be a natural key\n                    field_value = [getInnerText(k).strip() for k in keys]\n                    try:\n                        obj = model._default_manager.db_manager(\n                            self.db\n                        ).get_by_natural_key(*field_value)\n                    except ObjectDoesNotExist:\n                        if self.handle_forward_references:\n                            return base.DEFER_FIELD\n                        else:\n                            raise\n                    obj_pk = getattr(obj, field.remote_field.field_name)\n                    # If this is a natural foreign key to an object that\n                    # has a FK/O2O as the foreign key, use the FK value\n                    if field.remote_field.model._meta.pk.remote_field:\n                        obj_pk = obj_pk.pk\n                else:\n                    # Otherwise, treat like a normal PK\n                    field_value = getInnerText(node).strip()\n                    obj_pk = model._meta.get_field(\n                        field.remote_field.field_name\n                    ).to_python(field_value)\n                return obj_pk\n            else:\n                field_value = getInnerText(node).strip()\n                return model._meta.get_field(field.remote_field.field_name).to_python(\n                    field_value\n                )\n",
      "from django.db import migrations\n\n\ndef add_book(apps, schema_editor):\n    apps.get_model(\"migration_test_data_persistence\", \"Book\").objects.using(\n        schema_editor.connection.alias,\n    ).create(\n        title=\"I Love Django\",\n    )\n\n\nclass Migration(migrations.Migration):\n    dependencies = [(\"migration_test_data_persistence\", \"0001_initial\")]\n\n    operations = [\n        migrations.RunPython(\n            add_book,\n        ),\n    ]\n",
      "from django.core.management.base import BaseCommand\n\n\nclass Command(BaseCommand):\n    requires_system_checks = []\n\n    def handle(self, *args, **options):\n        pass\n"
    ]
  },
  {
    "id": "flutter/flutter",
    "org": "flutter",
    "avatarURL": "https://avatars.githubusercontent.com/u/14101776?v=4",
    "name": "flutter/flutter",
    "url": "https://github.com/flutter/flutter",
    "lang": "Dart",
    "star_num": 156469,
    "fork_num": 25946,
    "snippets": [
      "// Copyright 2014 The Flutter Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport 'package:flutter_devicelab/framework/devices.dart';\nimport 'package:flutter_devicelab/framework/framework.dart';\nimport 'package:flutter_devicelab/tasks/integration_tests.dart';\n\nFuture<void> main() async {\n  deviceOperatingSystem = DeviceOperatingSystem.android;\n  await task(createEndToEndIntegrationTest());\n}\n",
      "    test('checks the health of the driver extension', () async {\n      fakeClient.responses['get_health'] = makeFakeResponse(<String, dynamic>{'status': 'ok'});\n      final Health result = await driver.checkHealth();\n      expect(result.status, HealthStatus.ok);\n    });\n\n    test('closes connection', () async {\n      await driver.close();\n      expect(fakeClient.connectionLog.last, 'dispose');\n    });\n\n    group('ByValueKey', () {\n      test('restricts value types', () async {\n        expect(() => find.byValueKey(null), throwsDriverError);\n      });\n\n      test('finds by ValueKey', () async {\n        await driver.tap(find.byValueKey('foo'), timeout: _kTestTimeout);\n        expect(fakeClient.commandLog, <String>[\n          'ext.flutter.driver {command: tap, timeout: $_kSerializedTestTimeout, finderType: ByValueKey, keyValueString: foo, keyValueType: String}',\n        ]);\n      });\n    });\n\n    group('BySemanticsLabel', () {\n      test('finds by Semantic label using String', () async {\n        await driver.tap(find.bySemanticsLabel('foo'), timeout: _kTestTimeout);\n        expect(fakeClient.commandLog, <String>[\n          'ext.flutter.driver {command: tap, timeout: $_kSerializedTestTimeout, finderType: BySemanticsLabel, label: foo}',\n        ]);\n      });\n\n      test('finds by Semantic label using RegExp', () async {\n        await driver.tap(find.bySemanticsLabel(RegExp('^foo')), timeout: _kTestTimeout);\n        expect(fakeClient.commandLog, <String>[\n          'ext.flutter.driver {command: tap, timeout: $_kSerializedTestTimeout, finderType: BySemanticsLabel, label: ^foo, isRegExp: true}',\n        ]);\n      });\n    });\n\n    group('tap', () {\n      test('sends the tap command', () async {\n        await driver.tap(find.text('foo'), timeout: _kTestTimeout);\n        expect(fakeClient.commandLog, <String>[\n          'ext.flutter.driver {command: tap, timeout: $_kSerializedTestTimeout, finderType: ByText, text: foo}',\n        ]);\n      });\n    });\n\n    group('getText', () {\n      test('sends the getText command', () async {\n        fakeClient.responses['get_text'] = makeFakeResponse(<String, dynamic>{'text': 'hello'});\n        final String result = await driver.getText(find.byValueKey(123), timeout: _kTestTimeout);\n        expect(result, 'hello');\n        expect(fakeClient.commandLog, <String>[\n          'ext.flutter.driver {command: get_text, timeout: $_kSerializedTestTimeout, finderType: ByValueKey, keyValueString: 123, keyValueType: int}',\n        ]);\n      });\n    });\n\n    group('sendTextInputAction', () {\n      test('sends the SendTextInputAction command with action done', () async {\n        fakeClient.responses['send_text_input_action'] = makeFakeResponse(<String, dynamic>{});\n        await driver.sendTextInputAction(TextInputAction.done, timeout: _kTestTimeout);",
      "\n// stores ExpansionPanel state information\nclass Item {\n  Item({\n    required this.id,\n    required this.expandedValue,\n    required this.headerValue,\n  });\n\n  int id;\n  String expandedValue;\n  String headerValue;\n}\n\nList<Item> generateItems(int numberOfItems) {\n  return List<Item>.generate(numberOfItems, (int index) {\n    return Item(\n      id: index,\n      headerValue: 'Panel $index',\n      expandedValue: 'This is item number $index',\n    );\n  });\n}\n\nclass ExpansionPanelListRadioExample extends StatefulWidget {\n  const ExpansionPanelListRadioExample({super.key});\n\n  @override\n  State<ExpansionPanelListRadioExample> createState() => _ExpansionPanelListRadioExampleState();\n}\n\nclass _ExpansionPanelListRadioExampleState extends State<ExpansionPanelListRadioExample> {\n  final List<Item> _data = generateItems(8);\n\n  @override\n  Widget build(BuildContext context) {\n    return SingleChildScrollView(\n      child: Container(\n        child: _buildPanel(),\n      ),\n    );\n  }\n\n  Widget _buildPanel() {\n    return ExpansionPanelList.radio(\n      initialOpenPanelValue: 2,\n      children: _data.map<ExpansionPanelRadio>((Item item) {\n        return ExpansionPanelRadio(\n            value: item.id,\n            headerBuilder: (BuildContext context, bool isExpanded) {\n              return ListTile(\n                title: Text(item.headerValue),\n              );\n            },\n            body: ListTile(\n                title: Text(item.expandedValue),\n                subtitle: const Text('To delete this panel, tap the trash can icon'),\n                trailing: const Icon(Icons.delete),\n                onTap: () {\n                  setState(() {\n                    _data.removeWhere((Item currentItem) => item == currentItem);\n                  });\n                }));\n      }).toList(),",
      "  /// The next path is examined. Any arguments that are passed to this method\n  /// are compared to the actual [Canvas.drawPath] call's `paint` argument, and\n  /// any mismatches result in failure.\n  ///\n  /// To introspect the Path object (as it stands after the painting has\n  /// completed), the `includes` and `excludes` arguments can be provided to\n  /// specify points that should be considered inside or outside the path\n  /// (respectively).\n  ///\n  /// If no call to [Canvas.drawPath] was made, then this results in failure.\n  ///\n  /// Any calls made between the last matched call (if any) and the\n  /// [Canvas.drawPath] call are ignored.\n  ///\n  /// The [Paint]-related arguments (`color`, `strokeWidth`, `hasMaskFilter`,\n  /// `style`) are compared against the state of the [Paint] object after the\n  /// painting has completed, not at the time of the call. If the same [Paint]\n  /// object is reused multiple times, then this may not match the actual\n  /// arguments as they were seen by the method.\n  void path({ Iterable<Offset>? includes, Iterable<Offset>? excludes, Color? color, double? strokeWidth, bool? hasMaskFilter, PaintingStyle? style });\n\n  /// Indicates that a line is expected next.\n  ///\n  /// The next line is examined. Any arguments that are passed to this method\n  /// are compared to the actual [Canvas.drawLine] call's `p1`, `p2`, and\n  /// `paint` arguments, and any mismatches result in failure.\n  ///\n  /// If no call to [Canvas.drawLine] was made, then this results in failure.\n  ///\n  /// Any calls made between the last matched call (if any) and the\n  /// [Canvas.drawLine] call are ignored.\n  ///\n  /// The [Paint]-related arguments (`color`, `strokeWidth`, `hasMaskFilter`,\n  /// `style`) are compared against the state of the [Paint] object after the\n  /// painting has completed, not at the time of the call. If the same [Paint]\n  /// object is reused multiple times, then this may not match the actual\n  /// arguments as they were seen by the method.\n  void line({ Offset? p1, Offset? p2, Color? color, double? strokeWidth, bool? hasMaskFilter, PaintingStyle? style });\n\n  /// Indicates that an arc is expected next.\n  ///\n  /// The next arc is examined. Any arguments that are passed to this method\n  /// are compared to the actual [Canvas.drawArc] call's `paint` argument, and\n  /// any mismatches result in failure.\n  ///\n  /// If no call to [Canvas.drawArc] was made, then this results in failure.\n  ///\n  /// Any calls made between the last matched call (if any) and the\n  /// [Canvas.drawArc] call are ignored.\n  ///\n  /// The [Paint]-related arguments (`color`, `strokeWidth`, `hasMaskFilter`,\n  /// `style`) are compared against the state of the [Paint] object after the\n  /// painting has completed, not at the time of the call. If the same [Paint]\n  /// object is reused multiple times, then this may not match the actual\n  /// arguments as they were seen by the method.\n  void arc({ Rect? rect, Color? color, double? strokeWidth, bool? hasMaskFilter, PaintingStyle? style, StrokeCap? strokeCap });\n\n  /// Indicates that a paragraph is expected next.\n  ///\n  /// Calls are skipped until a call to [Canvas.drawParagraph] is found. Any\n  /// arguments that are passed to this method are compared to the actual\n  /// [Canvas.drawParagraph] call's argument, and any mismatches result in\n  /// failure.\n  ///",
      "    final TestGesture gesture = await _pointGestureToSearchBar(tester);\n    await tester.pump();\n    Text helperText = tester.widget(find.text('hint text'));\n    expect(helperText.style?.color, hoveredColor);\n\n    // On pressed.\n    await gesture.down(tester.getCenter(find.byType(SearchBar)));\n    await tester.pump();\n    helperText = tester.widget(find.text('hint text'));\n    expect(helperText.style?.color, pressedColor);\n    await gesture.removePointer();\n\n    // On focused.\n    await tester.tap(find.byType(SearchBar));\n    await tester.pump();\n    helperText = tester.widget(find.text('hint text'));\n    expect(helperText.style?.color, focusedColor);\n  });\n\n  testWidgets('SearchBar respects textStyle property', (WidgetTester tester) async {\n    final TextEditingController controller = TextEditingController(text: 'input text');\n    await tester.pumpWidget(\n      MaterialApp(\n        home: Center(\n          child: Material(\n            child: SearchBar(\n              controller: controller,\n              textStyle: MaterialStateProperty.resolveWith<TextStyle?>(_getTextStyle),\n            ),\n          ),\n        ),\n      ),\n    );\n\n    // On hovered.\n    final TestGesture gesture = await _pointGestureToSearchBar(tester);\n    await tester.pump();\n    EditableText inputText = tester.widget(find.text('input text'));\n    expect(inputText.style.color, hoveredColor);\n\n    // On pressed.\n    await gesture.down(tester.getCenter(find.byType(SearchBar)));\n    await tester.pump();\n    await gesture.removePointer();\n    inputText = tester.widget(find.text('input text'));\n    expect(inputText.style.color, pressedColor);\n\n    // On focused.\n    await tester.tap(find.byType(SearchBar));\n    await tester.pump();\n    inputText = tester.widget(find.text('input text'));\n    expect(inputText.style.color, focusedColor);\n  });\n\n  testWidgets('SearchBar respects textCapitalization property', (WidgetTester tester) async {\n    Widget buildSearchBar(TextCapitalization textCapitalization) {\n      return MaterialApp(\n        home: Center(\n          child: Material(\n            child: SearchBar(\n              textCapitalization: textCapitalization,\n            ),\n          ),\n        ),",
      "    expect(log, equals(<double>[0.5]));\n    log.clear();\n\n    min.removeListener(logValue);\n\n    first.value = 0.25;\n\n    expect(min.value, equals(0.25));\n    expect(log, isEmpty);\n  });\n\n  test('CurvedAnimation with bogus curve', () {\n    final AnimationController controller = AnimationController(\n      vsync: const TestVSync(),\n    );\n    final CurvedAnimation curved = CurvedAnimation(parent: controller, curve: const BogusCurve());\n    FlutterError? error;\n    try {\n      curved.value;\n    } on FlutterError catch (e) {\n      error = e;\n    }\n    expect(error, isNotNull);\n    expect(\n      error!.toStringDeep(),\n      // RegExp matcher is required here due to flutter web and flutter mobile generating\n      // slightly different floating point numbers\n      // in Flutter web 0.0 sometimes just appears as 0. or 0\n      matches(RegExp(r'''\nFlutterError\n   Invalid curve endpoint at \\d+(\\.\\d*)?\\.\n   Curves must map 0\\.0 to near zero and 1\\.0 to near one but\n   BogusCurve mapped \\d+(\\.\\d*)? to \\d+(\\.\\d*)?, which is near \\d+(\\.\\d*)?\\.\n''', multiLine: true)),\n    );\n  });\n\n  test('CurvedAnimation running with different forward and reverse durations.', () {\n    final AnimationController controller = AnimationController(\n      duration: const Duration(milliseconds: 100),\n      reverseDuration: const Duration(milliseconds: 50),\n      vsync: const TestVSync(),\n    );\n    final CurvedAnimation curved = CurvedAnimation(parent: controller, curve: Curves.linear, reverseCurve: Curves.linear);\n\n    controller.forward();\n    tick(Duration.zero);\n    tick(const Duration(milliseconds: 10));\n    expect(curved.value, moreOrLessEquals(0.1));\n    tick(const Duration(milliseconds: 20));\n    expect(curved.value, moreOrLessEquals(0.2));\n    tick(const Duration(milliseconds: 30));\n    expect(curved.value, moreOrLessEquals(0.3));\n    tick(const Duration(milliseconds: 40));\n    expect(curved.value, moreOrLessEquals(0.4));\n    tick(const Duration(milliseconds: 50));\n    expect(curved.value, moreOrLessEquals(0.5));\n    tick(const Duration(milliseconds: 60));\n    expect(curved.value, moreOrLessEquals(0.6));\n    tick(const Duration(milliseconds: 70));\n    expect(curved.value, moreOrLessEquals(0.7));\n    tick(const Duration(milliseconds: 80));\n    expect(curved.value, moreOrLessEquals(0.8));\n    tick(const Duration(milliseconds: 90));",
      "// Copyright 2014 The Flutter Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport 'package:flutter_devicelab/framework/devices.dart';\nimport 'package:flutter_devicelab/framework/framework.dart';\nimport 'package:flutter_devicelab/tasks/perf_tests.dart';\n\nFuture<void> main() async {\n  deviceOperatingSystem = DeviceOperatingSystem.android;\n  await task(createFullscreenTextfieldPerfTest());\n}\n",
      "// Copyright 2014 The Flutter Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n\nimport 'package:flutter/services.dart';\nimport 'package:flutter_test/flutter_test.dart';\n\nvoid main() {\n  TestWidgetsFlutterBinding.ensureInitialized();\n\n  test('System sound control test', () async {\n    final List<MethodCall> log = <MethodCall>[];\n\n    TestDefaultBinaryMessengerBinding.instance.defaultBinaryMessenger.setMockMethodCallHandler(SystemChannels.platform, (MethodCall methodCall) async {\n      log.add(methodCall);\n      return null;\n    });\n\n    await SystemSound.play(SystemSoundType.click);\n\n    expect(log, hasLength(1));\n    expect(log.single, isMethodCall('SystemSound.play', arguments: 'SystemSoundType.click'));\n  });\n}\n",
      "import 'package:flutter_test/flutter_test.dart';\n\nclass X { }\n\nclass Y extends X { }\n\nclass A<U extends X> {\n  U? u;\n}\n\nvoid main() {\n  test('Assignment through a covariant template throws exception', () {\n    final A<Y> ay = A<Y>();\n    final A<X> ayAsAx = ay;\n    expect(() {\n      ayAsAx.u = X();\n    }, throwsA(isA<TypeError>()));\n  });\n}\n",
      "            ],\n          ),\n        ),\n      ),\n    ));\n\n    // Bring keyboard up and verify that end of EditableText is not on screen.\n    await tester.showKeyboard(find.byType(EditableText));\n    await tester.pumpAndSettle();\n    scrollController.jumpTo(0.0);\n    await tester.pumpAndSettle();\n    final RenderBox render = tester.renderObject(find.byType(EditableText));\n    expect(render.size.height, greaterThan(500.0));\n    expect(scrollController.offset, 0.0);\n\n    // Enter text at end, which is off-screen.\n    final String textToEnter = '${controller.text} HELLO';\n    tester.testTextInput.updateEditingValue(TextEditingValue(\n      text: textToEnter,\n      selection: TextSelection.collapsed(offset: textToEnter.length),\n    ));\n    await tester.pumpAndSettle();\n\n    // Caret scrolls into view.\n    expect(find.byType(EditableText), findsOneWidget);\n    expect(render.size.height, greaterThan(500.0));\n    expect(scrollController.offset, greaterThan(0.0));\n  });\n\n  testWidgets('focused multi-line editable does not scroll to old position when non-collapsed selection set', (WidgetTester tester) async {\n    final ScrollController scrollController = ScrollController();\n    final TextEditingController controller = TextEditingController();\n    final FocusNode focusNode = FocusNode();\n    final String text = \"Start${'\\n' * 39}End\";\n    controller.value = TextEditingValue(text: text, selection: TextSelection.collapsed(offset: text.length - 3));\n\n    await tester.pumpWidget(MaterialApp(\n      home: Center(\n        child: SizedBox(\n          height: 300.0,\n          child: ListView(\n            controller: scrollController,\n            children: <Widget>[\n              EditableText(\n                backgroundCursorColor: Colors.grey,\n                maxLines: null, // multiline\n                controller: controller,\n                focusNode: focusNode,\n                style: textStyle,\n                cursorColor: cursorColor,\n              ),\n            ],\n          ),\n        ),\n      ),\n    ));\n\n    // Bring keyboard up and verify that end of EditableText is not on screen.\n    await tester.showKeyboard(find.byType(EditableText));\n    await tester.pumpAndSettle();\n\n    scrollController.jumpTo(0.0);\n    await tester.pumpAndSettle();\n    final RenderBox render = tester.renderObject(find.byType(EditableText));"
    ]
  },
  {
    "id": "pandas-dev/pandas",
    "org": "pandas-dev",
    "avatarURL": "https://avatars.githubusercontent.com/u/21206976?v=4",
    "name": "pandas-dev/pandas",
    "url": "https://github.com/pandas-dev/pandas",
    "lang": "Python",
    "star_num": 39630,
    "fork_num": 16660,
    "snippets": [
      "        base_df = getattr(self, frame).copy()\n        df_wide = concat([base_df.iloc[:100]] * 1000, ignore_index=True, axis=1)\n        self.df_wide = df_wide\n\n    def time_to_json_wide(self, orient, frame):\n        self.df_wide.to_json(self.fname, orient=orient)\n\n    def peakmem_to_json_wide(self, orient, frame):\n        self.df_wide.to_json(self.fname, orient=orient)\n\n\nclass ToJSONISO(BaseIO):\n    fname = \"__test__.json\"\n    params = [[\"split\", \"columns\", \"index\", \"values\", \"records\"]]\n    param_names = [\"orient\"]\n\n    def setup(self, orient):\n        N = 10**5\n        index = date_range(\"20000101\", periods=N, freq=\"H\")\n        timedeltas = timedelta_range(start=1, periods=N, freq=\"s\")\n        datetimes = date_range(start=1, periods=N, freq=\"s\")\n        self.df = DataFrame(\n            {\n                \"td_1\": timedeltas,\n                \"td_2\": timedeltas,\n                \"ts_1\": datetimes,\n                \"ts_2\": datetimes,\n            },\n            index=index,\n        )\n\n    def time_iso_format(self, orient):\n        self.df.to_json(orient=orient, date_format=\"iso\")\n\n\nclass ToJSONLines(BaseIO):\n    fname = \"__test__.json\"\n\n    def setup(self):\n        N = 10**5\n        ncols = 5\n        index = date_range(\"20000101\", periods=N, freq=\"H\")\n        timedeltas = timedelta_range(start=1, periods=N, freq=\"s\")\n        datetimes = date_range(start=1, periods=N, freq=\"s\")\n        ints = np.random.randint(100000000, size=N)\n        longints = sys.maxsize * np.random.randint(100000000, size=N)\n        floats = np.random.randn(N)\n        strings = tm.makeStringIndex(N)\n        self.df = DataFrame(np.random.randn(N, ncols), index=np.arange(N))\n        self.df_date_idx = DataFrame(np.random.randn(N, ncols), index=index)\n        self.df_td_int_ts = DataFrame(\n            {\n                \"td_1\": timedeltas,\n                \"td_2\": timedeltas,\n                \"int_1\": ints,\n                \"int_2\": ints,\n                \"ts_1\": datetimes,\n                \"ts_2\": datetimes,\n            },\n            index=index,\n        )\n        self.df_int_floats = DataFrame(\n            {\n                \"int_1\": ints,",
      "",
      "                self.rowcounter += 1\n\n            if index_label and self.header is not False:\n                yield ExcelCell(self.rowcounter - 1, 0, index_label, self.header_style)\n\n            # write index_values\n            index_values = self.df.index\n            if isinstance(self.df.index, PeriodIndex):\n                index_values = self.df.index.to_timestamp()\n\n            for idx, idxval in enumerate(index_values):\n                yield CssExcelCell(\n                    row=self.rowcounter + idx,\n                    col=0,\n                    val=idxval,\n                    style=self.header_style,\n                    css_styles=getattr(self.styler, \"ctx_index\", None),\n                    css_row=idx,\n                    css_col=0,\n                    css_converter=self.style_converter,\n                )\n            coloffset = 1\n        else:\n            coloffset = 0\n\n        yield from self._generate_body(coloffset)\n\n    def _format_hierarchical_rows(self) -> Iterable[ExcelCell]:\n        if self._has_aliases or self.header:\n            self.rowcounter += 1\n\n        gcolidx = 0\n\n        if self.index:\n            index_labels = self.df.index.names\n            # check for aliases\n            if self.index_label and isinstance(\n                self.index_label, (list, tuple, np.ndarray, Index)\n            ):\n                index_labels = self.index_label\n\n            # MultiIndex columns require an extra row\n            # with index names (blank if None) for\n            # unambiguous round-trip, unless not merging,\n            # in which case the names all go on one row Issue #11328\n            if isinstance(self.columns, MultiIndex) and self.merge_cells:\n                self.rowcounter += 1\n\n            # if index labels are not empty go ahead and dump\n            if com.any_not_none(*index_labels) and self.header is not False:\n                for cidx, name in enumerate(index_labels):\n                    yield ExcelCell(self.rowcounter - 1, cidx, name, self.header_style)\n\n            if self.merge_cells:\n                # Format hierarchical rows as merged cells.\n                level_strs = self.df.index.format(\n                    sparsify=True, adjoin=False, names=False\n                )\n                level_lengths = get_level_lengths(level_strs)\n\n                for spans, levels, level_codes in zip(\n                    level_lengths, self.df.index.levels, self.df.index.codes\n                ):\n                    values = levels.take(",
      "    ],\n)\ndef test_transform_listlike(axis, float_frame, ops, names):\n    # GH 35964\n    other_axis = 1 if axis in {0, \"index\"} else 0\n    with np.errstate(all=\"ignore\"):\n        expected = zip_frames([op(float_frame) for op in ops], axis=other_axis)\n    if axis in {0, \"index\"}:\n        expected.columns = MultiIndex.from_product([float_frame.columns, names])\n    else:\n        expected.index = MultiIndex.from_product([float_frame.index, names])\n    result = float_frame.transform(ops, axis=axis)\n    tm.assert_frame_equal(result, expected)\n\n\n@pytest.mark.parametrize(\"ops\", [[], np.array([])])\ndef test_transform_empty_listlike(float_frame, ops, frame_or_series):\n    obj = unpack_obj(float_frame, frame_or_series, 0)\n\n    with pytest.raises(ValueError, match=\"No transform functions were provided\"):\n        obj.transform(ops)\n\n\ndef test_transform_listlike_func_with_args():\n    # GH 50624\n    df = DataFrame({\"x\": [1, 2, 3]})\n\n    def foo1(x, a=1, c=0):\n        return x + a + c\n\n    def foo2(x, b=2, c=0):\n        return x + b + c\n\n    msg = r\"foo1\\(\\) got an unexpected keyword argument 'b'\"\n    with pytest.raises(TypeError, match=msg):\n        df.transform([foo1, foo2], 0, 3, b=3, c=4)\n\n    result = df.transform([foo1, foo2], 0, 3, c=4)\n    expected = DataFrame(\n        [[8, 8], [9, 9], [10, 10]],\n        columns=MultiIndex.from_tuples([(\"x\", \"foo1\"), (\"x\", \"foo2\")]),\n    )\n    tm.assert_frame_equal(result, expected)\n\n\n@pytest.mark.parametrize(\"box\", [dict, Series])\ndef test_transform_dictlike(axis, float_frame, box):\n    # GH 35964\n    if axis in (0, \"index\"):\n        e = float_frame.columns[0]\n        expected = float_frame[[e]].transform(np.abs)\n    else:\n        e = float_frame.index[0]\n        expected = float_frame.iloc[[0]].transform(np.abs)\n    result = float_frame.transform(box({e: np.abs}), axis=axis)\n    tm.assert_frame_equal(result, expected)\n\n\ndef test_transform_dictlike_mixed():\n    # GH 40018 - mix of lists and non-lists in values of a dictionary\n    df = DataFrame({\"a\": [1, 2], \"b\": [1, 4], \"c\": [1, 4]})\n    result = df.transform({\"b\": [\"sqrt\", \"abs\"], \"c\": \"sqrt\"})\n    expected = DataFrame(\n        [[1.0, 1, 1.0], [2.0, 4, 2.0]],",
      "            return self.start\n\n        return self.start + self.step * no_steps\n\n    def min(self, axis=None, skipna: bool = True, *args, **kwargs) -> int:\n        \"\"\"The minimum value of the RangeIndex\"\"\"\n        nv.validate_minmax_axis(axis)\n        nv.validate_min(args, kwargs)\n        return self._minmax(\"min\")\n\n    def max(self, axis=None, skipna: bool = True, *args, **kwargs) -> int:\n        \"\"\"The maximum value of the RangeIndex\"\"\"\n        nv.validate_minmax_axis(axis)\n        nv.validate_max(args, kwargs)\n        return self._minmax(\"max\")\n\n    def argsort(self, *args, **kwargs) -> npt.NDArray[np.intp]:\n        \"\"\"\n        Returns the indices that would sort the index and its\n        underlying data.\n\n        Returns\n        -------\n        np.ndarray[np.intp]\n\n        See Also\n        --------\n        numpy.ndarray.argsort\n        \"\"\"\n        ascending = kwargs.pop(\"ascending\", True)  # EA compat\n        kwargs.pop(\"kind\", None)  # e.g. \"mergesort\" is irrelevant\n        nv.validate_argsort(args, kwargs)\n\n        if self._range.step > 0:\n            result = np.arange(len(self), dtype=np.intp)\n        else:\n            result = np.arange(len(self) - 1, -1, -1, dtype=np.intp)\n\n        if not ascending:\n            result = result[::-1]\n        return result\n\n    def factorize(\n        self,\n        sort: bool = False,\n        use_na_sentinel: bool = True,\n    ) -> tuple[npt.NDArray[np.intp], RangeIndex]:\n        codes = np.arange(len(self), dtype=np.intp)\n        uniques = self\n        if sort and self.step < 0:\n            codes = codes[::-1]\n            uniques = uniques[::-1]\n        return codes, uniques\n\n    def equals(self, other: object) -> bool:\n        \"\"\"\n        Determines if two Index objects contain the same elements.\n        \"\"\"\n        if isinstance(other, RangeIndex):\n            return self._range == other._range\n        return super().equals(other)\n\n    def sort_values(\n        self,",
      "        assert not obj.is_monotonic_decreasing\n        assert obj.is_unique\n",
      "    expected = DataFrame({\"a\": [1.5, 5.5], \"b\": 1})\n    tm.assert_frame_equal(df, expected)\n\n\ndef test_fillna_interval_inplace_reference(using_copy_on_write):\n    # Set dtype explicitly to avoid implicit cast when setting nan\n    ser = Series(\n        interval_range(start=0, end=5), name=\"a\", dtype=\"interval[float64, right]\"\n    )\n    ser.iloc[1] = np.nan\n\n    ser_orig = ser.copy()\n    view = ser[:]\n    ser.fillna(value=Interval(left=0, right=5), inplace=True)\n\n    if using_copy_on_write:\n        assert not np.shares_memory(\n            get_array(ser, \"a\").left.values, get_array(view, \"a\").left.values\n        )\n        tm.assert_series_equal(view, ser_orig)\n    else:\n        assert np.shares_memory(\n            get_array(ser, \"a\").left.values, get_array(view, \"a\").left.values\n        )\n\n\ndef test_fillna_series_empty_arg(using_copy_on_write):\n    ser = Series([1, np.nan, 2])\n    ser_orig = ser.copy()\n    result = ser.fillna({})\n\n    if using_copy_on_write:\n        assert np.shares_memory(get_array(ser), get_array(result))\n    else:\n        assert not np.shares_memory(get_array(ser), get_array(result))\n\n    ser.iloc[0] = 100.5\n    tm.assert_series_equal(ser_orig, result)\n\n\ndef test_fillna_series_empty_arg_inplace(using_copy_on_write):\n    ser = Series([1, np.nan, 2])\n    arr = get_array(ser)\n    ser.fillna({}, inplace=True)\n\n    assert np.shares_memory(get_array(ser), arr)\n    if using_copy_on_write:\n        assert ser._mgr._has_no_reference(0)\n\n\ndef test_fillna_ea_noop_shares_memory(\n    using_copy_on_write, any_numeric_ea_and_arrow_dtype\n):\n    df = DataFrame({\"a\": [1, NA, 3], \"b\": 1}, dtype=any_numeric_ea_and_arrow_dtype)\n    df_orig = df.copy()\n    df2 = df.fillna(100)\n\n    assert not np.shares_memory(get_array(df, \"a\"), get_array(df2, \"a\"))\n\n    if using_copy_on_write:\n        assert np.shares_memory(get_array(df, \"b\"), get_array(df2, \"b\"))\n        assert not df2._mgr._has_no_reference(1)\n    elif isinstance(df.dtypes.iloc[0], ArrowDtype):\n        # arrow is immutable, so no-ops do not need to copy underlying array",
      "# -----------------------------------------------------------------------------\n# Copy/view behaviour for the values that are set in a DataFrame\n\n\ndef test_set_column_with_array():\n    # Case: setting an array as a new column (df[col] = arr) copies that data\n    df = DataFrame({\"a\": [1, 2, 3], \"b\": [4, 5, 6]})\n    arr = np.array([1, 2, 3], dtype=\"int64\")\n\n    df[\"c\"] = arr\n\n    # the array data is copied\n    assert not np.shares_memory(get_array(df, \"c\"), arr)\n    # and thus modifying the array does not modify the DataFrame\n    arr[0] = 0\n    tm.assert_series_equal(df[\"c\"], Series([1, 2, 3], name=\"c\"))\n\n\ndef test_set_column_with_series(using_copy_on_write):\n    # Case: setting a series as a new column (df[col] = s) copies that data\n    # (with delayed copy with CoW)\n    df = DataFrame({\"a\": [1, 2, 3], \"b\": [4, 5, 6]})\n    ser = Series([1, 2, 3])\n\n    df[\"c\"] = ser\n\n    if using_copy_on_write:\n        assert np.shares_memory(get_array(df, \"c\"), get_array(ser))\n    else:\n        # the series data is copied\n        assert not np.shares_memory(get_array(df, \"c\"), get_array(ser))\n\n    # and modifying the series does not modify the DataFrame\n    ser.iloc[0] = 0\n    assert ser.iloc[0] == 0\n    tm.assert_series_equal(df[\"c\"], Series([1, 2, 3], name=\"c\"))\n\n\ndef test_set_column_with_index(using_copy_on_write):\n    # Case: setting an index as a new column (df[col] = idx) copies that data\n    df = DataFrame({\"a\": [1, 2, 3], \"b\": [4, 5, 6]})\n    idx = Index([1, 2, 3])\n\n    df[\"c\"] = idx\n\n    # the index data is copied\n    assert not np.shares_memory(get_array(df, \"c\"), idx.values)\n\n    idx = RangeIndex(1, 4)\n    arr = idx.values\n\n    df[\"d\"] = idx\n\n    assert not np.shares_memory(get_array(df, \"d\"), arr)\n\n\ndef test_set_columns_with_dataframe(using_copy_on_write):\n    # Case: setting a DataFrame as new columns copies that data\n    # (with delayed copy with CoW)\n    df = DataFrame({\"a\": [1, 2, 3], \"b\": [4, 5, 6]})\n    df2 = DataFrame({\"c\": [7, 8, 9], \"d\": [10, 11, 12]})\n\n    df[[\"c\", \"d\"]] = df2\n",
      "\n    if as_index:\n        tm.assert_series_equal(left, right, check_names=False)\n    else:\n        tm.assert_frame_equal(left, right, check_names=False)\n    tm.assert_frame_equal(df, original_df)\n\n\ndef test_nunique():\n    df = DataFrame({\"A\": list(\"abbacc\"), \"B\": list(\"abxacc\"), \"C\": list(\"abbacx\")})\n\n    expected = DataFrame({\"A\": list(\"abc\"), \"B\": [1, 2, 1], \"C\": [1, 1, 2]})\n    result = df.groupby(\"A\", as_index=False).nunique()\n    tm.assert_frame_equal(result, expected)\n\n    # as_index\n    expected.index = list(\"abc\")\n    expected.index.name = \"A\"\n    expected = expected.drop(columns=\"A\")\n    result = df.groupby(\"A\").nunique()\n    tm.assert_frame_equal(result, expected)\n\n    # with na\n    result = df.replace({\"x\": None}).groupby(\"A\").nunique(dropna=False)\n    tm.assert_frame_equal(result, expected)\n\n    # dropna\n    expected = DataFrame({\"B\": [1] * 3, \"C\": [1] * 3}, index=list(\"abc\"))\n    expected.index.name = \"A\"\n    result = df.replace({\"x\": None}).groupby(\"A\").nunique()\n    tm.assert_frame_equal(result, expected)\n\n\ndef test_nunique_with_object():\n    # GH 11077\n    data = DataFrame(\n        [\n            [100, 1, \"Alice\"],\n            [200, 2, \"Bob\"],\n            [300, 3, \"Charlie\"],\n            [-400, 4, \"Dan\"],\n            [500, 5, \"Edith\"],\n        ],\n        columns=[\"amount\", \"id\", \"name\"],\n    )\n\n    result = data.groupby([\"id\", \"amount\"])[\"name\"].nunique()\n    index = MultiIndex.from_arrays([data.id, data.amount])\n    expected = Series([1] * 5, name=\"name\", index=index)\n    tm.assert_series_equal(result, expected)\n\n\ndef test_nunique_with_empty_series():\n    # GH 12553\n    data = Series(name=\"name\", dtype=object)\n    result = data.groupby(level=0).nunique()\n    expected = Series(name=\"name\", dtype=\"int64\")\n    tm.assert_series_equal(result, expected)\n\n\ndef test_nunique_with_timegrouper():\n    # GH 13453\n    test = DataFrame(\n        {",
      "\"\"\"\nPublic testing utility functions.\n\"\"\"\n\n\nfrom pandas._testing import (\n    assert_extension_array_equal,\n    assert_frame_equal,\n    assert_index_equal,\n    assert_series_equal,\n)\n\n__all__ = [\n    \"assert_extension_array_equal\",\n    \"assert_frame_equal\",\n    \"assert_series_equal\",\n    \"assert_index_equal\",\n]\n"
    ]
  },
  {
    "id": "hakimel/reveal.js",
    "org": "hakimel",
    "avatarURL": "https://avatars.githubusercontent.com/u/629429?v=4",
    "name": "hakimel/reveal.js",
    "url": "https://github.com/hakimel/reveal.js",
    "lang": "JavaScript",
    "star_num": 64523,
    "fork_num": 16669,
    "snippets": [
      "\n\t\t// Prevent all other events when a modifier is pressed\n\t\tlet unusedModifier = \t!( isNavigationKey && event.shiftKey || event.altKey ) &&\n\t\t\t\t\t\t\t\t( event.shiftKey || event.altKey || event.ctrlKey || event.metaKey );\n\n\t\t// Disregard the event if there's a focused element or a\n\t\t// keyboard modifier key is present\n\t\tif( activeElementIsCE || activeElementIsInput || activeElementIsNotes || unusedModifier ) return;\n\n\t\t// While paused only allow resume keyboard events; 'b', 'v', '.'\n\t\tlet resumeKeyCodes = [66,86,190,191];\n\t\tlet key;\n\n\t\t// Custom key bindings for togglePause should be able to resume\n\t\tif( typeof config.keyboard === 'object' ) {\n\t\t\tfor( key in config.keyboard ) {\n\t\t\t\tif( config.keyboard[key] === 'togglePause' ) {\n\t\t\t\t\tresumeKeyCodes.push( parseInt( key, 10 ) );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif( this.Reveal.isPaused() && resumeKeyCodes.indexOf( keyCode ) === -1 ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Use linear navigation if we're configured to OR if\n\t\t// the presentation is one-dimensional\n\t\tlet useLinearMode = config.navigationMode === 'linear' || !this.Reveal.hasHorizontalSlides() || !this.Reveal.hasVerticalSlides();\n\n\t\tlet triggered = false;\n\n\t\t// 1. User defined key bindings\n\t\tif( typeof config.keyboard === 'object' ) {\n\n\t\t\tfor( key in config.keyboard ) {\n\n\t\t\t\t// Check if this binding matches the pressed key\n\t\t\t\tif( parseInt( key, 10 ) === keyCode ) {\n\n\t\t\t\t\tlet value = config.keyboard[ key ];\n\n\t\t\t\t\t// Callback function\n\t\t\t\t\tif( typeof value === 'function' ) {\n\t\t\t\t\t\tvalue.apply( null, [ event ] );\n\t\t\t\t\t}\n\t\t\t\t\t// String shortcuts to reveal.js API\n\t\t\t\t\telse if( typeof value === 'string' && typeof this.Reveal[ value ] === 'function' ) {\n\t\t\t\t\t\tthis.Reveal[ value ].call();\n\t\t\t\t\t}\n\n\t\t\t\t\ttriggered = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// 2. Registered custom key bindings\n\t\tif( triggered === false ) {\n\n\t\t\tfor( key in this.bindings ) {\n",
      "!function(t,e){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define(e):(t=\"undefined\"!=typeof globalThis?globalThis:t||self).RevealNotes=e()}(this,(function(){\"use strict\";function t(){return{baseUrl:null,breaks:!1,extensions:null,gfm:!0,headerIds:!0,headerPrefix:\"\",highlight:null,langPrefix:\"language-\",mangle:!0,pedantic:!1,renderer:null,sanitize:!1,sanitizer:null,silent:!1,smartLists:!1,smartypants:!1,tokenizer:null,walkTokens:null,xhtml:!1}}let e={baseUrl:null,breaks:!1,extensions:null,gfm:!0,headerIds:!0,headerPrefix:\"\",highlight:null,langPrefix:\"language-\",mangle:!0,pedantic:!1,renderer:null,sanitize:!1,sanitizer:null,silent:!1,smartLists:!1,smartypants:!1,tokenizer:null,walkTokens:null,xhtml:!1};const n=/[&<>\"']/,i=/[&<>\"']/g,s=/[<>\"']|&(?!#?\\w+;)/,r=/[<>\"']|&(?!#?\\w+;)/g,a={\"&\":\"&amp;\",\"<\":\"&lt;\",\">\":\"&gt;\",'\"':\"&quot;\",\"'\":\"&#39;\"},l=t=>a[t];function o(t,e){if(e){if(n.test(t))return t.replace(i,l)}else if(s.test(t))return t.replace(r,l);return t}const c=/&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/gi;function p(t){return t.replace(c,((t,e)=>\"colon\"===(e=e.toLowerCase())?\":\":\"#\"===e.charAt(0)?\"x\"===e.charAt(1)?String.fromCharCode(parseInt(e.substring(2),16)):String.fromCharCode(+e.substring(1)):\"\"))}const u=/(^|[^\\[])\\^/g;function d(t,e){t=t.source||t,e=e||\"\";const n={replace:(e,i)=>(i=(i=i.source||i).replace(u,\"$1\"),t=t.replace(e,i),n),getRegex:()=>new RegExp(t,e)};return n}const h=/[^\\w:]/g,g=/^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;function m(t,e,n){if(t){let t;try{t=decodeURIComponent(p(n)).replace(h,\"\").toLowerCase()}catch(t){return null}if(0===t.indexOf(\"javascript:\")||0===t.indexOf(\"vbscript:\")||0===t.indexOf(\"data:\"))return null}e&&!g.test(n)&&(n=function(t,e){f[\" \"+t]||(k.test(t)?f[\" \"+t]=t+\"/\":f[\" \"+t]=S(t,\"/\",!0));t=f[\" \"+t];const n=-1===t.indexOf(\":\");return\"//\"===e.substring(0,2)?n?e:t.replace(w,\"$1\")+e:\"/\"===e.charAt(0)?n?e:t.replace(x,\"$1\")+e:t+e}(e,n));try{n=encodeURI(n).replace(/%25/g,\"%\")}catch(t){return null}return n}const f={},k=/^[^:]+:\\/*[^/]*$/,w=/^([^:]+:)[\\s\\S]*$/,x=/^([^:]+:\\/*[^/]*)[\\s\\S]*$/;const b={exec:function(){}};function y(t){let e,n,i=1;for(;i<arguments.length;i++)for(n in e=arguments[i],e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t}function v(t,e){const n=t.replace(/\\|/g,((t,e,n)=>{let i=!1,s=e;for(;--s>=0&&\"\\\\\"===n[s];)i=!i;return i?\"|\":\" |\"})).split(/ \\|/);let i=0;if(n[0].trim()||n.shift(),n.length>0&&!n[n.length-1].trim()&&n.pop(),n.length>e)n.splice(e);else for(;n.length<e;)n.push(\"\");for(;i<n.length;i++)n[i]=n[i].trim().replace(/\\\\\\|/g,\"|\");return n}function S(t,e,n){const i=t.length;if(0===i)return\"\";let s=0;for(;s<i;){const r=t.charAt(i-s-1);if(r!==e||n){if(r===e||!n)break;s++}else s++}return t.substr(0,i-s)}function T(t){t&&t.sanitize&&!t.silent&&console.warn(\"marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options\")}function _(t,e){if(e<1)return\"\";let n=\"\";for(;e>1;)1&e&&(n+=t),e>>=1,t+=t;return n+t}function z(t,e,n,i){const s=e.href,r=e.title?o(e.title):null,a=t[1].replace(/\\\\([\\[\\]])/g,\"$1\");if(\"!\"!==t[0].charAt(0)){i.state.inLink=!0;const t={type:\"link\",raw:n,href:s,title:r,text:a,tokens:i.inlineTokens(a,[])};return i.state.inLink=!1,t}return{type:\"image\",raw:n,href:s,title:r,text:o(a)}}class A{constructor(t){this.options=t||e}space(t){const e=this.rules.block.newline.exec(t);if(e&&e[0].length>0)return{type:\"space\",raw:e[0]}}code(t){const e=this.rules.block.code.exec(t);if(e){const t=e[0].replace(/^ {1,4}/gm,\"\");return{type:\"code\",raw:e[0],codeBlockStyle:\"indented\",text:this.options.pedantic?t:S(t,\"\\n\")}}}fences(t){const e=this.rules.block.fences.exec(t);if(e){const t=e[0],n=function(t,e){const n=t.match(/^(\\s+)(?:```)/);if(null===n)return e;const i=n[1];return e.split(\"\\n\").map((t=>{const e=t.match(/^\\s+/);if(null===e)return t;const[n]=e;return n.length>=i.length?t.slice(i.length):t})).join(\"\\n\")}(t,e[3]||\"\");return{type:\"code\",raw:t,lang:e[2]?e[2].trim():e[2],text:n}}}heading(t){const e=this.rules.block.heading.exec(t);if(e){let t=e[2].trim();if(/#$/.test(t)){const e=S(t,\"#\");this.options.pedantic?t=e.trim():e&&!/ $/.test(e)||(t=e.trim())}const n={type:\"heading\",raw:e[0],depth:e[1].length,text:t,tokens:[]};return this.lexer.inline(n.text,n.tokens),n}}hr(t){const e=this.rules.block.hr.exec(t);if(e)return{type:\"hr\",raw:e[0]}}blockquote(t){const e=this.rules.block.blockquote.exec(t);if(e){const t=e[0].replace(/^ *> ?/gm,\"\");return{type:\"blockquote\",raw:e[0],tokens:this.lexer.blockTokens(t,[]),text:t}}}list(t){let e=this.rules.block.list.exec(t);if(e){let n,i,s,r,a,l,o,c,p,u,d,h,g=e[1].trim();const m=g.length>1,f={type:\"list\",raw:\"\",ordered:m,start:m?+g.slice(0,-1):\"\",loose:!1,items:[]};g=m?`\\\\d{1,9}\\\\${g.slice(-1)}`:`\\\\${g}`,this.options.pedantic&&(g=m?g:\"[*+-]\");const k=new RegExp(`^( {0,3}${g})((?: [^\\\\n]*)?(?:\\\\n|$))`);for(;t&&(h=!1,e=k.exec(t))&&!this.rules.block.hr.test(t);){if(n=e[0],t=t.substring(n.length),c=e[2].split(\"\\n\",1)[0],p=t.split(\"\\n\",1)[0],this.options.pedantic?(r=2,d=c.trimLeft()):(r=e[2].search(/[^ ]/),r=r>4?1:r,d=c.slice(r),r+=e[1].length),l=!1,!c&&/^ *$/.test(p)&&(n+=p+\"\\n\",t=t.substring(p.length+1),h=!0),!h){const e=new RegExp(`^ {0,${Math.min(3,r-1)}}(?:[*+-]|\\\\d{1,9}[.)])`);for(;t&&(u=t.split(\"\\n\",1)[0],c=u,this.options.pedantic&&(c=c.replace(/^ {1,4}(?=( {4})*[^ ])/g,\"  \")),!e.test(c));){if(c.search(/[^ ]/)>=r||!c.trim())d+=\"\\n\"+c.slice(r);else{if(l)break;d+=\"\\n\"+c}l||c.trim()||(l=!0),n+=u+\"\\n\",t=t.substring(u.length+1)}}f.loose||(o?f.loose=!0:/\\n *\\n *$/.test(n)&&(o=!0)),this.options.gfm&&(i=/^\\[[ xX]\\] /.exec(d),i&&(s=\"[ ] \"!==i[0],d=d.replace(/^\\[[ xX]\\] +/,\"\"))),f.items.push({type:\"list_item\",raw:n,task:!!i,checked:s,loose:!1,text:d}),f.raw+=n}f.items[f.items.length-1].raw=n.trimRight(),f.items[f.items.length-1].text=d.trimRight(),f.raw=f.raw.trimRight();const w=f.items.length;for(a=0;a<w;a++){this.lexer.state.top=!1,f.items[a].tokens=this.lexer.blockTokens(f.items[a].text,[]);const t=f.items[a].tokens.filter((t=>\"space\"===t.type)),e=t.every((t=>{const e=t.raw.split(\"\");let n=0;for(const t of e)if(\"\\n\"===t&&(n+=1),n>1)return!0;return!1}));!f.loose&&t.length&&e&&(f.loose=!0,f.items[a].loose=!0)}return f}}html(t){const e=this.rules.block.html.exec(t);if(e){const t={type:\"html\",raw:e[0],pre:!this.options.sanitizer&&(\"pre\"===e[1]||\"script\"===e[1]||\"style\"===e[1]),text:e[0]};return this.options.sanitize&&(t.type=\"paragraph\",t.text=this.options.sanitizer?this.options.sanitizer(e[0]):o(e[0]),t.tokens=[],this.lexer.inline(t.text,t.tokens)),t}}def(t){const e=this.rules.block.def.exec(t);if(e){e[3]&&(e[3]=e[3].substring(1,e[3].length-1));return{type:\"def\",tag:e[1].toLowerCase().replace(/\\s+/g,\" \"),raw:e[0],href:e[2],title:e[3]}}}table(t){const e=this.rules.block.table.exec(t);if(e){const t={type:\"table\",header:v(e[1]).map((t=>({text:t}))),align:e[2].replace(/^ *|\\| *$/g,\"\").split(/ *\\| */),rows:e[3]&&e[3].trim()?e[3].replace(/\\n[ \\t]*$/,\"\").split(\"\\n\"):[]};if(t.header.length===t.align.length){t.raw=e[0];let n,i,s,r,a=t.align.length;for(n=0;n<a;n++)/^ *-+: *$/.test(t.align[n])?t.align[n]=\"right\":/^ *:-+: *$/.test(t.align[n])?t.align[n]=\"center\":/^ *:-+ *$/.test(t.align[n])?t.align[n]=\"left\":t.align[n]=null;for(a=t.rows.length,n=0;n<a;n++)t.rows[n]=v(t.rows[n],t.header.length).map((t=>({text:t})));for(a=t.header.length,i=0;i<a;i++)t.header[i].tokens=[],this.lexer.inlineTokens(t.header[i].text,t.header[i].tokens);for(a=t.rows.length,i=0;i<a;i++)for(r=t.rows[i],s=0;s<r.length;s++)r[s].tokens=[],this.lexer.inlineTokens(r[s].text,r[s].tokens);return t}}}lheading(t){const e=this.rules.block.lheading.exec(t);if(e){const t={type:\"heading\",raw:e[0],depth:\"=\"===e[2].charAt(0)?1:2,text:e[1],tokens:[]};return this.lexer.inline(t.text,t.tokens),t}}paragraph(t){const e=this.rules.block.paragraph.exec(t);if(e){const t={type:\"paragraph\",raw:e[0],text:\"\\n\"===e[1].charAt(e[1].length-1)?e[1].slice(0,-1):e[1],tokens:[]};return this.lexer.inline(t.text,t.tokens),t}}text(t){const e=this.rules.block.text.exec(t);if(e){const t={type:\"text\",raw:e[0],text:e[0],tokens:[]};return this.lexer.inline(t.text,t.tokens),t}}escape(t){const e=this.rules.inline.escape.exec(t);if(e)return{type:\"escape\",raw:e[0],text:o(e[1])}}tag(t){const e=this.rules.inline.tag.exec(t);if(e)return!this.lexer.state.inLink&&/^<a /i.test(e[0])?this.lexer.state.inLink=!0:this.lexer.state.inLink&&/^<\\/a>/i.test(e[0])&&(this.lexer.state.inLink=!1),!this.lexer.state.inRawBlock&&/^<(pre|code|kbd|script)(\\s|>)/i.test(e[0])?this.lexer.state.inRawBlock=!0:this.lexer.state.inRawBlock&&/^<\\/(pre|code|kbd|script)(\\s|>)/i.test(e[0])&&(this.lexer.state.inRawBlock=!1),{type:this.options.sanitize?\"text\":\"html\",raw:e[0],inLink:this.lexer.state.inLink,inRawBlock:this.lexer.state.inRawBlock,text:this.options.sanitize?this.options.sanitizer?this.options.sanitizer(e[0]):o(e[0]):e[0]}}link(t){const e=this.rules.inline.link.exec(t);if(e){const t=e[2].trim();if(!this.options.pedantic&&/^</.test(t)){if(!/>$/.test(t))return;const e=S(t.slice(0,-1),\"\\\\\");if((t.length-e.length)%2==0)return}else{const t=function(t,e){if(-1===t.indexOf(e[1]))return-1;const n=t.length;let i=0,s=0;for(;s<n;s++)if(\"\\\\\"===t[s])s++;else if(t[s]===e[0])i++;else if(t[s]===e[1]&&(i--,i<0))return s;return-1}(e[2],\"()\");if(t>-1){const n=(0===e[0].indexOf(\"!\")?5:4)+e[1].length+t;e[2]=e[2].substring(0,t),e[0]=e[0].substring(0,n).trim(),e[3]=\"\"}}let n=e[2],i=\"\";if(this.options.pedantic){const t=/^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(n);t&&(n=t[1],i=t[3])}else i=e[3]?e[3].slice(1,-1):\"\";return n=n.trim(),/^</.test(n)&&(n=this.options.pedantic&&!/>$/.test(t)?n.slice(1):n.slice(1,-1)),z(e,{href:n?n.replace(this.rules.inline._escapes,\"$1\"):n,title:i?i.replace(this.rules.inline._escapes,\"$1\"):i},e[0],this.lexer)}}reflink(t,e){let n;if((n=this.rules.inline.reflink.exec(t))||(n=this.rules.inline.nolink.exec(t))){let t=(n[2]||n[1]).replace(/\\s+/g,\" \");if(t=e[t.toLowerCase()],!t||!t.href){const t=n[0].charAt(0);return{type:\"text\",raw:t,text:t}}return z(n,t,n[0],this.lexer)}}emStrong(t,e,n=\"\"){let i=this.rules.inline.emStrong.lDelim.exec(t);if(!i)return;if(i[3]&&n.match(/[\\p{L}\\p{N}]/u))return;const s=i[1]||i[2]||\"\";if(!s||s&&(\"\"===n||this.rules.inline.punctuation.exec(n))){const n=i[0].length-1;let s,r,a=n,l=0;const o=\"*\"===i[0][0]?this.rules.inline.emStrong.rDelimAst:this.rules.inline.emStrong.rDelimUnd;for(o.lastIndex=0,e=e.slice(-1*t.length+n);null!=(i=o.exec(e));){if(s=i[1]||i[2]||i[3]||i[4]||i[5]||i[6],!s)continue;if(r=s.length,i[3]||i[4]){a+=r;continue}if((i[5]||i[6])&&n%3&&!((n+r)%3)){l+=r;continue}if(a-=r,a>0)continue;if(r=Math.min(r,r+a+l),Math.min(n,r)%2){const e=t.slice(1,n+i.index+r);return{type:\"em\",raw:t.slice(0,n+i.index+r+1),text:e,tokens:this.lexer.inlineTokens(e,[])}}const e=t.slice(2,n+i.index+r-1);return{type:\"strong\",raw:t.slice(0,n+i.index+r+1),text:e,tokens:this.lexer.inlineTokens(e,[])}}}}codespan(t){const e=this.rules.inline.code.exec(t);if(e){let t=e[2].replace(/\\n/g,\" \");const n=/[^ ]/.test(t),i=/^ /.test(t)&&/ $/.test(t);return n&&i&&(t=t.substring(1,t.length-1)),t=o(t,!0),{type:\"codespan\",raw:e[0],text:t}}}br(t){const e=this.rules.inline.br.exec(t);if(e)return{type:\"br\",raw:e[0]}}del(t){const e=this.rules.inline.del.exec(t);if(e)return{type:\"del\",raw:e[0],text:e[2],tokens:this.lexer.inlineTokens(e[2],[])}}autolink(t,e){const n=this.rules.inline.autolink.exec(t);if(n){let t,i;return\"@\"===n[2]?(t=o(this.options.mangle?e(n[1]):n[1]),i=\"mailto:\"+t):(t=o(n[1]),i=t),{type:\"link\",raw:n[0],text:t,href:i,tokens:[{type:\"text\",raw:t,text:t}]}}}url(t,e){let n;if(n=this.rules.inline.url.exec(t)){let t,i;if(\"@\"===n[2])t=o(this.options.mangle?e(n[0]):n[0]),i=\"mailto:\"+t;else{let e;do{e=n[0],n[0]=this.rules.inline._backpedal.exec(n[0])[0]}while(e!==n[0]);t=o(n[0]),i=\"www.\"===n[1]?\"http://\"+t:t}return{type:\"link\",raw:n[0],text:t,href:i,tokens:[{type:\"text\",raw:t,text:t}]}}}inlineText(t,e){const n=this.rules.inline.text.exec(t);if(n){let t;return t=this.lexer.state.inRawBlock?this.options.sanitize?this.options.sanitizer?this.options.sanitizer(n[0]):o(n[0]):n[0]:o(this.options.smartypants?e(n[0]):n[0]),{type:\"text\",raw:n[0],text:t}}}}const E={newline:/^(?: *(?:\\n|$))+/,code:/^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/,fences:/^ {0,3}(`{3,}(?=[^`\\n]*\\n)|~{3,})([^\\n]*)\\n(?:|([\\s\\S]*?)\\n)(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/,hr:/^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)/,heading:/^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/,blockquote:/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,list:/^( {0,3}bull)( [^\\n]+?)?(?:\\n|$)/,html:\"^ {0,3}(?:<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)|comment[^\\\\n]*(\\\\n+|$)|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$))\",def:/^ {0,3}\\[(label)\\]: *(?:\\n *)?<?([^\\s>]+)>?(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/,table:b,lheading:/^([^\\n]+)\\n {0,3}(=+|-+) *(?:\\n+|$)/,_paragraph:/^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/,text:/^[^\\n]+/,_label:/(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/,_title:/(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/};E.def=d(E.def).replace(\"label\",E._label).replace(\"title\",E._title).getRegex(),E.bullet=/(?:[*+-]|\\d{1,9}[.)])/,E.listItemStart=d(/^( *)(bull) */).replace(\"bull\",E.bullet).getRegex(),E.list=d(E.list).replace(/bull/g,E.bullet).replace(\"hr\",\"\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))\").replace(\"def\",\"\\\\n+(?=\"+E.def.source+\")\").getRegex(),E._tag=\"address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul\",E._comment=/<!--(?!-?>)[\\s\\S]*?(?:-->|$)/,E.html=d(E.html,\"i\").replace(\"comment\",E._comment).replace(\"tag\",E._tag).replace(\"attribute\",/ +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/).getRegex(),E.paragraph=d(E._paragraph).replace(\"hr\",E.hr).replace(\"heading\",\" {0,3}#{1,6} \").replace(\"|lheading\",\"\").replace(\"|table\",\"\").replace(\"blockquote\",\" {0,3}>\").replace(\"fences\",\" {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n\").replace(\"list\",\" {0,3}(?:[*+-]|1[.)]) \").replace(\"html\",\"</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)\").replace(\"tag\",E._tag).getRegex(),E.blockquote=d(E.blockquote).replace(\"paragraph\",E.paragraph).getRegex(),E.normal=y({},E),E.gfm=y({},E.normal,{table:\"^ *([^\\\\n ].*\\\\|.*)\\\\n {0,3}(?:\\\\| *)?(:?-+:? *(?:\\\\| *:?-+:? *)*)(?:\\\\| *)?(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)\"}),E.gfm.table=d(E.gfm.table).replace(\"hr\",E.hr).replace(\"heading\",\" {0,3}#{1,6} \").replace(\"blockquote\",\" {0,3}>\").replace(\"code\",\" {4}[^\\\\n]\").replace(\"fences\",\" {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n\").replace(\"list\",\" {0,3}(?:[*+-]|1[.)]) \").replace(\"html\",\"</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)\").replace(\"tag\",E._tag).getRegex(),E.gfm.paragraph=d(E._paragraph).replace(\"hr\",E.hr).replace(\"heading\",\" {0,3}#{1,6} \").replace(\"|lheading\",\"\").replace(\"table\",E.gfm.table).replace(\"blockquote\",\" {0,3}>\").replace(\"fences\",\" {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n\").replace(\"list\",\" {0,3}(?:[*+-]|1[.)]) \").replace(\"html\",\"</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)\").replace(\"tag\",E._tag).getRegex(),E.pedantic=y({},E.normal,{html:d(\"^ *(?:comment *(?:\\\\n|\\\\s*$)|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)|<tag(?:\\\"[^\\\"]*\\\"|'[^']*'|\\\\s[^'\\\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))\").replace(\"comment\",E._comment).replace(/tag/g,\"(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b\").getRegex(),def:/^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,heading:/^(#{1,6})(.*)(?:\\n+|$)/,fences:b,paragraph:d(E.normal._paragraph).replace(\"hr\",E.hr).replace(\"heading\",\" *#{1,6} *[^\\n]\").replace(\"lheading\",E.lheading).replace(\"blockquote\",\" {0,3}>\").replace(\"|fences\",\"\").replace(\"|list\",\"\").replace(\"|html\",\"\").getRegex()});const $={escape:/^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,autolink:/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,url:b,tag:\"^comment|^</[a-zA-Z][\\\\w:-]*\\\\s*>|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>|^<\\\\?[\\\\s\\\\S]*?\\\\?>|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>\",link:/^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,reflink:/^!?\\[(label)\\]\\[(ref)\\]/,nolink:/^!?\\[(ref)\\](?:\\[\\])?/,reflinkSearch:\"reflink|nolink(?!\\\\()\",emStrong:{lDelim:/^(?:\\*+(?:([punct_])|[^\\s*]))|^_+(?:([punct*])|([^\\s_]))/,rDelimAst:/^[^_*]*?\\_\\_[^_*]*?\\*[^_*]*?(?=\\_\\_)|[punct_](\\*+)(?=[\\s]|$)|[^punct*_\\s](\\*+)(?=[punct_\\s]|$)|[punct_\\s](\\*+)(?=[^punct*_\\s])|[\\s](\\*+)(?=[punct_])|[punct_](\\*+)(?=[punct_])|[^punct*_\\s](\\*+)(?=[^punct*_\\s])/,rDelimUnd:/^[^_*]*?\\*\\*[^_*]*?\\_[^_*]*?(?=\\*\\*)|[punct*](\\_+)(?=[\\s]|$)|[^punct*_\\s](\\_+)(?=[punct*\\s]|$)|[punct*\\s](\\_+)(?=[^punct*_\\s])|[\\s](\\_+)(?=[punct*])|[punct*](\\_+)(?=[punct*])/},code:/^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,br:/^( {2,}|\\\\)\\n(?!\\s*$)/,del:b,text:/^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/,punctuation:/^([\\spunctuation])/};function L(t){return t.replace(/---/g,\"—\").replace(/--/g,\"–\").replace(/(^|[-\\u2014/(\\[{\"\\s])'/g,\"$1‘\").replace(/'/g,\"’\").replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g,\"$1“\").replace(/\"/g,\"”\").replace(/\\.{3}/g,\"…\")}function R(t){let e,n,i=\"\";const s=t.length;for(e=0;e<s;e++)n=t.charCodeAt(e),Math.random()>.5&&(n=\"x\"+n.toString(16)),i+=\"&#\"+n+\";\";return i}$._punctuation=\"!\\\"#$%&'()+\\\\-.,/:;<=>?@\\\\[\\\\]`^{|}~\",$.punctuation=d($.punctuation).replace(/punctuation/g,$._punctuation).getRegex(),$.blockSkip=/\\[[^\\]]*?\\]\\([^\\)]*?\\)|`[^`]*?`|<[^>]*?>/g,$.escapedEmSt=/\\\\\\*|\\\\_/g,$._comment=d(E._comment).replace(\"(?:--\\x3e|$)\",\"--\\x3e\").getRegex(),$.emStrong.lDelim=d($.emStrong.lDelim).replace(/punct/g,$._punctuation).getRegex(),$.emStrong.rDelimAst=d($.emStrong.rDelimAst,\"g\").replace(/punct/g,$._punctuation).getRegex(),$.emStrong.rDelimUnd=d($.emStrong.rDelimUnd,\"g\").replace(/punct/g,$._punctuation).getRegex(),$._escapes=/\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/g,$._scheme=/[a-zA-Z][a-zA-Z0-9+.-]{1,31}/,$._email=/[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/,$.autolink=d($.autolink).replace(\"scheme\",$._scheme).replace(\"email\",$._email).getRegex(),$._attribute=/\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/,$.tag=d($.tag).replace(\"comment\",$._comment).replace(\"attribute\",$._attribute).getRegex(),$._label=/(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/,$._href=/<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/,$._title=/\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/,$.link=d($.link).replace(\"label\",$._label).replace(\"href\",$._href).replace(\"title\",$._title).getRegex(),$.reflink=d($.reflink).replace(\"label\",$._label).replace(\"ref\",E._label).getRegex(),$.nolink=d($.nolink).replace(\"ref\",E._label).getRegex(),$.reflinkSearch=d($.reflinkSearch,\"g\").replace(\"reflink\",$.reflink).replace(\"nolink\",$.nolink).getRegex(),$.normal=y({},$),$.pedantic=y({},$.normal,{strong:{start:/^__|\\*\\*/,middle:/^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,endAst:/\\*\\*(?!\\*)/g,endUnd:/__(?!_)/g},em:{start:/^_|\\*/,middle:/^()\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)|^_(?=\\S)([\\s\\S]*?\\S)_(?!_)/,endAst:/\\*(?!\\*)/g,endUnd:/_(?!_)/g},link:d(/^!?\\[(label)\\]\\((.*?)\\)/).replace(\"label\",$._label).getRegex(),reflink:d(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/).replace(\"label\",$._label).getRegex()}),$.gfm=y({},$.normal,{escape:d($.escape).replace(\"])\",\"~|])\").getRegex(),_extended_email:/[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,url:/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,_backpedal:/(?:[^?!.,:;*_~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,del:/^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,text:/^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/}),$.gfm.url=d($.gfm.url,\"i\").replace(\"email\",$.gfm._extended_email).getRegex(),$.breaks=y({},$.gfm,{br:d($.br).replace(\"{2,}\",\"*\").getRegex(),text:d($.gfm.text).replace(\"\\\\b_\",\"\\\\b_| {2,}\\\\n\").replace(/\\{2,\\}/g,\"*\").getRegex()});class I{constructor(t){this.tokens=[],this.tokens.links=Object.create(null),this.options=t||e,this.options.tokenizer=this.options.tokenizer||new A,this.tokenizer=this.options.tokenizer,this.tokenizer.options=this.options,this.tokenizer.lexer=this,this.inlineQueue=[],this.state={inLink:!1,inRawBlock:!1,top:!0};const n={block:E.normal,inline:$.normal};this.options.pedantic?(n.block=E.pedantic,n.inline=$.pedantic):this.options.gfm&&(n.block=E.gfm,this.options.breaks?n.inline=$.breaks:n.inline=$.gfm),this.tokenizer.rules=n}static get rules(){return{block:E,inline:$}}static lex(t,e){return new I(e).lex(t)}static lexInline(t,e){return new I(e).inlineTokens(t)}lex(t){let e;for(t=t.replace(/\\r\\n|\\r/g,\"\\n\").replace(/\\t/g,\"    \"),this.blockTokens(t,this.tokens);e=this.inlineQueue.shift();)this.inlineTokens(e.src,e.tokens);return this.tokens}blockTokens(t,e=[]){let n,i,s,r;for(this.options.pedantic&&(t=t.replace(/^ +$/gm,\"\"));t;)if(!(this.options.extensions&&this.options.extensions.block&&this.options.extensions.block.some((i=>!!(n=i.call({lexer:this},t,e))&&(t=t.substring(n.raw.length),e.push(n),!0)))))if(n=this.tokenizer.space(t))t=t.substring(n.raw.length),1===n.raw.length&&e.length>0?e[e.length-1].raw+=\"\\n\":e.push(n);else if(n=this.tokenizer.code(t))t=t.substring(n.raw.length),i=e[e.length-1],!i||\"paragraph\"!==i.type&&\"text\"!==i.type?e.push(n):(i.raw+=\"\\n\"+n.raw,i.text+=\"\\n\"+n.text,this.inlineQueue[this.inlineQueue.length-1].src=i.text);else if(n=this.tokenizer.fences(t))t=t.substring(n.raw.length),e.push(n);else if(n=this.tokenizer.heading(t))t=t.substring(n.raw.length),e.push(n);else if(n=this.tokenizer.hr(t))t=t.substring(n.raw.length),e.push(n);else if(n=this.tokenizer.blockquote(t))t=t.substring(n.raw.length),e.push(n);else if(n=this.tokenizer.list(t))t=t.substring(n.raw.length),e.push(n);else if(n=this.tokenizer.html(t))t=t.substring(n.raw.length),e.push(n);else if(n=this.tokenizer.def(t))t=t.substring(n.raw.length),i=e[e.length-1],!i||\"paragraph\"!==i.type&&\"text\"!==i.type?this.tokens.links[n.tag]||(this.tokens.links[n.tag]={href:n.href,title:n.title}):(i.raw+=\"\\n\"+n.raw,i.text+=\"\\n\"+n.raw,this.inlineQueue[this.inlineQueue.length-1].src=i.text);else if(n=this.tokenizer.table(t))t=t.substring(n.raw.length),e.push(n);else if(n=this.tokenizer.lheading(t))t=t.substring(n.raw.length),e.push(n);else{if(s=t,this.options.extensions&&this.options.extensions.startBlock){let e=1/0;const n=t.slice(1);let i;this.options.extensions.startBlock.forEach((function(t){i=t.call({lexer:this},n),\"number\"==typeof i&&i>=0&&(e=Math.min(e,i))})),e<1/0&&e>=0&&(s=t.substring(0,e+1))}if(this.state.top&&(n=this.tokenizer.paragraph(s)))i=e[e.length-1],r&&\"paragraph\"===i.type?(i.raw+=\"\\n\"+n.raw,i.text+=\"\\n\"+n.text,this.inlineQueue.pop(),this.inlineQueue[this.inlineQueue.length-1].src=i.text):e.push(n),r=s.length!==t.length,t=t.substring(n.raw.length);else if(n=this.tokenizer.text(t))t=t.substring(n.raw.length),i=e[e.length-1],i&&\"text\"===i.type?(i.raw+=\"\\n\"+n.raw,i.text+=\"\\n\"+n.text,this.inlineQueue.pop(),this.inlineQueue[this.inlineQueue.length-1].src=i.text):e.push(n);else if(t){const e=\"Infinite loop on byte: \"+t.charCodeAt(0);if(this.options.silent){console.error(e);break}throw new Error(e)}}return this.state.top=!0,e}inline(t,e){this.inlineQueue.push({src:t,tokens:e})}inlineTokens(t,e=[]){let n,i,s,r,a,l,o=t;if(this.tokens.links){const t=Object.keys(this.tokens.links);if(t.length>0)for(;null!=(r=this.tokenizer.rules.inline.reflinkSearch.exec(o));)t.includes(r[0].slice(r[0].lastIndexOf(\"[\")+1,-1))&&(o=o.slice(0,r.index)+\"[\"+_(\"a\",r[0].length-2)+\"]\"+o.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex))}for(;null!=(r=this.tokenizer.rules.inline.blockSkip.exec(o));)o=o.slice(0,r.index)+\"[\"+_(\"a\",r[0].length-2)+\"]\"+o.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);for(;null!=(r=this.tokenizer.rules.inline.escapedEmSt.exec(o));)o=o.slice(0,r.index)+\"++\"+o.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex);for(;t;)if(a||(l=\"\"),a=!1,!(this.options.extensions&&this.options.extensions.inline&&this.options.extensions.inline.some((i=>!!(n=i.call({lexer:this},t,e))&&(t=t.substring(n.raw.length),e.push(n),!0)))))if(n=this.tokenizer.escape(t))t=t.substring(n.raw.length),e.push(n);else if(n=this.tokenizer.tag(t))t=t.substring(n.raw.length),i=e[e.length-1],i&&\"text\"===n.type&&\"text\"===i.type?(i.raw+=n.raw,i.text+=n.text):e.push(n);else if(n=this.tokenizer.link(t))t=t.substring(n.raw.length),e.push(n);else if(n=this.tokenizer.reflink(t,this.tokens.links))t=t.substring(n.raw.length),i=e[e.length-1],i&&\"text\"===n.type&&\"text\"===i.type?(i.raw+=n.raw,i.text+=n.text):e.push(n);else if(n=this.tokenizer.emStrong(t,o,l))t=t.substring(n.raw.length),e.push(n);else if(n=this.tokenizer.codespan(t))t=t.substring(n.raw.length),e.push(n);else if(n=this.tokenizer.br(t))t=t.substring(n.raw.length),e.push(n);else if(n=this.tokenizer.del(t))t=t.substring(n.raw.length),e.push(n);else if(n=this.tokenizer.autolink(t,R))t=t.substring(n.raw.length),e.push(n);else if(this.state.inLink||!(n=this.tokenizer.url(t,R))){if(s=t,this.options.extensions&&this.options.extensions.startInline){let e=1/0;const n=t.slice(1);let i;this.options.extensions.startInline.forEach((function(t){i=t.call({lexer:this},n),\"number\"==typeof i&&i>=0&&(e=Math.min(e,i))})),e<1/0&&e>=0&&(s=t.substring(0,e+1))}if(n=this.tokenizer.inlineText(s,L))t=t.substring(n.raw.length),\"_\"!==n.raw.slice(-1)&&(l=n.raw.slice(-1)),a=!0,i=e[e.length-1],i&&\"text\"===i.type?(i.raw+=n.raw,i.text+=n.text):e.push(n);else if(t){const e=\"Infinite loop on byte: \"+t.charCodeAt(0);if(this.options.silent){console.error(e);break}throw new Error(e)}}else t=t.substring(n.raw.length),e.push(n);return e}}class C{constructor(t){this.options=t||e}code(t,e,n){const i=(e||\"\").match(/\\S*/)[0];if(this.options.highlight){const e=this.options.highlight(t,i);null!=e&&e!==t&&(n=!0,t=e)}return t=t.replace(/\\n$/,\"\")+\"\\n\",i?'<pre><code class=\"'+this.options.langPrefix+o(i,!0)+'\">'+(n?t:o(t,!0))+\"</code></pre>\\n\":\"<pre><code>\"+(n?t:o(t,!0))+\"</code></pre>\\n\"}blockquote(t){return\"<blockquote>\\n\"+t+\"</blockquote>\\n\"}html(t){return t}heading(t,e,n,i){return this.options.headerIds?\"<h\"+e+' id=\"'+this.options.headerPrefix+i.slug(n)+'\">'+t+\"</h\"+e+\">\\n\":\"<h\"+e+\">\"+t+\"</h\"+e+\">\\n\"}hr(){return this.options.xhtml?\"<hr/>\\n\":\"<hr>\\n\"}list(t,e,n){const i=e?\"ol\":\"ul\";return\"<\"+i+(e&&1!==n?' start=\"'+n+'\"':\"\")+\">\\n\"+t+\"</\"+i+\">\\n\"}listitem(t){return\"<li>\"+t+\"</li>\\n\"}checkbox(t){return\"<input \"+(t?'checked=\"\" ':\"\")+'disabled=\"\" type=\"checkbox\"'+(this.options.xhtml?\" /\":\"\")+\"> \"}paragraph(t){return\"<p>\"+t+\"</p>\\n\"}table(t,e){return e&&(e=\"<tbody>\"+e+\"</tbody>\"),\"<table>\\n<thead>\\n\"+t+\"</thead>\\n\"+e+\"</table>\\n\"}tablerow(t){return\"<tr>\\n\"+t+\"</tr>\\n\"}tablecell(t,e){const n=e.header?\"th\":\"td\";return(e.align?\"<\"+n+' align=\"'+e.align+'\">':\"<\"+n+\">\")+t+\"</\"+n+\">\\n\"}strong(t){return\"<strong>\"+t+\"</strong>\"}em(t){return\"<em>\"+t+\"</em>\"}codespan(t){return\"<code>\"+t+\"</code>\"}br(){return this.options.xhtml?\"<br/>\":\"<br>\"}del(t){return\"<del>\"+t+\"</del>\"}link(t,e,n){if(null===(t=m(this.options.sanitize,this.options.baseUrl,t)))return n;let i='<a href=\"'+o(t)+'\"';return e&&(i+=' title=\"'+e+'\"'),i+=\">\"+n+\"</a>\",i}image(t,e,n){if(null===(t=m(this.options.sanitize,this.options.baseUrl,t)))return n;let i='<img src=\"'+t+'\" alt=\"'+n+'\"';return e&&(i+=' title=\"'+e+'\"'),i+=this.options.xhtml?\"/>\":\">\",i}text(t){return t}}class M{strong(t){return t}em(t){return t}codespan(t){return t}del(t){return t}html(t){return t}text(t){return t}link(t,e,n){return\"\"+n}image(t,e,n){return\"\"+n}br(){return\"\"}}class q{constructor(){this.seen={}}serialize(t){return t.toLowerCase().trim().replace(/<[!\\/a-z].*?>/gi,\"\").replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g,\"\").replace(/\\s/g,\"-\")}getNextSafeSlug(t,e){let n=t,i=0;if(this.seen.hasOwnProperty(n)){i=this.seen[t];do{i++,n=t+\"-\"+i}while(this.seen.hasOwnProperty(n))}return e||(this.seen[t]=i,this.seen[n]=0),n}slug(t,e={}){const n=this.serialize(t);return this.getNextSafeSlug(n,e.dryrun)}}class O{constructor(t){this.options=t||e,this.options.renderer=this.options.renderer||new C,this.renderer=this.options.renderer,this.renderer.options=this.options,this.textRenderer=new M,this.slugger=new q}static parse(t,e){return new O(e).parse(t)}static parseInline(t,e){return new O(e).parseInline(t)}parse(t,e=!0){let n,i,s,r,a,l,o,c,u,d,h,g,m,f,k,w,x,b,y,v=\"\";const S=t.length;for(n=0;n<S;n++)if(d=t[n],this.options.extensions&&this.options.extensions.renderers&&this.options.extensions.renderers[d.type]&&(y=this.options.extensions.renderers[d.type].call({parser:this},d),!1!==y||![\"space\",\"hr\",\"heading\",\"code\",\"table\",\"blockquote\",\"list\",\"html\",\"paragraph\",\"text\"].includes(d.type)))v+=y||\"\";else switch(d.type){case\"space\":continue;case\"hr\":v+=this.renderer.hr();continue;case\"heading\":v+=this.renderer.heading(this.parseInline(d.tokens),d.depth,p(this.parseInline(d.tokens,this.textRenderer)),this.slugger);continue;case\"code\":v+=this.renderer.code(d.text,d.lang,d.escaped);continue;case\"table\":for(c=\"\",o=\"\",r=d.header.length,i=0;i<r;i++)o+=this.renderer.tablecell(this.parseInline(d.header[i].tokens),{header:!0,align:d.align[i]});for(c+=this.renderer.tablerow(o),u=\"\",r=d.rows.length,i=0;i<r;i++){for(l=d.rows[i],o=\"\",a=l.length,s=0;s<a;s++)o+=this.renderer.tablecell(this.parseInline(l[s].tokens),{header:!1,align:d.align[s]});u+=this.renderer.tablerow(o)}v+=this.renderer.table(c,u);continue;case\"blockquote\":u=this.parse(d.tokens),v+=this.renderer.blockquote(u);continue;case\"list\":for(h=d.ordered,g=d.start,m=d.loose,r=d.items.length,u=\"\",i=0;i<r;i++)k=d.items[i],w=k.checked,x=k.task,f=\"\",k.task&&(b=this.renderer.checkbox(w),m?k.tokens.length>0&&\"paragraph\"===k.tokens[0].type?(k.tokens[0].text=b+\" \"+k.tokens[0].text,k.tokens[0].tokens&&k.tokens[0].tokens.length>0&&\"text\"===k.tokens[0].tokens[0].type&&(k.tokens[0].tokens[0].text=b+\" \"+k.tokens[0].tokens[0].text)):k.tokens.unshift({type:\"text\",text:b}):f+=b),f+=this.parse(k.tokens,m),u+=this.renderer.listitem(f,x,w);v+=this.renderer.list(u,h,g);continue;case\"html\":v+=this.renderer.html(d.text);continue;case\"paragraph\":v+=this.renderer.paragraph(this.parseInline(d.tokens));continue;case\"text\":for(u=d.tokens?this.parseInline(d.tokens):d.text;n+1<S&&\"text\"===t[n+1].type;)d=t[++n],u+=\"\\n\"+(d.tokens?this.parseInline(d.tokens):d.text);v+=e?this.renderer.paragraph(u):u;continue;default:{const t='Token with \"'+d.type+'\" type was not found.';if(this.options.silent)return void console.error(t);throw new Error(t)}}return v}parseInline(t,e){e=e||this.renderer;let n,i,s,r=\"\";const a=t.length;for(n=0;n<a;n++)if(i=t[n],this.options.extensions&&this.options.extensions.renderers&&this.options.extensions.renderers[i.type]&&(s=this.options.extensions.renderers[i.type].call({parser:this},i),!1!==s||![\"escape\",\"html\",\"link\",\"image\",\"strong\",\"em\",\"codespan\",\"br\",\"del\",\"text\"].includes(i.type)))r+=s||\"\";else switch(i.type){case\"escape\":case\"text\":r+=e.text(i.text);break;case\"html\":r+=e.html(i.text);break;case\"link\":r+=e.link(i.href,i.title,this.parseInline(i.tokens,e));break;case\"image\":r+=e.image(i.href,i.title,i.text);break;case\"strong\":r+=e.strong(this.parseInline(i.tokens,e));break;case\"em\":r+=e.em(this.parseInline(i.tokens,e));break;case\"codespan\":r+=e.codespan(i.text);break;case\"br\":r+=e.br();break;case\"del\":r+=e.del(this.parseInline(i.tokens,e));break;default:{const t='Token with \"'+i.type+'\" type was not found.';if(this.options.silent)return void console.error(t);throw new Error(t)}}return r}}function N(t,e,n){if(null==t)throw new Error(\"marked(): input parameter is undefined or null\");if(\"string\"!=typeof t)throw new Error(\"marked(): input parameter is of type \"+Object.prototype.toString.call(t)+\", string expected\");if(\"function\"==typeof e&&(n=e,e=null),T(e=y({},N.defaults,e||{})),n){const i=e.highlight;let s;try{s=I.lex(t,e)}catch(t){return n(t)}const r=function(t){let r;if(!t)try{e.walkTokens&&N.walkTokens(s,e.walkTokens),r=O.parse(s,e)}catch(e){t=e}return e.highlight=i,t?n(t):n(null,r)};if(!i||i.length<3)return r();if(delete e.highlight,!s.length)return r();let a=0;return N.walkTokens(s,(function(t){\"code\"===t.type&&(a++,setTimeout((()=>{i(t.text,t.lang,(function(e,n){if(e)return r(e);null!=n&&n!==t.text&&(t.text=n,t.escaped=!0),a--,0===a&&r()}))}),0))})),void(0===a&&r())}try{const n=I.lex(t,e);return e.walkTokens&&N.walkTokens(n,e.walkTokens),O.parse(n,e)}catch(t){if(t.message+=\"\\nPlease report this to https://github.com/markedjs/marked.\",e.silent)return\"<p>An error occurred:</p><pre>\"+o(t.message+\"\",!0)+\"</pre>\";throw t}}N.options=N.setOptions=function(t){var n;return y(N.defaults,t),n=N.defaults,e=n,N},N.getDefaults=t,N.defaults=e,N.use=function(...t){const e=y({},...t),n=N.defaults.extensions||{renderers:{},childTokens:{}};let i;t.forEach((t=>{if(t.extensions&&(i=!0,t.extensions.forEach((t=>{if(!t.name)throw new Error(\"extension name required\");if(t.renderer){const e=n.renderers?n.renderers[t.name]:null;n.renderers[t.name]=e?function(...n){let i=t.renderer.apply(this,n);return!1===i&&(i=e.apply(this,n)),i}:t.renderer}if(t.tokenizer){if(!t.level||\"block\"!==t.level&&\"inline\"!==t.level)throw new Error(\"extension level must be 'block' or 'inline'\");n[t.level]?n[t.level].unshift(t.tokenizer):n[t.level]=[t.tokenizer],t.start&&(\"block\"===t.level?n.startBlock?n.startBlock.push(t.start):n.startBlock=[t.start]:\"inline\"===t.level&&(n.startInline?n.startInline.push(t.start):n.startInline=[t.start]))}t.childTokens&&(n.childTokens[t.name]=t.childTokens)}))),t.renderer){const n=N.defaults.renderer||new C;for(const e in t.renderer){const i=n[e];n[e]=(...s)=>{let r=t.renderer[e].apply(n,s);return!1===r&&(r=i.apply(n,s)),r}}e.renderer=n}if(t.tokenizer){const n=N.defaults.tokenizer||new A;for(const e in t.tokenizer){const i=n[e];n[e]=(...s)=>{let r=t.tokenizer[e].apply(n,s);return!1===r&&(r=i.apply(n,s)),r}}e.tokenizer=n}if(t.walkTokens){const n=N.defaults.walkTokens;e.walkTokens=function(e){t.walkTokens.call(this,e),n&&n.call(this,e)}}i&&(e.extensions=n),N.setOptions(e)}))},N.walkTokens=function(t,e){for(const n of t)switch(e.call(N,n),n.type){case\"table\":for(const t of n.header)N.walkTokens(t.tokens,e);for(const t of n.rows)for(const n of t)N.walkTokens(n.tokens,e);break;case\"list\":N.walkTokens(n.items,e);break;default:N.defaults.extensions&&N.defaults.extensions.childTokens&&N.defaults.extensions.childTokens[n.type]?N.defaults.extensions.childTokens[n.type].forEach((function(t){N.walkTokens(n[t],e)})):n.tokens&&N.walkTokens(n.tokens,e)}},N.parseInline=function(t,e){if(null==t)throw new Error(\"marked.parseInline(): input parameter is undefined or null\");if(\"string\"!=typeof t)throw new Error(\"marked.parseInline(): input parameter is of type \"+Object.prototype.toString.call(t)+\", string expected\");T(e=y({},N.defaults,e||{}));try{const n=I.lexInline(t,e);return e.walkTokens&&N.walkTokens(n,e.walkTokens),O.parseInline(n,e)}catch(t){if(t.message+=\"\\nPlease report this to https://github.com/markedjs/marked.\",e.silent)return\"<p>An error occurred:</p><pre>\"+o(t.message+\"\",!0)+\"</pre>\";throw t}},N.Parser=O,N.parser=O.parse,N.Renderer=C,N.TextRenderer=M,N.Lexer=I,N.lexer=I.lex,N.Tokenizer=A,N.Slugger=q,N.parse=N;return()=>{let t,e,n=null;function i(){if(n&&!n.closed)n.focus();else{if(n=window.open(\"about:blank\",\"reveal.js - Notes\",\"width=1100,height=700\"),n.marked=N,n.document.write(\"\\x3c!--\\n\\tNOTE: You need to build the notes plugin after making changes to this file.\\n--\\x3e\\n<html lang=\\\"en\\\">\\n\\t<head>\\n\\t\\t<meta charset=\\\"utf-8\\\">\\n\\n\\t\\t<title>reveal.js - Speaker View</title>\\n\\n\\t\\t<style>\\n\\t\\t\\tbody {\\n\\t\\t\\t\\tfont-family: Helvetica;\\n\\t\\t\\t\\tfont-size: 18px;\\n\\t\\t\\t}\\n\\n\\t\\t\\t#current-slide,\\n\\t\\t\\t#upcoming-slide,\\n\\t\\t\\t#speaker-controls {\\n\\t\\t\\t\\tpadding: 6px;\\n\\t\\t\\t\\tbox-sizing: border-box;\\n\\t\\t\\t\\t-moz-box-sizing: border-box;\\n\\t\\t\\t}\\n\\n\\t\\t\\t#current-slide iframe,\\n\\t\\t\\t#upcoming-slide iframe {\\n\\t\\t\\t\\twidth: 100%;\\n\\t\\t\\t\\theight: 100%;\\n\\t\\t\\t\\tborder: 1px solid #ddd;\\n\\t\\t\\t}\\n\\n\\t\\t\\t#current-slide .label,\\n\\t\\t\\t#upcoming-slide .label {\\n\\t\\t\\t\\tposition: absolute;\\n\\t\\t\\t\\ttop: 10px;\\n\\t\\t\\t\\tleft: 10px;\\n\\t\\t\\t\\tz-index: 2;\\n\\t\\t\\t}\\n\\n\\t\\t\\t#connection-status {\\n\\t\\t\\t\\tposition: absolute;\\n\\t\\t\\t\\ttop: 0;\\n\\t\\t\\t\\tleft: 0;\\n\\t\\t\\t\\twidth: 100%;\\n\\t\\t\\t\\theight: 100%;\\n\\t\\t\\t\\tz-index: 20;\\n\\t\\t\\t\\tpadding: 30% 20% 20% 20%;\\n\\t\\t\\t\\tfont-size: 18px;\\n\\t\\t\\t\\tcolor: #222;\\n\\t\\t\\t\\tbackground: #fff;\\n\\t\\t\\t\\ttext-align: center;\\n\\t\\t\\t\\tbox-sizing: border-box;\\n\\t\\t\\t\\tline-height: 1.4;\\n\\t\\t\\t}\\n\\n\\t\\t\\t.overlay-element {\\n\\t\\t\\t\\theight: 34px;\\n\\t\\t\\t\\tline-height: 34px;\\n\\t\\t\\t\\tpadding: 0 10px;\\n\\t\\t\\t\\ttext-shadow: none;\\n\\t\\t\\t\\tbackground: rgba( 220, 220, 220, 0.8 );\\n\\t\\t\\t\\tcolor: #222;\\n\\t\\t\\t\\tfont-size: 14px;\\n\\t\\t\\t}\\n\\n\\t\\t\\t.overlay-element.interactive:hover {\\n\\t\\t\\t\\tbackground: rgba( 220, 220, 220, 1 );\\n\\t\\t\\t}\\n\\n\\t\\t\\t#current-slide {\\n\\t\\t\\t\\tposition: absolute;\\n\\t\\t\\t\\twidth: 60%;\\n\\t\\t\\t\\theight: 100%;\\n\\t\\t\\t\\ttop: 0;\\n\\t\\t\\t\\tleft: 0;\\n\\t\\t\\t\\tpadding-right: 0;\\n\\t\\t\\t}\\n\\n\\t\\t\\t#upcoming-slide {\\n\\t\\t\\t\\tposition: absolute;\\n\\t\\t\\t\\twidth: 40%;\\n\\t\\t\\t\\theight: 40%;\\n\\t\\t\\t\\tright: 0;\\n\\t\\t\\t\\ttop: 0;\\n\\t\\t\\t}\\n\\n\\t\\t\\t/* Speaker controls */\\n\\t\\t\\t#speaker-controls {\\n\\t\\t\\t\\tposition: absolute;\\n\\t\\t\\t\\ttop: 40%;\\n\\t\\t\\t\\tright: 0;\\n\\t\\t\\t\\twidth: 40%;\\n\\t\\t\\t\\theight: 60%;\\n\\t\\t\\t\\toverflow: auto;\\n\\t\\t\\t\\tfont-size: 18px;\\n\\t\\t\\t}\\n\\n\\t\\t\\t\\t.speaker-controls-time.hidden,\\n\\t\\t\\t\\t.speaker-controls-notes.hidden {\\n\\t\\t\\t\\t\\tdisplay: none;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t.speaker-controls-time .label,\\n\\t\\t\\t\\t.speaker-controls-pace .label,\\n\\t\\t\\t\\t.speaker-controls-notes .label {\\n\\t\\t\\t\\t\\ttext-transform: uppercase;\\n\\t\\t\\t\\t\\tfont-weight: normal;\\n\\t\\t\\t\\t\\tfont-size: 0.66em;\\n\\t\\t\\t\\t\\tcolor: #666;\\n\\t\\t\\t\\t\\tmargin: 0;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t.speaker-controls-time, .speaker-controls-pace {\\n\\t\\t\\t\\t\\tborder-bottom: 1px solid rgba( 200, 200, 200, 0.5 );\\n\\t\\t\\t\\t\\tmargin-bottom: 10px;\\n\\t\\t\\t\\t\\tpadding: 10px 16px;\\n\\t\\t\\t\\t\\tpadding-bottom: 20px;\\n\\t\\t\\t\\t\\tcursor: pointer;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t.speaker-controls-time .reset-button {\\n\\t\\t\\t\\t\\topacity: 0;\\n\\t\\t\\t\\t\\tfloat: right;\\n\\t\\t\\t\\t\\tcolor: #666;\\n\\t\\t\\t\\t\\ttext-decoration: none;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t.speaker-controls-time:hover .reset-button {\\n\\t\\t\\t\\t\\topacity: 1;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t.speaker-controls-time .timer,\\n\\t\\t\\t\\t.speaker-controls-time .clock {\\n\\t\\t\\t\\t\\twidth: 50%;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t.speaker-controls-time .timer,\\n\\t\\t\\t\\t.speaker-controls-time .clock,\\n\\t\\t\\t\\t.speaker-controls-time .pacing .hours-value,\\n\\t\\t\\t\\t.speaker-controls-time .pacing .minutes-value,\\n\\t\\t\\t\\t.speaker-controls-time .pacing .seconds-value {\\n\\t\\t\\t\\t\\tfont-size: 1.9em;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t.speaker-controls-time .timer {\\n\\t\\t\\t\\t\\tfloat: left;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t.speaker-controls-time .clock {\\n\\t\\t\\t\\t\\tfloat: right;\\n\\t\\t\\t\\t\\ttext-align: right;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t.speaker-controls-time span.mute {\\n\\t\\t\\t\\t\\topacity: 0.3;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t.speaker-controls-time .pacing-title {\\n\\t\\t\\t\\t\\tmargin-top: 5px;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t.speaker-controls-time .pacing.ahead {\\n\\t\\t\\t\\t\\tcolor: blue;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t.speaker-controls-time .pacing.on-track {\\n\\t\\t\\t\\t\\tcolor: green;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t.speaker-controls-time .pacing.behind {\\n\\t\\t\\t\\t\\tcolor: red;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t.speaker-controls-notes {\\n\\t\\t\\t\\t\\tpadding: 10px 16px;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t.speaker-controls-notes .value {\\n\\t\\t\\t\\t\\tmargin-top: 5px;\\n\\t\\t\\t\\t\\tline-height: 1.4;\\n\\t\\t\\t\\t\\tfont-size: 1.2em;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t/* Layout selector */\\n\\t\\t\\t#speaker-layout {\\n\\t\\t\\t\\tposition: absolute;\\n\\t\\t\\t\\ttop: 10px;\\n\\t\\t\\t\\tright: 10px;\\n\\t\\t\\t\\tcolor: #222;\\n\\t\\t\\t\\tz-index: 10;\\n\\t\\t\\t}\\n\\t\\t\\t\\t#speaker-layout select {\\n\\t\\t\\t\\t\\tposition: absolute;\\n\\t\\t\\t\\t\\twidth: 100%;\\n\\t\\t\\t\\t\\theight: 100%;\\n\\t\\t\\t\\t\\ttop: 0;\\n\\t\\t\\t\\t\\tleft: 0;\\n\\t\\t\\t\\t\\tborder: 0;\\n\\t\\t\\t\\t\\tbox-shadow: 0;\\n\\t\\t\\t\\t\\tcursor: pointer;\\n\\t\\t\\t\\t\\topacity: 0;\\n\\n\\t\\t\\t\\t\\tfont-size: 1em;\\n\\t\\t\\t\\t\\tbackground-color: transparent;\\n\\n\\t\\t\\t\\t\\t-moz-appearance: none;\\n\\t\\t\\t\\t\\t-webkit-appearance: none;\\n\\t\\t\\t\\t\\t-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t#speaker-layout select:focus {\\n\\t\\t\\t\\t\\toutline: none;\\n\\t\\t\\t\\t\\tbox-shadow: none;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t.clear {\\n\\t\\t\\t\\tclear: both;\\n\\t\\t\\t}\\n\\n\\t\\t\\t/* Speaker layout: Wide */\\n\\t\\t\\tbody[data-speaker-layout=\\\"wide\\\"] #current-slide,\\n\\t\\t\\tbody[data-speaker-layout=\\\"wide\\\"] #upcoming-slide {\\n\\t\\t\\t\\twidth: 50%;\\n\\t\\t\\t\\theight: 45%;\\n\\t\\t\\t\\tpadding: 6px;\\n\\t\\t\\t}\\n\\n\\t\\t\\tbody[data-speaker-layout=\\\"wide\\\"] #current-slide {\\n\\t\\t\\t\\ttop: 0;\\n\\t\\t\\t\\tleft: 0;\\n\\t\\t\\t}\\n\\n\\t\\t\\tbody[data-speaker-layout=\\\"wide\\\"] #upcoming-slide {\\n\\t\\t\\t\\ttop: 0;\\n\\t\\t\\t\\tleft: 50%;\\n\\t\\t\\t}\\n\\n\\t\\t\\tbody[data-speaker-layout=\\\"wide\\\"] #speaker-controls {\\n\\t\\t\\t\\ttop: 45%;\\n\\t\\t\\t\\tleft: 0;\\n\\t\\t\\t\\twidth: 100%;\\n\\t\\t\\t\\theight: 50%;\\n\\t\\t\\t\\tfont-size: 1.25em;\\n\\t\\t\\t}\\n\\n\\t\\t\\t/* Speaker layout: Tall */\\n\\t\\t\\tbody[data-speaker-layout=\\\"tall\\\"] #current-slide,\\n\\t\\t\\tbody[data-speaker-layout=\\\"tall\\\"] #upcoming-slide {\\n\\t\\t\\t\\twidth: 45%;\\n\\t\\t\\t\\theight: 50%;\\n\\t\\t\\t\\tpadding: 6px;\\n\\t\\t\\t}\\n\\n\\t\\t\\tbody[data-speaker-layout=\\\"tall\\\"] #current-slide {\\n\\t\\t\\t\\ttop: 0;\\n\\t\\t\\t\\tleft: 0;\\n\\t\\t\\t}\\n\\n\\t\\t\\tbody[data-speaker-layout=\\\"tall\\\"] #upcoming-slide {\\n\\t\\t\\t\\ttop: 50%;\\n\\t\\t\\t\\tleft: 0;\\n\\t\\t\\t}\\n\\n\\t\\t\\tbody[data-speaker-layout=\\\"tall\\\"] #speaker-controls {\\n\\t\\t\\t\\tpadding-top: 40px;\\n\\t\\t\\t\\ttop: 0;\\n\\t\\t\\t\\tleft: 45%;\\n\\t\\t\\t\\twidth: 55%;\\n\\t\\t\\t\\theight: 100%;\\n\\t\\t\\t\\tfont-size: 1.25em;\\n\\t\\t\\t}\\n\\n\\t\\t\\t/* Speaker layout: Notes only */\\n\\t\\t\\tbody[data-speaker-layout=\\\"notes-only\\\"] #current-slide,\\n\\t\\t\\tbody[data-speaker-layout=\\\"notes-only\\\"] #upcoming-slide {\\n\\t\\t\\t\\tdisplay: none;\\n\\t\\t\\t}\\n\\n\\t\\t\\tbody[data-speaker-layout=\\\"notes-only\\\"] #speaker-controls {\\n\\t\\t\\t\\tpadding-top: 40px;\\n\\t\\t\\t\\ttop: 0;\\n\\t\\t\\t\\tleft: 0;\\n\\t\\t\\t\\twidth: 100%;\\n\\t\\t\\t\\theight: 100%;\\n\\t\\t\\t\\tfont-size: 1.25em;\\n\\t\\t\\t}\\n\\n\\t\\t\\t@media screen and (max-width: 1080px) {\\n\\t\\t\\t\\tbody[data-speaker-layout=\\\"default\\\"] #speaker-controls {\\n\\t\\t\\t\\t\\tfont-size: 16px;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t@media screen and (max-width: 900px) {\\n\\t\\t\\t\\tbody[data-speaker-layout=\\\"default\\\"] #speaker-controls {\\n\\t\\t\\t\\t\\tfont-size: 14px;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t@media screen and (max-width: 800px) {\\n\\t\\t\\t\\tbody[data-speaker-layout=\\\"default\\\"] #speaker-controls {\\n\\t\\t\\t\\t\\tfont-size: 12px;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t</style>\\n\\t</head>\\n\\n\\t<body>\\n\\n\\t\\t<div id=\\\"connection-status\\\">Loading speaker view...</div>\\n\\n\\t\\t<div id=\\\"current-slide\\\"></div>\\n\\t\\t<div id=\\\"upcoming-slide\\\"><span class=\\\"overlay-element label\\\">Upcoming</span></div>\\n\\t\\t<div id=\\\"speaker-controls\\\">\\n\\t\\t\\t<div class=\\\"speaker-controls-time\\\">\\n\\t\\t\\t\\t<h4 class=\\\"label\\\">Time <span class=\\\"reset-button\\\">Click to Reset</span></h4>\\n\\t\\t\\t\\t<div class=\\\"clock\\\">\\n\\t\\t\\t\\t\\t<span class=\\\"clock-value\\\">0:00 AM</span>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t<div class=\\\"timer\\\">\\n\\t\\t\\t\\t\\t<span class=\\\"hours-value\\\">00</span><span class=\\\"minutes-value\\\">:00</span><span class=\\\"seconds-value\\\">:00</span>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t<div class=\\\"clear\\\"></div>\\n\\n\\t\\t\\t\\t<h4 class=\\\"label pacing-title\\\" style=\\\"display: none\\\">Pacing – Time to finish current slide</h4>\\n\\t\\t\\t\\t<div class=\\\"pacing\\\" style=\\\"display: none\\\">\\n\\t\\t\\t\\t\\t<span class=\\\"hours-value\\\">00</span><span class=\\\"minutes-value\\\">:00</span><span class=\\\"seconds-value\\\">:00</span>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\n\\t\\t\\t<div class=\\\"speaker-controls-notes hidden\\\">\\n\\t\\t\\t\\t<h4 class=\\\"label\\\">Notes</h4>\\n\\t\\t\\t\\t<div class=\\\"value\\\"></div>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t\\t<div id=\\\"speaker-layout\\\" class=\\\"overlay-element interactive\\\">\\n\\t\\t\\t<span class=\\\"speaker-layout-label\\\"></span>\\n\\t\\t\\t<select class=\\\"speaker-layout-dropdown\\\"></select>\\n\\t\\t</div>\\n\\n\\t\\t<script>\\n\\n\\t\\t\\t(function() {\\n\\n\\t\\t\\t\\tvar notes,\\n\\t\\t\\t\\t\\tnotesValue,\\n\\t\\t\\t\\t\\tcurrentState,\\n\\t\\t\\t\\t\\tcurrentSlide,\\n\\t\\t\\t\\t\\tupcomingSlide,\\n\\t\\t\\t\\t\\tlayoutLabel,\\n\\t\\t\\t\\t\\tlayoutDropdown,\\n\\t\\t\\t\\t\\tpendingCalls = {},\\n\\t\\t\\t\\t\\tlastRevealApiCallId = 0,\\n\\t\\t\\t\\t\\tconnected = false\\n\\n\\t\\t\\t\\tvar connectionStatus = document.querySelector( '#connection-status' );\\n\\n\\t\\t\\t\\tvar SPEAKER_LAYOUTS = {\\n\\t\\t\\t\\t\\t'default': 'Default',\\n\\t\\t\\t\\t\\t'wide': 'Wide',\\n\\t\\t\\t\\t\\t'tall': 'Tall',\\n\\t\\t\\t\\t\\t'notes-only': 'Notes only'\\n\\t\\t\\t\\t};\\n\\n\\t\\t\\t\\tsetupLayout();\\n\\n\\t\\t\\t\\tlet openerOrigin;\\n\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\topenerOrigin = window.opener.location.origin;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcatch ( error ) { console.warn( error ) }\\n\\n\\t\\t\\t\\t// In order to prevent XSS, the speaker view will only run if its\\n\\t\\t\\t\\t// opener has the same origin as itself\\n\\t\\t\\t\\tif( window.location.origin !== openerOrigin ) {\\n\\t\\t\\t\\t\\tconnectionStatus.innerHTML = 'Cross origin error.<br>The speaker window can only be opened from the same origin.';\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tvar connectionTimeout = setTimeout( function() {\\n\\t\\t\\t\\t\\tconnectionStatus.innerHTML = 'Error connecting to main window.<br>Please try closing and reopening the speaker view.';\\n\\t\\t\\t\\t}, 5000 );\\n\\n\\t\\t\\t\\twindow.addEventListener( 'message', function( event ) {\\n\\n\\t\\t\\t\\t\\tclearTimeout( connectionTimeout );\\n\\t\\t\\t\\t\\tconnectionStatus.style.display = 'none';\\n\\n\\t\\t\\t\\t\\tvar data = JSON.parse( event.data );\\n\\n\\t\\t\\t\\t\\t// The overview mode is only useful to the reveal.js instance\\n\\t\\t\\t\\t\\t// where navigation occurs so we don't sync it\\n\\t\\t\\t\\t\\tif( data.state ) delete data.state.overview;\\n\\n\\t\\t\\t\\t\\t// Messages sent by the notes plugin inside of the main window\\n\\t\\t\\t\\t\\tif( data && data.namespace === 'reveal-notes' ) {\\n\\t\\t\\t\\t\\t\\tif( data.type === 'connect' ) {\\n\\t\\t\\t\\t\\t\\t\\thandleConnectMessage( data );\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\telse if( data.type === 'state' ) {\\n\\t\\t\\t\\t\\t\\t\\thandleStateMessage( data );\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\telse if( data.type === 'return' ) {\\n\\t\\t\\t\\t\\t\\t\\tpendingCalls[data.callId](data.result);\\n\\t\\t\\t\\t\\t\\t\\tdelete pendingCalls[data.callId];\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t// Messages sent by the reveal.js inside of the current slide preview\\n\\t\\t\\t\\t\\telse if( data && data.namespace === 'reveal' ) {\\n\\t\\t\\t\\t\\t\\tif( /ready/.test( data.eventName ) ) {\\n\\t\\t\\t\\t\\t\\t\\t// Send a message back to notify that the handshake is complete\\n\\t\\t\\t\\t\\t\\t\\twindow.opener.postMessage( JSON.stringify({ namespace: 'reveal-notes', type: 'connected'} ), '*' );\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\telse if( /slidechanged|fragmentshown|fragmenthidden|paused|resumed/.test( data.eventName ) && currentState !== JSON.stringify( data.state ) ) {\\n\\n\\t\\t\\t\\t\\t\\t\\tdispatchStateToMainWindow( data.state );\\n\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t} );\\n\\n\\t\\t\\t\\t/**\\n\\t\\t\\t\\t * Updates the presentation in the main window to match the state\\n\\t\\t\\t\\t * of the presentation in the notes window.\\n\\t\\t\\t\\t */\\n\\t\\t\\t\\tconst dispatchStateToMainWindow = debounce(( state ) => {\\n\\t\\t\\t\\t\\twindow.opener.postMessage( JSON.stringify({ method: 'setState', args: [ state ]} ), '*' );\\n\\t\\t\\t\\t}, 500);\\n\\n\\t\\t\\t\\t/**\\n\\t\\t\\t\\t * Asynchronously calls the Reveal.js API of the main frame.\\n\\t\\t\\t\\t */\\n\\t\\t\\t\\tfunction callRevealApi( methodName, methodArguments, callback ) {\\n\\n\\t\\t\\t\\t\\tvar callId = ++lastRevealApiCallId;\\n\\t\\t\\t\\t\\tpendingCalls[callId] = callback;\\n\\t\\t\\t\\t\\twindow.opener.postMessage( JSON.stringify( {\\n\\t\\t\\t\\t\\t\\tnamespace: 'reveal-notes',\\n\\t\\t\\t\\t\\t\\ttype: 'call',\\n\\t\\t\\t\\t\\t\\tcallId: callId,\\n\\t\\t\\t\\t\\t\\tmethodName: methodName,\\n\\t\\t\\t\\t\\t\\targuments: methodArguments\\n\\t\\t\\t\\t\\t} ), '*' );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t/**\\n\\t\\t\\t\\t * Called when the main window is trying to establish a\\n\\t\\t\\t\\t * connection.\\n\\t\\t\\t\\t */\\n\\t\\t\\t\\tfunction handleConnectMessage( data ) {\\n\\n\\t\\t\\t\\t\\tif( connected === false ) {\\n\\t\\t\\t\\t\\t\\tconnected = true;\\n\\n\\t\\t\\t\\t\\t\\tsetupIframes( data );\\n\\t\\t\\t\\t\\t\\tsetupKeyboard();\\n\\t\\t\\t\\t\\t\\tsetupNotes();\\n\\t\\t\\t\\t\\t\\tsetupTimer();\\n\\t\\t\\t\\t\\t\\tsetupHeartbeat();\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t/**\\n\\t\\t\\t\\t * Called when the main window sends an updated state.\\n\\t\\t\\t\\t */\\n\\t\\t\\t\\tfunction handleStateMessage( data ) {\\n\\n\\t\\t\\t\\t\\t// Store the most recently set state to avoid circular loops\\n\\t\\t\\t\\t\\t// applying the same state\\n\\t\\t\\t\\t\\tcurrentState = JSON.stringify( data.state );\\n\\n\\t\\t\\t\\t\\t// No need for updating the notes in case of fragment changes\\n\\t\\t\\t\\t\\tif ( data.notes ) {\\n\\t\\t\\t\\t\\t\\tnotes.classList.remove( 'hidden' );\\n\\t\\t\\t\\t\\t\\tnotesValue.style.whiteSpace = data.whitespace;\\n\\t\\t\\t\\t\\t\\tif( data.markdown ) {\\n\\t\\t\\t\\t\\t\\t\\tnotesValue.innerHTML = marked( data.notes );\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\t\\tnotesValue.innerHTML = data.notes;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\tnotes.classList.add( 'hidden' );\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Update the note slides\\n\\t\\t\\t\\t\\tcurrentSlide.contentWindow.postMessage( JSON.stringify({ method: 'setState', args: [ data.state ] }), '*' );\\n\\t\\t\\t\\t\\tupcomingSlide.contentWindow.postMessage( JSON.stringify({ method: 'setState', args: [ data.state ] }), '*' );\\n\\t\\t\\t\\t\\tupcomingSlide.contentWindow.postMessage( JSON.stringify({ method: 'next' }), '*' );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Limit to max one state update per X ms\\n\\t\\t\\t\\thandleStateMessage = debounce( handleStateMessage, 200 );\\n\\n\\t\\t\\t\\t/**\\n\\t\\t\\t\\t * Forward keyboard events to the current slide window.\\n\\t\\t\\t\\t * This enables keyboard events to work even if focus\\n\\t\\t\\t\\t * isn't set on the current slide iframe.\\n\\t\\t\\t\\t *\\n\\t\\t\\t\\t * Block F5 default handling, it reloads and disconnects\\n\\t\\t\\t\\t * the speaker notes window.\\n\\t\\t\\t\\t */\\n\\t\\t\\t\\tfunction setupKeyboard() {\\n\\n\\t\\t\\t\\t\\tdocument.addEventListener( 'keydown', function( event ) {\\n\\t\\t\\t\\t\\t\\tif( event.keyCode === 116 || ( event.metaKey && event.keyCode === 82 ) ) {\\n\\t\\t\\t\\t\\t\\t\\tevent.preventDefault();\\n\\t\\t\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tcurrentSlide.contentWindow.postMessage( JSON.stringify({ method: 'triggerKey', args: [ event.keyCode ] }), '*' );\\n\\t\\t\\t\\t\\t} );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t/**\\n\\t\\t\\t\\t * Creates the preview iframes.\\n\\t\\t\\t\\t */\\n\\t\\t\\t\\tfunction setupIframes( data ) {\\n\\n\\t\\t\\t\\t\\tvar params = [\\n\\t\\t\\t\\t\\t\\t'receiver',\\n\\t\\t\\t\\t\\t\\t'progress=false',\\n\\t\\t\\t\\t\\t\\t'history=false',\\n\\t\\t\\t\\t\\t\\t'transition=none',\\n\\t\\t\\t\\t\\t\\t'autoSlide=0',\\n\\t\\t\\t\\t\\t\\t'backgroundTransition=none'\\n\\t\\t\\t\\t\\t].join( '&' );\\n\\n\\t\\t\\t\\t\\tvar urlSeparator = /\\\\?/.test(data.url) ? '&' : '?';\\n\\t\\t\\t\\t\\tvar hash = '#/' + data.state.indexh + '/' + data.state.indexv;\\n\\t\\t\\t\\t\\tvar currentURL = data.url + urlSeparator + params + '&postMessageEvents=true' + hash;\\n\\t\\t\\t\\t\\tvar upcomingURL = data.url + urlSeparator + params + '&controls=false' + hash;\\n\\n\\t\\t\\t\\t\\tcurrentSlide = document.createElement( 'iframe' );\\n\\t\\t\\t\\t\\tcurrentSlide.setAttribute( 'width', 1280 );\\n\\t\\t\\t\\t\\tcurrentSlide.setAttribute( 'height', 1024 );\\n\\t\\t\\t\\t\\tcurrentSlide.setAttribute( 'src', currentURL );\\n\\t\\t\\t\\t\\tdocument.querySelector( '#current-slide' ).appendChild( currentSlide );\\n\\n\\t\\t\\t\\t\\tupcomingSlide = document.createElement( 'iframe' );\\n\\t\\t\\t\\t\\tupcomingSlide.setAttribute( 'width', 640 );\\n\\t\\t\\t\\t\\tupcomingSlide.setAttribute( 'height', 512 );\\n\\t\\t\\t\\t\\tupcomingSlide.setAttribute( 'src', upcomingURL );\\n\\t\\t\\t\\t\\tdocument.querySelector( '#upcoming-slide' ).appendChild( upcomingSlide );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t/**\\n\\t\\t\\t\\t * Setup the notes UI.\\n\\t\\t\\t\\t */\\n\\t\\t\\t\\tfunction setupNotes() {\\n\\n\\t\\t\\t\\t\\tnotes = document.querySelector( '.speaker-controls-notes' );\\n\\t\\t\\t\\t\\tnotesValue = document.querySelector( '.speaker-controls-notes .value' );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t/**\\n\\t\\t\\t\\t * We send out a heartbeat at all times to ensure we can\\n\\t\\t\\t\\t * reconnect with the main presentation window after reloads.\\n\\t\\t\\t\\t */\\n\\t\\t\\t\\tfunction setupHeartbeat() {\\n\\n\\t\\t\\t\\t\\tsetInterval( () => {\\n\\t\\t\\t\\t\\t\\twindow.opener.postMessage( JSON.stringify({ namespace: 'reveal-notes', type: 'heartbeat'} ), '*' );\\n\\t\\t\\t\\t\\t}, 1000 );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tfunction getTimings( callback ) {\\n\\n\\t\\t\\t\\t\\tcallRevealApi( 'getSlidesAttributes', [], function ( slideAttributes ) {\\n\\t\\t\\t\\t\\t\\tcallRevealApi( 'getConfig', [], function ( config ) {\\n\\t\\t\\t\\t\\t\\t\\tvar totalTime = config.totalTime;\\n\\t\\t\\t\\t\\t\\t\\tvar minTimePerSlide = config.minimumTimePerSlide || 0;\\n\\t\\t\\t\\t\\t\\t\\tvar defaultTiming = config.defaultTiming;\\n\\t\\t\\t\\t\\t\\t\\tif ((defaultTiming == null) && (totalTime == null)) {\\n\\t\\t\\t\\t\\t\\t\\t\\tcallback(null);\\n\\t\\t\\t\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t// Setting totalTime overrides defaultTiming\\n\\t\\t\\t\\t\\t\\t\\tif (totalTime) {\\n\\t\\t\\t\\t\\t\\t\\t\\tdefaultTiming = 0;\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\tvar timings = [];\\n\\t\\t\\t\\t\\t\\t\\tfor ( var i in slideAttributes ) {\\n\\t\\t\\t\\t\\t\\t\\t\\tvar slide = slideAttributes[ i ];\\n\\t\\t\\t\\t\\t\\t\\t\\tvar timing = defaultTiming;\\n\\t\\t\\t\\t\\t\\t\\t\\tif( slide.hasOwnProperty( 'data-timing' )) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tvar t = slide[ 'data-timing' ];\\n\\t\\t\\t\\t\\t\\t\\t\\t\\ttiming = parseInt(t);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif( isNaN(timing) ) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tconsole.warn(\\\"Could not parse timing '\\\" + t + \\\"' of slide \\\" + i + \\\"; using default of \\\" + defaultTiming);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\ttiming = defaultTiming;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\ttimings.push(timing);\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\tif ( totalTime ) {\\n\\t\\t\\t\\t\\t\\t\\t\\t// After we've allocated time to individual slides, we summarize it and\\n\\t\\t\\t\\t\\t\\t\\t\\t// subtract it from the total time\\n\\t\\t\\t\\t\\t\\t\\t\\tvar remainingTime = totalTime - timings.reduce( function(a, b) { return a + b; }, 0 );\\n\\t\\t\\t\\t\\t\\t\\t\\t// The remaining time is divided by the number of slides that have 0 seconds\\n\\t\\t\\t\\t\\t\\t\\t\\t// allocated at the moment, giving the average time-per-slide on the remaining slides\\n\\t\\t\\t\\t\\t\\t\\t\\tvar remainingSlides = (timings.filter( function(x) { return x == 0 }) ).length\\n\\t\\t\\t\\t\\t\\t\\t\\tvar timePerSlide = Math.round( remainingTime / remainingSlides, 0 )\\n\\t\\t\\t\\t\\t\\t\\t\\t// And now we replace every zero-value timing with that average\\n\\t\\t\\t\\t\\t\\t\\t\\ttimings = timings.map( function(x) { return (x==0 ? timePerSlide : x) } );\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\tvar slidesUnderMinimum = timings.filter( function(x) { return (x < minTimePerSlide) } ).length\\n\\t\\t\\t\\t\\t\\t\\tif ( slidesUnderMinimum ) {\\n\\t\\t\\t\\t\\t\\t\\t\\tmessage = \\\"The pacing time for \\\" + slidesUnderMinimum + \\\" slide(s) is under the configured minimum of \\\" + minTimePerSlide + \\\" seconds. Check the data-timing attribute on individual slides, or consider increasing the totalTime or minimumTimePerSlide configuration options (or removing some slides).\\\";\\n\\t\\t\\t\\t\\t\\t\\t\\talert(message);\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\tcallback( timings );\\n\\t\\t\\t\\t\\t\\t} );\\n\\t\\t\\t\\t\\t} );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t/**\\n\\t\\t\\t\\t * Return the number of seconds allocated for presenting\\n\\t\\t\\t\\t * all slides up to and including this one.\\n\\t\\t\\t\\t */\\n\\t\\t\\t\\tfunction getTimeAllocated( timings, callback ) {\\n\\n\\t\\t\\t\\t\\tcallRevealApi( 'getSlidePastCount', [], function ( currentSlide ) {\\n\\t\\t\\t\\t\\t\\tvar allocated = 0;\\n\\t\\t\\t\\t\\t\\tfor (var i in timings.slice(0, currentSlide + 1)) {\\n\\t\\t\\t\\t\\t\\t\\tallocated += timings[i];\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tcallback( allocated );\\n\\t\\t\\t\\t\\t} );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t/**\\n\\t\\t\\t\\t * Create the timer and clock and start updating them\\n\\t\\t\\t\\t * at an interval.\\n\\t\\t\\t\\t */\\n\\t\\t\\t\\tfunction setupTimer() {\\n\\n\\t\\t\\t\\t\\tvar start = new Date(),\\n\\t\\t\\t\\t\\ttimeEl = document.querySelector( '.speaker-controls-time' ),\\n\\t\\t\\t\\t\\tclockEl = timeEl.querySelector( '.clock-value' ),\\n\\t\\t\\t\\t\\thoursEl = timeEl.querySelector( '.hours-value' ),\\n\\t\\t\\t\\t\\tminutesEl = timeEl.querySelector( '.minutes-value' ),\\n\\t\\t\\t\\t\\tsecondsEl = timeEl.querySelector( '.seconds-value' ),\\n\\t\\t\\t\\t\\tpacingTitleEl = timeEl.querySelector( '.pacing-title' ),\\n\\t\\t\\t\\t\\tpacingEl = timeEl.querySelector( '.pacing' ),\\n\\t\\t\\t\\t\\tpacingHoursEl = pacingEl.querySelector( '.hours-value' ),\\n\\t\\t\\t\\t\\tpacingMinutesEl = pacingEl.querySelector( '.minutes-value' ),\\n\\t\\t\\t\\t\\tpacingSecondsEl = pacingEl.querySelector( '.seconds-value' );\\n\\n\\t\\t\\t\\t\\tvar timings = null;\\n\\t\\t\\t\\t\\tgetTimings( function ( _timings ) {\\n\\n\\t\\t\\t\\t\\t\\ttimings = _timings;\\n\\t\\t\\t\\t\\t\\tif (_timings !== null) {\\n\\t\\t\\t\\t\\t\\t\\tpacingTitleEl.style.removeProperty('display');\\n\\t\\t\\t\\t\\t\\t\\tpacingEl.style.removeProperty('display');\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t// Update once directly\\n\\t\\t\\t\\t\\t\\t_updateTimer();\\n\\n\\t\\t\\t\\t\\t\\t// Then update every second\\n\\t\\t\\t\\t\\t\\tsetInterval( _updateTimer, 1000 );\\n\\n\\t\\t\\t\\t\\t} );\\n\\n\\n\\t\\t\\t\\t\\tfunction _resetTimer() {\\n\\n\\t\\t\\t\\t\\t\\tif (timings == null) {\\n\\t\\t\\t\\t\\t\\t\\tstart = new Date();\\n\\t\\t\\t\\t\\t\\t\\t_updateTimer();\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\t\\t// Reset timer to beginning of current slide\\n\\t\\t\\t\\t\\t\\t\\tgetTimeAllocated( timings, function ( slideEndTimingSeconds ) {\\n\\t\\t\\t\\t\\t\\t\\t\\tvar slideEndTiming = slideEndTimingSeconds * 1000;\\n\\t\\t\\t\\t\\t\\t\\t\\tcallRevealApi( 'getSlidePastCount', [], function ( currentSlide ) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tvar currentSlideTiming = timings[currentSlide] * 1000;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tvar previousSlidesTiming = slideEndTiming - currentSlideTiming;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tvar now = new Date();\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tstart = new Date(now.getTime() - previousSlidesTiming);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t_updateTimer();\\n\\t\\t\\t\\t\\t\\t\\t\\t} );\\n\\t\\t\\t\\t\\t\\t\\t} );\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\ttimeEl.addEventListener( 'click', function() {\\n\\t\\t\\t\\t\\t\\t_resetTimer();\\n\\t\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t\\t} );\\n\\n\\t\\t\\t\\t\\tfunction _displayTime( hrEl, minEl, secEl, time) {\\n\\n\\t\\t\\t\\t\\t\\tvar sign = Math.sign(time) == -1 ? \\\"-\\\" : \\\"\\\";\\n\\t\\t\\t\\t\\t\\ttime = Math.abs(Math.round(time / 1000));\\n\\t\\t\\t\\t\\t\\tvar seconds = time % 60;\\n\\t\\t\\t\\t\\t\\tvar minutes = Math.floor( time / 60 ) % 60 ;\\n\\t\\t\\t\\t\\t\\tvar hours = Math.floor( time / ( 60 * 60 )) ;\\n\\t\\t\\t\\t\\t\\thrEl.innerHTML = sign + zeroPadInteger( hours );\\n\\t\\t\\t\\t\\t\\tif (hours == 0) {\\n\\t\\t\\t\\t\\t\\t\\thrEl.classList.add( 'mute' );\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\t\\thrEl.classList.remove( 'mute' );\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tminEl.innerHTML = ':' + zeroPadInteger( minutes );\\n\\t\\t\\t\\t\\t\\tif (hours == 0 && minutes == 0) {\\n\\t\\t\\t\\t\\t\\t\\tminEl.classList.add( 'mute' );\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\t\\tminEl.classList.remove( 'mute' );\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tsecEl.innerHTML = ':' + zeroPadInteger( seconds );\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tfunction _updateTimer() {\\n\\n\\t\\t\\t\\t\\t\\tvar diff, hours, minutes, seconds,\\n\\t\\t\\t\\t\\t\\tnow = new Date();\\n\\n\\t\\t\\t\\t\\t\\tdiff = now.getTime() - start.getTime();\\n\\n\\t\\t\\t\\t\\t\\tclockEl.innerHTML = now.toLocaleTimeString( 'en-US', { hour12: true, hour: '2-digit', minute:'2-digit' } );\\n\\t\\t\\t\\t\\t\\t_displayTime( hoursEl, minutesEl, secondsEl, diff );\\n\\t\\t\\t\\t\\t\\tif (timings !== null) {\\n\\t\\t\\t\\t\\t\\t\\t_updatePacing(diff);\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tfunction _updatePacing(diff) {\\n\\n\\t\\t\\t\\t\\t\\tgetTimeAllocated( timings, function ( slideEndTimingSeconds ) {\\n\\t\\t\\t\\t\\t\\t\\tvar slideEndTiming = slideEndTimingSeconds * 1000;\\n\\n\\t\\t\\t\\t\\t\\t\\tcallRevealApi( 'getSlidePastCount', [], function ( currentSlide ) {\\n\\t\\t\\t\\t\\t\\t\\t\\tvar currentSlideTiming = timings[currentSlide] * 1000;\\n\\t\\t\\t\\t\\t\\t\\t\\tvar timeLeftCurrentSlide = slideEndTiming - diff;\\n\\t\\t\\t\\t\\t\\t\\t\\tif (timeLeftCurrentSlide < 0) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tpacingEl.className = 'pacing behind';\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\telse if (timeLeftCurrentSlide < currentSlideTiming) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tpacingEl.className = 'pacing on-track';\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tpacingEl.className = 'pacing ahead';\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t_displayTime( pacingHoursEl, pacingMinutesEl, pacingSecondsEl, timeLeftCurrentSlide );\\n\\t\\t\\t\\t\\t\\t\\t} );\\n\\t\\t\\t\\t\\t\\t} );\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t/**\\n\\t\\t\\t\\t * Sets up the speaker view layout and layout selector.\\n\\t\\t\\t\\t */\\n\\t\\t\\t\\tfunction setupLayout() {\\n\\n\\t\\t\\t\\t\\tlayoutDropdown = document.querySelector( '.speaker-layout-dropdown' );\\n\\t\\t\\t\\t\\tlayoutLabel = document.querySelector( '.speaker-layout-label' );\\n\\n\\t\\t\\t\\t\\t// Render the list of available layouts\\n\\t\\t\\t\\t\\tfor( var id in SPEAKER_LAYOUTS ) {\\n\\t\\t\\t\\t\\t\\tvar option = document.createElement( 'option' );\\n\\t\\t\\t\\t\\t\\toption.setAttribute( 'value', id );\\n\\t\\t\\t\\t\\t\\toption.textContent = SPEAKER_LAYOUTS[ id ];\\n\\t\\t\\t\\t\\t\\tlayoutDropdown.appendChild( option );\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Monitor the dropdown for changes\\n\\t\\t\\t\\t\\tlayoutDropdown.addEventListener( 'change', function( event ) {\\n\\n\\t\\t\\t\\t\\t\\tsetLayout( layoutDropdown.value );\\n\\n\\t\\t\\t\\t\\t}, false );\\n\\n\\t\\t\\t\\t\\t// Restore any currently persisted layout\\n\\t\\t\\t\\t\\tsetLayout( getLayout() );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t/**\\n\\t\\t\\t\\t * Sets a new speaker view layout. The layout is persisted\\n\\t\\t\\t\\t * in local storage.\\n\\t\\t\\t\\t */\\n\\t\\t\\t\\tfunction setLayout( value ) {\\n\\n\\t\\t\\t\\t\\tvar title = SPEAKER_LAYOUTS[ value ];\\n\\n\\t\\t\\t\\t\\tlayoutLabel.innerHTML = 'Layout' + ( title ? ( ': ' + title ) : '' );\\n\\t\\t\\t\\t\\tlayoutDropdown.value = value;\\n\\n\\t\\t\\t\\t\\tdocument.body.setAttribute( 'data-speaker-layout', value );\\n\\n\\t\\t\\t\\t\\t// Persist locally\\n\\t\\t\\t\\t\\tif( supportsLocalStorage() ) {\\n\\t\\t\\t\\t\\t\\twindow.localStorage.setItem( 'reveal-speaker-layout', value );\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t/**\\n\\t\\t\\t\\t * Returns the ID of the most recently set speaker layout\\n\\t\\t\\t\\t * or our default layout if none has been set.\\n\\t\\t\\t\\t */\\n\\t\\t\\t\\tfunction getLayout() {\\n\\n\\t\\t\\t\\t\\tif( supportsLocalStorage() ) {\\n\\t\\t\\t\\t\\t\\tvar layout = window.localStorage.getItem( 'reveal-speaker-layout' );\\n\\t\\t\\t\\t\\t\\tif( layout ) {\\n\\t\\t\\t\\t\\t\\t\\treturn layout;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Default to the first record in the layouts hash\\n\\t\\t\\t\\t\\tfor( var id in SPEAKER_LAYOUTS ) {\\n\\t\\t\\t\\t\\t\\treturn id;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tfunction supportsLocalStorage() {\\n\\n\\t\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\t\\tlocalStorage.setItem('test', 'test');\\n\\t\\t\\t\\t\\t\\tlocalStorage.removeItem('test');\\n\\t\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tcatch( e ) {\\n\\t\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tfunction zeroPadInteger( num ) {\\n\\n\\t\\t\\t\\t\\tvar str = '00' + parseInt( num );\\n\\t\\t\\t\\t\\treturn str.substring( str.length - 2 );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t/**\\n\\t\\t\\t\\t * Limits the frequency at which a function can be called.\\n\\t\\t\\t\\t */\\n\\t\\t\\t\\tfunction debounce( fn, ms ) {\\n\\n\\t\\t\\t\\t\\tvar lastTime = 0,\\n\\t\\t\\t\\t\\t\\ttimeout;\\n\\n\\t\\t\\t\\t\\treturn function() {\\n\\n\\t\\t\\t\\t\\t\\tvar args = arguments;\\n\\t\\t\\t\\t\\t\\tvar context = this;\\n\\n\\t\\t\\t\\t\\t\\tclearTimeout( timeout );\\n\\n\\t\\t\\t\\t\\t\\tvar timeSinceLastCall = Date.now() - lastTime;\\n\\t\\t\\t\\t\\t\\tif( timeSinceLastCall > ms ) {\\n\\t\\t\\t\\t\\t\\t\\tfn.apply( context, args );\\n\\t\\t\\t\\t\\t\\t\\tlastTime = Date.now();\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\t\\ttimeout = setTimeout( function() {\\n\\t\\t\\t\\t\\t\\t\\t\\tfn.apply( context, args );\\n\\t\\t\\t\\t\\t\\t\\t\\tlastTime = Date.now();\\n\\t\\t\\t\\t\\t\\t\\t}, ms - timeSinceLastCall );\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t})();\\n\\n\\t\\t<\\/script>\\n\\t</body>\\n</html>\"),!n)return void alert(\"Speaker view popup failed to open. Please make sure popups are allowed and reopen the speaker view.\");!function(){const i=e.getConfig().url,s=\"string\"==typeof i?i:window.location.protocol+\"//\"+window.location.host+window.location.pathname+window.location.search;t=setInterval((function(){n.postMessage(JSON.stringify({namespace:\"reveal-notes\",type:\"connect\",state:e.getState(),url:s}),\"*\")}),500),window.addEventListener(\"message\",r)}()}}function s(t){let i=e.getCurrentSlide(),s=i.querySelectorAll(\"aside.notes\"),r=i.querySelector(\".current-fragment\"),a={namespace:\"reveal-notes\",type:\"state\",notes:\"\",markdown:!1,whitespace:\"normal\",state:e.getState()};if(i.hasAttribute(\"data-notes\")&&(a.notes=i.getAttribute(\"data-notes\"),a.whitespace=\"pre-wrap\"),r){let t=r.querySelector(\"aside.notes\");t?(a.notes=t.innerHTML,a.markdown=\"string\"==typeof t.getAttribute(\"data-markdown\"),s=null):r.hasAttribute(\"data-notes\")&&(a.notes=r.getAttribute(\"data-notes\"),a.whitespace=\"pre-wrap\",s=null)}s&&(a.notes=Array.from(s).map((t=>t.innerHTML)).join(\"\\n\"),a.markdown=s[0]&&\"string\"==typeof s[0].getAttribute(\"data-markdown\")),n.postMessage(JSON.stringify(a),\"*\")}function r(i){if(function(t){try{return window.location.origin===t.source.location.origin}catch(t){return!1}}(i)){let s=JSON.parse(i.data);s&&\"reveal-notes\"===s.namespace&&\"connected\"===s.type?(clearInterval(t),a()):s&&\"reveal-notes\"===s.namespace&&\"call\"===s.type&&function(t,i,s){let r=e[t].apply(e,i);n.postMessage(JSON.stringify({namespace:\"reveal-notes\",type:\"return\",result:r,callId:s}),\"*\")}(s.methodName,s.arguments,s.callId)}}function a(){e.on(\"slidechanged\",s),e.on(\"fragmentshown\",s),e.on(\"fragmenthidden\",s),e.on(\"overviewhidden\",s),e.on(\"overviewshown\",s),e.on(\"paused\",s),e.on(\"resumed\",s),s()}return{id:\"notes\",init:function(t){e=t,/receiver/i.test(window.location.search)||(null!==window.location.search.match(/(\\?|\\&)notes/gi)?i():window.addEventListener(\"message\",(t=>{if(!n&&\"string\"==typeof t.data){let i;try{i=JSON.parse(t.data)}catch(t){}i&&\"reveal-notes\"===i.namespace&&\"heartbeat\"===i.type&&(e=t.source,n&&!n.closed?n.focus():(n=e,window.addEventListener(\"message\",r),a()))}var e})),e.addKeyBinding({keyCode:83,key:\"S\",description:\"Speaker notes view\"},(function(){i()})))},open:i}}}));\n",
      "\nReveal.isReady = () => false;\n\nReveal.VERSION = VERSION;\n\nexport default Reveal;",
      "\nexport default Reveal;",
      "\t};\n\n\tfunction loadScript( url, callback ) {\n\n\t\tlet head = document.querySelector( 'head' );\n\t\tlet script = document.createElement( 'script' );\n\t\tscript.type = 'text/javascript';\n\t\tscript.src = url;\n\n\t\t// Wrapper for callback to make sure it only fires once\n\t\tlet finish = () => {\n\t\t\tif( typeof callback === 'function' ) {\n\t\t\t\tcallback.call();\n\t\t\t\tcallback = null;\n\t\t\t}\n\t\t}\n\n\t\tscript.onload = finish;\n\n\t\t// IE\n\t\tscript.onreadystatechange = () => {\n\t\t\tif ( this.readyState === 'loaded' ) {\n\t\t\t\tfinish();\n\t\t\t}\n\t\t}\n\n\t\t// Normal browsers\n\t\thead.appendChild( script );\n\n\t}\n\n\treturn {\n\t\tid: 'mathjax2',\n\n\t\tinit: function( reveal ) {\n\n\t\t\tdeck = reveal;\n\n\t\t\tlet revealOptions = deck.getConfig().mathjax2 || deck.getConfig().math || {};\n\n\t\t\tlet options = { ...defaultOptions, ...revealOptions };\n\t\t\tlet mathjax = options.mathjax || 'https://cdn.jsdelivr.net/npm/mathjax@2/MathJax.js';\n\t\t\tlet config = options.config || 'TeX-AMS_HTML-full';\n\t\t\tlet url = mathjax + '?config=' + config;\n\n\t\t\toptions.tex2jax = { ...defaultOptions.tex2jax, ...revealOptions.tex2jax };\n\n\t\t\toptions.mathjax = options.config = null;\n\n\t\t\tloadScript( url, function() {\n\n\t\t\t\tMathJax.Hub.Config( options );\n\n\t\t\t\t// Typeset followed by an immediate reveal.js layout since\n\t\t\t\t// the typesetting process could affect slide height\n\t\t\t\tMathJax.Hub.Queue( [ 'Typeset', MathJax.Hub, deck.getRevealElement() ] );\n\t\t\t\tMathJax.Hub.Queue( deck.layout );\n\n\t\t\t\t// Reprocess equations in slides when they turn visible\n\t\t\t\tdeck.on( 'slidechanged', function( event ) {\n\n\t\t\t\t\tMathJax.Hub.Queue( [ 'Typeset', MathJax.Hub, event.currentSlide ] );\n\n\t\t\t\t} );",
      "\n\t\t// The hash couldn't be parsed or no matching named link was found\n\t\treturn null\n\n\t}\n\n\t/**\n\t * Reads the current URL (hash) and navigates accordingly.\n\t */\n\treadURL() {\n\n\t\tconst currentIndices = this.Reveal.getIndices();\n\t\tconst newIndices = this.getIndicesFromHash();\n\n\t\tif( newIndices ) {\n\t\t\tif( ( newIndices.h !== currentIndices.h || newIndices.v !== currentIndices.v || newIndices.f !== undefined ) ) {\n\t\t\t\t\tthis.Reveal.slide( newIndices.h, newIndices.v, newIndices.f );\n\t\t\t}\n\t\t}\n\t\t// If no new indices are available, we're trying to navigate to\n\t\t// a slide hash that does not exist\n\t\telse {\n\t\t\tthis.Reveal.slide( currentIndices.h || 0, currentIndices.v || 0 );\n\t\t}\n\n\t}\n\n\t/**\n\t * Updates the page URL (hash) to reflect the current\n\t * state.\n\t *\n\t * @param {number} delay The time in ms to wait before\n\t * writing the hash\n\t */\n\twriteURL( delay ) {\n\n\t\tlet config = this.Reveal.getConfig();\n\t\tlet currentSlide = this.Reveal.getCurrentSlide();\n\n\t\t// Make sure there's never more than one timeout running\n\t\tclearTimeout( this.writeURLTimeout );\n\n\t\t// If a delay is specified, timeout this call\n\t\tif( typeof delay === 'number' ) {\n\t\t\tthis.writeURLTimeout = setTimeout( this.writeURL, delay );\n\t\t}\n\t\telse if( currentSlide ) {\n\n\t\t\tlet hash = this.getHash();\n\n\t\t\t// If we're configured to push to history OR the history\n\t\t\t// API is not available.\n\t\t\tif( config.history ) {\n\t\t\t\twindow.location.hash = hash;\n\t\t\t}\n\t\t\t// If we're configured to reflect the current slide in the\n\t\t\t// URL without pushing to history.\n\t\t\telse if( config.hash ) {\n\t\t\t\t// If the hash is empty, don't add it to the URL\n\t\t\t\tif( hash === '/' ) {\n\t\t\t\t\tthis.debouncedReplaceState( window.location.pathname + window.location.search );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.debouncedReplaceState( '#' + hash );",
      "const UA = navigator.userAgent;\n\nexport const isMobile = /(iphone|ipod|ipad|android)/gi.test( UA ) ||\n\t\t\t\t\t\t( navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1 ); // iPadOS\n\nexport const isChrome = /chrome/i.test( UA ) && !/edge/i.test( UA );\n\nexport const isAndroid = /android/gi.test( UA );",
      "window.externalScriptSequence += 'D';",
      "\t}\n\n\trender() {\n\n\t\tthis.element = document.createElement( 'div' );\n\t\tthis.element.className = 'speaker-notes';\n\t\tthis.element.setAttribute( 'data-prevent-swipe', '' );\n\t\tthis.element.setAttribute( 'tabindex', '0' );\n\t\tthis.Reveal.getRevealElement().appendChild( this.element );\n\n\t}\n\n\t/**\n\t * Called when the reveal.js config is updated.\n\t */\n\tconfigure( config, oldConfig ) {\n\n\t\tif( config.showNotes ) {\n\t\t\tthis.element.setAttribute( 'data-layout', typeof config.showNotes === 'string' ? config.showNotes : 'inline' );\n\t\t}\n\n\t}\n\n\t/**\n\t * Pick up notes from the current slide and display them\n\t * to the viewer.\n\t *\n\t * @see {@link config.showNotes}\n\t */\n\tupdate() {\n\n\t\tif( this.Reveal.getConfig().showNotes && this.element && this.Reveal.getCurrentSlide() && !this.Reveal.print.isPrintingPDF() ) {\n\n\t\t\tthis.element.innerHTML = this.getSlideNotes() || '<span class=\"notes-placeholder\">No notes on this slide.</span>';\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Updates the visibility of the speaker notes sidebar that\n\t * is used to share annotated slides. The notes sidebar is\n\t * only visible if showNotes is true and there are notes on\n\t * one or more slides in the deck.\n\t */\n\tupdateVisibility() {\n\n\t\tif( this.Reveal.getConfig().showNotes && this.hasNotes() && !this.Reveal.print.isPrintingPDF() ) {\n\t\t\tthis.Reveal.getRevealElement().classList.add( 'show-notes' );\n\t\t}\n\t\telse {\n\t\t\tthis.Reveal.getRevealElement().classList.remove( 'show-notes' );\n\t\t}\n\n\t}\n\n\t/**\n\t * Checks if there are speaker notes for ANY slide in the\n\t * presentation.\n\t */\n\thasNotes() {\n\n\t\treturn this.Reveal.getSlidesElement().querySelectorAll( '[data-notes], aside.notes' ).length > 0;\n",
      "!function(t,e){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define(e):(t=\"undefined\"!=typeof globalThis?globalThis:t||self).RevealNotes=e()}(this,(function(){\"use strict\";function t(){return{baseUrl:null,breaks:!1,extensions:null,gfm:!0,headerIds:!0,headerPrefix:\"\",highlight:null,langPrefix:\"language-\",mangle:!0,pedantic:!1,renderer:null,sanitize:!1,sanitizer:null,silent:!1,smartLists:!1,smartypants:!1,tokenizer:null,walkTokens:null,xhtml:!1}}let e={baseUrl:null,breaks:!1,extensions:null,gfm:!0,headerIds:!0,headerPrefix:\"\",highlight:null,langPrefix:\"language-\",mangle:!0,pedantic:!1,renderer:null,sanitize:!1,sanitizer:null,silent:!1,smartLists:!1,smartypants:!1,tokenizer:null,walkTokens:null,xhtml:!1};const n=/[&<>\"']/,i=/[&<>\"']/g,s=/[<>\"']|&(?!#?\\w+;)/,r=/[<>\"']|&(?!#?\\w+;)/g,a={\"&\":\"&amp;\",\"<\":\"&lt;\",\">\":\"&gt;\",'\"':\"&quot;\",\"'\":\"&#39;\"},l=t=>a[t];function o(t,e){if(e){if(n.test(t))return t.replace(i,l)}else if(s.test(t))return t.replace(r,l);return t}const c=/&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/gi;function p(t){return t.replace(c,((t,e)=>\"colon\"===(e=e.toLowerCase())?\":\":\"#\"===e.charAt(0)?\"x\"===e.charAt(1)?String.fromCharCode(parseInt(e.substring(2),16)):String.fromCharCode(+e.substring(1)):\"\"))}const u=/(^|[^\\[])\\^/g;function d(t,e){t=t.source||t,e=e||\"\";const n={replace:(e,i)=>(i=(i=i.source||i).replace(u,\"$1\"),t=t.replace(e,i),n),getRegex:()=>new RegExp(t,e)};return n}const h=/[^\\w:]/g,g=/^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;function m(t,e,n){if(t){let t;try{t=decodeURIComponent(p(n)).replace(h,\"\").toLowerCase()}catch(t){return null}if(0===t.indexOf(\"javascript:\")||0===t.indexOf(\"vbscript:\")||0===t.indexOf(\"data:\"))return null}e&&!g.test(n)&&(n=function(t,e){f[\" \"+t]||(k.test(t)?f[\" \"+t]=t+\"/\":f[\" \"+t]=S(t,\"/\",!0));t=f[\" \"+t];const n=-1===t.indexOf(\":\");return\"//\"===e.substring(0,2)?n?e:t.replace(w,\"$1\")+e:\"/\"===e.charAt(0)?n?e:t.replace(x,\"$1\")+e:t+e}(e,n));try{n=encodeURI(n).replace(/%25/g,\"%\")}catch(t){return null}return n}const f={},k=/^[^:]+:\\/*[^/]*$/,w=/^([^:]+:)[\\s\\S]*$/,x=/^([^:]+:\\/*[^/]*)[\\s\\S]*$/;const b={exec:function(){}};function y(t){let e,n,i=1;for(;i<arguments.length;i++)for(n in e=arguments[i],e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t}function v(t,e){const n=t.replace(/\\|/g,((t,e,n)=>{let i=!1,s=e;for(;--s>=0&&\"\\\\\"===n[s];)i=!i;return i?\"|\":\" |\"})).split(/ \\|/);let i=0;if(n[0].trim()||n.shift(),n.length>0&&!n[n.length-1].trim()&&n.pop(),n.length>e)n.splice(e);else for(;n.length<e;)n.push(\"\");for(;i<n.length;i++)n[i]=n[i].trim().replace(/\\\\\\|/g,\"|\");return n}function S(t,e,n){const i=t.length;if(0===i)return\"\";let s=0;for(;s<i;){const r=t.charAt(i-s-1);if(r!==e||n){if(r===e||!n)break;s++}else s++}return t.substr(0,i-s)}function T(t){t&&t.sanitize&&!t.silent&&console.warn(\"marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options\")}function _(t,e){if(e<1)return\"\";let n=\"\";for(;e>1;)1&e&&(n+=t),e>>=1,t+=t;return n+t}function z(t,e,n,i){const s=e.href,r=e.title?o(e.title):null,a=t[1].replace(/\\\\([\\[\\]])/g,\"$1\");if(\"!\"!==t[0].charAt(0)){i.state.inLink=!0;const t={type:\"link\",raw:n,href:s,title:r,text:a,tokens:i.inlineTokens(a,[])};return i.state.inLink=!1,t}return{type:\"image\",raw:n,href:s,title:r,text:o(a)}}class A{constructor(t){this.options=t||e}space(t){const e=this.rules.block.newline.exec(t);if(e&&e[0].length>0)return{type:\"space\",raw:e[0]}}code(t){const e=this.rules.block.code.exec(t);if(e){const t=e[0].replace(/^ {1,4}/gm,\"\");return{type:\"code\",raw:e[0],codeBlockStyle:\"indented\",text:this.options.pedantic?t:S(t,\"\\n\")}}}fences(t){const e=this.rules.block.fences.exec(t);if(e){const t=e[0],n=function(t,e){const n=t.match(/^(\\s+)(?:```)/);if(null===n)return e;const i=n[1];return e.split(\"\\n\").map((t=>{const e=t.match(/^\\s+/);if(null===e)return t;const[n]=e;return n.length>=i.length?t.slice(i.length):t})).join(\"\\n\")}(t,e[3]||\"\");return{type:\"code\",raw:t,lang:e[2]?e[2].trim():e[2],text:n}}}heading(t){const e=this.rules.block.heading.exec(t);if(e){let t=e[2].trim();if(/#$/.test(t)){const e=S(t,\"#\");this.options.pedantic?t=e.trim():e&&!/ $/.test(e)||(t=e.trim())}const n={type:\"heading\",raw:e[0],depth:e[1].length,text:t,tokens:[]};return this.lexer.inline(n.text,n.tokens),n}}hr(t){const e=this.rules.block.hr.exec(t);if(e)return{type:\"hr\",raw:e[0]}}blockquote(t){const e=this.rules.block.blockquote.exec(t);if(e){const t=e[0].replace(/^ *> ?/gm,\"\");return{type:\"blockquote\",raw:e[0],tokens:this.lexer.blockTokens(t,[]),text:t}}}list(t){let e=this.rules.block.list.exec(t);if(e){let n,i,s,r,a,l,o,c,p,u,d,h,g=e[1].trim();const m=g.length>1,f={type:\"list\",raw:\"\",ordered:m,start:m?+g.slice(0,-1):\"\",loose:!1,items:[]};g=m?`\\\\d{1,9}\\\\${g.slice(-1)}`:`\\\\${g}`,this.options.pedantic&&(g=m?g:\"[*+-]\");const k=new RegExp(`^( {0,3}${g})((?: [^\\\\n]*)?(?:\\\\n|$))`);for(;t&&(h=!1,e=k.exec(t))&&!this.rules.block.hr.test(t);){if(n=e[0],t=t.substring(n.length),c=e[2].split(\"\\n\",1)[0],p=t.split(\"\\n\",1)[0],this.options.pedantic?(r=2,d=c.trimLeft()):(r=e[2].search(/[^ ]/),r=r>4?1:r,d=c.slice(r),r+=e[1].length),l=!1,!c&&/^ *$/.test(p)&&(n+=p+\"\\n\",t=t.substring(p.length+1),h=!0),!h){const e=new RegExp(`^ {0,${Math.min(3,r-1)}}(?:[*+-]|\\\\d{1,9}[.)])`);for(;t&&(u=t.split(\"\\n\",1)[0],c=u,this.options.pedantic&&(c=c.replace(/^ {1,4}(?=( {4})*[^ ])/g,\"  \")),!e.test(c));){if(c.search(/[^ ]/)>=r||!c.trim())d+=\"\\n\"+c.slice(r);else{if(l)break;d+=\"\\n\"+c}l||c.trim()||(l=!0),n+=u+\"\\n\",t=t.substring(u.length+1)}}f.loose||(o?f.loose=!0:/\\n *\\n *$/.test(n)&&(o=!0)),this.options.gfm&&(i=/^\\[[ xX]\\] /.exec(d),i&&(s=\"[ ] \"!==i[0],d=d.replace(/^\\[[ xX]\\] +/,\"\"))),f.items.push({type:\"list_item\",raw:n,task:!!i,checked:s,loose:!1,text:d}),f.raw+=n}f.items[f.items.length-1].raw=n.trimRight(),f.items[f.items.length-1].text=d.trimRight(),f.raw=f.raw.trimRight();const w=f.items.length;for(a=0;a<w;a++){this.lexer.state.top=!1,f.items[a].tokens=this.lexer.blockTokens(f.items[a].text,[]);const t=f.items[a].tokens.filter((t=>\"space\"===t.type)),e=t.every((t=>{const e=t.raw.split(\"\");let n=0;for(const t of e)if(\"\\n\"===t&&(n+=1),n>1)return!0;return!1}));!f.loose&&t.length&&e&&(f.loose=!0,f.items[a].loose=!0)}return f}}html(t){const e=this.rules.block.html.exec(t);if(e){const t={type:\"html\",raw:e[0],pre:!this.options.sanitizer&&(\"pre\"===e[1]||\"script\"===e[1]||\"style\"===e[1]),text:e[0]};return this.options.sanitize&&(t.type=\"paragraph\",t.text=this.options.sanitizer?this.options.sanitizer(e[0]):o(e[0]),t.tokens=[],this.lexer.inline(t.text,t.tokens)),t}}def(t){const e=this.rules.block.def.exec(t);if(e){e[3]&&(e[3]=e[3].substring(1,e[3].length-1));return{type:\"def\",tag:e[1].toLowerCase().replace(/\\s+/g,\" \"),raw:e[0],href:e[2],title:e[3]}}}table(t){const e=this.rules.block.table.exec(t);if(e){const t={type:\"table\",header:v(e[1]).map((t=>({text:t}))),align:e[2].replace(/^ *|\\| *$/g,\"\").split(/ *\\| */),rows:e[3]&&e[3].trim()?e[3].replace(/\\n[ \\t]*$/,\"\").split(\"\\n\"):[]};if(t.header.length===t.align.length){t.raw=e[0];let n,i,s,r,a=t.align.length;for(n=0;n<a;n++)/^ *-+: *$/.test(t.align[n])?t.align[n]=\"right\":/^ *:-+: *$/.test(t.align[n])?t.align[n]=\"center\":/^ *:-+ *$/.test(t.align[n])?t.align[n]=\"left\":t.align[n]=null;for(a=t.rows.length,n=0;n<a;n++)t.rows[n]=v(t.rows[n],t.header.length).map((t=>({text:t})));for(a=t.header.length,i=0;i<a;i++)t.header[i].tokens=[],this.lexer.inlineTokens(t.header[i].text,t.header[i].tokens);for(a=t.rows.length,i=0;i<a;i++)for(r=t.rows[i],s=0;s<r.length;s++)r[s].tokens=[],this.lexer.inlineTokens(r[s].text,r[s].tokens);return t}}}lheading(t){const e=this.rules.block.lheading.exec(t);if(e){const t={type:\"heading\",raw:e[0],depth:\"=\"===e[2].charAt(0)?1:2,text:e[1],tokens:[]};return this.lexer.inline(t.text,t.tokens),t}}paragraph(t){const e=this.rules.block.paragraph.exec(t);if(e){const t={type:\"paragraph\",raw:e[0],text:\"\\n\"===e[1].charAt(e[1].length-1)?e[1].slice(0,-1):e[1],tokens:[]};return this.lexer.inline(t.text,t.tokens),t}}text(t){const e=this.rules.block.text.exec(t);if(e){const t={type:\"text\",raw:e[0],text:e[0],tokens:[]};return this.lexer.inline(t.text,t.tokens),t}}escape(t){const e=this.rules.inline.escape.exec(t);if(e)return{type:\"escape\",raw:e[0],text:o(e[1])}}tag(t){const e=this.rules.inline.tag.exec(t);if(e)return!this.lexer.state.inLink&&/^<a /i.test(e[0])?this.lexer.state.inLink=!0:this.lexer.state.inLink&&/^<\\/a>/i.test(e[0])&&(this.lexer.state.inLink=!1),!this.lexer.state.inRawBlock&&/^<(pre|code|kbd|script)(\\s|>)/i.test(e[0])?this.lexer.state.inRawBlock=!0:this.lexer.state.inRawBlock&&/^<\\/(pre|code|kbd|script)(\\s|>)/i.test(e[0])&&(this.lexer.state.inRawBlock=!1),{type:this.options.sanitize?\"text\":\"html\",raw:e[0],inLink:this.lexer.state.inLink,inRawBlock:this.lexer.state.inRawBlock,text:this.options.sanitize?this.options.sanitizer?this.options.sanitizer(e[0]):o(e[0]):e[0]}}link(t){const e=this.rules.inline.link.exec(t);if(e){const t=e[2].trim();if(!this.options.pedantic&&/^</.test(t)){if(!/>$/.test(t))return;const e=S(t.slice(0,-1),\"\\\\\");if((t.length-e.length)%2==0)return}else{const t=function(t,e){if(-1===t.indexOf(e[1]))return-1;const n=t.length;let i=0,s=0;for(;s<n;s++)if(\"\\\\\"===t[s])s++;else if(t[s]===e[0])i++;else if(t[s]===e[1]&&(i--,i<0))return s;return-1}(e[2],\"()\");if(t>-1){const n=(0===e[0].indexOf(\"!\")?5:4)+e[1].length+t;e[2]=e[2].substring(0,t),e[0]=e[0].substring(0,n).trim(),e[3]=\"\"}}let n=e[2],i=\"\";if(this.options.pedantic){const t=/^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(n);t&&(n=t[1],i=t[3])}else i=e[3]?e[3].slice(1,-1):\"\";return n=n.trim(),/^</.test(n)&&(n=this.options.pedantic&&!/>$/.test(t)?n.slice(1):n.slice(1,-1)),z(e,{href:n?n.replace(this.rules.inline._escapes,\"$1\"):n,title:i?i.replace(this.rules.inline._escapes,\"$1\"):i},e[0],this.lexer)}}reflink(t,e){let n;if((n=this.rules.inline.reflink.exec(t))||(n=this.rules.inline.nolink.exec(t))){let t=(n[2]||n[1]).replace(/\\s+/g,\" \");if(t=e[t.toLowerCase()],!t||!t.href){const t=n[0].charAt(0);return{type:\"text\",raw:t,text:t}}return z(n,t,n[0],this.lexer)}}emStrong(t,e,n=\"\"){let i=this.rules.inline.emStrong.lDelim.exec(t);if(!i)return;if(i[3]&&n.match(/[\\p{L}\\p{N}]/u))return;const s=i[1]||i[2]||\"\";if(!s||s&&(\"\"===n||this.rules.inline.punctuation.exec(n))){const n=i[0].length-1;let s,r,a=n,l=0;const o=\"*\"===i[0][0]?this.rules.inline.emStrong.rDelimAst:this.rules.inline.emStrong.rDelimUnd;for(o.lastIndex=0,e=e.slice(-1*t.length+n);null!=(i=o.exec(e));){if(s=i[1]||i[2]||i[3]||i[4]||i[5]||i[6],!s)continue;if(r=s.length,i[3]||i[4]){a+=r;continue}if((i[5]||i[6])&&n%3&&!((n+r)%3)){l+=r;continue}if(a-=r,a>0)continue;if(r=Math.min(r,r+a+l),Math.min(n,r)%2){const e=t.slice(1,n+i.index+r);return{type:\"em\",raw:t.slice(0,n+i.index+r+1),text:e,tokens:this.lexer.inlineTokens(e,[])}}const e=t.slice(2,n+i.index+r-1);return{type:\"strong\",raw:t.slice(0,n+i.index+r+1),text:e,tokens:this.lexer.inlineTokens(e,[])}}}}codespan(t){const e=this.rules.inline.code.exec(t);if(e){let t=e[2].replace(/\\n/g,\" \");const n=/[^ ]/.test(t),i=/^ /.test(t)&&/ $/.test(t);return n&&i&&(t=t.substring(1,t.length-1)),t=o(t,!0),{type:\"codespan\",raw:e[0],text:t}}}br(t){const e=this.rules.inline.br.exec(t);if(e)return{type:\"br\",raw:e[0]}}del(t){const e=this.rules.inline.del.exec(t);if(e)return{type:\"del\",raw:e[0],text:e[2],tokens:this.lexer.inlineTokens(e[2],[])}}autolink(t,e){const n=this.rules.inline.autolink.exec(t);if(n){let t,i;return\"@\"===n[2]?(t=o(this.options.mangle?e(n[1]):n[1]),i=\"mailto:\"+t):(t=o(n[1]),i=t),{type:\"link\",raw:n[0],text:t,href:i,tokens:[{type:\"text\",raw:t,text:t}]}}}url(t,e){let n;if(n=this.rules.inline.url.exec(t)){let t,i;if(\"@\"===n[2])t=o(this.options.mangle?e(n[0]):n[0]),i=\"mailto:\"+t;else{let e;do{e=n[0],n[0]=this.rules.inline._backpedal.exec(n[0])[0]}while(e!==n[0]);t=o(n[0]),i=\"www.\"===n[1]?\"http://\"+t:t}return{type:\"link\",raw:n[0],text:t,href:i,tokens:[{type:\"text\",raw:t,text:t}]}}}inlineText(t,e){const n=this.rules.inline.text.exec(t);if(n){let t;return t=this.lexer.state.inRawBlock?this.options.sanitize?this.options.sanitizer?this.options.sanitizer(n[0]):o(n[0]):n[0]:o(this.options.smartypants?e(n[0]):n[0]),{type:\"text\",raw:n[0],text:t}}}}const E={newline:/^(?: *(?:\\n|$))+/,code:/^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/,fences:/^ {0,3}(`{3,}(?=[^`\\n]*\\n)|~{3,})([^\\n]*)\\n(?:|([\\s\\S]*?)\\n)(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/,hr:/^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)/,heading:/^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/,blockquote:/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,list:/^( {0,3}bull)( [^\\n]+?)?(?:\\n|$)/,html:\"^ {0,3}(?:<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)|comment[^\\\\n]*(\\\\n+|$)|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$))\",def:/^ {0,3}\\[(label)\\]: *(?:\\n *)?<?([^\\s>]+)>?(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/,table:b,lheading:/^([^\\n]+)\\n {0,3}(=+|-+) *(?:\\n+|$)/,_paragraph:/^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/,text:/^[^\\n]+/,_label:/(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/,_title:/(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/};E.def=d(E.def).replace(\"label\",E._label).replace(\"title\",E._title).getRegex(),E.bullet=/(?:[*+-]|\\d{1,9}[.)])/,E.listItemStart=d(/^( *)(bull) */).replace(\"bull\",E.bullet).getRegex(),E.list=d(E.list).replace(/bull/g,E.bullet).replace(\"hr\",\"\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))\").replace(\"def\",\"\\\\n+(?=\"+E.def.source+\")\").getRegex(),E._tag=\"address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul\",E._comment=/<!--(?!-?>)[\\s\\S]*?(?:-->|$)/,E.html=d(E.html,\"i\").replace(\"comment\",E._comment).replace(\"tag\",E._tag).replace(\"attribute\",/ +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/).getRegex(),E.paragraph=d(E._paragraph).replace(\"hr\",E.hr).replace(\"heading\",\" {0,3}#{1,6} \").replace(\"|lheading\",\"\").replace(\"|table\",\"\").replace(\"blockquote\",\" {0,3}>\").replace(\"fences\",\" {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n\").replace(\"list\",\" {0,3}(?:[*+-]|1[.)]) \").replace(\"html\",\"</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)\").replace(\"tag\",E._tag).getRegex(),E.blockquote=d(E.blockquote).replace(\"paragraph\",E.paragraph).getRegex(),E.normal=y({},E),E.gfm=y({},E.normal,{table:\"^ *([^\\\\n ].*\\\\|.*)\\\\n {0,3}(?:\\\\| *)?(:?-+:? *(?:\\\\| *:?-+:? *)*)(?:\\\\| *)?(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)\"}),E.gfm.table=d(E.gfm.table).replace(\"hr\",E.hr).replace(\"heading\",\" {0,3}#{1,6} \").replace(\"blockquote\",\" {0,3}>\").replace(\"code\",\" {4}[^\\\\n]\").replace(\"fences\",\" {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n\").replace(\"list\",\" {0,3}(?:[*+-]|1[.)]) \").replace(\"html\",\"</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)\").replace(\"tag\",E._tag).getRegex(),E.gfm.paragraph=d(E._paragraph).replace(\"hr\",E.hr).replace(\"heading\",\" {0,3}#{1,6} \").replace(\"|lheading\",\"\").replace(\"table\",E.gfm.table).replace(\"blockquote\",\" {0,3}>\").replace(\"fences\",\" {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n\").replace(\"list\",\" {0,3}(?:[*+-]|1[.)]) \").replace(\"html\",\"</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)\").replace(\"tag\",E._tag).getRegex(),E.pedantic=y({},E.normal,{html:d(\"^ *(?:comment *(?:\\\\n|\\\\s*$)|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)|<tag(?:\\\"[^\\\"]*\\\"|'[^']*'|\\\\s[^'\\\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))\").replace(\"comment\",E._comment).replace(/tag/g,\"(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b\").getRegex(),def:/^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,heading:/^(#{1,6})(.*)(?:\\n+|$)/,fences:b,paragraph:d(E.normal._paragraph).replace(\"hr\",E.hr).replace(\"heading\",\" *#{1,6} *[^\\n]\").replace(\"lheading\",E.lheading).replace(\"blockquote\",\" {0,3}>\").replace(\"|fences\",\"\").replace(\"|list\",\"\").replace(\"|html\",\"\").getRegex()});const $={escape:/^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,autolink:/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,url:b,tag:\"^comment|^</[a-zA-Z][\\\\w:-]*\\\\s*>|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>|^<\\\\?[\\\\s\\\\S]*?\\\\?>|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>\",link:/^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,reflink:/^!?\\[(label)\\]\\[(ref)\\]/,nolink:/^!?\\[(ref)\\](?:\\[\\])?/,reflinkSearch:\"reflink|nolink(?!\\\\()\",emStrong:{lDelim:/^(?:\\*+(?:([punct_])|[^\\s*]))|^_+(?:([punct*])|([^\\s_]))/,rDelimAst:/^[^_*]*?\\_\\_[^_*]*?\\*[^_*]*?(?=\\_\\_)|[punct_](\\*+)(?=[\\s]|$)|[^punct*_\\s](\\*+)(?=[punct_\\s]|$)|[punct_\\s](\\*+)(?=[^punct*_\\s])|[\\s](\\*+)(?=[punct_])|[punct_](\\*+)(?=[punct_])|[^punct*_\\s](\\*+)(?=[^punct*_\\s])/,rDelimUnd:/^[^_*]*?\\*\\*[^_*]*?\\_[^_*]*?(?=\\*\\*)|[punct*](\\_+)(?=[\\s]|$)|[^punct*_\\s](\\_+)(?=[punct*\\s]|$)|[punct*\\s](\\_+)(?=[^punct*_\\s])|[\\s](\\_+)(?=[punct*])|[punct*](\\_+)(?=[punct*])/},code:/^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,br:/^( {2,}|\\\\)\\n(?!\\s*$)/,del:b,text:/^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/,punctuation:/^([\\spunctuation])/};function L(t){return t.replace(/---/g,\"—\").replace(/--/g,\"–\").replace(/(^|[-\\u2014/(\\[{\"\\s])'/g,\"$1‘\").replace(/'/g,\"’\").replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g,\"$1“\").replace(/\"/g,\"”\").replace(/\\.{3}/g,\"…\")}function R(t){let e,n,i=\"\";const s=t.length;for(e=0;e<s;e++)n=t.charCodeAt(e),Math.random()>.5&&(n=\"x\"+n.toString(16)),i+=\"&#\"+n+\";\";return i}$._punctuation=\"!\\\"#$%&'()+\\\\-.,/:;<=>?@\\\\[\\\\]`^{|}~\",$.punctuation=d($.punctuation).replace(/punctuation/g,$._punctuation).getRegex(),$.blockSkip=/\\[[^\\]]*?\\]\\([^\\)]*?\\)|`[^`]*?`|<[^>]*?>/g,$.escapedEmSt=/\\\\\\*|\\\\_/g,$._comment=d(E._comment).replace(\"(?:--\\x3e|$)\",\"--\\x3e\").getRegex(),$.emStrong.lDelim=d($.emStrong.lDelim).replace(/punct/g,$._punctuation).getRegex(),$.emStrong.rDelimAst=d($.emStrong.rDelimAst,\"g\").replace(/punct/g,$._punctuation).getRegex(),$.emStrong.rDelimUnd=d($.emStrong.rDelimUnd,\"g\").replace(/punct/g,$._punctuation).getRegex(),$._escapes=/\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/g,$._scheme=/[a-zA-Z][a-zA-Z0-9+.-]{1,31}/,$._email=/[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/,$.autolink=d($.autolink).replace(\"scheme\",$._scheme).replace(\"email\",$._email).getRegex(),$._attribute=/\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/,$.tag=d($.tag).replace(\"comment\",$._comment).replace(\"attribute\",$._attribute).getRegex(),$._label=/(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/,$._href=/<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/,$._title=/\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/,$.link=d($.link).replace(\"label\",$._label).replace(\"href\",$._href).replace(\"title\",$._title).getRegex(),$.reflink=d($.reflink).replace(\"label\",$._label).replace(\"ref\",E._label).getRegex(),$.nolink=d($.nolink).replace(\"ref\",E._label).getRegex(),$.reflinkSearch=d($.reflinkSearch,\"g\").replace(\"reflink\",$.reflink).replace(\"nolink\",$.nolink).getRegex(),$.normal=y({},$),$.pedantic=y({},$.normal,{strong:{start:/^__|\\*\\*/,middle:/^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,endAst:/\\*\\*(?!\\*)/g,endUnd:/__(?!_)/g},em:{start:/^_|\\*/,middle:/^()\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)|^_(?=\\S)([\\s\\S]*?\\S)_(?!_)/,endAst:/\\*(?!\\*)/g,endUnd:/_(?!_)/g},link:d(/^!?\\[(label)\\]\\((.*?)\\)/).replace(\"label\",$._label).getRegex(),reflink:d(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/).replace(\"label\",$._label).getRegex()}),$.gfm=y({},$.normal,{escape:d($.escape).replace(\"])\",\"~|])\").getRegex(),_extended_email:/[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,url:/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,_backpedal:/(?:[^?!.,:;*_~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,del:/^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,text:/^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/}),$.gfm.url=d($.gfm.url,\"i\").replace(\"email\",$.gfm._extended_email).getRegex(),$.breaks=y({},$.gfm,{br:d($.br).replace(\"{2,}\",\"*\").getRegex(),text:d($.gfm.text).replace(\"\\\\b_\",\"\\\\b_| {2,}\\\\n\").replace(/\\{2,\\}/g,\"*\").getRegex()});class I{constructor(t){this.tokens=[],this.tokens.links=Object.create(null),this.options=t||e,this.options.tokenizer=this.options.tokenizer||new A,this.tokenizer=this.options.tokenizer,this.tokenizer.options=this.options,this.tokenizer.lexer=this,this.inlineQueue=[],this.state={inLink:!1,inRawBlock:!1,top:!0};const n={block:E.normal,inline:$.normal};this.options.pedantic?(n.block=E.pedantic,n.inline=$.pedantic):this.options.gfm&&(n.block=E.gfm,this.options.breaks?n.inline=$.breaks:n.inline=$.gfm),this.tokenizer.rules=n}static get rules(){return{block:E,inline:$}}static lex(t,e){return new I(e).lex(t)}static lexInline(t,e){return new I(e).inlineTokens(t)}lex(t){let e;for(t=t.replace(/\\r\\n|\\r/g,\"\\n\").replace(/\\t/g,\"    \"),this.blockTokens(t,this.tokens);e=this.inlineQueue.shift();)this.inlineTokens(e.src,e.tokens);return this.tokens}blockTokens(t,e=[]){let n,i,s,r;for(this.options.pedantic&&(t=t.replace(/^ +$/gm,\"\"));t;)if(!(this.options.extensions&&this.options.extensions.block&&this.options.extensions.block.some((i=>!!(n=i.call({lexer:this},t,e))&&(t=t.substring(n.raw.length),e.push(n),!0)))))if(n=this.tokenizer.space(t))t=t.substring(n.raw.length),1===n.raw.length&&e.length>0?e[e.length-1].raw+=\"\\n\":e.push(n);else if(n=this.tokenizer.code(t))t=t.substring(n.raw.length),i=e[e.length-1],!i||\"paragraph\"!==i.type&&\"text\"!==i.type?e.push(n):(i.raw+=\"\\n\"+n.raw,i.text+=\"\\n\"+n.text,this.inlineQueue[this.inlineQueue.length-1].src=i.text);else if(n=this.tokenizer.fences(t))t=t.substring(n.raw.length),e.push(n);else if(n=this.tokenizer.heading(t))t=t.substring(n.raw.length),e.push(n);else if(n=this.tokenizer.hr(t))t=t.substring(n.raw.length),e.push(n);else if(n=this.tokenizer.blockquote(t))t=t.substring(n.raw.length),e.push(n);else if(n=this.tokenizer.list(t))t=t.substring(n.raw.length),e.push(n);else if(n=this.tokenizer.html(t))t=t.substring(n.raw.length),e.push(n);else if(n=this.tokenizer.def(t))t=t.substring(n.raw.length),i=e[e.length-1],!i||\"paragraph\"!==i.type&&\"text\"!==i.type?this.tokens.links[n.tag]||(this.tokens.links[n.tag]={href:n.href,title:n.title}):(i.raw+=\"\\n\"+n.raw,i.text+=\"\\n\"+n.raw,this.inlineQueue[this.inlineQueue.length-1].src=i.text);else if(n=this.tokenizer.table(t))t=t.substring(n.raw.length),e.push(n);else if(n=this.tokenizer.lheading(t))t=t.substring(n.raw.length),e.push(n);else{if(s=t,this.options.extensions&&this.options.extensions.startBlock){let e=1/0;const n=t.slice(1);let i;this.options.extensions.startBlock.forEach((function(t){i=t.call({lexer:this},n),\"number\"==typeof i&&i>=0&&(e=Math.min(e,i))})),e<1/0&&e>=0&&(s=t.substring(0,e+1))}if(this.state.top&&(n=this.tokenizer.paragraph(s)))i=e[e.length-1],r&&\"paragraph\"===i.type?(i.raw+=\"\\n\"+n.raw,i.text+=\"\\n\"+n.text,this.inlineQueue.pop(),this.inlineQueue[this.inlineQueue.length-1].src=i.text):e.push(n),r=s.length!==t.length,t=t.substring(n.raw.length);else if(n=this.tokenizer.text(t))t=t.substring(n.raw.length),i=e[e.length-1],i&&\"text\"===i.type?(i.raw+=\"\\n\"+n.raw,i.text+=\"\\n\"+n.text,this.inlineQueue.pop(),this.inlineQueue[this.inlineQueue.length-1].src=i.text):e.push(n);else if(t){const e=\"Infinite loop on byte: \"+t.charCodeAt(0);if(this.options.silent){console.error(e);break}throw new Error(e)}}return this.state.top=!0,e}inline(t,e){this.inlineQueue.push({src:t,tokens:e})}inlineTokens(t,e=[]){let n,i,s,r,a,l,o=t;if(this.tokens.links){const t=Object.keys(this.tokens.links);if(t.length>0)for(;null!=(r=this.tokenizer.rules.inline.reflinkSearch.exec(o));)t.includes(r[0].slice(r[0].lastIndexOf(\"[\")+1,-1))&&(o=o.slice(0,r.index)+\"[\"+_(\"a\",r[0].length-2)+\"]\"+o.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex))}for(;null!=(r=this.tokenizer.rules.inline.blockSkip.exec(o));)o=o.slice(0,r.index)+\"[\"+_(\"a\",r[0].length-2)+\"]\"+o.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);for(;null!=(r=this.tokenizer.rules.inline.escapedEmSt.exec(o));)o=o.slice(0,r.index)+\"++\"+o.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex);for(;t;)if(a||(l=\"\"),a=!1,!(this.options.extensions&&this.options.extensions.inline&&this.options.extensions.inline.some((i=>!!(n=i.call({lexer:this},t,e))&&(t=t.substring(n.raw.length),e.push(n),!0)))))if(n=this.tokenizer.escape(t))t=t.substring(n.raw.length),e.push(n);else if(n=this.tokenizer.tag(t))t=t.substring(n.raw.length),i=e[e.length-1],i&&\"text\"===n.type&&\"text\"===i.type?(i.raw+=n.raw,i.text+=n.text):e.push(n);else if(n=this.tokenizer.link(t))t=t.substring(n.raw.length),e.push(n);else if(n=this.tokenizer.reflink(t,this.tokens.links))t=t.substring(n.raw.length),i=e[e.length-1],i&&\"text\"===n.type&&\"text\"===i.type?(i.raw+=n.raw,i.text+=n.text):e.push(n);else if(n=this.tokenizer.emStrong(t,o,l))t=t.substring(n.raw.length),e.push(n);else if(n=this.tokenizer.codespan(t))t=t.substring(n.raw.length),e.push(n);else if(n=this.tokenizer.br(t))t=t.substring(n.raw.length),e.push(n);else if(n=this.tokenizer.del(t))t=t.substring(n.raw.length),e.push(n);else if(n=this.tokenizer.autolink(t,R))t=t.substring(n.raw.length),e.push(n);else if(this.state.inLink||!(n=this.tokenizer.url(t,R))){if(s=t,this.options.extensions&&this.options.extensions.startInline){let e=1/0;const n=t.slice(1);let i;this.options.extensions.startInline.forEach((function(t){i=t.call({lexer:this},n),\"number\"==typeof i&&i>=0&&(e=Math.min(e,i))})),e<1/0&&e>=0&&(s=t.substring(0,e+1))}if(n=this.tokenizer.inlineText(s,L))t=t.substring(n.raw.length),\"_\"!==n.raw.slice(-1)&&(l=n.raw.slice(-1)),a=!0,i=e[e.length-1],i&&\"text\"===i.type?(i.raw+=n.raw,i.text+=n.text):e.push(n);else if(t){const e=\"Infinite loop on byte: \"+t.charCodeAt(0);if(this.options.silent){console.error(e);break}throw new Error(e)}}else t=t.substring(n.raw.length),e.push(n);return e}}class C{constructor(t){this.options=t||e}code(t,e,n){const i=(e||\"\").match(/\\S*/)[0];if(this.options.highlight){const e=this.options.highlight(t,i);null!=e&&e!==t&&(n=!0,t=e)}return t=t.replace(/\\n$/,\"\")+\"\\n\",i?'<pre><code class=\"'+this.options.langPrefix+o(i,!0)+'\">'+(n?t:o(t,!0))+\"</code></pre>\\n\":\"<pre><code>\"+(n?t:o(t,!0))+\"</code></pre>\\n\"}blockquote(t){return\"<blockquote>\\n\"+t+\"</blockquote>\\n\"}html(t){return t}heading(t,e,n,i){return this.options.headerIds?\"<h\"+e+' id=\"'+this.options.headerPrefix+i.slug(n)+'\">'+t+\"</h\"+e+\">\\n\":\"<h\"+e+\">\"+t+\"</h\"+e+\">\\n\"}hr(){return this.options.xhtml?\"<hr/>\\n\":\"<hr>\\n\"}list(t,e,n){const i=e?\"ol\":\"ul\";return\"<\"+i+(e&&1!==n?' start=\"'+n+'\"':\"\")+\">\\n\"+t+\"</\"+i+\">\\n\"}listitem(t){return\"<li>\"+t+\"</li>\\n\"}checkbox(t){return\"<input \"+(t?'checked=\"\" ':\"\")+'disabled=\"\" type=\"checkbox\"'+(this.options.xhtml?\" /\":\"\")+\"> \"}paragraph(t){return\"<p>\"+t+\"</p>\\n\"}table(t,e){return e&&(e=\"<tbody>\"+e+\"</tbody>\"),\"<table>\\n<thead>\\n\"+t+\"</thead>\\n\"+e+\"</table>\\n\"}tablerow(t){return\"<tr>\\n\"+t+\"</tr>\\n\"}tablecell(t,e){const n=e.header?\"th\":\"td\";return(e.align?\"<\"+n+' align=\"'+e.align+'\">':\"<\"+n+\">\")+t+\"</\"+n+\">\\n\"}strong(t){return\"<strong>\"+t+\"</strong>\"}em(t){return\"<em>\"+t+\"</em>\"}codespan(t){return\"<code>\"+t+\"</code>\"}br(){return this.options.xhtml?\"<br/>\":\"<br>\"}del(t){return\"<del>\"+t+\"</del>\"}link(t,e,n){if(null===(t=m(this.options.sanitize,this.options.baseUrl,t)))return n;let i='<a href=\"'+o(t)+'\"';return e&&(i+=' title=\"'+e+'\"'),i+=\">\"+n+\"</a>\",i}image(t,e,n){if(null===(t=m(this.options.sanitize,this.options.baseUrl,t)))return n;let i='<img src=\"'+t+'\" alt=\"'+n+'\"';return e&&(i+=' title=\"'+e+'\"'),i+=this.options.xhtml?\"/>\":\">\",i}text(t){return t}}class M{strong(t){return t}em(t){return t}codespan(t){return t}del(t){return t}html(t){return t}text(t){return t}link(t,e,n){return\"\"+n}image(t,e,n){return\"\"+n}br(){return\"\"}}class q{constructor(){this.seen={}}serialize(t){return t.toLowerCase().trim().replace(/<[!\\/a-z].*?>/gi,\"\").replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g,\"\").replace(/\\s/g,\"-\")}getNextSafeSlug(t,e){let n=t,i=0;if(this.seen.hasOwnProperty(n)){i=this.seen[t];do{i++,n=t+\"-\"+i}while(this.seen.hasOwnProperty(n))}return e||(this.seen[t]=i,this.seen[n]=0),n}slug(t,e={}){const n=this.serialize(t);return this.getNextSafeSlug(n,e.dryrun)}}class O{constructor(t){this.options=t||e,this.options.renderer=this.options.renderer||new C,this.renderer=this.options.renderer,this.renderer.options=this.options,this.textRenderer=new M,this.slugger=new q}static parse(t,e){return new O(e).parse(t)}static parseInline(t,e){return new O(e).parseInline(t)}parse(t,e=!0){let n,i,s,r,a,l,o,c,u,d,h,g,m,f,k,w,x,b,y,v=\"\";const S=t.length;for(n=0;n<S;n++)if(d=t[n],this.options.extensions&&this.options.extensions.renderers&&this.options.extensions.renderers[d.type]&&(y=this.options.extensions.renderers[d.type].call({parser:this},d),!1!==y||![\"space\",\"hr\",\"heading\",\"code\",\"table\",\"blockquote\",\"list\",\"html\",\"paragraph\",\"text\"].includes(d.type)))v+=y||\"\";else switch(d.type){case\"space\":continue;case\"hr\":v+=this.renderer.hr();continue;case\"heading\":v+=this.renderer.heading(this.parseInline(d.tokens),d.depth,p(this.parseInline(d.tokens,this.textRenderer)),this.slugger);continue;case\"code\":v+=this.renderer.code(d.text,d.lang,d.escaped);continue;case\"table\":for(c=\"\",o=\"\",r=d.header.length,i=0;i<r;i++)o+=this.renderer.tablecell(this.parseInline(d.header[i].tokens),{header:!0,align:d.align[i]});for(c+=this.renderer.tablerow(o),u=\"\",r=d.rows.length,i=0;i<r;i++){for(l=d.rows[i],o=\"\",a=l.length,s=0;s<a;s++)o+=this.renderer.tablecell(this.parseInline(l[s].tokens),{header:!1,align:d.align[s]});u+=this.renderer.tablerow(o)}v+=this.renderer.table(c,u);continue;case\"blockquote\":u=this.parse(d.tokens),v+=this.renderer.blockquote(u);continue;case\"list\":for(h=d.ordered,g=d.start,m=d.loose,r=d.items.length,u=\"\",i=0;i<r;i++)k=d.items[i],w=k.checked,x=k.task,f=\"\",k.task&&(b=this.renderer.checkbox(w),m?k.tokens.length>0&&\"paragraph\"===k.tokens[0].type?(k.tokens[0].text=b+\" \"+k.tokens[0].text,k.tokens[0].tokens&&k.tokens[0].tokens.length>0&&\"text\"===k.tokens[0].tokens[0].type&&(k.tokens[0].tokens[0].text=b+\" \"+k.tokens[0].tokens[0].text)):k.tokens.unshift({type:\"text\",text:b}):f+=b),f+=this.parse(k.tokens,m),u+=this.renderer.listitem(f,x,w);v+=this.renderer.list(u,h,g);continue;case\"html\":v+=this.renderer.html(d.text);continue;case\"paragraph\":v+=this.renderer.paragraph(this.parseInline(d.tokens));continue;case\"text\":for(u=d.tokens?this.parseInline(d.tokens):d.text;n+1<S&&\"text\"===t[n+1].type;)d=t[++n],u+=\"\\n\"+(d.tokens?this.parseInline(d.tokens):d.text);v+=e?this.renderer.paragraph(u):u;continue;default:{const t='Token with \"'+d.type+'\" type was not found.';if(this.options.silent)return void console.error(t);throw new Error(t)}}return v}parseInline(t,e){e=e||this.renderer;let n,i,s,r=\"\";const a=t.length;for(n=0;n<a;n++)if(i=t[n],this.options.extensions&&this.options.extensions.renderers&&this.options.extensions.renderers[i.type]&&(s=this.options.extensions.renderers[i.type].call({parser:this},i),!1!==s||![\"escape\",\"html\",\"link\",\"image\",\"strong\",\"em\",\"codespan\",\"br\",\"del\",\"text\"].includes(i.type)))r+=s||\"\";else switch(i.type){case\"escape\":case\"text\":r+=e.text(i.text);break;case\"html\":r+=e.html(i.text);break;case\"link\":r+=e.link(i.href,i.title,this.parseInline(i.tokens,e));break;case\"image\":r+=e.image(i.href,i.title,i.text);break;case\"strong\":r+=e.strong(this.parseInline(i.tokens,e));break;case\"em\":r+=e.em(this.parseInline(i.tokens,e));break;case\"codespan\":r+=e.codespan(i.text);break;case\"br\":r+=e.br();break;case\"del\":r+=e.del(this.parseInline(i.tokens,e));break;default:{const t='Token with \"'+i.type+'\" type was not found.';if(this.options.silent)return void console.error(t);throw new Error(t)}}return r}}function N(t,e,n){if(null==t)throw new Error(\"marked(): input parameter is undefined or null\");if(\"string\"!=typeof t)throw new Error(\"marked(): input parameter is of type \"+Object.prototype.toString.call(t)+\", string expected\");if(\"function\"==typeof e&&(n=e,e=null),T(e=y({},N.defaults,e||{})),n){const i=e.highlight;let s;try{s=I.lex(t,e)}catch(t){return n(t)}const r=function(t){let r;if(!t)try{e.walkTokens&&N.walkTokens(s,e.walkTokens),r=O.parse(s,e)}catch(e){t=e}return e.highlight=i,t?n(t):n(null,r)};if(!i||i.length<3)return r();if(delete e.highlight,!s.length)return r();let a=0;return N.walkTokens(s,(function(t){\"code\"===t.type&&(a++,setTimeout((()=>{i(t.text,t.lang,(function(e,n){if(e)return r(e);null!=n&&n!==t.text&&(t.text=n,t.escaped=!0),a--,0===a&&r()}))}),0))})),void(0===a&&r())}try{const n=I.lex(t,e);return e.walkTokens&&N.walkTokens(n,e.walkTokens),O.parse(n,e)}catch(t){if(t.message+=\"\\nPlease report this to https://github.com/markedjs/marked.\",e.silent)return\"<p>An error occurred:</p><pre>\"+o(t.message+\"\",!0)+\"</pre>\";throw t}}N.options=N.setOptions=function(t){var n;return y(N.defaults,t),n=N.defaults,e=n,N},N.getDefaults=t,N.defaults=e,N.use=function(...t){const e=y({},...t),n=N.defaults.extensions||{renderers:{},childTokens:{}};let i;t.forEach((t=>{if(t.extensions&&(i=!0,t.extensions.forEach((t=>{if(!t.name)throw new Error(\"extension name required\");if(t.renderer){const e=n.renderers?n.renderers[t.name]:null;n.renderers[t.name]=e?function(...n){let i=t.renderer.apply(this,n);return!1===i&&(i=e.apply(this,n)),i}:t.renderer}if(t.tokenizer){if(!t.level||\"block\"!==t.level&&\"inline\"!==t.level)throw new Error(\"extension level must be 'block' or 'inline'\");n[t.level]?n[t.level].unshift(t.tokenizer):n[t.level]=[t.tokenizer],t.start&&(\"block\"===t.level?n.startBlock?n.startBlock.push(t.start):n.startBlock=[t.start]:\"inline\"===t.level&&(n.startInline?n.startInline.push(t.start):n.startInline=[t.start]))}t.childTokens&&(n.childTokens[t.name]=t.childTokens)}))),t.renderer){const n=N.defaults.renderer||new C;for(const e in t.renderer){const i=n[e];n[e]=(...s)=>{let r=t.renderer[e].apply(n,s);return!1===r&&(r=i.apply(n,s)),r}}e.renderer=n}if(t.tokenizer){const n=N.defaults.tokenizer||new A;for(const e in t.tokenizer){const i=n[e];n[e]=(...s)=>{let r=t.tokenizer[e].apply(n,s);return!1===r&&(r=i.apply(n,s)),r}}e.tokenizer=n}if(t.walkTokens){const n=N.defaults.walkTokens;e.walkTokens=function(e){t.walkTokens.call(this,e),n&&n.call(this,e)}}i&&(e.extensions=n),N.setOptions(e)}))},N.walkTokens=function(t,e){for(const n of t)switch(e.call(N,n),n.type){case\"table\":for(const t of n.header)N.walkTokens(t.tokens,e);for(const t of n.rows)for(const n of t)N.walkTokens(n.tokens,e);break;case\"list\":N.walkTokens(n.items,e);break;default:N.defaults.extensions&&N.defaults.extensions.childTokens&&N.defaults.extensions.childTokens[n.type]?N.defaults.extensions.childTokens[n.type].forEach((function(t){N.walkTokens(n[t],e)})):n.tokens&&N.walkTokens(n.tokens,e)}},N.parseInline=function(t,e){if(null==t)throw new Error(\"marked.parseInline(): input parameter is undefined or null\");if(\"string\"!=typeof t)throw new Error(\"marked.parseInline(): input parameter is of type \"+Object.prototype.toString.call(t)+\", string expected\");T(e=y({},N.defaults,e||{}));try{const n=I.lexInline(t,e);return e.walkTokens&&N.walkTokens(n,e.walkTokens),O.parseInline(n,e)}catch(t){if(t.message+=\"\\nPlease report this to https://github.com/markedjs/marked.\",e.silent)return\"<p>An error occurred:</p><pre>\"+o(t.message+\"\",!0)+\"</pre>\";throw t}},N.Parser=O,N.parser=O.parse,N.Renderer=C,N.TextRenderer=M,N.Lexer=I,N.lexer=I.lex,N.Tokenizer=A,N.Slugger=q,N.parse=N;return()=>{let t,e,n=null;function i(){if(n&&!n.closed)n.focus();else{if(n=window.open(\"about:blank\",\"reveal.js - Notes\",\"width=1100,height=700\"),n.marked=N,n.document.write(\"\\x3c!--\\n\\tNOTE: You need to build the notes plugin after making changes to this file.\\n--\\x3e\\n<html lang=\\\"en\\\">\\n\\t<head>\\n\\t\\t<meta charset=\\\"utf-8\\\">\\n\\n\\t\\t<title>reveal.js - Speaker View</title>\\n\\n\\t\\t<style>\\n\\t\\t\\tbody {\\n\\t\\t\\t\\tfont-family: Helvetica;\\n\\t\\t\\t\\tfont-size: 18px;\\n\\t\\t\\t}\\n\\n\\t\\t\\t#current-slide,\\n\\t\\t\\t#upcoming-slide,\\n\\t\\t\\t#speaker-controls {\\n\\t\\t\\t\\tpadding: 6px;\\n\\t\\t\\t\\tbox-sizing: border-box;\\n\\t\\t\\t\\t-moz-box-sizing: border-box;\\n\\t\\t\\t}\\n\\n\\t\\t\\t#current-slide iframe,\\n\\t\\t\\t#upcoming-slide iframe {\\n\\t\\t\\t\\twidth: 100%;\\n\\t\\t\\t\\theight: 100%;\\n\\t\\t\\t\\tborder: 1px solid #ddd;\\n\\t\\t\\t}\\n\\n\\t\\t\\t#current-slide .label,\\n\\t\\t\\t#upcoming-slide .label {\\n\\t\\t\\t\\tposition: absolute;\\n\\t\\t\\t\\ttop: 10px;\\n\\t\\t\\t\\tleft: 10px;\\n\\t\\t\\t\\tz-index: 2;\\n\\t\\t\\t}\\n\\n\\t\\t\\t#connection-status {\\n\\t\\t\\t\\tposition: absolute;\\n\\t\\t\\t\\ttop: 0;\\n\\t\\t\\t\\tleft: 0;\\n\\t\\t\\t\\twidth: 100%;\\n\\t\\t\\t\\theight: 100%;\\n\\t\\t\\t\\tz-index: 20;\\n\\t\\t\\t\\tpadding: 30% 20% 20% 20%;\\n\\t\\t\\t\\tfont-size: 18px;\\n\\t\\t\\t\\tcolor: #222;\\n\\t\\t\\t\\tbackground: #fff;\\n\\t\\t\\t\\ttext-align: center;\\n\\t\\t\\t\\tbox-sizing: border-box;\\n\\t\\t\\t\\tline-height: 1.4;\\n\\t\\t\\t}\\n\\n\\t\\t\\t.overlay-element {\\n\\t\\t\\t\\theight: 34px;\\n\\t\\t\\t\\tline-height: 34px;\\n\\t\\t\\t\\tpadding: 0 10px;\\n\\t\\t\\t\\ttext-shadow: none;\\n\\t\\t\\t\\tbackground: rgba( 220, 220, 220, 0.8 );\\n\\t\\t\\t\\tcolor: #222;\\n\\t\\t\\t\\tfont-size: 14px;\\n\\t\\t\\t}\\n\\n\\t\\t\\t.overlay-element.interactive:hover {\\n\\t\\t\\t\\tbackground: rgba( 220, 220, 220, 1 );\\n\\t\\t\\t}\\n\\n\\t\\t\\t#current-slide {\\n\\t\\t\\t\\tposition: absolute;\\n\\t\\t\\t\\twidth: 60%;\\n\\t\\t\\t\\theight: 100%;\\n\\t\\t\\t\\ttop: 0;\\n\\t\\t\\t\\tleft: 0;\\n\\t\\t\\t\\tpadding-right: 0;\\n\\t\\t\\t}\\n\\n\\t\\t\\t#upcoming-slide {\\n\\t\\t\\t\\tposition: absolute;\\n\\t\\t\\t\\twidth: 40%;\\n\\t\\t\\t\\theight: 40%;\\n\\t\\t\\t\\tright: 0;\\n\\t\\t\\t\\ttop: 0;\\n\\t\\t\\t}\\n\\n\\t\\t\\t/* Speaker controls */\\n\\t\\t\\t#speaker-controls {\\n\\t\\t\\t\\tposition: absolute;\\n\\t\\t\\t\\ttop: 40%;\\n\\t\\t\\t\\tright: 0;\\n\\t\\t\\t\\twidth: 40%;\\n\\t\\t\\t\\theight: 60%;\\n\\t\\t\\t\\toverflow: auto;\\n\\t\\t\\t\\tfont-size: 18px;\\n\\t\\t\\t}\\n\\n\\t\\t\\t\\t.speaker-controls-time.hidden,\\n\\t\\t\\t\\t.speaker-controls-notes.hidden {\\n\\t\\t\\t\\t\\tdisplay: none;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t.speaker-controls-time .label,\\n\\t\\t\\t\\t.speaker-controls-pace .label,\\n\\t\\t\\t\\t.speaker-controls-notes .label {\\n\\t\\t\\t\\t\\ttext-transform: uppercase;\\n\\t\\t\\t\\t\\tfont-weight: normal;\\n\\t\\t\\t\\t\\tfont-size: 0.66em;\\n\\t\\t\\t\\t\\tcolor: #666;\\n\\t\\t\\t\\t\\tmargin: 0;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t.speaker-controls-time, .speaker-controls-pace {\\n\\t\\t\\t\\t\\tborder-bottom: 1px solid rgba( 200, 200, 200, 0.5 );\\n\\t\\t\\t\\t\\tmargin-bottom: 10px;\\n\\t\\t\\t\\t\\tpadding: 10px 16px;\\n\\t\\t\\t\\t\\tpadding-bottom: 20px;\\n\\t\\t\\t\\t\\tcursor: pointer;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t.speaker-controls-time .reset-button {\\n\\t\\t\\t\\t\\topacity: 0;\\n\\t\\t\\t\\t\\tfloat: right;\\n\\t\\t\\t\\t\\tcolor: #666;\\n\\t\\t\\t\\t\\ttext-decoration: none;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t.speaker-controls-time:hover .reset-button {\\n\\t\\t\\t\\t\\topacity: 1;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t.speaker-controls-time .timer,\\n\\t\\t\\t\\t.speaker-controls-time .clock {\\n\\t\\t\\t\\t\\twidth: 50%;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t.speaker-controls-time .timer,\\n\\t\\t\\t\\t.speaker-controls-time .clock,\\n\\t\\t\\t\\t.speaker-controls-time .pacing .hours-value,\\n\\t\\t\\t\\t.speaker-controls-time .pacing .minutes-value,\\n\\t\\t\\t\\t.speaker-controls-time .pacing .seconds-value {\\n\\t\\t\\t\\t\\tfont-size: 1.9em;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t.speaker-controls-time .timer {\\n\\t\\t\\t\\t\\tfloat: left;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t.speaker-controls-time .clock {\\n\\t\\t\\t\\t\\tfloat: right;\\n\\t\\t\\t\\t\\ttext-align: right;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t.speaker-controls-time span.mute {\\n\\t\\t\\t\\t\\topacity: 0.3;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t.speaker-controls-time .pacing-title {\\n\\t\\t\\t\\t\\tmargin-top: 5px;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t.speaker-controls-time .pacing.ahead {\\n\\t\\t\\t\\t\\tcolor: blue;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t.speaker-controls-time .pacing.on-track {\\n\\t\\t\\t\\t\\tcolor: green;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t.speaker-controls-time .pacing.behind {\\n\\t\\t\\t\\t\\tcolor: red;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t.speaker-controls-notes {\\n\\t\\t\\t\\t\\tpadding: 10px 16px;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t.speaker-controls-notes .value {\\n\\t\\t\\t\\t\\tmargin-top: 5px;\\n\\t\\t\\t\\t\\tline-height: 1.4;\\n\\t\\t\\t\\t\\tfont-size: 1.2em;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t/* Layout selector */\\n\\t\\t\\t#speaker-layout {\\n\\t\\t\\t\\tposition: absolute;\\n\\t\\t\\t\\ttop: 10px;\\n\\t\\t\\t\\tright: 10px;\\n\\t\\t\\t\\tcolor: #222;\\n\\t\\t\\t\\tz-index: 10;\\n\\t\\t\\t}\\n\\t\\t\\t\\t#speaker-layout select {\\n\\t\\t\\t\\t\\tposition: absolute;\\n\\t\\t\\t\\t\\twidth: 100%;\\n\\t\\t\\t\\t\\theight: 100%;\\n\\t\\t\\t\\t\\ttop: 0;\\n\\t\\t\\t\\t\\tleft: 0;\\n\\t\\t\\t\\t\\tborder: 0;\\n\\t\\t\\t\\t\\tbox-shadow: 0;\\n\\t\\t\\t\\t\\tcursor: pointer;\\n\\t\\t\\t\\t\\topacity: 0;\\n\\n\\t\\t\\t\\t\\tfont-size: 1em;\\n\\t\\t\\t\\t\\tbackground-color: transparent;\\n\\n\\t\\t\\t\\t\\t-moz-appearance: none;\\n\\t\\t\\t\\t\\t-webkit-appearance: none;\\n\\t\\t\\t\\t\\t-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t#speaker-layout select:focus {\\n\\t\\t\\t\\t\\toutline: none;\\n\\t\\t\\t\\t\\tbox-shadow: none;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t.clear {\\n\\t\\t\\t\\tclear: both;\\n\\t\\t\\t}\\n\\n\\t\\t\\t/* Speaker layout: Wide */\\n\\t\\t\\tbody[data-speaker-layout=\\\"wide\\\"] #current-slide,\\n\\t\\t\\tbody[data-speaker-layout=\\\"wide\\\"] #upcoming-slide {\\n\\t\\t\\t\\twidth: 50%;\\n\\t\\t\\t\\theight: 45%;\\n\\t\\t\\t\\tpadding: 6px;\\n\\t\\t\\t}\\n\\n\\t\\t\\tbody[data-speaker-layout=\\\"wide\\\"] #current-slide {\\n\\t\\t\\t\\ttop: 0;\\n\\t\\t\\t\\tleft: 0;\\n\\t\\t\\t}\\n\\n\\t\\t\\tbody[data-speaker-layout=\\\"wide\\\"] #upcoming-slide {\\n\\t\\t\\t\\ttop: 0;\\n\\t\\t\\t\\tleft: 50%;\\n\\t\\t\\t}\\n\\n\\t\\t\\tbody[data-speaker-layout=\\\"wide\\\"] #speaker-controls {\\n\\t\\t\\t\\ttop: 45%;\\n\\t\\t\\t\\tleft: 0;\\n\\t\\t\\t\\twidth: 100%;\\n\\t\\t\\t\\theight: 50%;\\n\\t\\t\\t\\tfont-size: 1.25em;\\n\\t\\t\\t}\\n\\n\\t\\t\\t/* Speaker layout: Tall */\\n\\t\\t\\tbody[data-speaker-layout=\\\"tall\\\"] #current-slide,\\n\\t\\t\\tbody[data-speaker-layout=\\\"tall\\\"] #upcoming-slide {\\n\\t\\t\\t\\twidth: 45%;\\n\\t\\t\\t\\theight: 50%;\\n\\t\\t\\t\\tpadding: 6px;\\n\\t\\t\\t}\\n\\n\\t\\t\\tbody[data-speaker-layout=\\\"tall\\\"] #current-slide {\\n\\t\\t\\t\\ttop: 0;\\n\\t\\t\\t\\tleft: 0;\\n\\t\\t\\t}\\n\\n\\t\\t\\tbody[data-speaker-layout=\\\"tall\\\"] #upcoming-slide {\\n\\t\\t\\t\\ttop: 50%;\\n\\t\\t\\t\\tleft: 0;\\n\\t\\t\\t}\\n\\n\\t\\t\\tbody[data-speaker-layout=\\\"tall\\\"] #speaker-controls {\\n\\t\\t\\t\\tpadding-top: 40px;\\n\\t\\t\\t\\ttop: 0;\\n\\t\\t\\t\\tleft: 45%;\\n\\t\\t\\t\\twidth: 55%;\\n\\t\\t\\t\\theight: 100%;\\n\\t\\t\\t\\tfont-size: 1.25em;\\n\\t\\t\\t}\\n\\n\\t\\t\\t/* Speaker layout: Notes only */\\n\\t\\t\\tbody[data-speaker-layout=\\\"notes-only\\\"] #current-slide,\\n\\t\\t\\tbody[data-speaker-layout=\\\"notes-only\\\"] #upcoming-slide {\\n\\t\\t\\t\\tdisplay: none;\\n\\t\\t\\t}\\n\\n\\t\\t\\tbody[data-speaker-layout=\\\"notes-only\\\"] #speaker-controls {\\n\\t\\t\\t\\tpadding-top: 40px;\\n\\t\\t\\t\\ttop: 0;\\n\\t\\t\\t\\tleft: 0;\\n\\t\\t\\t\\twidth: 100%;\\n\\t\\t\\t\\theight: 100%;\\n\\t\\t\\t\\tfont-size: 1.25em;\\n\\t\\t\\t}\\n\\n\\t\\t\\t@media screen and (max-width: 1080px) {\\n\\t\\t\\t\\tbody[data-speaker-layout=\\\"default\\\"] #speaker-controls {\\n\\t\\t\\t\\t\\tfont-size: 16px;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t@media screen and (max-width: 900px) {\\n\\t\\t\\t\\tbody[data-speaker-layout=\\\"default\\\"] #speaker-controls {\\n\\t\\t\\t\\t\\tfont-size: 14px;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t@media screen and (max-width: 800px) {\\n\\t\\t\\t\\tbody[data-speaker-layout=\\\"default\\\"] #speaker-controls {\\n\\t\\t\\t\\t\\tfont-size: 12px;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t</style>\\n\\t</head>\\n\\n\\t<body>\\n\\n\\t\\t<div id=\\\"connection-status\\\">Loading speaker view...</div>\\n\\n\\t\\t<div id=\\\"current-slide\\\"></div>\\n\\t\\t<div id=\\\"upcoming-slide\\\"><span class=\\\"overlay-element label\\\">Upcoming</span></div>\\n\\t\\t<div id=\\\"speaker-controls\\\">\\n\\t\\t\\t<div class=\\\"speaker-controls-time\\\">\\n\\t\\t\\t\\t<h4 class=\\\"label\\\">Time <span class=\\\"reset-button\\\">Click to Reset</span></h4>\\n\\t\\t\\t\\t<div class=\\\"clock\\\">\\n\\t\\t\\t\\t\\t<span class=\\\"clock-value\\\">0:00 AM</span>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t<div class=\\\"timer\\\">\\n\\t\\t\\t\\t\\t<span class=\\\"hours-value\\\">00</span><span class=\\\"minutes-value\\\">:00</span><span class=\\\"seconds-value\\\">:00</span>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t<div class=\\\"clear\\\"></div>\\n\\n\\t\\t\\t\\t<h4 class=\\\"label pacing-title\\\" style=\\\"display: none\\\">Pacing – Time to finish current slide</h4>\\n\\t\\t\\t\\t<div class=\\\"pacing\\\" style=\\\"display: none\\\">\\n\\t\\t\\t\\t\\t<span class=\\\"hours-value\\\">00</span><span class=\\\"minutes-value\\\">:00</span><span class=\\\"seconds-value\\\">:00</span>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\n\\t\\t\\t<div class=\\\"speaker-controls-notes hidden\\\">\\n\\t\\t\\t\\t<h4 class=\\\"label\\\">Notes</h4>\\n\\t\\t\\t\\t<div class=\\\"value\\\"></div>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t\\t<div id=\\\"speaker-layout\\\" class=\\\"overlay-element interactive\\\">\\n\\t\\t\\t<span class=\\\"speaker-layout-label\\\"></span>\\n\\t\\t\\t<select class=\\\"speaker-layout-dropdown\\\"></select>\\n\\t\\t</div>\\n\\n\\t\\t<script>\\n\\n\\t\\t\\t(function() {\\n\\n\\t\\t\\t\\tvar notes,\\n\\t\\t\\t\\t\\tnotesValue,\\n\\t\\t\\t\\t\\tcurrentState,\\n\\t\\t\\t\\t\\tcurrentSlide,\\n\\t\\t\\t\\t\\tupcomingSlide,\\n\\t\\t\\t\\t\\tlayoutLabel,\\n\\t\\t\\t\\t\\tlayoutDropdown,\\n\\t\\t\\t\\t\\tpendingCalls = {},\\n\\t\\t\\t\\t\\tlastRevealApiCallId = 0,\\n\\t\\t\\t\\t\\tconnected = false\\n\\n\\t\\t\\t\\tvar connectionStatus = document.querySelector( '#connection-status' );\\n\\n\\t\\t\\t\\tvar SPEAKER_LAYOUTS = {\\n\\t\\t\\t\\t\\t'default': 'Default',\\n\\t\\t\\t\\t\\t'wide': 'Wide',\\n\\t\\t\\t\\t\\t'tall': 'Tall',\\n\\t\\t\\t\\t\\t'notes-only': 'Notes only'\\n\\t\\t\\t\\t};\\n\\n\\t\\t\\t\\tsetupLayout();\\n\\n\\t\\t\\t\\tlet openerOrigin;\\n\\n\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\topenerOrigin = window.opener.location.origin;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcatch ( error ) { console.warn( error ) }\\n\\n\\t\\t\\t\\t// In order to prevent XSS, the speaker view will only run if its\\n\\t\\t\\t\\t// opener has the same origin as itself\\n\\t\\t\\t\\tif( window.location.origin !== openerOrigin ) {\\n\\t\\t\\t\\t\\tconnectionStatus.innerHTML = 'Cross origin error.<br>The speaker window can only be opened from the same origin.';\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tvar connectionTimeout = setTimeout( function() {\\n\\t\\t\\t\\t\\tconnectionStatus.innerHTML = 'Error connecting to main window.<br>Please try closing and reopening the speaker view.';\\n\\t\\t\\t\\t}, 5000 );\\n\\n\\t\\t\\t\\twindow.addEventListener( 'message', function( event ) {\\n\\n\\t\\t\\t\\t\\tclearTimeout( connectionTimeout );\\n\\t\\t\\t\\t\\tconnectionStatus.style.display = 'none';\\n\\n\\t\\t\\t\\t\\tvar data = JSON.parse( event.data );\\n\\n\\t\\t\\t\\t\\t// The overview mode is only useful to the reveal.js instance\\n\\t\\t\\t\\t\\t// where navigation occurs so we don't sync it\\n\\t\\t\\t\\t\\tif( data.state ) delete data.state.overview;\\n\\n\\t\\t\\t\\t\\t// Messages sent by the notes plugin inside of the main window\\n\\t\\t\\t\\t\\tif( data && data.namespace === 'reveal-notes' ) {\\n\\t\\t\\t\\t\\t\\tif( data.type === 'connect' ) {\\n\\t\\t\\t\\t\\t\\t\\thandleConnectMessage( data );\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\telse if( data.type === 'state' ) {\\n\\t\\t\\t\\t\\t\\t\\thandleStateMessage( data );\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\telse if( data.type === 'return' ) {\\n\\t\\t\\t\\t\\t\\t\\tpendingCalls[data.callId](data.result);\\n\\t\\t\\t\\t\\t\\t\\tdelete pendingCalls[data.callId];\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t// Messages sent by the reveal.js inside of the current slide preview\\n\\t\\t\\t\\t\\telse if( data && data.namespace === 'reveal' ) {\\n\\t\\t\\t\\t\\t\\tif( /ready/.test( data.eventName ) ) {\\n\\t\\t\\t\\t\\t\\t\\t// Send a message back to notify that the handshake is complete\\n\\t\\t\\t\\t\\t\\t\\twindow.opener.postMessage( JSON.stringify({ namespace: 'reveal-notes', type: 'connected'} ), '*' );\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\telse if( /slidechanged|fragmentshown|fragmenthidden|paused|resumed/.test( data.eventName ) && currentState !== JSON.stringify( data.state ) ) {\\n\\n\\t\\t\\t\\t\\t\\t\\tdispatchStateToMainWindow( data.state );\\n\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t} );\\n\\n\\t\\t\\t\\t/**\\n\\t\\t\\t\\t * Updates the presentation in the main window to match the state\\n\\t\\t\\t\\t * of the presentation in the notes window.\\n\\t\\t\\t\\t */\\n\\t\\t\\t\\tconst dispatchStateToMainWindow = debounce(( state ) => {\\n\\t\\t\\t\\t\\twindow.opener.postMessage( JSON.stringify({ method: 'setState', args: [ state ]} ), '*' );\\n\\t\\t\\t\\t}, 500);\\n\\n\\t\\t\\t\\t/**\\n\\t\\t\\t\\t * Asynchronously calls the Reveal.js API of the main frame.\\n\\t\\t\\t\\t */\\n\\t\\t\\t\\tfunction callRevealApi( methodName, methodArguments, callback ) {\\n\\n\\t\\t\\t\\t\\tvar callId = ++lastRevealApiCallId;\\n\\t\\t\\t\\t\\tpendingCalls[callId] = callback;\\n\\t\\t\\t\\t\\twindow.opener.postMessage( JSON.stringify( {\\n\\t\\t\\t\\t\\t\\tnamespace: 'reveal-notes',\\n\\t\\t\\t\\t\\t\\ttype: 'call',\\n\\t\\t\\t\\t\\t\\tcallId: callId,\\n\\t\\t\\t\\t\\t\\tmethodName: methodName,\\n\\t\\t\\t\\t\\t\\targuments: methodArguments\\n\\t\\t\\t\\t\\t} ), '*' );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t/**\\n\\t\\t\\t\\t * Called when the main window is trying to establish a\\n\\t\\t\\t\\t * connection.\\n\\t\\t\\t\\t */\\n\\t\\t\\t\\tfunction handleConnectMessage( data ) {\\n\\n\\t\\t\\t\\t\\tif( connected === false ) {\\n\\t\\t\\t\\t\\t\\tconnected = true;\\n\\n\\t\\t\\t\\t\\t\\tsetupIframes( data );\\n\\t\\t\\t\\t\\t\\tsetupKeyboard();\\n\\t\\t\\t\\t\\t\\tsetupNotes();\\n\\t\\t\\t\\t\\t\\tsetupTimer();\\n\\t\\t\\t\\t\\t\\tsetupHeartbeat();\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t/**\\n\\t\\t\\t\\t * Called when the main window sends an updated state.\\n\\t\\t\\t\\t */\\n\\t\\t\\t\\tfunction handleStateMessage( data ) {\\n\\n\\t\\t\\t\\t\\t// Store the most recently set state to avoid circular loops\\n\\t\\t\\t\\t\\t// applying the same state\\n\\t\\t\\t\\t\\tcurrentState = JSON.stringify( data.state );\\n\\n\\t\\t\\t\\t\\t// No need for updating the notes in case of fragment changes\\n\\t\\t\\t\\t\\tif ( data.notes ) {\\n\\t\\t\\t\\t\\t\\tnotes.classList.remove( 'hidden' );\\n\\t\\t\\t\\t\\t\\tnotesValue.style.whiteSpace = data.whitespace;\\n\\t\\t\\t\\t\\t\\tif( data.markdown ) {\\n\\t\\t\\t\\t\\t\\t\\tnotesValue.innerHTML = marked( data.notes );\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\t\\tnotesValue.innerHTML = data.notes;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\tnotes.classList.add( 'hidden' );\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Update the note slides\\n\\t\\t\\t\\t\\tcurrentSlide.contentWindow.postMessage( JSON.stringify({ method: 'setState', args: [ data.state ] }), '*' );\\n\\t\\t\\t\\t\\tupcomingSlide.contentWindow.postMessage( JSON.stringify({ method: 'setState', args: [ data.state ] }), '*' );\\n\\t\\t\\t\\t\\tupcomingSlide.contentWindow.postMessage( JSON.stringify({ method: 'next' }), '*' );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// Limit to max one state update per X ms\\n\\t\\t\\t\\thandleStateMessage = debounce( handleStateMessage, 200 );\\n\\n\\t\\t\\t\\t/**\\n\\t\\t\\t\\t * Forward keyboard events to the current slide window.\\n\\t\\t\\t\\t * This enables keyboard events to work even if focus\\n\\t\\t\\t\\t * isn't set on the current slide iframe.\\n\\t\\t\\t\\t *\\n\\t\\t\\t\\t * Block F5 default handling, it reloads and disconnects\\n\\t\\t\\t\\t * the speaker notes window.\\n\\t\\t\\t\\t */\\n\\t\\t\\t\\tfunction setupKeyboard() {\\n\\n\\t\\t\\t\\t\\tdocument.addEventListener( 'keydown', function( event ) {\\n\\t\\t\\t\\t\\t\\tif( event.keyCode === 116 || ( event.metaKey && event.keyCode === 82 ) ) {\\n\\t\\t\\t\\t\\t\\t\\tevent.preventDefault();\\n\\t\\t\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tcurrentSlide.contentWindow.postMessage( JSON.stringify({ method: 'triggerKey', args: [ event.keyCode ] }), '*' );\\n\\t\\t\\t\\t\\t} );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t/**\\n\\t\\t\\t\\t * Creates the preview iframes.\\n\\t\\t\\t\\t */\\n\\t\\t\\t\\tfunction setupIframes( data ) {\\n\\n\\t\\t\\t\\t\\tvar params = [\\n\\t\\t\\t\\t\\t\\t'receiver',\\n\\t\\t\\t\\t\\t\\t'progress=false',\\n\\t\\t\\t\\t\\t\\t'history=false',\\n\\t\\t\\t\\t\\t\\t'transition=none',\\n\\t\\t\\t\\t\\t\\t'autoSlide=0',\\n\\t\\t\\t\\t\\t\\t'backgroundTransition=none'\\n\\t\\t\\t\\t\\t].join( '&' );\\n\\n\\t\\t\\t\\t\\tvar urlSeparator = /\\\\?/.test(data.url) ? '&' : '?';\\n\\t\\t\\t\\t\\tvar hash = '#/' + data.state.indexh + '/' + data.state.indexv;\\n\\t\\t\\t\\t\\tvar currentURL = data.url + urlSeparator + params + '&postMessageEvents=true' + hash;\\n\\t\\t\\t\\t\\tvar upcomingURL = data.url + urlSeparator + params + '&controls=false' + hash;\\n\\n\\t\\t\\t\\t\\tcurrentSlide = document.createElement( 'iframe' );\\n\\t\\t\\t\\t\\tcurrentSlide.setAttribute( 'width', 1280 );\\n\\t\\t\\t\\t\\tcurrentSlide.setAttribute( 'height', 1024 );\\n\\t\\t\\t\\t\\tcurrentSlide.setAttribute( 'src', currentURL );\\n\\t\\t\\t\\t\\tdocument.querySelector( '#current-slide' ).appendChild( currentSlide );\\n\\n\\t\\t\\t\\t\\tupcomingSlide = document.createElement( 'iframe' );\\n\\t\\t\\t\\t\\tupcomingSlide.setAttribute( 'width', 640 );\\n\\t\\t\\t\\t\\tupcomingSlide.setAttribute( 'height', 512 );\\n\\t\\t\\t\\t\\tupcomingSlide.setAttribute( 'src', upcomingURL );\\n\\t\\t\\t\\t\\tdocument.querySelector( '#upcoming-slide' ).appendChild( upcomingSlide );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t/**\\n\\t\\t\\t\\t * Setup the notes UI.\\n\\t\\t\\t\\t */\\n\\t\\t\\t\\tfunction setupNotes() {\\n\\n\\t\\t\\t\\t\\tnotes = document.querySelector( '.speaker-controls-notes' );\\n\\t\\t\\t\\t\\tnotesValue = document.querySelector( '.speaker-controls-notes .value' );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t/**\\n\\t\\t\\t\\t * We send out a heartbeat at all times to ensure we can\\n\\t\\t\\t\\t * reconnect with the main presentation window after reloads.\\n\\t\\t\\t\\t */\\n\\t\\t\\t\\tfunction setupHeartbeat() {\\n\\n\\t\\t\\t\\t\\tsetInterval( () => {\\n\\t\\t\\t\\t\\t\\twindow.opener.postMessage( JSON.stringify({ namespace: 'reveal-notes', type: 'heartbeat'} ), '*' );\\n\\t\\t\\t\\t\\t}, 1000 );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tfunction getTimings( callback ) {\\n\\n\\t\\t\\t\\t\\tcallRevealApi( 'getSlidesAttributes', [], function ( slideAttributes ) {\\n\\t\\t\\t\\t\\t\\tcallRevealApi( 'getConfig', [], function ( config ) {\\n\\t\\t\\t\\t\\t\\t\\tvar totalTime = config.totalTime;\\n\\t\\t\\t\\t\\t\\t\\tvar minTimePerSlide = config.minimumTimePerSlide || 0;\\n\\t\\t\\t\\t\\t\\t\\tvar defaultTiming = config.defaultTiming;\\n\\t\\t\\t\\t\\t\\t\\tif ((defaultTiming == null) && (totalTime == null)) {\\n\\t\\t\\t\\t\\t\\t\\t\\tcallback(null);\\n\\t\\t\\t\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t// Setting totalTime overrides defaultTiming\\n\\t\\t\\t\\t\\t\\t\\tif (totalTime) {\\n\\t\\t\\t\\t\\t\\t\\t\\tdefaultTiming = 0;\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\tvar timings = [];\\n\\t\\t\\t\\t\\t\\t\\tfor ( var i in slideAttributes ) {\\n\\t\\t\\t\\t\\t\\t\\t\\tvar slide = slideAttributes[ i ];\\n\\t\\t\\t\\t\\t\\t\\t\\tvar timing = defaultTiming;\\n\\t\\t\\t\\t\\t\\t\\t\\tif( slide.hasOwnProperty( 'data-timing' )) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tvar t = slide[ 'data-timing' ];\\n\\t\\t\\t\\t\\t\\t\\t\\t\\ttiming = parseInt(t);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tif( isNaN(timing) ) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tconsole.warn(\\\"Could not parse timing '\\\" + t + \\\"' of slide \\\" + i + \\\"; using default of \\\" + defaultTiming);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\ttiming = defaultTiming;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\ttimings.push(timing);\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\tif ( totalTime ) {\\n\\t\\t\\t\\t\\t\\t\\t\\t// After we've allocated time to individual slides, we summarize it and\\n\\t\\t\\t\\t\\t\\t\\t\\t// subtract it from the total time\\n\\t\\t\\t\\t\\t\\t\\t\\tvar remainingTime = totalTime - timings.reduce( function(a, b) { return a + b; }, 0 );\\n\\t\\t\\t\\t\\t\\t\\t\\t// The remaining time is divided by the number of slides that have 0 seconds\\n\\t\\t\\t\\t\\t\\t\\t\\t// allocated at the moment, giving the average time-per-slide on the remaining slides\\n\\t\\t\\t\\t\\t\\t\\t\\tvar remainingSlides = (timings.filter( function(x) { return x == 0 }) ).length\\n\\t\\t\\t\\t\\t\\t\\t\\tvar timePerSlide = Math.round( remainingTime / remainingSlides, 0 )\\n\\t\\t\\t\\t\\t\\t\\t\\t// And now we replace every zero-value timing with that average\\n\\t\\t\\t\\t\\t\\t\\t\\ttimings = timings.map( function(x) { return (x==0 ? timePerSlide : x) } );\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\tvar slidesUnderMinimum = timings.filter( function(x) { return (x < minTimePerSlide) } ).length\\n\\t\\t\\t\\t\\t\\t\\tif ( slidesUnderMinimum ) {\\n\\t\\t\\t\\t\\t\\t\\t\\tmessage = \\\"The pacing time for \\\" + slidesUnderMinimum + \\\" slide(s) is under the configured minimum of \\\" + minTimePerSlide + \\\" seconds. Check the data-timing attribute on individual slides, or consider increasing the totalTime or minimumTimePerSlide configuration options (or removing some slides).\\\";\\n\\t\\t\\t\\t\\t\\t\\t\\talert(message);\\n\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\tcallback( timings );\\n\\t\\t\\t\\t\\t\\t} );\\n\\t\\t\\t\\t\\t} );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t/**\\n\\t\\t\\t\\t * Return the number of seconds allocated for presenting\\n\\t\\t\\t\\t * all slides up to and including this one.\\n\\t\\t\\t\\t */\\n\\t\\t\\t\\tfunction getTimeAllocated( timings, callback ) {\\n\\n\\t\\t\\t\\t\\tcallRevealApi( 'getSlidePastCount', [], function ( currentSlide ) {\\n\\t\\t\\t\\t\\t\\tvar allocated = 0;\\n\\t\\t\\t\\t\\t\\tfor (var i in timings.slice(0, currentSlide + 1)) {\\n\\t\\t\\t\\t\\t\\t\\tallocated += timings[i];\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tcallback( allocated );\\n\\t\\t\\t\\t\\t} );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t/**\\n\\t\\t\\t\\t * Create the timer and clock and start updating them\\n\\t\\t\\t\\t * at an interval.\\n\\t\\t\\t\\t */\\n\\t\\t\\t\\tfunction setupTimer() {\\n\\n\\t\\t\\t\\t\\tvar start = new Date(),\\n\\t\\t\\t\\t\\ttimeEl = document.querySelector( '.speaker-controls-time' ),\\n\\t\\t\\t\\t\\tclockEl = timeEl.querySelector( '.clock-value' ),\\n\\t\\t\\t\\t\\thoursEl = timeEl.querySelector( '.hours-value' ),\\n\\t\\t\\t\\t\\tminutesEl = timeEl.querySelector( '.minutes-value' ),\\n\\t\\t\\t\\t\\tsecondsEl = timeEl.querySelector( '.seconds-value' ),\\n\\t\\t\\t\\t\\tpacingTitleEl = timeEl.querySelector( '.pacing-title' ),\\n\\t\\t\\t\\t\\tpacingEl = timeEl.querySelector( '.pacing' ),\\n\\t\\t\\t\\t\\tpacingHoursEl = pacingEl.querySelector( '.hours-value' ),\\n\\t\\t\\t\\t\\tpacingMinutesEl = pacingEl.querySelector( '.minutes-value' ),\\n\\t\\t\\t\\t\\tpacingSecondsEl = pacingEl.querySelector( '.seconds-value' );\\n\\n\\t\\t\\t\\t\\tvar timings = null;\\n\\t\\t\\t\\t\\tgetTimings( function ( _timings ) {\\n\\n\\t\\t\\t\\t\\t\\ttimings = _timings;\\n\\t\\t\\t\\t\\t\\tif (_timings !== null) {\\n\\t\\t\\t\\t\\t\\t\\tpacingTitleEl.style.removeProperty('display');\\n\\t\\t\\t\\t\\t\\t\\tpacingEl.style.removeProperty('display');\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t\\t// Update once directly\\n\\t\\t\\t\\t\\t\\t_updateTimer();\\n\\n\\t\\t\\t\\t\\t\\t// Then update every second\\n\\t\\t\\t\\t\\t\\tsetInterval( _updateTimer, 1000 );\\n\\n\\t\\t\\t\\t\\t} );\\n\\n\\n\\t\\t\\t\\t\\tfunction _resetTimer() {\\n\\n\\t\\t\\t\\t\\t\\tif (timings == null) {\\n\\t\\t\\t\\t\\t\\t\\tstart = new Date();\\n\\t\\t\\t\\t\\t\\t\\t_updateTimer();\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\t\\t// Reset timer to beginning of current slide\\n\\t\\t\\t\\t\\t\\t\\tgetTimeAllocated( timings, function ( slideEndTimingSeconds ) {\\n\\t\\t\\t\\t\\t\\t\\t\\tvar slideEndTiming = slideEndTimingSeconds * 1000;\\n\\t\\t\\t\\t\\t\\t\\t\\tcallRevealApi( 'getSlidePastCount', [], function ( currentSlide ) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tvar currentSlideTiming = timings[currentSlide] * 1000;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tvar previousSlidesTiming = slideEndTiming - currentSlideTiming;\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tvar now = new Date();\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tstart = new Date(now.getTime() - previousSlidesTiming);\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t_updateTimer();\\n\\t\\t\\t\\t\\t\\t\\t\\t} );\\n\\t\\t\\t\\t\\t\\t\\t} );\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\ttimeEl.addEventListener( 'click', function() {\\n\\t\\t\\t\\t\\t\\t_resetTimer();\\n\\t\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t\\t} );\\n\\n\\t\\t\\t\\t\\tfunction _displayTime( hrEl, minEl, secEl, time) {\\n\\n\\t\\t\\t\\t\\t\\tvar sign = Math.sign(time) == -1 ? \\\"-\\\" : \\\"\\\";\\n\\t\\t\\t\\t\\t\\ttime = Math.abs(Math.round(time / 1000));\\n\\t\\t\\t\\t\\t\\tvar seconds = time % 60;\\n\\t\\t\\t\\t\\t\\tvar minutes = Math.floor( time / 60 ) % 60 ;\\n\\t\\t\\t\\t\\t\\tvar hours = Math.floor( time / ( 60 * 60 )) ;\\n\\t\\t\\t\\t\\t\\thrEl.innerHTML = sign + zeroPadInteger( hours );\\n\\t\\t\\t\\t\\t\\tif (hours == 0) {\\n\\t\\t\\t\\t\\t\\t\\thrEl.classList.add( 'mute' );\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\t\\thrEl.classList.remove( 'mute' );\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tminEl.innerHTML = ':' + zeroPadInteger( minutes );\\n\\t\\t\\t\\t\\t\\tif (hours == 0 && minutes == 0) {\\n\\t\\t\\t\\t\\t\\t\\tminEl.classList.add( 'mute' );\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\t\\tminEl.classList.remove( 'mute' );\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\tsecEl.innerHTML = ':' + zeroPadInteger( seconds );\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tfunction _updateTimer() {\\n\\n\\t\\t\\t\\t\\t\\tvar diff, hours, minutes, seconds,\\n\\t\\t\\t\\t\\t\\tnow = new Date();\\n\\n\\t\\t\\t\\t\\t\\tdiff = now.getTime() - start.getTime();\\n\\n\\t\\t\\t\\t\\t\\tclockEl.innerHTML = now.toLocaleTimeString( 'en-US', { hour12: true, hour: '2-digit', minute:'2-digit' } );\\n\\t\\t\\t\\t\\t\\t_displayTime( hoursEl, minutesEl, secondsEl, diff );\\n\\t\\t\\t\\t\\t\\tif (timings !== null) {\\n\\t\\t\\t\\t\\t\\t\\t_updatePacing(diff);\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tfunction _updatePacing(diff) {\\n\\n\\t\\t\\t\\t\\t\\tgetTimeAllocated( timings, function ( slideEndTimingSeconds ) {\\n\\t\\t\\t\\t\\t\\t\\tvar slideEndTiming = slideEndTimingSeconds * 1000;\\n\\n\\t\\t\\t\\t\\t\\t\\tcallRevealApi( 'getSlidePastCount', [], function ( currentSlide ) {\\n\\t\\t\\t\\t\\t\\t\\t\\tvar currentSlideTiming = timings[currentSlide] * 1000;\\n\\t\\t\\t\\t\\t\\t\\t\\tvar timeLeftCurrentSlide = slideEndTiming - diff;\\n\\t\\t\\t\\t\\t\\t\\t\\tif (timeLeftCurrentSlide < 0) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tpacingEl.className = 'pacing behind';\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\telse if (timeLeftCurrentSlide < currentSlideTiming) {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tpacingEl.className = 'pacing on-track';\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tpacingEl.className = 'pacing ahead';\\n\\t\\t\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\t\\t\\t_displayTime( pacingHoursEl, pacingMinutesEl, pacingSecondsEl, timeLeftCurrentSlide );\\n\\t\\t\\t\\t\\t\\t\\t} );\\n\\t\\t\\t\\t\\t\\t} );\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t/**\\n\\t\\t\\t\\t * Sets up the speaker view layout and layout selector.\\n\\t\\t\\t\\t */\\n\\t\\t\\t\\tfunction setupLayout() {\\n\\n\\t\\t\\t\\t\\tlayoutDropdown = document.querySelector( '.speaker-layout-dropdown' );\\n\\t\\t\\t\\t\\tlayoutLabel = document.querySelector( '.speaker-layout-label' );\\n\\n\\t\\t\\t\\t\\t// Render the list of available layouts\\n\\t\\t\\t\\t\\tfor( var id in SPEAKER_LAYOUTS ) {\\n\\t\\t\\t\\t\\t\\tvar option = document.createElement( 'option' );\\n\\t\\t\\t\\t\\t\\toption.setAttribute( 'value', id );\\n\\t\\t\\t\\t\\t\\toption.textContent = SPEAKER_LAYOUTS[ id ];\\n\\t\\t\\t\\t\\t\\tlayoutDropdown.appendChild( option );\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Monitor the dropdown for changes\\n\\t\\t\\t\\t\\tlayoutDropdown.addEventListener( 'change', function( event ) {\\n\\n\\t\\t\\t\\t\\t\\tsetLayout( layoutDropdown.value );\\n\\n\\t\\t\\t\\t\\t}, false );\\n\\n\\t\\t\\t\\t\\t// Restore any currently persisted layout\\n\\t\\t\\t\\t\\tsetLayout( getLayout() );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t/**\\n\\t\\t\\t\\t * Sets a new speaker view layout. The layout is persisted\\n\\t\\t\\t\\t * in local storage.\\n\\t\\t\\t\\t */\\n\\t\\t\\t\\tfunction setLayout( value ) {\\n\\n\\t\\t\\t\\t\\tvar title = SPEAKER_LAYOUTS[ value ];\\n\\n\\t\\t\\t\\t\\tlayoutLabel.innerHTML = 'Layout' + ( title ? ( ': ' + title ) : '' );\\n\\t\\t\\t\\t\\tlayoutDropdown.value = value;\\n\\n\\t\\t\\t\\t\\tdocument.body.setAttribute( 'data-speaker-layout', value );\\n\\n\\t\\t\\t\\t\\t// Persist locally\\n\\t\\t\\t\\t\\tif( supportsLocalStorage() ) {\\n\\t\\t\\t\\t\\t\\twindow.localStorage.setItem( 'reveal-speaker-layout', value );\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t/**\\n\\t\\t\\t\\t * Returns the ID of the most recently set speaker layout\\n\\t\\t\\t\\t * or our default layout if none has been set.\\n\\t\\t\\t\\t */\\n\\t\\t\\t\\tfunction getLayout() {\\n\\n\\t\\t\\t\\t\\tif( supportsLocalStorage() ) {\\n\\t\\t\\t\\t\\t\\tvar layout = window.localStorage.getItem( 'reveal-speaker-layout' );\\n\\t\\t\\t\\t\\t\\tif( layout ) {\\n\\t\\t\\t\\t\\t\\t\\treturn layout;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t// Default to the first record in the layouts hash\\n\\t\\t\\t\\t\\tfor( var id in SPEAKER_LAYOUTS ) {\\n\\t\\t\\t\\t\\t\\treturn id;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tfunction supportsLocalStorage() {\\n\\n\\t\\t\\t\\t\\ttry {\\n\\t\\t\\t\\t\\t\\tlocalStorage.setItem('test', 'test');\\n\\t\\t\\t\\t\\t\\tlocalStorage.removeItem('test');\\n\\t\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tcatch( e ) {\\n\\t\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tfunction zeroPadInteger( num ) {\\n\\n\\t\\t\\t\\t\\tvar str = '00' + parseInt( num );\\n\\t\\t\\t\\t\\treturn str.substring( str.length - 2 );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t/**\\n\\t\\t\\t\\t * Limits the frequency at which a function can be called.\\n\\t\\t\\t\\t */\\n\\t\\t\\t\\tfunction debounce( fn, ms ) {\\n\\n\\t\\t\\t\\t\\tvar lastTime = 0,\\n\\t\\t\\t\\t\\t\\ttimeout;\\n\\n\\t\\t\\t\\t\\treturn function() {\\n\\n\\t\\t\\t\\t\\t\\tvar args = arguments;\\n\\t\\t\\t\\t\\t\\tvar context = this;\\n\\n\\t\\t\\t\\t\\t\\tclearTimeout( timeout );\\n\\n\\t\\t\\t\\t\\t\\tvar timeSinceLastCall = Date.now() - lastTime;\\n\\t\\t\\t\\t\\t\\tif( timeSinceLastCall > ms ) {\\n\\t\\t\\t\\t\\t\\t\\tfn.apply( context, args );\\n\\t\\t\\t\\t\\t\\t\\tlastTime = Date.now();\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\t\\t\\ttimeout = setTimeout( function() {\\n\\t\\t\\t\\t\\t\\t\\t\\tfn.apply( context, args );\\n\\t\\t\\t\\t\\t\\t\\t\\tlastTime = Date.now();\\n\\t\\t\\t\\t\\t\\t\\t}, ms - timeSinceLastCall );\\n\\t\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t})();\\n\\n\\t\\t<\\/script>\\n\\t</body>\\n</html>\"),!n)return void alert(\"Speaker view popup failed to open. Please make sure popups are allowed and reopen the speaker view.\");!function(){const i=e.getConfig().url,s=\"string\"==typeof i?i:window.location.protocol+\"//\"+window.location.host+window.location.pathname+window.location.search;t=setInterval((function(){n.postMessage(JSON.stringify({namespace:\"reveal-notes\",type:\"connect\",state:e.getState(),url:s}),\"*\")}),500),window.addEventListener(\"message\",r)}()}}function s(t){let i=e.getCurrentSlide(),s=i.querySelectorAll(\"aside.notes\"),r=i.querySelector(\".current-fragment\"),a={namespace:\"reveal-notes\",type:\"state\",notes:\"\",markdown:!1,whitespace:\"normal\",state:e.getState()};if(i.hasAttribute(\"data-notes\")&&(a.notes=i.getAttribute(\"data-notes\"),a.whitespace=\"pre-wrap\"),r){let t=r.querySelector(\"aside.notes\");t?(a.notes=t.innerHTML,a.markdown=\"string\"==typeof t.getAttribute(\"data-markdown\"),s=null):r.hasAttribute(\"data-notes\")&&(a.notes=r.getAttribute(\"data-notes\"),a.whitespace=\"pre-wrap\",s=null)}s&&(a.notes=Array.from(s).map((t=>t.innerHTML)).join(\"\\n\"),a.markdown=s[0]&&\"string\"==typeof s[0].getAttribute(\"data-markdown\")),n.postMessage(JSON.stringify(a),\"*\")}function r(i){if(function(t){try{return window.location.origin===t.source.location.origin}catch(t){return!1}}(i)){let s=JSON.parse(i.data);s&&\"reveal-notes\"===s.namespace&&\"connected\"===s.type?(clearInterval(t),a()):s&&\"reveal-notes\"===s.namespace&&\"call\"===s.type&&function(t,i,s){let r=e[t].apply(e,i);n.postMessage(JSON.stringify({namespace:\"reveal-notes\",type:\"return\",result:r,callId:s}),\"*\")}(s.methodName,s.arguments,s.callId)}}function a(){e.on(\"slidechanged\",s),e.on(\"fragmentshown\",s),e.on(\"fragmenthidden\",s),e.on(\"overviewhidden\",s),e.on(\"overviewshown\",s),e.on(\"paused\",s),e.on(\"resumed\",s),s()}return{id:\"notes\",init:function(t){e=t,/receiver/i.test(window.location.search)||(null!==window.location.search.match(/(\\?|\\&)notes/gi)?i():window.addEventListener(\"message\",(t=>{if(!n&&\"string\"==typeof t.data){let i;try{i=JSON.parse(t.data)}catch(t){}i&&\"reveal-notes\"===i.namespace&&\"heartbeat\"===i.type&&(e=t.source,n&&!n.closed?n.focus():(n=e,window.addEventListener(\"message\",r),a()))}var e})),e.addKeyBinding({keyCode:83,key:\"S\",description:\"Speaker notes view\"},(function(){i()})))},open:i}}}));\n"
    ]
  },
  {
    "id": "yarnpkg/yarn",
    "org": "yarnpkg",
    "avatarURL": "https://avatars.githubusercontent.com/u/22247014?v=4",
    "name": "yarnpkg/yarn",
    "url": "https://github.com/yarnpkg/yarn",
    "lang": "JavaScript",
    "star_num": 41261,
    "fork_num": 2908,
    "snippets": [
      "    if (tarballMirrorPath) {\n      await this._packToTarball(prepareConfig, tarballMirrorPath);\n    }\n    if (tarballCachePath) {\n      await this._packToTarball(prepareConfig, tarballCachePath);\n    }\n\n    await this._packToDirectory(prepareConfig, this.dest);\n\n    await fsUtil.unlink(prepareDirectory);\n  }\n\n  async _packToTarball(config: Config, path: string): Promise<void> {\n    const tarballStream = await this._createTarballStream(config);\n    await new Promise((resolve, reject) => {\n      const writeStream = fs.createWriteStream(path);\n      tarballStream.on('error', reject);\n      writeStream.on('error', reject);\n      writeStream.on('end', resolve);\n      writeStream.on('open', () => {\n        tarballStream.pipe(writeStream);\n      });\n      writeStream.once('finish', resolve);\n    });\n  }\n\n  async _packToDirectory(config: Config, dest: string): Promise<void> {\n    const tarballStream = await this._createTarballStream(config);\n    await new Promise((resolve, reject) => {\n      const untarStream = this._createUntarStream(dest);\n      tarballStream.on('error', reject);\n      untarStream.on('error', reject);\n      untarStream.on('end', resolve);\n      untarStream.once('finish', resolve);\n      tarballStream.pipe(untarStream);\n    });\n  }\n\n  _createTarballStream(config: Config): Promise<stream$Duplex> {\n    let savedPackedHeader = false;\n    return packTarball(config, {\n      mapHeader(header: Object): Object {\n        if (!savedPackedHeader) {\n          savedPackedHeader = true;\n          header.pax = header.pax || {};\n          // add a custom data on the first header\n          // in order to distinguish a tar from \"git archive\" and a tar from \"pack\" command\n          header.pax.packed = PACKED_FLAG;\n        }\n        return header;\n      },\n    });\n  }\n\n  _createUntarStream(dest: string): stream$Writable {\n    const PREFIX = 'package/';\n    let isPackedTarball = undefined;\n    return tarFs.extract(dest, {\n      dmode: 0o555, // all dirs should be readable\n      fmode: 0o444, // all files should be readable\n      chown: false, // don't chown. just leave as it is\n      map: header => {\n        if (isPackedTarball === undefined) {\n          isPackedTarball = header.pax && header.pax.packed === PACKED_FLAG;",
      "foo();\n",
      "/* @flow */\nconsole.log('hello world');\n",
      "#!/usr/bin/env node\nconsole.log('found-me');\n",
      "          await run(`install`);\n        },\n      ),\n    );\n\n    test(\n      `it should pass the dragon test 2`,\n      makeTemporaryEnv(\n        {\n          private: true,\n          workspaces: [`dragon-test-2-a`, `dragon-test-2-b`],\n          dependencies: {\n            [`dragon-test-2-a`]: `1.0.0`,\n          },\n        },\n        {\n          plugNPlay: true,\n        },\n        async ({path, run, source}) => {\n          // This test assumes the following:\n          //\n          // . -> A@workspace -> B@workspace -> no-deps@* (peer dep)\n          //                  -> no-deps@1.0.0\n          //\n          // In this situation, the implementation might register the workspaces one by\n          // one, going through all their dependencies before moving to the next one.\n          // Because the workspace B is also a dependency of the workspace A, it will be\n          // traversed a first time as a dependency of A, and then a second time as a\n          // workspace.\n          //\n          // A problem is when B also has peer dependencies, like in the setup described\n          // above. In this case, the Yarn implementation of PnP needs to generate a virtual\n          // package for B (in order to deambiguate the dependencies), and register it while\n          // processing A. Then later, when iterating over B, it is possible that the\n          // workspace registration overwrites the previously registered virtual dependency,\n          // making it unavailable whilst still being referenced in the dependencies of A.\n          //\n          // This test ensures that A can always require B.\n\n          await writeJson(`${path}/dragon-test-2-a/package.json`, {\n            name: `dragon-test-2-a`,\n            version: `1.0.0`,\n            dependencies: {\n              [`dragon-test-2-b`]: `1.0.0`,\n              [`no-deps`]: `1.0.0`,\n            },\n          });\n\n          await writeJson(`${path}/dragon-test-2-b/package.json`, {\n            name: `dragon-test-2-b`,\n            version: `1.0.0`,\n            peerDependencies: {\n              [`no-deps`]: `*`,\n            },\n          });\n\n          await writeFile(`${path}/dragon-test-2-a/index.js`, `module.exports = require('dragon-test-2-b')`);\n          await writeFile(`${path}/dragon-test-2-b/index.js`, `module.exports = require('no-deps')`);\n\n          await run(`install`);\n\n          await expect(source(`require(\"dragon-test-2-a\")`)).resolves.toMatchObject({\n            name: `no-deps`,\n            version: `1.0.0`,",
      "foo;\n",
      "/* @flow */\n\nfunction getUid(): ?number {\n  if (process.platform !== 'win32' && process.getuid) {\n    return process.getuid();\n  }\n  return null;\n}\n\nexport default isRootUser(getUid()) && !isFakeRoot();\n\nexport function isFakeRoot(): boolean {\n  return Boolean(process.env.FAKEROOTKEY);\n}\n\nexport function isRootUser(uid: ?number): boolean {\n  return uid === 0;\n}\n",
      "const _bitBucketBase = 'https://bitbucket.org/';\nconst reporter = new reporters.NoopReporter({});\n\ntest('hostname should be \"bitbucket.org\" ', () => {\n  expect(BitBucketResolver.hostname).toBe('bitbucket.org');\n});\n\ntest('protocol should be \"bitbucket\" ', () => {\n  expect(BitBucketResolver.protocol).toBe('bitbucket');\n});\n\ntest('explodeHostedGitFragment should work for colon separator after host', () => {\n  const fragmentString = 'git@bitbucket.org:team2/repo.git';\n\n  const expectedFragment: ExplodedFragment = {\n    user: 'team2',\n    repo: 'repo',\n    hash: '',\n  };\n\n  expect(explodeHostedGitFragment(fragmentString, reporter)).toEqual(expectedFragment);\n});\n\ntest('explodeHostedGitFragment should work for colon separator after host and with protocol before', () => {\n  const fragmentString = 'git+ssh://git@bitbucket.org:team/repo.git';\n\n  const expectedFragment: ExplodedFragment = {\n    user: 'team',\n    repo: 'repo',\n    hash: '',\n  };\n\n  expect(explodeHostedGitFragment(fragmentString, reporter)).toEqual(expectedFragment);\n});\n\ntest('explodeHostedGitFragment should work for slash separator after host', () => {\n  const fragmentString = 'git@bitbucket.org/team/repo.git';\n\n  const expectedFragment: ExplodedFragment = {\n    user: 'team',\n    repo: 'repo',\n    hash: '',\n  };\n\n  expect(explodeHostedGitFragment(fragmentString, reporter)).toEqual(expectedFragment);\n});\n\ntest('explodeHostedGitFragment should work for package name and colon separator after host', () => {\n  const fragmentString = 'package@git@bitbucket.org:team/repo.git';\n\n  const expectedFragment: ExplodedFragment = {\n    user: 'team',\n    repo: 'repo',\n    hash: '',\n  };\n\n  expect(explodeHostedGitFragment(fragmentString, reporter)).toEqual(expectedFragment);\n});\n\ntest('getTarballUrl should return the correct bitbucket tarball url', () => {\n  const fragment: ExplodedFragment = {\n    user: 'foo',\n    repo: 'bar',\n    hash: '',",
      "\n    for (const key of Object.keys(expected.lockfileEntries)) {\n      if (actual.lockfileEntries[key] !== expected.lockfileEntries[key]) {\n        return 'LOCKFILE_DONT_MATCH';\n      }\n    }\n\n    if (checkFiles) {\n      // Early bailout if we expect more files than what we have\n      if (expected.files.length > actual.files.length) {\n        return 'FILES_MISSING';\n      }\n\n      // Since we know the \"files\" array is sorted (alphabetically), we can optimize the thing\n      // Instead of storing the files in a Set, we can just iterate both arrays at once. O(n)!\n      for (let u = 0, v = 0; u < expected.files.length; ++u) {\n        // Index that, if reached, means that we won't have enough food to match the remaining expected entries anyway\n        const max = v + (actual.files.length - v) - (expected.files.length - u) + 1;\n\n        // Skip over files that have been added (ie not present in 'expected')\n        while (v < max && actual.files[v] !== expected.files[u]) {\n          v += 1;\n        }\n\n        // If we've reached the index defined above, the file is either missing or we can early exit\n        if (v === max) {\n          return 'FILES_MISSING';\n        }\n      }\n    }\n    return 'OK';\n  }\n\n  async check(\n    patterns: Array<string>,\n    lockfile: {[key: string]: LockManifest},\n    flags: IntegrityFlags,\n    workspaceLayout: ?WorkspaceLayout,\n  ): Promise<IntegrityCheckResult> {\n    // check if patterns exist in lockfile\n    const missingPatterns = patterns.filter(\n      p => !lockfile[p] && (!workspaceLayout || !workspaceLayout.getManifestByPattern(p)),\n    );\n\n    const loc = await this._getIntegrityFileLocation();\n    if (missingPatterns.length || !loc.exists) {\n      return {\n        integrityFileMissing: !loc.exists,\n        missingPatterns,\n      };\n    }\n\n    const actual = await this._generateIntegrityFile(lockfile, patterns, flags, workspaceLayout);\n\n    const expected = await this._getIntegrityFile(loc.locationPath);\n    let integrityMatches = this._compareIntegrityFiles(actual, expected, flags.checkFiles, workspaceLayout);\n\n    if (integrityMatches === 'OK') {\n      invariant(expected, \"The integrity shouldn't pass without integrity file\");\n      for (const modulesFolder of expected.modulesFolders) {\n        if (!await fs.exists(path.join(this.config.lockfileFolder, modulesFolder))) {\n          integrityMatches = 'MODULES_FOLDERS_MISSING';\n        }\n      }",
      "/*!\n * repeat-string <https://github.com/jonschlinkert/repeat-string>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT License\n */\n\n'use strict';\n\n/**\n * Expose `repeat`\n */\n\nmodule.exports = repeat;\n\n/**\n * Repeat the given `string` the specified `number`\n * of times.\n *\n * **Example:**\n *\n * ```js\n * var repeat = require('repeat-string');\n * repeat('A', 5);\n * //=> AAAAA\n * ```\n *\n * @param {String} `string` The string to repeat\n * @param {Number} `number` The number of times to repeat the string\n * @return {String} Repeated string\n * @api public\n */\n\nfunction repeat(str, num) {\n  if (typeof str !== 'string') {\n    throw new TypeError('repeat-string expects a string.');\n  }\n\n  var max = str.length * num;\n\n  if (cache !== str || typeof cache === 'undefined') {\n    cache = str;\n    res = '';\n  }\n\n  while (max > res.length && num > 0) {\n    if (num & 1) {\n      res += str;\n    }\n\n    num >>= 1;\n    str += str;\n  }\n\n  return res.substr(0, max);\n}\n\n/**\n * Results cache\n */\n\nvar res = '';\nvar cache;\n"
    ]
  },
  {
    "id": "mrdoob/three.js",
    "org": "mrdoob",
    "avatarURL": "https://avatars.githubusercontent.com/u/97088?v=4",
    "name": "mrdoob/three.js",
    "url": "https://github.com/mrdoob/three.js",
    "lang": "JavaScript",
    "star_num": 94286,
    "fork_num": 34966,
    "snippets": [
      "\tconst strings = editor.strings;\n\n\tconst container = new UIDiv();\n\n\tconst geometry = object.geometry;\n\tconst parameters = geometry.parameters;\n\n\t// radius\n\n\tconst radiusRow = new UIRow();\n\tconst radius = new UINumber( parameters.radius ).onChange( update );\n\n\tradiusRow.add( new UIText( strings.getKey( 'sidebar/geometry/torusKnot_geometry/radius' ) ).setWidth( '90px' ) );\n\tradiusRow.add( radius );\n\n\tcontainer.add( radiusRow );\n\n\t// tube\n\n\tconst tubeRow = new UIRow();\n\tconst tube = new UINumber( parameters.tube ).onChange( update );\n\n\ttubeRow.add( new UIText( strings.getKey( 'sidebar/geometry/torusKnot_geometry/tube' ) ).setWidth( '90px' ) );\n\ttubeRow.add( tube );\n\n\tcontainer.add( tubeRow );\n\n\t// tubularSegments\n\n\tconst tubularSegmentsRow = new UIRow();\n\tconst tubularSegments = new UIInteger( parameters.tubularSegments ).setRange( 1, Infinity ).onChange( update );\n\n\ttubularSegmentsRow.add( new UIText( strings.getKey( 'sidebar/geometry/torusKnot_geometry/tubularsegments' ) ).setWidth( '90px' ) );\n\ttubularSegmentsRow.add( tubularSegments );\n\n\tcontainer.add( tubularSegmentsRow );\n\n\t// radialSegments\n\n\tconst radialSegmentsRow = new UIRow();\n\tconst radialSegments = new UIInteger( parameters.radialSegments ).setRange( 1, Infinity ).onChange( update );\n\n\tradialSegmentsRow.add( new UIText( strings.getKey( 'sidebar/geometry/torusKnot_geometry/radialsegments' ) ).setWidth( '90px' ) );\n\tradialSegmentsRow.add( radialSegments );\n\n\tcontainer.add( radialSegmentsRow );\n\n\t// p\n\n\tconst pRow = new UIRow();\n\tconst p = new UINumber( parameters.p ).onChange( update );\n\n\tpRow.add( new UIText( strings.getKey( 'sidebar/geometry/torusKnot_geometry/p' ) ).setWidth( '90px' ) );\n\tpRow.add( p );\n\n\tcontainer.add( pRow );\n\n\t// q\n\n\tconst qRow = new UIRow();\n\tconst q = new UINumber( parameters.q ).onChange( update );\n\n\tqRow.add( new UIText( strings.getKey( 'sidebar/geometry/torusKnot_geometry/q' ) ).setWidth( '90px' ) );\n\tqRow.add( q );",
      "\n\t\t\tconst parameters = {\n\t\t\t\tradius: 10,\n\t\t\t\tdetail: undefined\n\t\t\t};\n\n\t\t\tgeometries = [\n\t\t\t\tnew TetrahedronGeometry(),\n\t\t\t\tnew TetrahedronGeometry( parameters.radius ),\n\t\t\t\tnew TetrahedronGeometry( parameters.radius, parameters.detail ),\n\t\t\t];\n\n\t\t} );\n\n\t\t// INHERITANCE\n\t\tQUnit.test( 'Extending', ( assert ) => {\n\n\t\t\tconst object = new TetrahedronGeometry();\n\t\t\tassert.strictEqual(\n\t\t\t\tobject instanceof PolyhedronGeometry, true,\n\t\t\t\t'TetrahedronGeometry extends from PolyhedronGeometry'\n\t\t\t);\n\n\t\t} );\n\n\t\t// INSTANCING\n\t\tQUnit.test( 'Instancing', ( assert ) => {\n\n\t\t\tconst object = new TetrahedronGeometry();\n\t\t\tassert.ok( object, 'Can instantiate a TetrahedronGeometry.' );\n\n\t\t} );\n\n\t\t// PROPERTIES\n\t\tQUnit.test( 'type', ( assert ) => {\n\n\t\t\tconst object = new TetrahedronGeometry();\n\t\t\tassert.ok(\n\t\t\t\tobject.type === 'TetrahedronGeometry',\n\t\t\t\t'TetrahedronGeometry.type should be TetrahedronGeometry'\n\t\t\t);\n\n\t\t} );\n\n\t\tQUnit.todo( 'parameters', ( assert ) => {\n\n\t\t\tassert.ok( false, 'everything\\'s gonna be alright' );\n\n\t\t} );\n\n\t\t// STATIC\n\t\tQUnit.todo( 'fromJSON', ( assert ) => {\n\n\t\t\tassert.ok( false, 'everything\\'s gonna be alright' );\n\n\t\t} );\n\n\t\t// OTHERS\n\t\tQUnit.test( 'Standard geometry tests', ( assert ) => {\n\n\t\t\trunStdGeometryTests( assert, geometries );\n\n\t\t} );\n",
      "\t\tQUnit.todo( 'distance', ( assert ) => {\n\n\t\t\tassert.ok( false, 'everything\\'s gonna be alright' );\n\n\t\t} );\n\n\t\tQUnit.todo( 'decay', ( assert ) => {\n\n\t\t\tassert.ok( false, 'everything\\'s gonna be alright' );\n\n\t\t} );\n\n\t\tQUnit.todo( 'shadow', ( assert ) => {\n\n\t\t\tassert.ok( false, 'everything\\'s gonna be alright' );\n\n\t\t} );\n\n\t\tQUnit.test( 'power', ( assert ) => {\n\n\t\t\tconst a = new PointLight( 0xaaaaaa );\n\n\t\t\ta.intensity = 100;\n\t\t\tassert.numEqual( a.power, 100 * Math.PI * 4, 'Correct power for an intensity of 100' );\n\n\t\t\ta.intensity = 40;\n\t\t\tassert.numEqual( a.power, 40 * Math.PI * 4, 'Correct power for an intensity of 40' );\n\n\t\t\ta.power = 100;\n\t\t\tassert.numEqual( a.intensity, 100 / ( 4 * Math.PI ), 'Correct intensity for a power of 100' );\n\n\t\t} );\n\n\t\t// PUBLIC\n\t\tQUnit.test( 'isPointLight', ( assert ) => {\n\n\t\t\tconst object = new PointLight();\n\t\t\tassert.ok(\n\t\t\t\tobject.isPointLight,\n\t\t\t\t'PointLight.isPointLight should be true'\n\t\t\t);\n\n\t\t} );\n\n\t\tQUnit.test( 'dispose', ( assert ) => {\n\n\t\t\tassert.expect( 0 );\n\n\t\t\tconst object = new PointLight();\n\t\t\tobject.dispose();\n\n\t\t\t// ensure calls dispose() on shadow\n\n\t\t} );\n\n\t\tQUnit.todo( 'copy', ( assert ) => {\n\n\t\t\tassert.ok( false, 'everything\\'s gonna be alright' );\n\n\t\t} );\n\n\t\t// OTHERS\n\t\tQUnit.test( 'Standard light tests', ( assert ) => {\n",
      "\n\t\tconst geometry = new BoxGeometry();\n\t\tgeometry.deleteAttribute( 'uv' );\n\n\t\tconst roomMaterial = new MeshStandardMaterial( { side: BackSide } );\n\t\tconst boxMaterial = new MeshStandardMaterial();\n\n\t\tlet intensity = 5;\n\n\t\tif ( renderer !== null && renderer._useLegacyLights === false ) intensity = 900;\n\n\t\tconst mainLight = new PointLight( 0xffffff, intensity, 28, 2 );\n\t\tmainLight.position.set( 0.418, 16.199, 0.300 );\n\t\tthis.add( mainLight );\n\n\t\tconst room = new Mesh( geometry, roomMaterial );\n\t\troom.position.set( - 0.757, 13.219, 0.717 );\n\t\troom.scale.set( 31.713, 28.305, 28.591 );\n\t\tthis.add( room );\n\n\t\tconst box1 = new Mesh( geometry, boxMaterial );\n\t\tbox1.position.set( - 10.906, 2.009, 1.846 );\n\t\tbox1.rotation.set( 0, - 0.195, 0 );\n\t\tbox1.scale.set( 2.328, 7.905, 4.651 );\n\t\tthis.add( box1 );\n\n\t\tconst box2 = new Mesh( geometry, boxMaterial );\n\t\tbox2.position.set( - 5.607, - 0.754, - 0.758 );\n\t\tbox2.rotation.set( 0, 0.994, 0 );\n\t\tbox2.scale.set( 1.970, 1.534, 3.955 );\n\t\tthis.add( box2 );\n\n\t\tconst box3 = new Mesh( geometry, boxMaterial );\n\t\tbox3.position.set( 6.167, 0.857, 7.803 );\n\t\tbox3.rotation.set( 0, 0.561, 0 );\n\t\tbox3.scale.set( 3.927, 6.285, 3.687 );\n\t\tthis.add( box3 );\n\n\t\tconst box4 = new Mesh( geometry, boxMaterial );\n\t\tbox4.position.set( - 2.017, 0.018, 6.124 );\n\t\tbox4.rotation.set( 0, 0.333, 0 );\n\t\tbox4.scale.set( 2.002, 4.566, 2.064 );\n\t\tthis.add( box4 );\n\n\t\tconst box5 = new Mesh( geometry, boxMaterial );\n\t\tbox5.position.set( 2.291, - 0.756, - 2.621 );\n\t\tbox5.rotation.set( 0, - 0.286, 0 );\n\t\tbox5.scale.set( 1.546, 1.552, 1.496 );\n\t\tthis.add( box5 );\n\n\t\tconst box6 = new Mesh( geometry, boxMaterial );\n\t\tbox6.position.set( - 2.193, - 0.369, - 5.547 );\n\t\tbox6.rotation.set( 0, 0.516, 0 );\n\t\tbox6.scale.set( 3.875, 3.487, 2.986 );\n\t\tthis.add( box6 );\n\n\n\t\t// -x right\n\t\tconst light1 = new Mesh( geometry, createAreaLightMaterial( 50 ) );\n\t\tlight1.position.set( - 16.116, 14.37, 8.208 );\n\t\tlight1.scale.set( 0.1, 2.428, 2.739 );\n\t\tthis.add( light1 );\n\n\t\t// -x left",
      "\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\n\t\t} else {\n\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\n\t\t}\n\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\n\t\t#else\n\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\n\t\t#endif\n\n\t#endif\n\n#endif\n`;\n",
      "\t\t\t0, 0, 0, \t1, 0, 1,\n\t\t\t0, 0, 0,\t- 1, 0, 1,\n\t\t\t0, 0, 0, \t0, 1, 1,\n\t\t\t0, 0, 0, \t0, - 1, 1\n\t\t];\n\n\t\tfor ( let i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\n\n\t\t\tconst p1 = ( i / l ) * Math.PI * 2;\n\t\t\tconst p2 = ( j / l ) * Math.PI * 2;\n\n\t\t\tpositions.push(\n\t\t\t\tMath.cos( p1 ), Math.sin( p1 ), 1,\n\t\t\t\tMath.cos( p2 ), Math.sin( p2 ), 1\n\t\t\t);\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { fog: false, toneMapped: false } );\n\n\t\tthis.cone = new LineSegments( geometry, material );\n\t\tthis.add( this.cone );\n\n\t\tthis.update();\n\n\t}\n\n\tdispose() {\n\n\t\tthis.cone.geometry.dispose();\n\t\tthis.cone.material.dispose();\n\n\t}\n\n\tupdate() {\n\n\t\tthis.light.updateWorldMatrix( true, false );\n\t\tthis.light.target.updateWorldMatrix( true, false );\n\n\t\tconst coneLength = this.light.distance ? this.light.distance : 1000;\n\t\tconst coneWidth = coneLength * Math.tan( this.light.angle );\n\n\t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\n\n\t\t_vector.setFromMatrixPosition( this.light.target.matrixWorld );\n\n\t\tthis.cone.lookAt( _vector );\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.cone.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.cone.material.color.copy( this.light.color );\n\n\t\t}\n\n\t}\n\n}\n",
      "\n\t\t'tDiffuse': { value: null },\n\t\t'resolution': { value: new Vector2() }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform sampler2D tDiffuse;\n\t\tuniform vec2 resolution;\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvec2 texel = vec2( 1.0 / resolution.x, 1.0 / resolution.y );\n\n\t\t// kernel definition (in glsl matrices are filled in column-major order)\n\n\t\t\tconst mat3 Gx = mat3( -1, -2, -1, 0, 0, 0, 1, 2, 1 ); // x direction kernel\n\t\t\tconst mat3 Gy = mat3( -1, 0, 1, -2, 0, 2, -1, 0, 1 ); // y direction kernel\n\n\t\t// fetch the 3x3 neighbourhood of a fragment\n\n\t\t// first column\n\n\t\t\tfloat tx0y0 = texture2D( tDiffuse, vUv + texel * vec2( -1, -1 ) ).r;\n\t\t\tfloat tx0y1 = texture2D( tDiffuse, vUv + texel * vec2( -1,  0 ) ).r;\n\t\t\tfloat tx0y2 = texture2D( tDiffuse, vUv + texel * vec2( -1,  1 ) ).r;\n\n\t\t// second column\n\n\t\t\tfloat tx1y0 = texture2D( tDiffuse, vUv + texel * vec2(  0, -1 ) ).r;\n\t\t\tfloat tx1y1 = texture2D( tDiffuse, vUv + texel * vec2(  0,  0 ) ).r;\n\t\t\tfloat tx1y2 = texture2D( tDiffuse, vUv + texel * vec2(  0,  1 ) ).r;\n\n\t\t// third column\n\n\t\t\tfloat tx2y0 = texture2D( tDiffuse, vUv + texel * vec2(  1, -1 ) ).r;\n\t\t\tfloat tx2y1 = texture2D( tDiffuse, vUv + texel * vec2(  1,  0 ) ).r;\n\t\t\tfloat tx2y2 = texture2D( tDiffuse, vUv + texel * vec2(  1,  1 ) ).r;\n\n\t\t// gradient value in x direction\n\n\t\t\tfloat valueGx = Gx[0][0] * tx0y0 + Gx[1][0] * tx1y0 + Gx[2][0] * tx2y0 +\n\t\t\t\tGx[0][1] * tx0y1 + Gx[1][1] * tx1y1 + Gx[2][1] * tx2y1 +\n\t\t\t\tGx[0][2] * tx0y2 + Gx[1][2] * tx1y2 + Gx[2][2] * tx2y2;\n\n\t\t// gradient value in y direction\n\n\t\t\tfloat valueGy = Gy[0][0] * tx0y0 + Gy[1][0] * tx1y0 + Gy[2][0] * tx2y0 +\n\t\t\t\tGy[0][1] * tx0y1 + Gy[1][1] * tx1y1 + Gy[2][1] * tx2y1 +\n\t\t\t\tGy[0][2] * tx0y2 + Gy[1][2] * tx1y2 + Gy[2][2] * tx2y2;",
      "\t\tvarying vec2 vUv;\n\n\t\t#include <packing>\n\n\t\tvoid main() {\n\n\t\t\tfloat depth = 1.0 - unpackRGBAToDepth( texture2D( tDiffuse, vUv ) );\n\t\t\tgl_FragColor = vec4( vec3( depth ), opacity );\n\n\t\t}`\n\n};\n\nexport { UnpackDepthRGBAShader };\n",
      "      var ch = stream.next();\n      if (hooks[ch]) {\n        var result = hooks[ch](stream, state);\n        if (result !== false) return result;\n      }\n      if (ch == '\"' || ch == \"'\") {\n        state.tokenize = tokenString(ch);\n        return state.tokenize(stream, state);\n      }\n      if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n        curPunc = ch;\n        return \"bracket\";\n      }\n      if (/\\d/.test(ch)) {\n        stream.eatWhile(/[\\w\\.]/);\n        return \"number\";\n      }\n      if (ch == \"/\") {\n        if (stream.eat(\"*\")) {\n          state.tokenize = tokenComment;\n          return tokenComment(stream, state);\n        }\n        if (stream.eat(\"/\")) {\n          stream.skipToEnd();\n          return \"comment\";\n        }\n      }\n      if (ch == \"#\") {\n        stream.eatWhile(/[\\S]+/);\n        stream.eatWhile(/[\\s]+/);\n        stream.eatWhile(/[\\S]+/);\n        stream.eatWhile(/[\\s]+/);\n        return \"comment\";\n      }\n      if (isOperatorChar.test(ch)) {\n        stream.eatWhile(isOperatorChar);\n        return \"operator\";\n      }\n      stream.eatWhile(/[\\w\\$_]/);\n      var cur = stream.current();\n      if (keywords.propertyIsEnumerable(cur)) {\n        if (blockKeywords.propertyIsEnumerable(cur)) curPunc = \"newstatement\";\n        return \"keyword\";\n      }\n      if (builtins.propertyIsEnumerable(cur)) {\n        return \"builtin\";\n      }\n      if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n      return \"word\";\n    }\n\n    function tokenString(quote) {\n      return function(stream, state) {\n        var escaped = false, next, end = false;\n        while ((next = stream.next()) != null) {\n          if (next == quote && !escaped) {end = true; break;}\n          escaped = !escaped && next == \"\\\\\";\n        }\n        if (end || !(escaped || multiLineStrings))\n          state.tokenize = tokenBase;\n        return \"string\";\n      };\n    }\n",
      "\tfor ( let j = 1; j <= p; ++ j ) {\n\n\t\tleft[ j ] = u - U[ span + 1 - j ];\n\t\tright[ j ] = U[ span + j ] - u;\n\n\t\tlet saved = 0.0;\n\n\t\tfor ( let r = 0; r < j; ++ r ) {\n\n\t\t\tconst rv = right[ r + 1 ];\n\t\t\tconst lv = left[ j - r ];\n\t\t\tconst temp = N[ r ] / ( rv + lv );\n\t\t\tN[ r ] = saved + rv * temp;\n\t\t\tsaved = lv * temp;\n\n\t\t}\n\n\t\tN[ j ] = saved;\n\n\t}\n\n\treturn N;\n\n}\n\n\n/*\nCalculate B-Spline curve points. See The NURBS Book, page 82, algorithm A3.1.\n\np : degree of B-Spline\nU : knot vector\nP : control points (x, y, z, w)\nu : parametric point\n\nreturns point for given u\n*/\nfunction calcBSplinePoint( p, U, P, u ) {\n\n\tconst span = findSpan( p, u, U );\n\tconst N = calcBasisFunctions( span, u, p, U );\n\tconst C = new Vector4( 0, 0, 0, 0 );\n\n\tfor ( let j = 0; j <= p; ++ j ) {\n\n\t\tconst point = P[ span - p + j ];\n\t\tconst Nj = N[ j ];\n\t\tconst wNj = point.w * Nj;\n\t\tC.x += point.x * wNj;\n\t\tC.y += point.y * wNj;\n\t\tC.z += point.z * wNj;\n\t\tC.w += point.w * Nj;\n\n\t}\n\n\treturn C;\n\n}\n\n\n/*\nCalculate basis functions derivatives. See The NURBS Book, page 72, algorithm A2.3.\n\nspan : span in which u lies\nu    : parametric point"
    ]
  },
  {
    "id": "moment/moment",
    "org": "moment",
    "avatarURL": "https://avatars.githubusercontent.com/u/4129662?v=4",
    "name": "moment/moment",
    "url": "https://github.com/moment/moment",
    "lang": "JavaScript",
    "star_num": 47529,
    "fork_num": 7184,
    "snippets": [
      "var symbolMap = {\n        1: '૧',\n        2: '૨',\n        3: '૩',\n        4: '૪',\n        5: '૫',\n        6: '૬',\n        7: '૭',\n        8: '૮',\n        9: '૯',\n        0: '૦',\n    },\n    numberMap = {\n        '૧': '1',\n        '૨': '2',\n        '૩': '3',\n        '૪': '4',\n        '૫': '5',\n        '૬': '6',\n        '૭': '7',\n        '૮': '8',\n        '૯': '9',\n        '૦': '0',\n    };\n\nexport default moment.defineLocale('gu', {\n    months: 'જાન્યુઆરી_ફેબ્રુઆરી_માર્ચ_એપ્રિલ_મે_જૂન_જુલાઈ_ઑગસ્ટ_સપ્ટેમ્બર_ઑક્ટ્બર_નવેમ્બર_ડિસેમ્બર'.split(\n        '_'\n    ),\n    monthsShort:\n        'જાન્યુ._ફેબ્રુ._માર્ચ_એપ્રિ._મે_જૂન_જુલા._ઑગ._સપ્ટે._ઑક્ટ્._નવે._ડિસે.'.split(\n            '_'\n        ),\n    monthsParseExact: true,\n    weekdays: 'રવિવાર_સોમવાર_મંગળવાર_બુધ્વાર_ગુરુવાર_શુક્રવાર_શનિવાર'.split(\n        '_'\n    ),\n    weekdaysShort: 'રવિ_સોમ_મંગળ_બુધ્_ગુરુ_શુક્ર_શનિ'.split('_'),\n    weekdaysMin: 'ર_સો_મં_બુ_ગુ_શુ_શ'.split('_'),\n    longDateFormat: {\n        LT: 'A h:mm વાગ્યે',\n        LTS: 'A h:mm:ss વાગ્યે',\n        L: 'DD/MM/YYYY',\n        LL: 'D MMMM YYYY',\n        LLL: 'D MMMM YYYY, A h:mm વાગ્યે',\n        LLLL: 'dddd, D MMMM YYYY, A h:mm વાગ્યે',\n    },\n    calendar: {\n        sameDay: '[આજ] LT',\n        nextDay: '[કાલે] LT',\n        nextWeek: 'dddd, LT',\n        lastDay: '[ગઇકાલે] LT',\n        lastWeek: '[પાછલા] dddd, LT',\n        sameElse: 'L',\n    },\n    relativeTime: {\n        future: '%s મા',\n        past: '%s પહેલા',\n        s: 'અમુક પળો',\n        ss: '%d સેકંડ',\n        m: 'એક મિનિટ',\n        mm: '%d મિનિટ',\n        h: 'એક કલાક',\n        hh: '%d કલાક',",
      "export var defaultCalendar = {\n    sameDay: '[Today at] LT',\n    nextDay: '[Tomorrow at] LT',\n    nextWeek: 'dddd [at] LT',\n    lastDay: '[Yesterday at] LT',\n    lastWeek: '[Last] dddd [at] LT',\n    sameElse: 'L',\n};\n\nimport isFunction from '../utils/is-function';\n\nexport function calendar(key, mom, now) {\n    var output = this._calendar[key] || this._calendar['sameElse'];\n    return isFunction(output) ? output.call(mom, now) : output;\n}\n",
      "            ),\n        i;\n    for (i = 0; i < expected.length; i++) {\n        assert.equal(\n            moment([2011, i, 1]).format('MMMM MMM'),\n            expected[i],\n            expected[i]\n        );\n    }\n});\n\ntest('format week', function (assert) {\n    var expected =\n            'Sunday Sun Su_Monday Mon Mo_Tuesday Tue Tu_Wednesday Wed We_Thursday Thu Th_Friday Fri Fr_Saturday Sat Sa'.split(\n                '_'\n            ),\n        i;\n    for (i = 0; i < expected.length; i++) {\n        assert.equal(\n            moment([2011, 0, 2 + i]).format('dddd ddd dd'),\n            expected[i],\n            expected[i]\n        );\n    }\n});\n\ntest('from', function (assert) {\n    var start = moment([2007, 1, 28]);\n    assert.equal(\n        start.from(moment([2007, 1, 28]).add({ s: 44 }), true),\n        'a few seconds',\n        '44 seconds = a few seconds'\n    );\n    assert.equal(\n        start.from(moment([2007, 1, 28]).add({ s: 45 }), true),\n        'a minute',\n        '45 seconds = a minute'\n    );\n    assert.equal(\n        start.from(moment([2007, 1, 28]).add({ s: 89 }), true),\n        'a minute',\n        '89 seconds = a minute'\n    );\n    assert.equal(\n        start.from(moment([2007, 1, 28]).add({ s: 90 }), true),\n        '2 minutes',\n        '90 seconds = 2 minutes'\n    );\n    assert.equal(\n        start.from(moment([2007, 1, 28]).add({ m: 44 }), true),\n        '44 minutes',\n        '44 minutes = 44 minutes'\n    );\n    assert.equal(\n        start.from(moment([2007, 1, 28]).add({ m: 45 }), true),\n        'an hour',\n        '45 minutes = an hour'\n    );\n    assert.equal(\n        start.from(moment([2007, 1, 28]).add({ m: 89 }), true),\n        'an hour',\n        '89 minutes = an hour'\n    );\n    assert.equal(",
      "        },\n        numberMap = {\n            '১': '1',\n            '২': '2',\n            '৩': '3',\n            '৪': '4',\n            '৫': '5',\n            '৬': '6',\n            '৭': '7',\n            '৮': '8',\n            '৯': '9',\n            '০': '0',\n        };\n\n    var bnBd = moment.defineLocale('bn-bd', {\n        months: 'জানুয়ারি_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর'.split(\n            '_'\n        ),\n        monthsShort:\n            'জানু_ফেব্রু_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্ট_অক্টো_নভে_ডিসে'.split(\n                '_'\n            ),\n        weekdays: 'রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার'.split(\n            '_'\n        ),\n        weekdaysShort: 'রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি'.split('_'),\n        weekdaysMin: 'রবি_সোম_মঙ্গল_বুধ_বৃহ_শুক্র_শনি'.split('_'),\n        longDateFormat: {\n            LT: 'A h:mm সময়',\n            LTS: 'A h:mm:ss সময়',\n            L: 'DD/MM/YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY, A h:mm সময়',\n            LLLL: 'dddd, D MMMM YYYY, A h:mm সময়',\n        },\n        calendar: {\n            sameDay: '[আজ] LT',\n            nextDay: '[আগামীকাল] LT',\n            nextWeek: 'dddd, LT',\n            lastDay: '[গতকাল] LT',\n            lastWeek: '[গত] dddd, LT',\n            sameElse: 'L',\n        },\n        relativeTime: {\n            future: '%s পরে',\n            past: '%s আগে',\n            s: 'কয়েক সেকেন্ড',\n            ss: '%d সেকেন্ড',\n            m: 'এক মিনিট',\n            mm: '%d মিনিট',\n            h: 'এক ঘন্টা',\n            hh: '%d ঘন্টা',\n            d: 'এক দিন',\n            dd: '%d দিন',\n            M: 'এক মাস',\n            MM: '%d মাস',\n            y: 'এক বছর',\n            yy: '%d বছর',\n        },\n        preparse: function (string) {\n            return string.replace(/[১২৩৪৫৬৭৮৯০]/g, function (match) {\n                return numberMap[match];\n            });\n        },",
      "    minWeekdaysParse = [\n        /^Su/i,\n        /^Lu/i,\n        /^Me([^r]|$)/i,\n        /^Mer/i,\n        /^Ya/i,\n        /^Gw/i,\n        /^Sa/i,\n    ];\n\nexport default moment.defineLocale('br', {\n    months: 'Genver_Cʼhwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu'.split(\n        '_'\n    ),\n    monthsShort: 'Gen_Cʼhwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker'.split('_'),\n    weekdays: 'Sul_Lun_Meurzh_Mercʼher_Yaou_Gwener_Sadorn'.split('_'),\n    weekdaysShort: 'Sul_Lun_Meu_Mer_Yao_Gwe_Sad'.split('_'),\n    weekdaysMin: 'Su_Lu_Me_Mer_Ya_Gw_Sa'.split('_'),\n    weekdaysParse: minWeekdaysParse,\n    fullWeekdaysParse: fullWeekdaysParse,\n    shortWeekdaysParse: shortWeekdaysParse,\n    minWeekdaysParse: minWeekdaysParse,\n\n    monthsRegex: monthsRegex,\n    monthsShortRegex: monthsRegex,\n    monthsStrictRegex: monthsStrictRegex,\n    monthsShortStrictRegex: monthsShortStrictRegex,\n    monthsParse: monthsParse,\n    longMonthsParse: monthsParse,\n    shortMonthsParse: monthsParse,\n\n    longDateFormat: {\n        LT: 'HH:mm',\n        LTS: 'HH:mm:ss',\n        L: 'DD/MM/YYYY',\n        LL: 'D [a viz] MMMM YYYY',\n        LLL: 'D [a viz] MMMM YYYY HH:mm',\n        LLLL: 'dddd, D [a viz] MMMM YYYY HH:mm',\n    },\n    calendar: {\n        sameDay: '[Hiziv da] LT',\n        nextDay: '[Warcʼhoazh da] LT',\n        nextWeek: 'dddd [da] LT',\n        lastDay: '[Decʼh da] LT',\n        lastWeek: 'dddd [paset da] LT',\n        sameElse: 'L',\n    },\n    relativeTime: {\n        future: 'a-benn %s',\n        past: '%s ʼzo',\n        s: 'un nebeud segondennoù',\n        ss: '%d eilenn',\n        m: 'ur vunutenn',\n        mm: relativeTimeWithMutation,\n        h: 'un eur',\n        hh: '%d eur',\n        d: 'un devezh',\n        dd: relativeTimeWithMutation,\n        M: 'ur miz',\n        MM: relativeTimeWithMutation,\n        y: 'ur bloaz',\n        yy: specialMutationForYears,\n    },\n    dayOfMonthOrdinalParse: /\\d{1,2}(añ|vet)/,",
      "        'مئي',\n        'جون',\n        'جولاءِ',\n        'آگسٽ',\n        'سيپٽمبر',\n        'آڪٽوبر',\n        'نومبر',\n        'ڊسمبر',\n    ],\n    days = ['آچر', 'سومر', 'اڱارو', 'اربع', 'خميس', 'جمع', 'ڇنڇر'];\n\nexport default moment.defineLocale('sd', {\n    months: months,\n    monthsShort: months,\n    weekdays: days,\n    weekdaysShort: days,\n    weekdaysMin: days,\n    longDateFormat: {\n        LT: 'HH:mm',\n        LTS: 'HH:mm:ss',\n        L: 'DD/MM/YYYY',\n        LL: 'D MMMM YYYY',\n        LLL: 'D MMMM YYYY HH:mm',\n        LLLL: 'dddd، D MMMM YYYY HH:mm',\n    },\n    meridiemParse: /صبح|شام/,\n    isPM: function (input) {\n        return 'شام' === input;\n    },\n    meridiem: function (hour, minute, isLower) {\n        if (hour < 12) {\n            return 'صبح';\n        }\n        return 'شام';\n    },\n    calendar: {\n        sameDay: '[اڄ] LT',\n        nextDay: '[سڀاڻي] LT',\n        nextWeek: 'dddd [اڳين هفتي تي] LT',\n        lastDay: '[ڪالهه] LT',\n        lastWeek: '[گزريل هفتي] dddd [تي] LT',\n        sameElse: 'L',\n    },\n    relativeTime: {\n        future: '%s پوء',\n        past: '%s اڳ',\n        s: 'چند سيڪنڊ',\n        ss: '%d سيڪنڊ',\n        m: 'هڪ منٽ',\n        mm: '%d منٽ',\n        h: 'هڪ ڪلاڪ',\n        hh: '%d ڪلاڪ',\n        d: 'هڪ ڏينهن',\n        dd: '%d ڏينهن',\n        M: 'هڪ مهينو',\n        MM: '%d مهينا',\n        y: 'هڪ سال',\n        yy: '%d سال',\n    },\n    preparse: function (string) {\n        return string.replace(/،/g, ',');\n    },\n    postformat: function (string) {\n        return string.replace(/,/g, '،');",
      "    8: \"'inji\",\n    70: \"'inji\",\n    80: \"'inji\",\n    2: \"'nji\",\n    7: \"'nji\",\n    20: \"'nji\",\n    50: \"'nji\",\n    3: \"'ünji\",\n    4: \"'ünji\",\n    100: \"'ünji\",\n    6: \"'njy\",\n    9: \"'unjy\",\n    10: \"'unjy\",\n    30: \"'unjy\",\n    60: \"'ynjy\",\n    90: \"'ynjy\",\n};\n\nexport default moment.defineLocale('tk', {\n    months: 'Ýanwar_Fewral_Mart_Aprel_Maý_Iýun_Iýul_Awgust_Sentýabr_Oktýabr_Noýabr_Dekabr'.split(\n        '_'\n    ),\n    monthsShort: 'Ýan_Few_Mar_Apr_Maý_Iýn_Iýl_Awg_Sen_Okt_Noý_Dek'.split('_'),\n    weekdays: 'Ýekşenbe_Duşenbe_Sişenbe_Çarşenbe_Penşenbe_Anna_Şenbe'.split(\n        '_'\n    ),\n    weekdaysShort: 'Ýek_Duş_Siş_Çar_Pen_Ann_Şen'.split('_'),\n    weekdaysMin: 'Ýk_Dş_Sş_Çr_Pn_An_Şn'.split('_'),\n    longDateFormat: {\n        LT: 'HH:mm',\n        LTS: 'HH:mm:ss',\n        L: 'DD.MM.YYYY',\n        LL: 'D MMMM YYYY',\n        LLL: 'D MMMM YYYY HH:mm',\n        LLLL: 'dddd, D MMMM YYYY HH:mm',\n    },\n    calendar: {\n        sameDay: '[bugün sagat] LT',\n        nextDay: '[ertir sagat] LT',\n        nextWeek: '[indiki] dddd [sagat] LT',\n        lastDay: '[düýn] LT',\n        lastWeek: '[geçen] dddd [sagat] LT',\n        sameElse: 'L',\n    },\n    relativeTime: {\n        future: '%s soň',\n        past: '%s öň',\n        s: 'birnäçe sekunt',\n        m: 'bir minut',\n        mm: '%d minut',\n        h: 'bir sagat',\n        hh: '%d sagat',\n        d: 'bir gün',\n        dd: '%d gün',\n        M: 'bir aý',\n        MM: '%d aý',\n        y: 'bir ýyl',\n        yy: '%d ýyl',\n    },\n    ordinal: function (number, period) {\n        switch (period) {\n            case 'd':\n            case 'D':\n            case 'Do':",
      "    weekdays: 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),\n    weekdaysShort: 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),\n    weekdaysMin: 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),\n    longDateFormat: {\n        LT: 'HH.mm',\n        LTS: 'HH.mm.ss',\n        L: 'DD/MM/YYYY',\n        LL: 'D MMMM YYYY',\n        LLL: 'D MMMM YYYY [pukul] HH.mm',\n        LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm',\n    },\n    meridiemParse: /pagi|tengahari|petang|malam/,\n    meridiemHour: function (hour, meridiem) {\n        if (hour === 12) {\n            hour = 0;\n        }\n        if (meridiem === 'pagi') {\n            return hour;\n        } else if (meridiem === 'tengahari') {\n            return hour >= 11 ? hour : hour + 12;\n        } else if (meridiem === 'petang' || meridiem === 'malam') {\n            return hour + 12;\n        }\n    },\n    meridiem: function (hours, minutes, isLower) {\n        if (hours < 11) {\n            return 'pagi';\n        } else if (hours < 15) {\n            return 'tengahari';\n        } else if (hours < 19) {\n            return 'petang';\n        } else {\n            return 'malam';\n        }\n    },\n    calendar: {\n        sameDay: '[Hari ini pukul] LT',\n        nextDay: '[Esok pukul] LT',\n        nextWeek: 'dddd [pukul] LT',\n        lastDay: '[Kelmarin pukul] LT',\n        lastWeek: 'dddd [lepas pukul] LT',\n        sameElse: 'L',\n    },\n    relativeTime: {\n        future: 'dalam %s',\n        past: '%s yang lepas',\n        s: 'beberapa saat',\n        ss: '%d saat',\n        m: 'seminit',\n        mm: '%d minit',\n        h: 'sejam',\n        hh: '%d jam',\n        d: 'sehari',\n        dd: '%d hari',\n        M: 'sebulan',\n        MM: '%d bulan',\n        y: 'setahun',\n        yy: '%d tahun',\n    },\n    week: {\n        dow: 1, // Monday is the first day of the week.\n        doy: 7, // The week that contains Jan 7th is the first week of the year.\n    },\n});",
      "\ntest('leap years', function (assert) {\n    var tests = [\n        { year: 1, expected: false, description: '1 was not a leap year' },\n        { year: 4, expected: true, description: '4 was a leap year' },\n        { year: 100, expected: false, description: '100 was not a leap year' },\n        { year: 400, expected: true, description: '400 was a leap year' },\n        {\n            year: 1700,\n            expected: false,\n            description:\n                '1700 was a leap year in the Julian calendar, but not Gregorian',\n        },\n        {\n            year: 1900,\n            expected: false,\n            description:\n                '1900 was not a leap year, but this is a well known Microsoft Excel bug',\n        },\n        { year: 1904, expected: true, description: '1904 was a leap year' },\n        { year: 2000, expected: true, description: '2000 was a leap year' },\n        { year: 2008, expected: true, description: '2008 was a leap year' },\n        {\n            year: 2010,\n            expected: false,\n            description: '2010 was not a leap year',\n        },\n        { year: 2024, expected: true, description: '2024 will be a leap year' },\n        { year: 3448, expected: true, description: '3448 will be a leap year' },\n        { year: 4000, expected: true, description: '4000 will be a leap year' },\n        {\n            year: NaN,\n            expected: false,\n            description:\n                'NaN returns false explicitly, as math operations on non-numbers yields NaN',\n        },\n        {\n            year: '2000',\n            expected: true,\n            description:\n                'The string literal \"2000\" yields true as it is parsed as the number 2000',\n        },\n        {\n            year: Infinity,\n            expected: false,\n            description:\n                'Non-finite years are technically not years and definitely not leap years',\n        },\n        {\n            year: 3.14,\n            expected: false,\n            description:\n                'Non-integer years are technically not years and definitely not leap years',\n        },\n        {\n            year: 0,\n            expected: true,\n            description:\n                'While unclear whether this case is exceptional, it is a leap year based on existing formula',\n        },\n        {\n            year: -400,\n            expected: true,\n            description:",
      "        moment(a).subtract({ d: 1 }).calendar(),\n        'assant g 12:00',\n        'yesterday at the same time'\n    );\n});\n\ntest('calendar next week', function (assert) {\n    var i, m;\n    for (i = 2; i < 7; i++) {\n        m = moment().add({ d: i });\n        assert.equal(\n            m.calendar(),\n            m.format('dddd [g] LT'),\n            'Today + ' + i + ' days current time'\n        );\n        m.hours(0).minutes(0).seconds(0).milliseconds(0);\n        assert.equal(\n            m.calendar(),\n            m.format('dddd [g] LT'),\n            'Today + ' + i + ' days beginning of day'\n        );\n        m.hours(23).minutes(59).seconds(59).milliseconds(999);\n        assert.equal(\n            m.calendar(),\n            m.format('dddd [g] LT'),\n            'Today + ' + i + ' days end of day'\n        );\n    }\n});\n\ntest('calendar last week', function (assert) {\n    var i, m;\n    for (i = 2; i < 7; i++) {\n        m = moment().subtract({ d: i });\n        assert.equal(\n            m.calendar(),\n            m.format('dddd [g] LT'),\n            'Today - ' + i + ' days current time'\n        );\n        m.hours(0).minutes(0).seconds(0).milliseconds(0);\n        assert.equal(\n            m.calendar(),\n            m.format('dddd [g] LT'),\n            'Today - ' + i + ' days beginning of day'\n        );\n        m.hours(23).minutes(59).seconds(59).milliseconds(999);\n        assert.equal(\n            m.calendar(),\n            m.format('dddd [g] LT'),\n            'Today - ' + i + ' days end of day'\n        );\n    }\n});\n\ntest('calendar all else', function (assert) {\n    var weeksAgo = moment().subtract({ w: 1 }),\n        weeksFromNow = moment().add({ w: 1 });\n\n    assert.equal(weeksAgo.calendar(), weeksAgo.format('L'), '1 week ago');\n    assert.equal(\n        weeksFromNow.calendar(),\n        weeksFromNow.format('L'),\n        'in 1 week'\n    );"
    ]
  },
  {
    "id": "laravel/laravel",
    "org": "laravel",
    "avatarURL": "https://avatars.githubusercontent.com/u/958072?v=4",
    "name": "laravel/laravel",
    "url": "https://github.com/laravel/laravel",
    "lang": "PHP",
    "star_num": 74581,
    "fork_num": 23964,
    "snippets": [
      "<?php\n\nnamespace App\\Http\\Middleware;\n\nuse Illuminate\\Http\\Middleware\\TrustHosts as Middleware;\n\nclass TrustHosts extends Middleware\n{\n    /**\n     * Get the host patterns that should be trusted.\n     *\n     * @return array<int, string|null>\n     */\n    public function hosts(): array\n    {\n        return [\n            $this->allSubdomainsOfApplicationUrl(),\n        ];\n    }\n}\n",
      "<?php\n\nnamespace App\\Providers;\n\n// use Illuminate\\Support\\Facades\\Gate;\nuse Illuminate\\Foundation\\Support\\Providers\\AuthServiceProvider as ServiceProvider;\n\nclass AuthServiceProvider extends ServiceProvider\n{\n    /**\n     * The model to policy mappings for the application.\n     *\n     * @var array<class-string, class-string>\n     */\n    protected $policies = [\n        //\n    ];\n\n    /**\n     * Register any authentication / authorization services.\n     */\n    public function boot(): void\n    {\n        //\n    }\n}\n",
      "<?php\n\nnamespace App\\Http\\Middleware;\n\nuse Illuminate\\Cookie\\Middleware\\EncryptCookies as Middleware;\n\nclass EncryptCookies extends Middleware\n{\n    /**\n     * The names of the cookies that should not be encrypted.\n     *\n     * @var array<int, string>\n     */\n    protected $except = [\n        //\n    ];\n}\n",
      "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Foundation\\Auth\\Access\\AuthorizesRequests;\nuse Illuminate\\Foundation\\Validation\\ValidatesRequests;\nuse Illuminate\\Routing\\Controller as BaseController;\n\nclass Controller extends BaseController\n{\n    use AuthorizesRequests, ValidatesRequests;\n}\n",
      "    'connections' => [\n\n        'sync' => [\n            'driver' => 'sync',\n        ],\n\n        'database' => [\n            'driver' => 'database',\n            'table' => 'jobs',\n            'queue' => 'default',\n            'retry_after' => 90,\n            'after_commit' => false,\n        ],\n\n        'beanstalkd' => [\n            'driver' => 'beanstalkd',\n            'host' => 'localhost',\n            'queue' => 'default',\n            'retry_after' => 90,\n            'block_for' => 0,\n            'after_commit' => false,\n        ],\n\n        'sqs' => [\n            'driver' => 'sqs',\n            'key' => env('AWS_ACCESS_KEY_ID'),\n            'secret' => env('AWS_SECRET_ACCESS_KEY'),\n            'prefix' => env('SQS_PREFIX', 'https://sqs.us-east-1.amazonaws.com/your-account-id'),\n            'queue' => env('SQS_QUEUE', 'default'),\n            'suffix' => env('SQS_SUFFIX'),\n            'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),\n            'after_commit' => false,\n        ],\n\n        'redis' => [\n            'driver' => 'redis',\n            'connection' => 'default',\n            'queue' => env('REDIS_QUEUE', 'default'),\n            'retry_after' => 90,\n            'block_for' => null,\n            'after_commit' => false,\n        ],\n\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Job Batching\n    |--------------------------------------------------------------------------\n    |\n    | The following options configure the database and table that store job\n    | batching information. These options can be updated to any database\n    | connection and table which has been defined by your application.\n    |\n    */\n\n    'batching' => [\n        'database' => env('DB_CONNECTION', 'mysql'),\n        'table' => 'job_batches',\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Failed Queue Jobs",
      "    |\n    */\n\n    'argon' => [\n        'memory' => 65536,\n        'threads' => 1,\n        'time' => 4,\n    ],\n\n];\n",
      "        ],\n    ];\n\n    /**\n     * Register any events for your application.\n     */\n    public function boot(): void\n    {\n        //\n    }\n\n    /**\n     * Determine if events and listeners should be automatically discovered.\n     */\n    public function shouldDiscoverEvents(): bool\n    {\n        return false;\n    }\n}\n",
      "\n$response = $kernel->handle(\n    $request = Request::capture()\n)->send();\n\n$kernel->terminate($request, $response);\n",
      "    'defaults' => [\n        'guard' => 'web',\n        'passwords' => 'users',\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Authentication Guards\n    |--------------------------------------------------------------------------\n    |\n    | Next, you may define every authentication guard for your application.\n    | Of course, a great default configuration has been defined for you\n    | here which uses session storage and the Eloquent user provider.\n    |\n    | All authentication drivers have a user provider. This defines how the\n    | users are actually retrieved out of your database or other storage\n    | mechanisms used by this application to persist your user's data.\n    |\n    | Supported: \"session\"\n    |\n    */\n\n    'guards' => [\n        'web' => [\n            'driver' => 'session',\n            'provider' => 'users',\n        ],\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | User Providers\n    |--------------------------------------------------------------------------\n    |\n    | All authentication drivers have a user provider. This defines how the\n    | users are actually retrieved out of your database or other storage\n    | mechanisms used by this application to persist your user's data.\n    |\n    | If you have multiple user tables or models you may configure multiple\n    | sources which represent each model / table. These sources may then\n    | be assigned to any extra authentication guards you have defined.\n    |\n    | Supported: \"database\", \"eloquent\"\n    |\n    */\n\n    'providers' => [\n        'users' => [\n            'driver' => 'eloquent',\n            'model' => App\\Models\\User::class,\n        ],\n\n        // 'users' => [\n        //     'driver' => 'database',\n        //     'table' => 'users',\n        // ],\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Resetting Passwords\n    |--------------------------------------------------------------------------\n    |\n    | You may specify multiple password reset configurations if you have more",
      "$kernel = $app->make(Kernel::class);\n\n$response = $kernel->handle(\n    $request = Request::capture()\n)->send();\n\n$kernel->terminate($request, $response);\n"
    ]
  },
  {
    "id": "expressjs/express",
    "org": "expressjs",
    "avatarURL": "https://avatars.githubusercontent.com/u/5658226?v=4",
    "name": "expressjs/express",
    "url": "https://github.com/expressjs/express",
    "lang": "JavaScript",
    "star_num": 61783,
    "fork_num": 10886,
    "snippets": [
      "    // fast path non-ending match for / (any path matches)\n    if (this.regexp.fast_slash) {\n      this.params = {}\n      this.path = ''\n      return true\n    }\n\n    // fast path for * (everything matched in a param)\n    if (this.regexp.fast_star) {\n      this.params = {'0': decode_param(path)}\n      this.path = path\n      return true\n    }\n\n    // match the path\n    match = this.regexp.exec(path)\n  }\n\n  if (!match) {\n    this.params = undefined;\n    this.path = undefined;\n    return false;\n  }\n\n  // store values\n  this.params = {};\n  this.path = match[0]\n\n  var keys = this.keys;\n  var params = this.params;\n\n  for (var i = 1; i < match.length; i++) {\n    var key = keys[i - 1];\n    var prop = key.name;\n    var val = decode_param(match[i])\n\n    if (val !== undefined || !(hasOwnProperty.call(params, prop))) {\n      params[prop] = val;\n    }\n  }\n\n  return true;\n};\n\n/**\n * Decode param value.\n *\n * @param {string} val\n * @return {string}\n * @private\n */\n\nfunction decode_param(val) {\n  if (typeof val !== 'string' || val.length === 0) {\n    return val;\n  }\n\n  try {\n    return decodeURIComponent(val);\n  } catch (err) {\n    if (err instanceof URIError) {\n      err.message = 'Failed to decode param \\'' + val + '\\'';\n      err.status = err.statusCode = 400;\n    }",
      "// middleware\n\napp.use(express.urlencoded({ extended: false }))\napp.use(session({\n  resave: false, // don't save session if unmodified\n  saveUninitialized: false, // don't create session until something stored\n  secret: 'shhhh, very secret'\n}));\n\n// Session-persisted message middleware\n\napp.use(function(req, res, next){\n  var err = req.session.error;\n  var msg = req.session.success;\n  delete req.session.error;\n  delete req.session.success;\n  res.locals.message = '';\n  if (err) res.locals.message = '<p class=\"msg error\">' + err + '</p>';\n  if (msg) res.locals.message = '<p class=\"msg success\">' + msg + '</p>';\n  next();\n});\n\n// dummy database\n\nvar users = {\n  tj: { name: 'tj' }\n};\n\n// when you create a user, generate a salt\n// and hash the password ('foobar' is the pass here)\n\nhash({ password: 'foobar' }, function (err, pass, salt, hash) {\n  if (err) throw err;\n  // store the salt & hash in the \"db\"\n  users.tj.salt = salt;\n  users.tj.hash = hash;\n});\n\n\n// Authenticate using our plain-object database of doom!\n\nfunction authenticate(name, pass, fn) {\n  if (!module.parent) console.log('authenticating %s:%s', name, pass);\n  var user = users[name];\n  // query the db for the given username\n  if (!user) return fn(null, null)\n  // apply the same algorithm to the POSTed password, applying\n  // the hash against the pass / salt, if there is a match we\n  // found the user\n  hash({ password: pass, salt: user.salt }, function (err, pass, salt, hash) {\n    if (err) return fn(err);\n    if (hash === user.hash) return fn(null, user)\n    fn(null, null)\n  });\n}\n\nfunction restrict(req, res, next) {\n  if (req.session.user) {\n    next();\n  } else {\n    req.session.error = 'Access denied!';\n    res.redirect('/login');\n  }\n}",
      "        var app = express()\n\n        app.use(function (req, res) {\n          res.jsonp(['foo', 'bar', 'baz'])\n        })\n\n        request(app)\n          .get('/?callback=cb')\n          .expect('Content-Type', 'text/javascript; charset=utf-8')\n          .expect(200, /cb\\(\\[\"foo\",\"bar\",\"baz\"\\]\\)/, done)\n      })\n    })\n\n    describe('when given an object', function () {\n      it('should invoke callback with an object', function (done) {\n        var app = express()\n\n        app.use(function (req, res) {\n          res.jsonp({ name: 'tobi' })\n        })\n\n        request(app)\n          .get('/?callback=cb')\n          .expect('Content-Type', 'text/javascript; charset=utf-8')\n          .expect(200, /cb\\(\\{\"name\":\"tobi\"\\}\\)/, done)\n      })\n    })\n\n    describe('\"json escape\" setting', function () {\n      it('should be undefined by default', function () {\n        var app = express()\n        assert.strictEqual(app.get('json escape'), undefined)\n      })\n\n      it('should unicode escape HTML-sniffing characters', function (done) {\n        var app = express()\n\n        app.enable('json escape')\n\n        app.use(function (req, res) {\n          res.jsonp({ '&': '\\u2028<script>\\u2029' })\n        })\n\n        request(app)\n        .get('/?callback=foo')\n        .expect('Content-Type', 'text/javascript; charset=utf-8')\n        .expect(200, /foo\\({\"\\\\u0026\":\"\\\\u2028\\\\u003cscript\\\\u003e\\\\u2029\"}\\)/, done)\n      })\n\n      it('should not break undefined escape', function (done) {\n        var app = express()\n\n        app.enable('json escape')\n\n        app.use(function (req, res) {\n          res.jsonp(undefined)\n        })\n\n        request(app)\n          .get('/?callback=cb')\n          .expect('Content-Type', 'text/javascript; charset=utf-8')\n          .expect(200, /cb\\(\\)/, done)\n      })\n    })",
      "/* istanbul ignore next */\nif (!module.parent) {\n  app.listen(3000);\n  console.log('Express started on port 3000');\n}\n",
      "",
      "        var app = createApp(function (str) {\n          return {'length': (str || '').length};\n        });\n\n        request(app)\n        .get('/?user%5Bname%5D=tj')\n        .expect(200, '{\"length\":17}', done);\n      });\n    });\n\n    describe('when \"query parser\" disabled', function () {\n      it('should not parse query', function (done) {\n        var app = createApp(false);\n\n        request(app)\n        .get('/?user%5Bname%5D=tj')\n        .expect(200, '{}', done);\n      });\n    });\n\n    describe('when \"query parser\" enabled', function () {\n      it('should not parse complex keys', function (done) {\n        var app = createApp(true);\n\n        request(app)\n        .get('/?user%5Bname%5D=tj')\n        .expect(200, '{\"user[name]\":\"tj\"}', done);\n      });\n    });\n\n    describe('when \"query parser fn\" is missing', function () {\n      it('should act like \"extended\"', function (done) {\n        var app = express();\n\n        delete app.settings['query parser'];\n        delete app.settings['query parser fn'];\n\n        app.use(function (req, res) {\n          res.send(req.query);\n        });\n\n        request(app)\n        .get('/?user[name]=tj&user.name=tj')\n        .expect(200, '{\"user\":{\"name\":\"tj\"},\"user.name\":\"tj\"}', done);\n      });\n    });\n\n    describe('when \"query parser\" an unknown value', function () {\n      it('should throw', function () {\n        assert.throws(createApp.bind(null, 'bogus'),\n          /unknown value.*query parser/)\n      });\n    });\n  })\n})\n\nfunction createApp(setting) {\n  var app = express();\n\n  if (setting !== undefined) {\n    app.set('query parser', setting);\n  }\n\n  app.use(function (req, res) {",
      "    it('should return false', function (done) {\n      var app = express()\n\n      app.use(function (req, res) {\n        res.json(req.is('application/json'))\n      })\n\n      request(app)\n      .post('/')\n      .send('{}')\n      .expect(200, 'false', done)\n    })\n  })\n\n  describe('when given an extension', function(){\n    it('should lookup the mime type', function (done) {\n      var app = express()\n\n      app.use(function (req, res) {\n        res.json(req.is('json'))\n      })\n\n      request(app)\n      .post('/')\n      .type('application/json')\n      .send('{}')\n      .expect(200, '\"json\"', done)\n    })\n  })\n\n  describe('when given */subtype', function(){\n    it('should return the full type when matching', function (done) {\n      var app = express()\n\n      app.use(function (req, res) {\n        res.json(req.is('*/json'))\n      })\n\n      request(app)\n      .post('/')\n      .type('application/json')\n      .send('{}')\n      .expect(200, '\"application/json\"', done)\n    })\n\n    it('should return false when not matching', function (done) {\n      var app = express()\n\n      app.use(function (req, res) {\n        res.json(req.is('*/html'))\n      })\n\n      request(app)\n      .post('/')\n      .type('application/json')\n      .send('{}')\n      .expect(200, 'false', done)\n    })\n\n    it('should ignore charset', function (done) {\n      var app = express()\n\n      app.use(function (req, res) {\n        res.json(req.is('*/json'))",
      "'use strict'\n\nvar users = require('./db');\n\nexports.html = function(req, res){\n  res.send('<ul>' + users.map(function(user){\n    return '<li>' + user.name + '</li>';\n  }).join('') + '</ul>');\n};\n\nexports.text = function(req, res){\n  res.send(users.map(function(user){\n    return ' - ' + user.name + '\\n';\n  }).join(''));\n};\n\nexports.json = function(req, res){\n  res.json(users);\n};\n",
      "      request(app)\n      .get('/users/0-2')\n      .expect(/users tj, tobi, loki/, done)\n    })\n  })\n\n  describe('GET /users/foo-bar', function(){\n    it('should fail integer parsing', function(done){\n      request(app)\n      .get('/users/foo-bar')\n      .expect(400, /failed to parseInt foo/, done)\n    })\n  })\n})\n",
      "  res.render('users/edit', {\n    title: 'Editing user ' + req.user.name,\n    user: req.user\n  });\n};\n\nexports.update = function(req, res){\n  // Normally you would handle all kinds of\n  // validation and save back to the db\n  var user = req.body.user;\n  req.user.name = user.name;\n  req.user.email = user.email;\n  res.redirect('back');\n};\n"
    ]
  },
  {
    "id": "WordPress/WordPress",
    "org": "WordPress",
    "avatarURL": "https://avatars.githubusercontent.com/u/276006?v=4",
    "name": "WordPress/WordPress",
    "url": "https://github.com/WordPress/WordPress",
    "lang": "PHP",
    "star_num": 17927,
    "fork_num": 12436,
    "snippets": [
      "<?php\n/**\n * Custom classname block support flag.\n *\n * @package WordPress\n * @since 5.6.0\n */\n\n/**\n * Registers the custom classname block attribute for block types that support it.\n *\n * @since 5.6.0\n * @access private\n *\n * @param WP_Block_Type $block_type Block Type.\n */\nfunction wp_register_custom_classname_support( $block_type ) {\n\t$has_custom_classname_support = block_has_support( $block_type, 'customClassName', true );\n\n\tif ( $has_custom_classname_support ) {\n\t\tif ( ! $block_type->attributes ) {\n\t\t\t$block_type->attributes = array();\n\t\t}\n\n\t\tif ( ! array_key_exists( 'className', $block_type->attributes ) ) {\n\t\t\t$block_type->attributes['className'] = array(\n\t\t\t\t'type' => 'string',\n\t\t\t);\n\t\t}\n\t}\n}\n\n/**\n * Adds the custom classnames to the output.\n *\n * @since 5.6.0\n * @access private\n *\n * @param  WP_Block_Type $block_type       Block Type.\n * @param  array         $block_attributes Block attributes.\n *\n * @return array Block CSS classes and inline styles.\n */\nfunction wp_apply_custom_classname_support( $block_type, $block_attributes ) {\n\t$has_custom_classname_support = block_has_support( $block_type, 'customClassName', true );\n\t$attributes                   = array();\n\tif ( $has_custom_classname_support ) {\n\t\t$has_custom_classnames = array_key_exists( 'className', $block_attributes );\n\n\t\tif ( $has_custom_classnames ) {\n\t\t\t$attributes['class'] = $block_attributes['className'];\n\t\t}\n\t}\n\n\treturn $attributes;\n}\n\n// Register the block support.\nWP_Block_Supports::get_instance()->register(\n\t'custom-classname',\n\tarray(\n\t\t'register_attribute' => 'wp_register_custom_classname_support',\n\t\t'apply'              => 'wp_apply_custom_classname_support',\n\t)",
      "\n\t\t/**\n\t\t * Filters the \"Thank you\" text displayed in the admin footer.\n\t\t *\n\t\t * @since 2.8.0\n\t\t *\n\t\t * @param string $text The content that will be printed.\n\t\t */\n\t\techo apply_filters( 'admin_footer_text', '<span id=\"footer-thankyou\">' . $text . '</span>' );\n\t\t?>\n\t</p>\n\t<p id=\"footer-upgrade\" class=\"alignright\">\n\t\t<?php\n\t\t/**\n\t\t * Filters the version/update text displayed in the admin footer.\n\t\t *\n\t\t * WordPress prints the current version and update information,\n\t\t * using core_update_footer() at priority 10.\n\t\t *\n\t\t * @since 2.3.0\n\t\t *\n\t\t * @see core_update_footer()\n\t\t *\n\t\t * @param string $content The content that will be printed.\n\t\t */\n\t\techo apply_filters( 'update_footer', '' );\n\t\t?>\n\t</p>\n\t<div class=\"clear\"></div>\n</div>\n<?php\n/**\n * Prints scripts or data before the default footer scripts.\n *\n * @since 1.2.0\n *\n * @param string $data The data to print.\n */\ndo_action( 'admin_footer', '' );\n\n/**\n * Prints scripts and data queued for the footer.\n *\n * The dynamic portion of the hook name, `$hook_suffix`,\n * refers to the global hook suffix of the current page.\n *\n * @since 4.6.0\n */\ndo_action( \"admin_print_footer_scripts-{$hook_suffix}\" ); // phpcs:ignore WordPress.NamingConventions.ValidHookName.UseUnderscores\n\n/**\n * Prints any scripts and data queued for the footer.\n *\n * @since 2.8.0\n */\ndo_action( 'admin_print_footer_scripts' );\n\n/**\n * Prints scripts or data after the default footer scripts.\n *\n * The dynamic portion of the hook name, `$hook_suffix`,\n * refers to the global hook suffix of the current page.\n *\n * @since 2.8.0",
      "\t\t\t\t\t<?php get_search_form(); ?>\n\t\t\t\t</div><!-- .entry-content -->\n\t\t\t</div><!-- #post-0 -->\n\n\t\t</div><!-- #content -->\n\t</div><!-- #container -->\n\t<script type=\"text/javascript\">\n\t\t// Focus on search field after it has loaded.\n\t\tdocument.getElementById('s') && document.getElementById('s').focus();\n\t</script>\n\n<?php get_footer(); ?>\n",
      "<?php\n/**\n * Title: Hidden No Results Content\n * Slug: twentytwentythree/hidden-no-results-content\n * Inserter: no\n */\n?>\n<!-- wp:paragraph -->\n<p>\n<?php echo esc_html_x( 'Sorry, but nothing matched your search terms. Please try again with some different keywords.', 'Message explaining that there are no results returned from a search', 'twentytwentythree' ); ?>\n</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:search {\"label\":\"<?php echo esc_html_x( 'Search', 'label', 'twentytwentythree' ); ?>\",\"placeholder\":\"<?php echo esc_attr_x( 'Search...', 'placeholder for search field', 'twentytwentythree' ); ?>\",\"showLabel\":false,\"buttonText\":\"<?php esc_attr_e( 'Search', 'twentytwentythree' ); ?>\",\"buttonUseIcon\":true} /-->\n",
      "\t\t\t'comment_count',\n\t\t\t'comment_status',\n\t\t\t'db_id',\n\t\t\t'filter',\n\t\t\t'guid',\n\t\t\t'ping_status',\n\t\t\t'pinged',\n\t\t\t'post_author',\n\t\t\t'post_content',\n\t\t\t'post_content_filtered',\n\t\t\t'post_date',\n\t\t\t'post_date_gmt',\n\t\t\t'post_excerpt',\n\t\t\t'post_mime_type',\n\t\t\t'post_modified',\n\t\t\t'post_modified_gmt',\n\t\t\t'post_name',\n\t\t\t'post_parent',\n\t\t\t'post_password',\n\t\t\t'post_title',\n\t\t\t'post_type',\n\t\t\t'to_ping',\n\t\t);\n\t\tforeach ( $irrelevant_properties as $property ) {\n\t\t\tunset( $this->value[ $property ] );\n\t\t}\n\t}\n\n\t/**\n\t * Handle previewing the setting.\n\t *\n\t * @since 4.3.0\n\t * @since 4.4.0 Added boolean return value.\n\t *\n\t * @see WP_Customize_Manager::post_value()\n\t *\n\t * @return bool False if method short-circuited due to no-op.\n\t */\n\tpublic function preview() {\n\t\tif ( $this->is_previewed ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$undefined      = new stdClass();\n\t\t$is_placeholder = ( $this->post_id < 0 );\n\t\t$is_dirty       = ( $undefined !== $this->post_value( $undefined ) );\n\t\tif ( ! $is_placeholder && ! $is_dirty ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$this->is_previewed              = true;\n\t\t$this->_original_value           = $this->value();\n\t\t$this->original_nav_menu_term_id = $this->_original_value['nav_menu_term_id'];\n\t\t$this->_previewed_blog_id        = get_current_blog_id();\n\n\t\tadd_filter( 'wp_get_nav_menu_items', array( $this, 'filter_wp_get_nav_menu_items' ), 10, 3 );\n\n\t\t$sort_callback = array( __CLASS__, 'sort_wp_get_nav_menu_items' );\n\t\tif ( ! has_filter( 'wp_get_nav_menu_items', $sort_callback ) ) {\n\t\t\tadd_filter( 'wp_get_nav_menu_items', array( __CLASS__, 'sort_wp_get_nav_menu_items' ), 1000, 3 );\n\t\t}\n\n\t\t// @todo Add get_post_metadata filters for plugins to add their data.\n",
      "\nif ( ! current_user_can( 'edit_theme_options' ) ) {\n\twp_die(\n\t\t'<h1>' . __( 'You need a higher level of permission.' ) . '</h1>' .\n\t\t'<p>' . __( 'Sorry, you are not allowed to edit theme options on this site.' ) . '</p>',\n\t\t403\n\t);\n}\n\nif ( ! current_theme_supports( 'widgets' ) ) {\n\twp_die( __( 'The theme you are currently using is not widget-aware, meaning that it has no sidebars that you are able to change. For information on making your theme widget-aware, please <a href=\"https://developer.wordpress.org/themes/functionality/widgets/\">follow these instructions</a>.' ) );\n}\n\n// Used in the HTML title tag.\n$title       = __( 'Widgets' );\n$parent_file = 'themes.php';\n\nif ( wp_use_widgets_block_editor() ) {\n\trequire ABSPATH . 'wp-admin/widgets-form-blocks.php';\n} else {\n\trequire ABSPATH . 'wp-admin/widgets-form.php';\n}\n",
      "\t\t\t&& isset( $processed_headers['headers']['transfer-encoding'] )\n\t\t\t&& 'chunked' === $processed_headers['headers']['transfer-encoding']\n\t\t) {\n\t\t\t$processed_response['body'] = WP_Http::chunkTransferDecode( $processed_response['body'] );\n\t\t}\n\n\t\tif ( true === $parsed_args['decompress']\n\t\t\t&& true === WP_Http_Encoding::should_decode( $processed_headers['headers'] )\n\t\t) {\n\t\t\t$processed_response['body'] = WP_Http_Encoding::decompress( $processed_response['body'] );\n\t\t}\n\n\t\tif ( isset( $parsed_args['limit_response_size'] )\n\t\t\t&& strlen( $processed_response['body'] ) > $parsed_args['limit_response_size']\n\t\t) {\n\t\t\t$processed_response['body'] = substr( $processed_response['body'], 0, $parsed_args['limit_response_size'] );\n\t\t}\n\n\t\t$response['body'] = $processed_response['body'];\n\n\t\treturn $response;\n\t}\n\n\t/**\n\t * Verifies the received SSL certificate against its Common Names and subjectAltName fields.\n\t *\n\t * PHP's SSL verifications only verify that it's a valid Certificate, it doesn't verify if\n\t * the certificate is valid for the hostname which was requested.\n\t * This function verifies the requested hostname against certificate's subjectAltName field,\n\t * if that is empty, or contains no DNS entries, a fallback to the Common Name field is used.\n\t *\n\t * IP Address support is included if the request is being made to an IP address.\n\t *\n\t * @since 3.7.0\n\t *\n\t * @param resource $stream The PHP Stream which the SSL request is being made over\n\t * @param string   $host   The hostname being requested\n\t * @return bool If the certificate presented in $stream is valid for $host\n\t */\n\tpublic static function verify_ssl_certificate( $stream, $host ) {\n\t\t$context_options = stream_context_get_options( $stream );\n\n\t\tif ( empty( $context_options['ssl']['peer_certificate'] ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$cert = openssl_x509_parse( $context_options['ssl']['peer_certificate'] );\n\t\tif ( ! $cert ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t/*\n\t\t * If the request is being made to an IP address, we'll validate against IP fields\n\t\t * in the cert (if they exist)\n\t\t */\n\t\t$host_type = ( WP_Http::is_ip_address( $host ) ? 'ip' : 'dns' );\n\n\t\t$certificate_hostnames = array();\n\t\tif ( ! empty( $cert['extensions']['subjectAltName'] ) ) {\n\t\t\t$match_against = preg_split( '/,\\s*/', $cert['extensions']['subjectAltName'] );\n\t\t\tforeach ( $match_against as $match ) {\n\t\t\t\tlist( $match_type, $match_host ) = explode( ':', $match );\n\t\t\t\tif ( strtolower( trim( $match_type ) ) === $host_type ) { // IP: or DNS:\n\t\t\t\t\t$certificate_hostnames[] = strtolower( trim( $match_host ) );",
      " * @subpackage Twenty_Eleven\n * @since Twenty Eleven 1.0\n */\n\nget_header(); ?>\n\n\t\t<div id=\"primary\">\n\t\t\t<div id=\"content\" role=\"main\">\n\n\t\t\t\t<?php\n\t\t\t\twhile ( have_posts() ) :\n\t\t\t\t\tthe_post();\n\t\t\t\t\t?>\n\n\t\t\t\t\t<?php get_template_part( 'content', 'page' ); ?>\n\n\t\t\t\t\t<?php comments_template( '', true ); ?>\n\n\t\t\t\t<?php endwhile; // End of the loop. ?>\n\n\t\t\t</div><!-- #content -->\n\t\t</div><!-- #primary -->\n\n<?php get_footer(); ?>\n",
      "use WpOrg\\Requests\\Exception\\Http;\n\n/**\n * Exception for 505 HTTP Version Not Supported responses\n *\n * @package Requests\\Exceptions\n */\nfinal class Status505 extends Http {\n\t/**\n\t * HTTP status code\n\t *\n\t * @var integer\n\t */\n\tprotected $code = 505;\n\n\t/**\n\t * Reason phrase\n\t *\n\t * @var string\n\t */\n\tprotected $reason = 'HTTP Version Not Supported';\n}\n",
      "\t\t\t}\n\n\t\t\t// Select the first frame to handle animated images properly.\n\t\t\tif ( is_callable( array( $this->image, 'setIteratorIndex' ) ) ) {\n\t\t\t\t$this->image->setIteratorIndex( 0 );\n\t\t\t}\n\n\t\t\tif ( 'pdf' === $file_extension ) {\n\t\t\t\t$this->remove_pdf_alpha_channel();\n\t\t\t}\n\n\t\t\t$this->mime_type = $this->get_mime_type( $this->image->getImageFormat() );\n\t\t} catch ( Exception $e ) {\n\t\t\treturn new WP_Error( 'invalid_image', $e->getMessage(), $this->file );\n\t\t}\n\n\t\t$updated_size = $this->update_size();\n\n\t\tif ( is_wp_error( $updated_size ) ) {\n\t\t\treturn $updated_size;\n\t\t}\n\n\t\treturn $this->set_quality();\n\t}\n\n\t/**\n\t * Sets Image Compression quality on a 1-100% scale.\n\t *\n\t * @since 3.5.0\n\t *\n\t * @param int $quality Compression Quality. Range: [1,100]\n\t * @return true|WP_Error True if set successfully; WP_Error on failure.\n\t */\n\tpublic function set_quality( $quality = null ) {\n\t\t$quality_result = parent::set_quality( $quality );\n\t\tif ( is_wp_error( $quality_result ) ) {\n\t\t\treturn $quality_result;\n\t\t} else {\n\t\t\t$quality = $this->get_quality();\n\t\t}\n\n\t\ttry {\n\t\t\tswitch ( $this->mime_type ) {\n\t\t\t\tcase 'image/jpeg':\n\t\t\t\t\t$this->image->setImageCompressionQuality( $quality );\n\t\t\t\t\t$this->image->setImageCompression( imagick::COMPRESSION_JPEG );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'image/webp':\n\t\t\t\t\t$webp_info = wp_get_webp_info( $this->file );\n\n\t\t\t\t\tif ( 'lossless' === $webp_info['type'] ) {\n\t\t\t\t\t\t// Use WebP lossless settings.\n\t\t\t\t\t\t$this->image->setImageCompressionQuality( 100 );\n\t\t\t\t\t\t$this->image->setOption( 'webp:lossless', 'true' );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$this->image->setImageCompressionQuality( $quality );\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t$this->image->setImageCompressionQuality( $quality );\n\t\t\t}\n\t\t} catch ( Exception $e ) {\n\t\t\treturn new WP_Error( 'image_quality_error', $e->getMessage() );\n\t\t}"
    ]
  },
  {
    "id": "rust-lang/rust",
    "org": "rust-lang",
    "avatarURL": "https://avatars.githubusercontent.com/u/5430905?v=4",
    "name": "rust-lang/rust",
    "url": "https://github.com/rust-lang/rust",
    "lang": "Rust",
    "star_num": 85021,
    "fork_num": 11265,
    "snippets": [
      "\nstruct S {}\nimpl S {\n    fn method<T>(&self, x: T) -> T {\n        x\n    }\n}\n\nfn wrong_arg_type(x: u32) -> u32 {\n    x\n}\n\nfn main() {\n    // Should not trigger.\n    let x = wrong_arg_type(0u16); //~ ERROR mismatched types\n    let x: u16 = function(0, 0u8); //~ ERROR mismatched types\n\n    // Should trigger exactly once for the first argument.\n    let x: u16 = function(0u32, 0u8); //~ ERROR arguments to this function are incorrect\n\n    // Should trigger.\n    let x: u16 = function(0u32, true); //~ ERROR mismatched types\n    let x: u16 = (S {}).method(0u32); //~ ERROR mismatched types\n    function(0u32, 8u8) //~ ERROR arguments to this function are incorrect\n}\n",
      "fn main() {\n}\n",
      "        Foo::method_deprecated_text(&foo);\n        <Foo>::method_deprecated_text(&foo);\n        foo.trait_deprecated_text();\n        Trait::trait_deprecated_text(&foo);\n        <Foo>::trait_deprecated_text(&foo);\n        <Foo as Trait>::trait_deprecated_text(&foo);\n\n        deprecated_future();\n\n        unstable();\n        foo.method_unstable();\n        Foo::method_unstable(&foo);\n        <Foo>::method_unstable(&foo);\n        foo.trait_unstable();\n        Trait::trait_unstable(&foo);\n        <Foo>::trait_unstable(&foo);\n        <Foo as Trait>::trait_unstable(&foo);\n\n        unstable_text();\n        foo.method_unstable_text();\n        Foo::method_unstable_text(&foo);\n        <Foo>::method_unstable_text(&foo);\n        foo.trait_unstable_text();\n        Trait::trait_unstable_text(&foo);\n        <Foo>::trait_unstable_text(&foo);\n        <Foo as Trait>::trait_unstable_text(&foo);\n\n        stable();\n        foo.method_stable();\n        Foo::method_stable(&foo);\n        <Foo>::method_stable(&foo);\n        foo.trait_stable();\n        Trait::trait_stable(&foo);\n        <Foo>::trait_stable(&foo);\n        <Foo as Trait>::trait_stable(&foo);\n\n        stable_text();\n        foo.method_stable_text();\n        Foo::method_stable_text(&foo);\n        <Foo>::method_stable_text(&foo);\n        foo.trait_stable_text();\n        Trait::trait_stable_text(&foo);\n        <Foo>::trait_stable_text(&foo);\n        <Foo as Trait>::trait_stable_text(&foo);\n\n        let _ = DeprecatedStruct {\n            i: 0\n        };\n        let _ = UnstableStruct { i: 0 };\n        let _ = StableStruct { i: 0 };\n\n        let _ = DeprecatedUnitStruct;\n        let _ = UnstableUnitStruct;\n        let _ = StableUnitStruct;\n\n        let _ = Enum::DeprecatedVariant;\n        let _ = Enum::UnstableVariant;\n        let _ = Enum::StableVariant;\n\n        let _ = DeprecatedTupleStruct (1);\n        let _ = UnstableTupleStruct (1);\n        let _ = StableTupleStruct (1);\n    }\n",
      "impl LateLintPass<'_> for MinIdentChars {\n    fn check_item(&mut self, cx: &LateContext<'_>, item: &Item<'_>) {\n        if self.min_ident_chars_threshold == 0 {\n            return;\n        }\n\n        walk_item(&mut IdentVisitor { conf: self, cx }, item);\n    }\n\n    // This is necessary as `Node::Pat`s are not visited in `visit_id`. :/\n    fn check_pat(&mut self, cx: &LateContext<'_>, pat: &Pat<'_>) {\n        if let PatKind::Binding(_, _, ident, ..) = pat.kind\n            && let str = ident.as_str()\n            && self.is_ident_too_short(cx, str, ident.span)\n        {\n            emit_min_ident_chars(self, cx, str, ident.span);\n        }\n    }\n}\n\nstruct IdentVisitor<'cx, 'tcx> {\n    conf: &'cx MinIdentChars,\n    cx: &'cx LateContext<'tcx>,\n}\n\nimpl Visitor<'_> for IdentVisitor<'_, '_> {\n    fn visit_id(&mut self, hir_id: HirId) {\n        let Self { conf, cx } = *self;\n        // FIXME(#112534) Reimplementation of `find`, as it uses indexing, which can (and will in\n        // async functions, or really anything async) panic. This should probably be fixed on the\n        // rustc side, this is just a temporary workaround.\n        let node = if hir_id.local_id == ItemLocalId::from_u32(0) {\n            // In this case, we can just use `find`, `Owner`'s `node` field is private anyway so we can't\n            // reimplement it even if we wanted to\n            cx.tcx.hir().find(hir_id)\n        } else {\n            let Some(owner) = cx.tcx.hir_owner_nodes(hir_id.owner).as_owner() else {\n                return;\n            };\n            owner.nodes.get(hir_id.local_id).copied().flatten().map(|p| p.node)\n        };\n        let Some(node) = node else {\n            return;\n        };\n        let Some(ident) = node.ident() else {\n            return;\n        };\n\n        let str = ident.as_str();\n        if conf.is_ident_too_short(cx, str, ident.span) {\n            if let Node::Item(item) = node && let ItemKind::Use(..) = item.kind {\n                return;\n            }\n            // `struct Awa<T>(T)`\n            //                ^\n            if let Node::PathSegment(path) = node {\n                if let Res::Def(def_kind, ..) = path.res && let DefKind::TyParam = def_kind {\n                    return;\n                }\n                if matches!(path.res, Res::PrimTy(..)) || path.res.opt_def_id().is_some_and(|def_id| !def_id.is_local())\n                {\n                    return;\n                }\n            }",
      "//! [pointer::add]\n//~^ ERROR: experimental\n//! [pointer::wrapping_add]\n//~^ ERROR: experimental\n//! [pointer] // This is explicitly allowed\n//! [reference] // This is explicitly allowed\n",
      "// If multiple `extern crate` resolutions fail each of them should produce an error\nextern crate bar; //~ ERROR can't find crate for `bar`\nextern crate foo; //~ ERROR can't find crate for `foo`\n\nfn main() {\n    // If the crate name introduced by `extern crate` failed to resolve then subsequent\n    // derived paths do not emit additional errors\n    foo::something();\n    bar::something();\n}\n",
      "    pub(crate) fn new_name(name: Name) -> Self {\n        LifetimeRef { name }\n    }\n\n    pub(crate) fn new(lifetime: &ast::Lifetime) -> Self {\n        LifetimeRef { name: Name::new_lifetime(lifetime) }\n    }\n\n    pub fn missing() -> LifetimeRef {\n        LifetimeRef { name: Name::missing() }\n    }\n}\n\n#[derive(Clone, PartialEq, Eq, Hash, Debug)]\npub enum TypeBound {\n    Path(Path, TraitBoundModifier),\n    ForLifetime(Box<[Name]>, Path),\n    Lifetime(LifetimeRef),\n    Error,\n}\n\n/// A modifier on a bound, currently this is only used for `?Sized`, where the\n/// modifier is `Maybe`.\n#[derive(Clone, PartialEq, Eq, Hash, Debug)]\npub enum TraitBoundModifier {\n    None,\n    Maybe,\n}\n\nimpl TypeRef {\n    /// Converts an `ast::TypeRef` to a `hir::TypeRef`.\n    pub fn from_ast(ctx: &LowerCtx<'_>, node: ast::Type) -> Self {\n        match node {\n            ast::Type::ParenType(inner) => TypeRef::from_ast_opt(ctx, inner.ty()),\n            ast::Type::TupleType(inner) => {\n                TypeRef::Tuple(inner.fields().map(|it| TypeRef::from_ast(ctx, it)).collect())\n            }\n            ast::Type::NeverType(..) => TypeRef::Never,\n            ast::Type::PathType(inner) => {\n                // FIXME: Use `Path::from_src`\n                inner\n                    .path()\n                    .and_then(|it| ctx.lower_path(it))\n                    .map(TypeRef::Path)\n                    .unwrap_or(TypeRef::Error)\n            }\n            ast::Type::PtrType(inner) => {\n                let inner_ty = TypeRef::from_ast_opt(ctx, inner.ty());\n                let mutability = Mutability::from_mutable(inner.mut_token().is_some());\n                TypeRef::RawPtr(Box::new(inner_ty), mutability)\n            }\n            ast::Type::ArrayType(inner) => {\n                let len = ConstRef::from_const_arg(ctx, inner.const_arg());\n                TypeRef::Array(Box::new(TypeRef::from_ast_opt(ctx, inner.ty())), len)\n            }\n            ast::Type::SliceType(inner) => {\n                TypeRef::Slice(Box::new(TypeRef::from_ast_opt(ctx, inner.ty())))\n            }\n            ast::Type::RefType(inner) => {\n                let inner_ty = TypeRef::from_ast_opt(ctx, inner.ty());\n                let lifetime = inner.lifetime().map(|lt| LifetimeRef::new(&lt));\n                let mutability = Mutability::from_mutable(inner.mut_token().is_some());\n                TypeRef::Reference(Box::new(inner_ty), lifetime, mutability)\n            }",
      "// run-fail\n// error-pattern:explicit panic\n// ignore-emscripten no processes\n\nfn failfn() {\n    panic!();\n}\n\nfn main() {\n    Box::new(0);\n    failfn();\n}\n",
      "// run-pass\n\n#[path = \"mod_dir_simple\"]\nmod biscuits {\n    pub mod test;\n}\n\n#[path = \"mod_dir_simple\"]\nmod gravy {\n    pub mod test;\n}\n\npub fn main() {\n    assert_eq!(biscuits::test::foo(), 10);\n    assert_eq!(gravy::test::foo(), 10);\n}\n",
      "pub mod os {\n    pub const FAMILY: &str = \"windows\";\n    pub const OS: &str = \"windows\";\n    pub const DLL_PREFIX: &str = \"\";\n    pub const DLL_SUFFIX: &str = \".dll\";\n    pub const DLL_EXTENSION: &str = \"dll\";\n    pub const EXE_SUFFIX: &str = \".exe\";\n    pub const EXE_EXTENSION: &str = \"exe\";\n}\n"
    ]
  },
  {
    "id": "git/git",
    "org": "git",
    "avatarURL": "https://avatars.githubusercontent.com/u/18133?v=4",
    "name": "git/git",
    "url": "https://github.com/git/git",
    "lang": "C",
    "star_num": 47249,
    "fork_num": 25391,
    "snippets": [
      "#include \"repository.h\"\n#include \"setup.h\"\n#include \"tree.h\"\n#include \"cache-tree.h\"\n\nint cmd__scrap_cache_tree(int ac UNUSED, const char **av UNUSED)\n{\n\tstruct lock_file index_lock = LOCK_INIT;\n\n\tsetup_git_directory();\n\trepo_hold_locked_index(the_repository, &index_lock, LOCK_DIE_ON_ERROR);\n\tif (repo_read_index(the_repository) < 0)\n\t\tdie(\"unable to read index file\");\n\tcache_tree_free(&the_index.cache_tree);\n\tthe_index.cache_tree = NULL;\n\tif (write_locked_index(&the_index, &index_lock, COMMIT_LOCK))\n\t\tdie(\"unable to write index file\");\n\treturn 0;\n}\n",
      "\t\tif (namelen < 3 ||\n\t\t    name[2] != ':' ||\n\t\t    name[1] < '0' || '3' < name[1])\n\t\t\tcp = name + 1;\n\t\telse {\n\t\t\tstage = name[1] - '0';\n\t\t\tcp = name + 3;\n\t\t}\n\t\tnew_path = resolve_relative_path(repo, cp);\n\t\tif (!new_path) {\n\t\t\tnamelen = namelen - (cp - name);\n\t\t} else {\n\t\t\tcp = new_path;\n\t\t\tnamelen = strlen(cp);\n\t\t}\n\n\t\tif (flags & GET_OID_RECORD_PATH)\n\t\t\toc->path = xstrdup(cp);\n\n\t\tif (!repo->index || !repo->index->cache)\n\t\t\trepo_read_index(repo);\n\t\tpos = index_name_pos(repo->index, cp, namelen);\n\t\tif (pos < 0)\n\t\t\tpos = -pos - 1;\n\t\twhile (pos < repo->index->cache_nr) {\n\t\t\tce = repo->index->cache[pos];\n\t\t\tif (ce_namelen(ce) != namelen ||\n\t\t\t    memcmp(ce->name, cp, namelen))\n\t\t\t\tbreak;\n\t\t\tif (ce_stage(ce) == stage) {\n\t\t\t\tfree(new_path);\n\t\t\t\tif (reject_tree_in_index(repo, only_to_die, ce,\n\t\t\t\t\t\t\t stage, prefix, cp))\n\t\t\t\t\treturn -1;\n\t\t\t\toidcpy(oid, &ce->oid);\n\t\t\t\toc->mode = ce->ce_mode;\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tpos++;\n\t\t}\n\t\tif (only_to_die && name[1] && name[1] != '/')\n\t\t\tdiagnose_invalid_index_path(repo, stage, prefix, cp);\n\t\tfree(new_path);\n\t\treturn -1;\n\t}\n\tfor (cp = name, bracket_depth = 0; *cp; cp++) {\n\t\tif (*cp == '{')\n\t\t\tbracket_depth++;\n\t\telse if (bracket_depth && *cp == '}')\n\t\t\tbracket_depth--;\n\t\telse if (!bracket_depth && *cp == ':')\n\t\t\tbreak;\n\t}\n\tif (*cp == ':') {\n\t\tstruct object_id tree_oid;\n\t\tint len = cp - name;\n\t\tunsigned sub_flags = flags;\n\n\t\tsub_flags &= ~GET_OID_DISAMBIGUATORS;\n\t\tsub_flags |= GET_OID_TREEISH;\n\n\t\tif (!get_oid_1(repo, name, len, &tree_oid, sub_flags)) {\n\t\t\tconst char *filename = cp+1;\n\t\t\tchar *new_filename = NULL;",
      " */\n#include \"builtin.h\"\n#include \"config.h\"\n#include \"gettext.h\"\n#include \"object-name.h\"\n#include \"object-store-ll.h\"\n#include \"repository.h\"\n#include \"commit.h\"\n#include \"run-command.h\"\n#include \"parse-options.h\"\n#include \"gpg-interface.h\"\n\nstatic const char * const verify_commit_usage[] = {\n\t\tN_(\"git verify-commit [-v | --verbose] [--raw] <commit>...\"),\n\t\tNULL\n};\n\nstatic int run_gpg_verify(struct commit *commit, unsigned flags)\n{\n\tstruct signature_check signature_check;\n\tint ret;\n\n\tmemset(&signature_check, 0, sizeof(signature_check));\n\n\tret = check_commit_signature(commit, &signature_check);\n\tprint_signature_buffer(&signature_check, flags);\n\n\tsignature_check_clear(&signature_check);\n\treturn ret;\n}\n\nstatic int verify_commit(const char *name, unsigned flags)\n{\n\tstruct object_id oid;\n\tstruct object *obj;\n\n\tif (repo_get_oid(the_repository, name, &oid))\n\t\treturn error(\"commit '%s' not found.\", name);\n\n\tobj = parse_object(the_repository, &oid);\n\tif (!obj)\n\t\treturn error(\"%s: unable to read file.\", name);\n\tif (obj->type != OBJ_COMMIT)\n\t\treturn error(\"%s: cannot verify a non-commit object of type %s.\",\n\t\t\t\tname, type_name(obj->type));\n\n\treturn run_gpg_verify((struct commit *)obj, flags);\n}\n\nint cmd_verify_commit(int argc, const char **argv, const char *prefix)\n{\n\tint i = 1, verbose = 0, had_error = 0;\n\tunsigned flags = 0;\n\tconst struct option verify_commit_options[] = {\n\t\tOPT__VERBOSE(&verbose, N_(\"print commit contents\")),\n\t\tOPT_BIT(0, \"raw\", &flags, N_(\"print raw gpg status output\"), GPG_VERIFY_RAW),\n\t\tOPT_END()\n\t};\n\n\tgit_config(git_default_config, NULL);\n\n\targc = parse_options(argc, argv, prefix, verify_commit_options,\n\t\t\t     verify_commit_usage, PARSE_OPT_KEEP_ARGV0);\n\tif (argc <= i)",
      "}\n",
      "{\n\tstruct commit *commit = lookup_commit_reference(the_repository, oid);\n\tif (!commit)\n\t\treturn -1;\n\treturn log_tree_commit(&log_tree_opt, commit);\n}\n\n/* Diff one or more commits. */\nstatic int stdin_diff_commit(struct commit *commit, const char *p)\n{\n\tstruct object_id oid;\n\tstruct commit_list **pptr = NULL;\n\n\t/* Graft the fake parents locally to the commit */\n\twhile (isspace(*p++) && !parse_oid_hex(p, &oid, &p)) {\n\t\tstruct commit *parent = lookup_commit(the_repository, &oid);\n\t\tif (!pptr) {\n\t\t\t/* Free the real parent list */\n\t\t\tfree_commit_list(commit->parents);\n\t\t\tcommit->parents = NULL;\n\t\t\tpptr = &(commit->parents);\n\t\t}\n\t\tif (parent) {\n\t\t\tpptr = &commit_list_insert(parent, pptr)->next;\n\t\t}\n\t}\n\treturn log_tree_commit(&log_tree_opt, commit);\n}\n\n/* Diff two trees. */\nstatic int stdin_diff_trees(struct tree *tree1, const char *p)\n{\n\tstruct object_id oid;\n\tstruct tree *tree2;\n\tif (!isspace(*p++) || parse_oid_hex(p, &oid, &p) || *p)\n\t\treturn error(\"Need exactly two trees, separated by a space\");\n\ttree2 = lookup_tree(the_repository, &oid);\n\tif (!tree2 || parse_tree(tree2))\n\t\treturn -1;\n\tprintf(\"%s %s\\n\", oid_to_hex(&tree1->object.oid),\n\t\t\t  oid_to_hex(&tree2->object.oid));\n\tdiff_tree_oid(&tree1->object.oid, &tree2->object.oid,\n\t\t      \"\", &log_tree_opt.diffopt);\n\tlog_tree_diff_flush(&log_tree_opt);\n\treturn 0;\n}\n\nstatic int diff_tree_stdin(char *line)\n{\n\tint len = strlen(line);\n\tstruct object_id oid;\n\tstruct object *obj;\n\tconst char *p;\n\n\tif (!len || line[len-1] != '\\n')\n\t\treturn -1;\n\tline[len-1] = 0;\n\tif (parse_oid_hex(line, &oid, &p))\n\t\treturn -1;\n\tobj = parse_object(the_repository, &oid);\n\tif (!obj)\n\t\treturn -1;\n\tif (obj->type == OBJ_COMMIT)\n\t\treturn stdin_diff_commit((struct commit *)obj, p);",
      "\t\tdie(_(\"The current branch %s has no upstream branch.\\n\"\n\t\t    \"To push the current branch and set the remote as upstream, use\\n\"\n\t\t    \"\\n\"\n\t\t    \"    git push --set-upstream %s %s\\n\"\n\t\t    \"%s\"),\n\t\t    branch->name,\n\t\t    remote_name,\n\t\t    branch->name,\n\t\t    advice_autosetup_maybe);\n\t}\n\tif (branch->merge_nr != 1)\n\t\tdie(_(\"The current branch %s has multiple upstream branches, \"\n\t\t    \"refusing to push.\"), branch->name);\n\n\treturn branch->merge[0]->src;\n}\n\nstatic void setup_default_push_refspecs(int *flags, struct remote *remote)\n{\n\tstruct branch *branch;\n\tconst char *dst;\n\tint same_remote;\n\n\tswitch (push_default) {\n\tcase PUSH_DEFAULT_MATCHING:\n\t\trefspec_append(&rs, \":\");\n\t\treturn;\n\n\tcase PUSH_DEFAULT_NOTHING:\n\t\tdie(_(\"You didn't specify any refspecs to push, and \"\n\t\t    \"push.default is \\\"nothing\\\".\"));\n\t\treturn;\n\tdefault:\n\t\tbreak;\n\t}\n\n\tbranch = branch_get(NULL);\n\tif (!branch)\n\t\tdie(_(message_detached_head_die), remote->name);\n\n\tdst = branch->refname;\n\tsame_remote = !strcmp(remote->name, remote_for_branch(branch, NULL));\n\n\tswitch (push_default) {\n\tdefault:\n\tcase PUSH_DEFAULT_UNSPECIFIED:\n\tcase PUSH_DEFAULT_SIMPLE:\n\t\tif (!same_remote)\n\t\t\tbreak;\n\t\tif (strcmp(branch->refname, get_upstream_ref(*flags, branch, remote->name)))\n\t\t\tdie_push_simple(branch, remote);\n\t\tbreak;\n\n\tcase PUSH_DEFAULT_UPSTREAM:\n\t\tif (!same_remote)\n\t\t\tdie(_(\"You are pushing to remote '%s', which is not the upstream of\\n\"\n\t\t\t      \"your current branch '%s', without telling me what to push\\n\"\n\t\t\t      \"to update which remote branch.\"),\n\t\t\t    remote->name, branch->name);\n\t\tdst = get_upstream_ref(*flags, branch, remote->name);\n\t\tbreak;\n\n\tcase PUSH_DEFAULT_CURRENT:\n\t\tbreak;",
      "#include \"run-command.h\"\n#include \"pkt-line.h\"\n\nstatic const char usage_msg[] =\n\t\"git remote-ext <remote> <url>\";\n\n/*\n * URL syntax:\n *\t'command [arg1 [arg2 [...]]]'\tInvoke command with given arguments.\n *\tSpecial characters:\n *\t'% ': Literal space in argument.\n *\t'%%': Literal percent sign.\n *\t'%S': Name of service (git-upload-pack/git-upload-archive/\n *\t\tgit-receive-pack.\n *\t'%s': Same as \\s, but with possible git- prefix stripped.\n *\t'%G': Only allowed as first 'character' of argument. Do not pass this\n *\t\tArgument to command, instead send this as name of repository\n *\t\tin in-line git://-style request (also activates sending this\n *\t\tstyle of request).\n *\t'%V': Only allowed as first 'character' of argument. Used in\n *\t\tconjunction with '%G': Do not pass this argument to command,\n *\t\tinstead send this as vhost in git://-style request (note: does\n *\t\tnot activate sending git:// style request).\n */\n\nstatic char *git_req;\nstatic char *git_req_vhost;\n\nstatic char *strip_escapes(const char *str, const char *service,\n\tconst char **next)\n{\n\tsize_t rpos = 0;\n\tint escape = 0;\n\tchar special = 0;\n\tconst char *service_noprefix = service;\n\tstruct strbuf ret = STRBUF_INIT;\n\n\tskip_prefix(service_noprefix, \"git-\", &service_noprefix);\n\n\t/* Pass the service to command. */\n\tsetenv(\"GIT_EXT_SERVICE\", service, 1);\n\tsetenv(\"GIT_EXT_SERVICE_NOPREFIX\", service_noprefix, 1);\n\n\t/* Scan the length of argument. */\n\twhile (str[rpos] && (escape || str[rpos] != ' ')) {\n\t\tif (escape) {\n\t\t\tswitch (str[rpos]) {\n\t\t\tcase ' ':\n\t\t\tcase '%':\n\t\t\tcase 's':\n\t\t\tcase 'S':\n\t\t\t\tbreak;\n\t\t\tcase 'G':\n\t\t\tcase 'V':\n\t\t\t\tspecial = str[rpos];\n\t\t\t\tif (rpos == 1)\n\t\t\t\t\tbreak;\n\t\t\t\t/* fallthrough */\n\t\t\tdefault:\n\t\t\t\tdie(\"Bad remote-ext placeholder '%%%c'.\",\n\t\t\t\t\tstr[rpos]);\n\t\t\t}\n\t\t\tescape = 0;\n\t\t} else",
      " * as in \"Dec 6, 1992\"\n */\nstatic void pending_number(struct tm *tm, int *num)\n{\n\tint number = *num;\n\n\tif (number) {\n\t\t*num = 0;\n\t\tif (tm->tm_mday < 0 && number < 32)\n\t\t\ttm->tm_mday = number;\n\t\telse if (tm->tm_mon < 0 && number < 13)\n\t\t\ttm->tm_mon = number-1;\n\t\telse if (tm->tm_year < 0) {\n\t\t\tif (number > 1969 && number < 2100)\n\t\t\t\ttm->tm_year = number - 1900;\n\t\t\telse if (number > 69 && number < 100)\n\t\t\t\ttm->tm_year = number;\n\t\t\telse if (number < 38)\n\t\t\t\ttm->tm_year = 100 + number;\n\t\t\t/* We screw up for number = 00 ? */\n\t\t}\n\t}\n}\n\nstatic void date_now(struct tm *tm, struct tm *now, int *num)\n{\n\t*num = 0;\n\tupdate_tm(tm, now, 0);\n}\n\nstatic void date_yesterday(struct tm *tm, struct tm *now, int *num)\n{\n\t*num = 0;\n\tupdate_tm(tm, now, 24*60*60);\n}\n\nstatic void date_time(struct tm *tm, struct tm *now, int hour)\n{\n\tif (tm->tm_hour < hour)\n\t\tupdate_tm(tm, now, 24*60*60);\n\ttm->tm_hour = hour;\n\ttm->tm_min = 0;\n\ttm->tm_sec = 0;\n}\n\nstatic void date_midnight(struct tm *tm, struct tm *now, int *num)\n{\n\tpending_number(tm, num);\n\tdate_time(tm, now, 0);\n}\n\nstatic void date_noon(struct tm *tm, struct tm *now, int *num)\n{\n\tpending_number(tm, num);\n\tdate_time(tm, now, 12);\n}\n\nstatic void date_tea(struct tm *tm, struct tm *now, int *num)\n{\n\tpending_number(tm, num);\n\tdate_time(tm, now, 17);\n}\n\nstatic void date_pm(struct tm *tm, struct tm *now UNUSED, int *num)",
      "}\n\nstruct directory {\n\tstruct directory *up;\n\tstruct object_id oid;\n\tint baselen, len;\n\tunsigned mode;\n\tchar path[FLEX_ARRAY];\n};\n\nstruct archiver_context {\n\tstruct archiver_args *args;\n\twrite_archive_entry_fn_t write_entry;\n\tstruct directory *bottom;\n};\n\nstatic const struct attr_check *get_archive_attrs(struct index_state *istate,\n\t\t\t\t\t\t  const char *path)\n{\n\tstatic struct attr_check *check;\n\tif (!check)\n\t\tcheck = attr_check_initl(\"export-ignore\", \"export-subst\", NULL);\n\tgit_check_attr(istate, path, check);\n\treturn check;\n}\n\nstatic int check_attr_export_ignore(const struct attr_check *check)\n{\n\treturn check && ATTR_TRUE(check->items[0].value);\n}\n\nstatic int check_attr_export_subst(const struct attr_check *check)\n{\n\treturn check && ATTR_TRUE(check->items[1].value);\n}\n\nstatic int write_archive_entry(const struct object_id *oid, const char *base,\n\t\tint baselen, const char *filename, unsigned mode,\n\t\tvoid *context)\n{\n\tstatic struct strbuf path = STRBUF_INIT;\n\tstruct archiver_context *c = context;\n\tstruct archiver_args *args = c->args;\n\twrite_archive_entry_fn_t write_entry = c->write_entry;\n\tint err;\n\tconst char *path_without_prefix;\n\tunsigned long size;\n\tvoid *buffer;\n\tenum object_type type;\n\n\targs->convert = 0;\n\tstrbuf_reset(&path);\n\tstrbuf_grow(&path, PATH_MAX);\n\tstrbuf_add(&path, args->base, args->baselen);\n\tstrbuf_add(&path, base, baselen);\n\tstrbuf_addstr(&path, filename);\n\tif (S_ISDIR(mode) || S_ISGITLINK(mode))\n\t\tstrbuf_addch(&path, '/');\n\tpath_without_prefix = path.buf + args->baselen;\n\n\tif (!S_ISDIR(mode)) {\n\t\tconst struct attr_check *check;\n\t\tcheck = get_archive_attrs(args->repo->index, path_without_prefix);\n\t\tif (check_attr_export_ignore(check))",
      " */\nstruct rerere_io_file {\n\tstruct rerere_io io;\n\tFILE *input;\n};\n\n/*\n * ... and its getline() method implementation\n */\nstatic int rerere_file_getline(struct strbuf *sb, struct rerere_io *io_)\n{\n\tstruct rerere_io_file *io = (struct rerere_io_file *)io_;\n\treturn strbuf_getwholeline(sb, io->input, '\\n');\n}\n\n/*\n * Require the exact number of conflict marker letters, no more, no\n * less, followed by SP or any whitespace\n * (including LF).\n */\nstatic int is_cmarker(char *buf, int marker_char, int marker_size)\n{\n\tint want_sp;\n\n\t/*\n\t * The beginning of our version and the end of their version\n\t * always are labeled like \"<<<<< ours\" or \">>>>> theirs\",\n\t * hence we set want_sp for them.  Note that the version from\n\t * the common ancestor in diff3-style output is not always\n\t * labelled (e.g. \"||||| common\" is often seen but \"|||||\"\n\t * alone is also valid), so we do not set want_sp.\n\t */\n\twant_sp = (marker_char == '<') || (marker_char == '>');\n\n\twhile (marker_size--)\n\t\tif (*buf++ != marker_char)\n\t\t\treturn 0;\n\tif (want_sp && *buf != ' ')\n\t\treturn 0;\n\treturn isspace(*buf);\n}\n\nstatic void rerere_strbuf_putconflict(struct strbuf *buf, int ch, size_t size)\n{\n\tstrbuf_addchars(buf, ch, size);\n\tstrbuf_addch(buf, '\\n');\n}\n\nstatic int handle_conflict(struct strbuf *out, struct rerere_io *io,\n\t\t\t   int marker_size, git_hash_ctx *ctx)\n{\n\tenum {\n\t\tRR_SIDE_1 = 0, RR_SIDE_2, RR_ORIGINAL\n\t} hunk = RR_SIDE_1;\n\tstruct strbuf one = STRBUF_INIT, two = STRBUF_INIT;\n\tstruct strbuf buf = STRBUF_INIT, conflict = STRBUF_INIT;\n\tint has_conflicts = -1;\n\n\twhile (!io->getline(&buf, io)) {\n\t\tif (is_cmarker(buf.buf, '<', marker_size)) {\n\t\t\tif (handle_conflict(&conflict, io, marker_size, NULL) < 0)\n\t\t\t\tbreak;\n\t\t\tif (hunk == RR_SIDE_1)\n\t\t\t\tstrbuf_addbuf(&one, &conflict);"
    ]
  },
  {
    "id": "nvm-sh/nvm",
    "org": "nvm-sh",
    "avatarURL": "https://avatars.githubusercontent.com/u/49963700?v=4",
    "name": "nvm-sh/nvm",
    "url": "https://github.com/nvm-sh/nvm",
    "lang": "Shell",
    "star_num": 69828,
    "fork_num": 7438,
    "snippets": [
      "\nmain \"$@\"\n",
      "  elif nvm_has_non_aliased \"sha1\"; then\n    nvm_err 'Computing checksum with sha1 -q'\n    command sha1 -q \"${FILE}\"\n  fi\n}\n\nnvm_compare_checksum() {\n  local FILE\n  FILE=\"${1-}\"\n  if [ -z \"${FILE}\" ]; then\n    nvm_err 'Provided file to checksum is empty.'\n    return 4\n  elif ! [ -f \"${FILE}\" ]; then\n    nvm_err 'Provided file to checksum does not exist.'\n    return 3\n  fi\n\n  local COMPUTED_SUM\n  COMPUTED_SUM=\"$(nvm_compute_checksum \"${FILE}\")\"\n\n  local CHECKSUM\n  CHECKSUM=\"${2-}\"\n  if [ -z \"${CHECKSUM}\" ]; then\n    nvm_err 'Provided checksum to compare to is empty.'\n    return 2\n  fi\n\n  if [ -z \"${COMPUTED_SUM}\" ]; then\n    nvm_err \"Computed checksum of '${FILE}' is empty.\" # missing in raspberry pi binary\n    nvm_err 'WARNING: Continuing *without checksum verification*'\n    return\n  elif [ \"${COMPUTED_SUM}\" != \"${CHECKSUM}\" ] && [ \"${COMPUTED_SUM}\" != \"\\\\${CHECKSUM}\" ]; then\n    nvm_err \"Checksums do not match: '${COMPUTED_SUM}' found, '${CHECKSUM}' expected.\"\n    return 1\n  fi\n  nvm_err 'Checksums matched!'\n}\n\n# args: flavor, type, version, slug, compression\nnvm_get_checksum() {\n  local FLAVOR\n  case \"${1-}\" in\n    node | iojs) FLAVOR=\"${1}\" ;;\n    *)\n      nvm_err 'supported flavors: node, iojs'\n      return 2\n    ;;\n  esac\n\n  local MIRROR\n  MIRROR=\"$(nvm_get_mirror \"${FLAVOR}\" \"${2-}\")\"\n  if [ -z \"${MIRROR}\" ]; then\n    return 1\n  fi\n\n  local SHASUMS_URL\n  if [ \"$(nvm_get_checksum_alg)\" = 'sha-256' ]; then\n    SHASUMS_URL=\"${MIRROR}/${3}/SHASUMS256.txt\"\n  else\n    SHASUMS_URL=\"${MIRROR}/${3}/SHASUMS.txt\"\n  fi\n\n  nvm_download -L -s \"${SHASUMS_URL}\" -o - | command awk \"{ if (\\\"${4}.${5}\\\" == \\$2) print \\$1}\"\n}",
      "    nvm_echo \"$DETECTED_PROFILE\"\n  fi\n}\n\n#\n# Check whether the user has any globally-installed npm modules in their system\n# Node, and warn them if so.\n#\nnvm_check_global_modules() {\n  local NPM_COMMAND\n  NPM_COMMAND=\"$(command -v npm 2>/dev/null)\" || return 0\n  [ -n \"${NVM_DIR}\" ] && [ -z \"${NPM_COMMAND%%\"$NVM_DIR\"/*}\" ] && return 0\n\n  local NPM_VERSION\n  NPM_VERSION=\"$(npm --version)\"\n  NPM_VERSION=\"${NPM_VERSION:--1}\"\n  [ \"${NPM_VERSION%%[!-0-9]*}\" -gt 0 ] || return 0\n\n  local NPM_GLOBAL_MODULES\n  NPM_GLOBAL_MODULES=\"$(\n    npm list -g --depth=0 |\n    command sed -e '/ npm@/d' -e '/ (empty)$/d'\n  )\"\n\n  local MODULE_COUNT\n  MODULE_COUNT=\"$(\n    command printf %s\\\\n \"$NPM_GLOBAL_MODULES\" |\n    command sed -ne '1!p' |                     # Remove the first line\n    wc -l | command tr -d ' '                   # Count entries\n  )\"\n\n  if [ \"${MODULE_COUNT}\" != '0' ]; then\n    # shellcheck disable=SC2016\n    nvm_echo '=> You currently have modules installed globally with `npm`. These will no'\n    # shellcheck disable=SC2016\n    nvm_echo '=> longer be linked to the active version of Node when you install a new node'\n    # shellcheck disable=SC2016\n    nvm_echo '=> with `nvm`; and they may (depending on how you construct your `$PATH`)'\n    # shellcheck disable=SC2016\n    nvm_echo '=> override the binaries of modules installed with `nvm`:'\n    nvm_echo\n\n    command printf %s\\\\n \"$NPM_GLOBAL_MODULES\"\n    nvm_echo '=> If you wish to uninstall them at a later point (or re-install them under your'\n    # shellcheck disable=SC2016\n    nvm_echo '=> `nvm` Nodes), you can remove them from the system Node as follows:'\n    nvm_echo\n    nvm_echo '     $ nvm use system'\n    nvm_echo '     $ npm uninstall -g a_module'\n    nvm_echo\n  fi\n}\n\nnvm_do_install() {\n  if [ -n \"${NVM_DIR-}\" ] && ! [ -d \"${NVM_DIR}\" ]; then\n    if [ -e \"${NVM_DIR}\" ]; then\n      nvm_echo >&2 \"File \\\"${NVM_DIR}\\\" has the same name as installation directory.\"\n      exit 1\n    fi\n\n    if [ \"${NVM_DIR}\" = \"$(nvm_default_install_dir)\" ]; then\n      mkdir \"${NVM_DIR}\"\n    else\n      nvm_echo >&2 \"You have \\$NVM_DIR set to \\\"${NVM_DIR}\\\", but that directory does not exist. Check your profile files and environment.\"",
      "  local FILE\n  FILE=\"${1-}\"\n  if [ -z \"${FILE}\" ]; then\n    nvm_err 'Provided file to checksum is empty.'\n    return 2\n  elif ! [ -f \"${FILE}\" ]; then\n    nvm_err 'Provided file to checksum does not exist.'\n    return 1\n  fi\n\n  if nvm_has_non_aliased \"sha256sum\"; then\n    nvm_err 'Computing checksum with sha256sum'\n    command sha256sum \"${FILE}\" | command awk '{print $1}'\n  elif nvm_has_non_aliased \"shasum\"; then\n    nvm_err 'Computing checksum with shasum -a 256'\n    command shasum -a 256 \"${FILE}\" | command awk '{print $1}'\n  elif nvm_has_non_aliased \"sha256\"; then\n    nvm_err 'Computing checksum with sha256 -q'\n    command sha256 -q \"${FILE}\" | command awk '{print $1}'\n  elif nvm_has_non_aliased \"gsha256sum\"; then\n    nvm_err 'Computing checksum with gsha256sum'\n    command gsha256sum \"${FILE}\" | command awk '{print $1}'\n  elif nvm_has_non_aliased \"openssl\"; then\n    nvm_err 'Computing checksum with openssl dgst -sha256'\n    command openssl dgst -sha256 \"${FILE}\" | command awk '{print $NF}'\n  elif nvm_has_non_aliased \"bssl\"; then\n    nvm_err 'Computing checksum with bssl sha256sum'\n    command bssl sha256sum \"${FILE}\" | command awk '{print $1}'\n  elif nvm_has_non_aliased \"sha1sum\"; then\n    nvm_err 'Computing checksum with sha1sum'\n    command sha1sum \"${FILE}\" | command awk '{print $1}'\n  elif nvm_has_non_aliased \"sha1\"; then\n    nvm_err 'Computing checksum with sha1 -q'\n    command sha1 -q \"${FILE}\"\n  fi\n}\n\nnvm_compare_checksum() {\n  local FILE\n  FILE=\"${1-}\"\n  if [ -z \"${FILE}\" ]; then\n    nvm_err 'Provided file to checksum is empty.'\n    return 4\n  elif ! [ -f \"${FILE}\" ]; then\n    nvm_err 'Provided file to checksum does not exist.'\n    return 3\n  fi\n\n  local COMPUTED_SUM\n  COMPUTED_SUM=\"$(nvm_compute_checksum \"${FILE}\")\"\n\n  local CHECKSUM\n  CHECKSUM=\"${2-}\"\n  if [ -z \"${CHECKSUM}\" ]; then\n    nvm_err 'Provided checksum to compare to is empty.'\n    return 2\n  fi\n\n  if [ -z \"${COMPUTED_SUM}\" ]; then\n    nvm_err \"Computed checksum of '${FILE}' is empty.\" # missing in raspberry pi binary\n    nvm_err 'WARNING: Continuing *without checksum verification*'\n    return\n  elif [ \"${COMPUTED_SUM}\" != \"${CHECKSUM}\" ] && [ \"${COMPUTED_SUM}\" != \"\\\\${CHECKSUM}\" ]; then\n    nvm_err \"Checksums do not match: '${COMPUTED_SUM}' found, '${CHECKSUM}' expected.\"",
      "\necho \"done! Don't forget to git commit them.\"\n",
      "  if [ \"${KIND}\" = 'binary' ] && ! nvm_binary_available \"${VERSION}\"; then\n    nvm_err \"No precompiled binary available for ${VERSION}.\"\n    return\n  fi\n\n  local SLUG\n  SLUG=\"$(nvm_get_download_slug \"${FLAVOR}\" \"${KIND}\" \"${VERSION}\")\"\n\n  local COMPRESSION\n  COMPRESSION=\"$(nvm_get_artifact_compression \"${VERSION}\")\"\n\n  local CHECKSUM\n  CHECKSUM=\"$(nvm_get_checksum \"${FLAVOR}\" \"${TYPE}\" \"${VERSION}\" \"${SLUG}\" \"${COMPRESSION}\")\"\n\n  local tmpdir\n  if [ \"${KIND}\" = 'binary' ]; then\n    tmpdir=\"$(nvm_cache_dir)/bin/${SLUG}\"\n  else\n    tmpdir=\"$(nvm_cache_dir)/src/${SLUG}\"\n  fi\n  command mkdir -p \"${tmpdir}/files\" || (\n    nvm_err \"creating directory ${tmpdir}/files failed\"\n    return 3\n  )\n\n  local TARBALL\n  TARBALL=\"${tmpdir}/${SLUG}.${COMPRESSION}\"\n  local TARBALL_URL\n  if nvm_version_greater_than_or_equal_to \"${VERSION}\" 0.1.14; then\n    TARBALL_URL=\"${MIRROR}/${VERSION}/${SLUG}.${COMPRESSION}\"\n  else\n    # node <= 0.1.13 does not have a directory\n    TARBALL_URL=\"${MIRROR}/${SLUG}.${COMPRESSION}\"\n  fi\n\n  if [ -r \"${TARBALL}\" ]; then\n    nvm_err \"Local cache found: $(nvm_sanitize_path \"${TARBALL}\")\"\n    if nvm_compare_checksum \"${TARBALL}\" \"${CHECKSUM}\" >/dev/null 2>&1; then\n      nvm_err \"Checksums match! Using existing downloaded archive $(nvm_sanitize_path \"${TARBALL}\")\"\n      nvm_echo \"${TARBALL}\"\n      return 0\n    fi\n    nvm_compare_checksum \"${TARBALL}\" \"${CHECKSUM}\"\n    nvm_err \"Checksum check failed!\"\n    nvm_err \"Removing the broken local cache...\"\n    command rm -rf \"${TARBALL}\"\n  fi\n  nvm_err \"Downloading ${TARBALL_URL}...\"\n  nvm_download -L -C - \"${PROGRESS_BAR}\" \"${TARBALL_URL}\" -o \"${TARBALL}\" || (\n    command rm -rf \"${TARBALL}\" \"${tmpdir}\"\n    nvm_err \"Binary download from ${TARBALL_URL} failed, trying source.\"\n    return 4\n  )\n\n  if nvm_grep '404 Not Found' \"${TARBALL}\" >/dev/null; then\n    command rm -rf \"${TARBALL}\" \"${tmpdir}\"\n    nvm_err \"HTTP 404 at URL ${TARBALL_URL}\"\n    return 5\n  fi\n\n  nvm_compare_checksum \"${TARBALL}\" \"${CHECKSUM}\" || (\n    command rm -rf \"${tmpdir}/files\"\n    return 6\n  )",
      "    echo \"$line\" | LC_ALL=C command sed 's/\u001b\\[[ -?]*[@-~]//g'\n  done\n}\n\nmake_echo() {\n  echo \"#!/bin/sh\" > \"$1\"\n  echo \"echo \\\"${2}\\\"\" > \"$1\"\n  chmod a+x \"$1\"\n}\n\nmake_fake_node() {\n  local VERSION\n  VERSION=\"${1-}\"\n  [ -n \"${VERSION}\" ] || return 1\n\n  local FORMATTED_VERSION\n  FORMATTED_VERSION=\"$(nvm_format_version \"${VERSION}\")\"\n\n  local BIN_PATH\n  BIN_PATH=\"$(nvm_version_path \"${FORMATTED_VERSION}\")/bin\"\n  [ \"${BIN_PATH}\" != \"/bin\" ] || {\n    echo >&2 'nvm_version_path was empty'\n    return 5\n  }\n\n  mkdir -p \"${BIN_PATH}\" || {\n    echo >&2 'unable to make bin dir'\n    return 2\n  }\n\n  make_echo \"${BIN_PATH}/node\" \"${VERSION}\" || {\n    echo >&2 'unable to make fake node bin'\n    return 3\n  }\n\n  nvm_is_version_installed \"${FORMATTED_VERSION}\" || {\n    echo >&2 'fake node is not installed'\n    return 4\n  }\n}\n\nmake_fake_iojs() {\n  local VERSION\n  VERSION=\"${1-}\"\n  [ -n \"${VERSION}\" ] || return 1\n\n  local FORMATTED_VERSION\n  FORMATTED_VERSION=\"$(nvm_format_version \"iojs-${VERSION}\")\"\n\n  local BIN_PATH\n  BIN_PATH=\"$(nvm_version_path \"${FORMATTED_VERSION}\")/bin\"\n  [ \"${BIN_PATH}\" != \"/bin\" ] || {\n    echo >&2 'nvm_version_path was empty'\n    return 5\n  }\n\n  mkdir -p \"${BIN_PATH}\" || {\n    echo >&2 'unable to make bin dir'\n    return 2\n  }\n\n  make_echo \"${BIN_PATH}/node\" \"${VERSION}\" || {\n    echo >&2 'unable to make fake node bin'\n    return 3",
      "  if [ \"$1\" = \"--check\" ]; then\n    check_name\n  else\n    rename_test\n  fi\n}\n\nmain \"$@\"\n",
      "main \"$@\"\n",
      "  while read -r line; do\n    echo \"$line\" | LC_ALL=C command sed 's/\u001b\\[[ -?]*[@-~]//g'\n  done\n}\n\nmake_echo() {\n  echo \"#!/bin/sh\" > \"$1\"\n  echo \"echo \\\"${2}\\\"\" > \"$1\"\n  chmod a+x \"$1\"\n}\n\nmake_fake_node() {\n  local VERSION\n  VERSION=\"${1-}\"\n  [ -n \"${VERSION}\" ] || return 1\n\n  local FORMATTED_VERSION\n  FORMATTED_VERSION=\"$(nvm_format_version \"${VERSION}\")\"\n\n  local BIN_PATH\n  BIN_PATH=\"$(nvm_version_path \"${FORMATTED_VERSION}\")/bin\"\n  [ \"${BIN_PATH}\" != \"/bin\" ] || {\n    echo >&2 'nvm_version_path was empty'\n    return 5\n  }\n\n  mkdir -p \"${BIN_PATH}\" || {\n    echo >&2 'unable to make bin dir'\n    return 2\n  }\n\n  make_echo \"${BIN_PATH}/node\" \"${VERSION}\" || {\n    echo >&2 'unable to make fake node bin'\n    return 3\n  }\n\n  nvm_is_version_installed \"${FORMATTED_VERSION}\" || {\n    echo >&2 'fake node is not installed'\n    return 4\n  }\n}\n\nmake_fake_iojs() {\n  local VERSION\n  VERSION=\"${1-}\"\n  [ -n \"${VERSION}\" ] || return 1\n\n  local FORMATTED_VERSION\n  FORMATTED_VERSION=\"$(nvm_format_version \"iojs-${VERSION}\")\"\n\n  local BIN_PATH\n  BIN_PATH=\"$(nvm_version_path \"${FORMATTED_VERSION}\")/bin\"\n  [ \"${BIN_PATH}\" != \"/bin\" ] || {\n    echo >&2 'nvm_version_path was empty'\n    return 5\n  }\n\n  mkdir -p \"${BIN_PATH}\" || {\n    echo >&2 'unable to make bin dir'\n    return 2\n  }\n\n  make_echo \"${BIN_PATH}/node\" \"${VERSION}\" || {\n    echo >&2 'unable to make fake node bin'"
    ]
  },
  {
    "id": "bitcoin/bitcoin",
    "org": "bitcoin",
    "avatarURL": "https://avatars.githubusercontent.com/u/528860?v=4",
    "name": "bitcoin/bitcoin",
    "url": "https://github.com/bitcoin/bitcoin",
    "lang": "C++",
    "star_num": 71229,
    "fork_num": 35617,
    "snippets": [
      "\n#include <crypto/hkdf_sha256_32.h>\n\n#include <assert.h>\n#include <string.h>\n\nCHKDF_HMAC_SHA256_L32::CHKDF_HMAC_SHA256_L32(const unsigned char* ikm, size_t ikmlen, const std::string& salt)\n{\n    CHMAC_SHA256((const unsigned char*)salt.data(), salt.size()).Write(ikm, ikmlen).Finalize(m_prk);\n}\n\nvoid CHKDF_HMAC_SHA256_L32::Expand32(const std::string& info, unsigned char hash[OUTPUT_SIZE])\n{\n    // expand a 32byte key (single round)\n    assert(info.size() <= 128);\n    static const unsigned char one[1] = {1};\n    CHMAC_SHA256(m_prk, 32).Write((const unsigned char*)info.data(), info.size()).Write(one, 1).Finalize(hash);\n}\n",
      "// Distributed under the MIT software license, see the accompanying\n// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n\n#include <wallet/coincontrol.h>\n\n#include <common/args.h>\n\nnamespace wallet {\nCCoinControl::CCoinControl()\n{\n    m_avoid_partial_spends = gArgs.GetBoolArg(\"-avoidpartialspends\", DEFAULT_AVOIDPARTIALSPENDS);\n}\n\nbool CCoinControl::HasSelected() const\n{\n    return !m_selected_inputs.empty();\n}\n\nbool CCoinControl::IsSelected(const COutPoint& output) const\n{\n    return m_selected_inputs.count(output) > 0;\n}\n\nbool CCoinControl::IsExternalSelected(const COutPoint& output) const\n{\n    return m_external_txouts.count(output) > 0;\n}\n\nstd::optional<CTxOut> CCoinControl::GetExternalOutput(const COutPoint& outpoint) const\n{\n    const auto ext_it = m_external_txouts.find(outpoint);\n    if (ext_it == m_external_txouts.end()) {\n        return std::nullopt;\n    }\n\n    return std::make_optional(ext_it->second);\n}\n\nvoid CCoinControl::Select(const COutPoint& output)\n{\n    m_selected_inputs.insert(output);\n}\n\nvoid CCoinControl::SelectExternal(const COutPoint& outpoint, const CTxOut& txout)\n{\n    m_selected_inputs.insert(outpoint);\n    m_external_txouts.emplace(outpoint, txout);\n}\n\nvoid CCoinControl::UnSelect(const COutPoint& output)\n{\n    m_selected_inputs.erase(output);\n}\n\nvoid CCoinControl::UnSelectAll()\n{\n    m_selected_inputs.clear();\n}\n\nstd::vector<COutPoint> CCoinControl::ListSelected() const\n{\n    return {m_selected_inputs.begin(), m_selected_inputs.end()};\n}\n",
      "#include <random.h>\n#include <util/time.h>\n#include <util/translation.h>\n\n#include <memory>\n\nnamespace kernel {\n\nutil::Result<void> SanityChecks(const Context&)\n{\n    if (!ECC_InitSanityCheck()) {\n        return util::Error{Untranslated(\"Elliptic curve cryptography sanity check failure. Aborting.\")};\n    }\n\n    if (!Random_SanityCheck()) {\n        return util::Error{Untranslated(\"OS cryptographic RNG sanity check failure. Aborting.\")};\n    }\n\n    if (!ChronoSanityCheck()) {\n        return util::Error{Untranslated(\"Clock epoch mismatch. Aborting.\")};\n    }\n\n    return {};\n}\n\n}\n",
      "// Copyright (c) 2021 The Bitcoin Core developers\n// Distributed under the MIT software license, see the accompanying\n// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n\n#include <minisketch.h>\n#include <node/minisketchwrapper.h>\n#include <test/fuzz/FuzzedDataProvider.h>\n#include <test/fuzz/fuzz.h>\n#include <test/fuzz/util.h>\n#include <util/check.h>\n\n#include <map>\n#include <numeric>\n\nusing node::MakeMinisketch32;\n\nFUZZ_TARGET(minisketch)\n{\n    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n    const auto capacity{fuzzed_data_provider.ConsumeIntegralInRange<size_t>(1, 200)};\n    Minisketch sketch_a{Assert(MakeMinisketch32(capacity))};\n    Minisketch sketch_b{Assert(MakeMinisketch32(capacity))};\n\n    // Fill two sets and keep the difference in a map\n    std::map<uint32_t, bool> diff;\n    LIMITED_WHILE(fuzzed_data_provider.ConsumeBool(), 10000)\n    {\n        const auto entry{fuzzed_data_provider.ConsumeIntegralInRange<uint32_t>(1, std::numeric_limits<uint32_t>::max() - 1)};\n        const auto KeepDiff{[&] {\n            bool& mut{diff[entry]};\n            mut = !mut;\n        }};\n        CallOneOf(\n            fuzzed_data_provider,\n            [&] {\n                sketch_a.Add(entry);\n                KeepDiff();\n            },\n            [&] {\n                sketch_b.Add(entry);\n                KeepDiff();\n            },\n            [&] {\n                sketch_a.Add(entry);\n                sketch_b.Add(entry);\n            });\n    }\n    const auto num_diff{std::accumulate(diff.begin(), diff.end(), size_t{0}, [](auto n, const auto& e) { return n + e.second; })};\n\n    Minisketch sketch_ar{MakeMinisketch32(capacity)};\n    Minisketch sketch_br{MakeMinisketch32(capacity)};\n    sketch_ar.Deserialize(sketch_a.Serialize());\n    sketch_br.Deserialize(sketch_b.Serialize());\n\n    Minisketch sketch_diff{std::move(fuzzed_data_provider.ConsumeBool() ? sketch_a : sketch_ar)};\n    sketch_diff.Merge(fuzzed_data_provider.ConsumeBool() ? sketch_b : sketch_br);\n\n    if (capacity >= num_diff) {\n        const auto max_elements{fuzzed_data_provider.ConsumeIntegralInRange<size_t>(num_diff, capacity)};\n        const auto dec{*Assert(sketch_diff.Decode(max_elements))};\n        Assert(dec.size() == num_diff);\n        for (auto d : dec) {\n            Assert(diff.at(d));\n        }",
      "// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n\n#include <logging.h>\n#include <util/syserror.h>\n\n#if (defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__DragonFly__))\n#include <pthread.h>\n#include <pthread_np.h>\n#endif\n\n#ifndef WIN32\n#include <sched.h>\n#endif\n\nvoid ScheduleBatchPriority()\n{\n#ifdef SCHED_BATCH\n    const static sched_param param{};\n    const int rc = pthread_setschedparam(pthread_self(), SCHED_BATCH, &param);\n    if (rc != 0) {\n        LogPrintf(\"Failed to pthread_setschedparam: %s\\n\", SysErrorString(rc));\n    }\n#endif\n}\n",
      "BENCHMARK(CCoinsCaching, benchmark::PriorityLevel::HIGH);\n",
      "\n#include <bench/bench.h>\n#include <crypto/muhash.h>\n#include <crypto/ripemd160.h>\n#include <crypto/sha1.h>\n#include <crypto/sha256.h>\n#include <crypto/sha3.h>\n#include <crypto/sha512.h>\n#include <crypto/siphash.h>\n#include <hash.h>\n#include <random.h>\n#include <uint256.h>\n\n/* Number of bytes to hash per iteration */\nstatic const uint64_t BUFFER_SIZE = 1000*1000;\n\nstatic void BenchRIPEMD160(benchmark::Bench& bench)\n{\n    uint8_t hash[CRIPEMD160::OUTPUT_SIZE];\n    std::vector<uint8_t> in(BUFFER_SIZE,0);\n    bench.batch(in.size()).unit(\"byte\").run([&] {\n        CRIPEMD160().Write(in.data(), in.size()).Finalize(hash);\n    });\n}\n\nstatic void SHA1(benchmark::Bench& bench)\n{\n    uint8_t hash[CSHA1::OUTPUT_SIZE];\n    std::vector<uint8_t> in(BUFFER_SIZE,0);\n    bench.batch(in.size()).unit(\"byte\").run([&] {\n        CSHA1().Write(in.data(), in.size()).Finalize(hash);\n    });\n}\n\nstatic void SHA256(benchmark::Bench& bench)\n{\n    uint8_t hash[CSHA256::OUTPUT_SIZE];\n    std::vector<uint8_t> in(BUFFER_SIZE,0);\n    bench.batch(in.size()).unit(\"byte\").run([&] {\n        CSHA256().Write(in.data(), in.size()).Finalize(hash);\n    });\n}\n\nstatic void SHA3_256_1M(benchmark::Bench& bench)\n{\n    uint8_t hash[SHA3_256::OUTPUT_SIZE];\n    std::vector<uint8_t> in(BUFFER_SIZE,0);\n    bench.batch(in.size()).unit(\"byte\").run([&] {\n        SHA3_256().Write(in).Finalize(hash);\n    });\n}\n\nstatic void SHA256_32b(benchmark::Bench& bench)\n{\n    std::vector<uint8_t> in(32,0);\n    bench.batch(in.size()).unit(\"byte\").run([&] {\n        CSHA256()\n            .Write(in.data(), in.size())\n            .Finalize(in.data());\n    });\n}\n\nstatic void SHA256D64_1024(benchmark::Bench& bench)\n{",
      "    {\n        const std::vector<uint8_t> in_u{0xff, 0x01, 0xff};\n        const std::vector<std::byte> in_b{std::byte{0xff}, std::byte{0x01}, std::byte{0xff}};\n        const std::string in_s{\"\\xff\\x01\\xff\"};\n        const std::string out_exp{\"/wH/\"};\n        BOOST_CHECK_EQUAL(EncodeBase64(in_u), out_exp);\n        BOOST_CHECK_EQUAL(EncodeBase64(in_b), out_exp);\n        BOOST_CHECK_EQUAL(EncodeBase64(in_s), out_exp);\n    }\n\n    // Decoding strings with embedded NUL characters should fail\n    BOOST_CHECK(!DecodeBase64(\"invalid\\0\"s));\n    BOOST_CHECK(DecodeBase64(\"nQB/pZw=\"s));\n    BOOST_CHECK(!DecodeBase64(\"nQB/pZw=\\0invalid\"s));\n    BOOST_CHECK(!DecodeBase64(\"nQB/pZw=invalid\\0\"s));\n}\n\nBOOST_AUTO_TEST_SUITE_END()\n",
      "        }\n    }\n\n    bool HaveCoin(const COutPoint& outpoint) const final\n    {\n        return m_data.count(outpoint);\n    }\n\n    uint256 GetBestBlock() const final { return {}; }\n    std::vector<uint256> GetHeadBlocks() const final { return {}; }\n    std::unique_ptr<CCoinsViewCursor> Cursor() const final { return {}; }\n    size_t EstimateSize() const final { return m_data.size(); }\n\n    bool BatchWrite(CCoinsMap& data, const uint256&, bool erase) final\n    {\n        for (auto it = data.begin(); it != data.end(); it = erase ? data.erase(it) : std::next(it)) {\n            if (it->second.flags & CCoinsCacheEntry::DIRTY) {\n                if (it->second.coin.IsSpent() && (it->first.n % 5) != 4) {\n                    m_data.erase(it->first);\n                } else if (erase) {\n                    m_data[it->first] = std::move(it->second.coin);\n                } else {\n                    m_data[it->first] = it->second.coin;\n                }\n            } else {\n                /* For non-dirty entries being written, compare them with what we have. */\n                auto it2 = m_data.find(it->first);\n                if (it->second.coin.IsSpent()) {\n                    assert(it2 == m_data.end() || it2->second.IsSpent());\n                } else {\n                    assert(it2 != m_data.end());\n                    assert(it->second.coin.out == it2->second.out);\n                    assert(it->second.coin.fCoinBase == it2->second.fCoinBase);\n                    assert(it->second.coin.nHeight == it2->second.nHeight);\n                }\n            }\n        }\n        return true;\n    }\n};\n\n} // namespace\n\nFUZZ_TARGET(coinscache_sim)\n{\n    /** Precomputed COutPoint and CCoins values. */\n    static const PrecomputedData data;\n\n    /** Dummy coinsview instance (base of the hierarchy). */\n    CoinsViewBottom bottom;\n    /** Real CCoinsViewCache objects. */\n    std::vector<std::unique_ptr<CCoinsViewCache>> caches;\n    /** Simulated cache data (sim_caches[0] matches bottom, sim_caches[i+1] matches caches[i]). */\n    CacheLevel sim_caches[MAX_CACHES + 1];\n    /** Current height in the simulation. */\n    uint32_t current_height = 1U;\n\n    // Initialize bottom simulated cache.\n    sim_caches[0].Wipe();\n\n    /** Helper lookup function in the simulated cache stack. */\n    auto lookup = [&](uint32_t outpointidx, int sim_idx = -1) -> std::optional<std::pair<coinidx_type, uint32_t>> {\n        uint32_t cache_idx = sim_idx == -1 ? caches.size() : sim_idx;\n        while (true) {",
      "        RPCResult{RPCResult::Type::ANY, \"\", \"\"},\n        RPCExamples{\"\"},\n        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue {\n            return request.params.write(0, 0);\n        },\n    };\n}\n\nstatic const CRPCCommand vRPCCommands[] = {\n    {\"rpcNestedTest\", &rpcNestedTest_rpc},\n};\n\nvoid RPCNestedTests::rpcNestedTests()\n{\n    // do some test setup\n    // could be moved to a more generic place when we add more tests on QT level\n    for (const auto& c : vRPCCommands) {\n        tableRPC.appendCommand(c.name, &c);\n    }\n\n    TestingSetup test;\n    m_node.setContext(&test.m_node);\n\n    if (RPCIsInWarmup(nullptr)) SetRPCWarmupFinished();\n\n    std::string result;\n    std::string result2;\n    std::string filtered;\n    RPCConsole::RPCExecuteCommandLine(m_node, result, \"getblockchaininfo()[chain]\", &filtered); //simple result filtering with path\n    QVERIFY(result==\"main\");\n    QVERIFY(filtered == \"getblockchaininfo()[chain]\");\n\n    RPCConsole::RPCExecuteCommandLine(m_node, result, \"getblock(getbestblockhash())\"); //simple 2 level nesting\n    RPCConsole::RPCExecuteCommandLine(m_node, result, \"getblock(getblock(getbestblockhash())[hash], true)\");\n\n    RPCConsole::RPCExecuteCommandLine(m_node, result, \"getblock( getblock( getblock(getbestblockhash())[hash] )[hash], true)\"); //4 level nesting with whitespace, filtering path and boolean parameter\n\n    RPCConsole::RPCExecuteCommandLine(m_node, result, \"getblockchaininfo\");\n    QVERIFY(result.substr(0,1) == \"{\");\n\n    RPCConsole::RPCExecuteCommandLine(m_node, result, \"getblockchaininfo()\");\n    QVERIFY(result.substr(0,1) == \"{\");\n\n    RPCConsole::RPCExecuteCommandLine(m_node, result, \"getblockchaininfo \"); //whitespace at the end will be tolerated\n    QVERIFY(result.substr(0,1) == \"{\");\n\n    RPCConsole::RPCExecuteCommandLine(m_node, result, \"getblockchaininfo()[\\\"chain\\\"]\"); //Quote path identifier are allowed, but look after a child containing the quotes in the key\n    QVERIFY(result == \"null\");\n\n    RPCConsole::RPCExecuteCommandLine(m_node, result, \"createrawtransaction [] {} 0\"); //parameter not in brackets are allowed\n    RPCConsole::RPCExecuteCommandLine(m_node, result2, \"createrawtransaction([],{},0)\"); //parameter in brackets are allowed\n    QVERIFY(result == result2);\n    RPCConsole::RPCExecuteCommandLine(m_node, result2, \"createrawtransaction( [],  {} , 0   )\"); //whitespace between parameters is allowed\n    QVERIFY(result == result2);\n\n    RPCConsole::RPCExecuteCommandLine(m_node, result, \"getblock(getbestblockhash())[tx][0]\", &filtered);\n    QVERIFY(result == \"4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\");\n    QVERIFY(filtered == \"getblock(getbestblockhash())[tx][0]\");\n\n    RPCConsole::RPCParseCommandLine(nullptr, result, \"importprivkey\", false, &filtered);\n    QVERIFY(filtered == \"importprivkey(…)\");\n    RPCConsole::RPCParseCommandLine(nullptr, result, \"signmessagewithprivkey abc\", false, &filtered);\n    QVERIFY(filtered == \"signmessagewithprivkey(…)\");\n    RPCConsole::RPCParseCommandLine(nullptr, result, \"signmessagewithprivkey abc,def\", false, &filtered);"
    ]
  },
  {
    "id": "home-assistant/core",
    "org": "home-assistant",
    "avatarURL": "https://avatars.githubusercontent.com/u/13844975?v=4",
    "name": "home-assistant/core",
    "url": "https://github.com/home-assistant/core",
    "lang": "Python",
    "star_num": 62640,
    "fork_num": 24532,
    "snippets": [
      "\"\"\"Test AirNow diagnostics.\"\"\"\nfrom syrupy import SnapshotAssertion\n\nfrom homeassistant.core import HomeAssistant\n\nfrom tests.components.diagnostics import get_diagnostics_for_config_entry\nfrom tests.typing import ClientSessionGenerator\n\n\nasync def test_entry_diagnostics(\n    hass: HomeAssistant,\n    config_entry,\n    hass_client: ClientSessionGenerator,\n    setup_airnow,\n    snapshot: SnapshotAssertion,\n) -> None:\n    \"\"\"Test config entry diagnostics.\"\"\"\n    assert (\n        await get_diagnostics_for_config_entry(hass, hass_client, config_entry)\n        == snapshot\n    )\n",
      "\"\"\"Provide common Amber fixtures.\"\"\"\nfrom collections.abc import Generator\nfrom unittest.mock import AsyncMock, patch\n\nimport pytest\n\n\n@pytest.fixture\ndef mock_setup_entry() -> Generator[AsyncMock, None, None]:\n    \"\"\"Override async_setup_entry.\"\"\"\n    with patch(\n        \"homeassistant.components.amberelectric.async_setup_entry\", return_value=True\n    ) as mock_setup_entry:\n        yield mock_setup_entry\n",
      "\nfrom pymazda import Client as MazdaAPIClient\n\nfrom homeassistant.components.switch import SwitchEntity\nfrom homeassistant.config_entries import ConfigEntry\nfrom homeassistant.core import HomeAssistant\nfrom homeassistant.helpers.entity_platform import AddEntitiesCallback\nfrom homeassistant.helpers.update_coordinator import DataUpdateCoordinator\n\nfrom . import MazdaEntity\nfrom .const import DATA_CLIENT, DATA_COORDINATOR, DOMAIN\n\n\nasync def async_setup_entry(\n    hass: HomeAssistant,\n    config_entry: ConfigEntry,\n    async_add_entities: AddEntitiesCallback,\n) -> None:\n    \"\"\"Set up the switch platform.\"\"\"\n    client = hass.data[DOMAIN][config_entry.entry_id][DATA_CLIENT]\n    coordinator = hass.data[DOMAIN][config_entry.entry_id][DATA_COORDINATOR]\n\n    async_add_entities(\n        MazdaChargingSwitch(client, coordinator, index)\n        for index, data in enumerate(coordinator.data)\n        if data[\"isElectric\"]\n    )\n\n\nclass MazdaChargingSwitch(MazdaEntity, SwitchEntity):\n    \"\"\"Class for the charging switch.\"\"\"\n\n    _attr_translation_key = \"charging\"\n    _attr_icon = \"mdi:ev-station\"\n\n    def __init__(\n        self,\n        client: MazdaAPIClient,\n        coordinator: DataUpdateCoordinator,\n        index: int,\n    ) -> None:\n        \"\"\"Initialize Mazda charging switch.\"\"\"\n        super().__init__(client, coordinator, index)\n\n        self._attr_unique_id = self.vin\n\n    @property\n    def is_on(self):\n        \"\"\"Return true if the vehicle is charging.\"\"\"\n        return self.data[\"evStatus\"][\"chargeInfo\"][\"charging\"]\n\n    async def refresh_status_and_write_state(self):\n        \"\"\"Request a status update, retrieve it through the coordinator, and write the state.\"\"\"\n        await self.client.refresh_vehicle_status(self.vehicle_id)\n\n        await self.coordinator.async_request_refresh()\n\n        self.async_write_ha_state()\n\n    async def async_turn_on(self, **kwargs: Any) -> None:\n        \"\"\"Start charging the vehicle.\"\"\"\n        await self.client.start_charging(self.vehicle_id)\n\n        await self.refresh_status_and_write_state()",
      "\"\"\"Tests for the PECO Outage Counter integration.\"\"\"\n",
      "\"\"\"Recorder entity registry helper.\"\"\"\nimport logging\n\nfrom homeassistant.core import Event, HomeAssistant, callback\nfrom homeassistant.helpers import entity_registry as er\nfrom homeassistant.helpers.start import async_at_start\n\nfrom .core import Recorder\nfrom .util import get_instance, session_scope\n\n_LOGGER = logging.getLogger(__name__)\n\n\n@callback\ndef async_setup(hass: HomeAssistant) -> None:\n    \"\"\"Set up the entity hooks.\"\"\"\n\n    @callback\n    def _async_entity_id_changed(event: Event) -> None:\n        instance = get_instance(hass)\n        old_entity_id: str = event.data[\"old_entity_id\"]\n        new_entity_id: str = event.data[\"entity_id\"]\n        instance.async_update_statistics_metadata(\n            old_entity_id, new_statistic_id=new_entity_id\n        )\n        instance.async_update_states_metadata(\n            old_entity_id, new_entity_id=new_entity_id\n        )\n\n    @callback\n    def entity_registry_changed_filter(event: Event) -> bool:\n        \"\"\"Handle entity_id changed filter.\"\"\"\n        return event.data[\"action\"] == \"update\" and \"old_entity_id\" in event.data\n\n    @callback\n    def _setup_entity_registry_event_handler(hass: HomeAssistant) -> None:\n        \"\"\"Subscribe to event registry events.\"\"\"\n        hass.bus.async_listen(\n            er.EVENT_ENTITY_REGISTRY_UPDATED,\n            _async_entity_id_changed,\n            event_filter=entity_registry_changed_filter,\n            run_immediately=True,\n        )\n\n    async_at_start(hass, _setup_entity_registry_event_handler)\n\n\ndef update_states_metadata(\n    instance: Recorder,\n    entity_id: str,\n    new_entity_id: str,\n) -> None:\n    \"\"\"Update the states metadata table when an entity is renamed.\"\"\"\n    states_meta_manager = instance.states_meta_manager\n    if not states_meta_manager.active:\n        _LOGGER.warning(\n            \"Cannot rename entity_id `%s` to `%s` \"\n            \"because the states meta manager is not yet active\",\n            entity_id,\n            new_entity_id,\n        )\n        return\n\n    with session_scope(session=instance.get_session()) as session:",
      "CONF_UNICODE = \"unicode\"\nDEFAULT_BAUD_SPEED = \"0\"\nDEFAULT_BAUD_SPEEDS = [\n    {\"value\": DEFAULT_BAUD_SPEED, \"label\": \"Auto\"},\n    {\"value\": \"50\", \"label\": \"50\"},\n    {\"value\": \"75\", \"label\": \"75\"},\n    {\"value\": \"110\", \"label\": \"110\"},\n    {\"value\": \"134\", \"label\": \"134\"},\n    {\"value\": \"150\", \"label\": \"150\"},\n    {\"value\": \"200\", \"label\": \"200\"},\n    {\"value\": \"300\", \"label\": \"300\"},\n    {\"value\": \"600\", \"label\": \"600\"},\n    {\"value\": \"1200\", \"label\": \"1200\"},\n    {\"value\": \"1800\", \"label\": \"1800\"},\n    {\"value\": \"2400\", \"label\": \"2400\"},\n    {\"value\": \"4800\", \"label\": \"4800\"},\n    {\"value\": \"9600\", \"label\": \"9600\"},\n    {\"value\": \"19200\", \"label\": \"19200\"},\n    {\"value\": \"28800\", \"label\": \"28800\"},\n    {\"value\": \"38400\", \"label\": \"38400\"},\n    {\"value\": \"57600\", \"label\": \"57600\"},\n    {\"value\": \"76800\", \"label\": \"76800\"},\n    {\"value\": \"115200\", \"label\": \"115200\"},\n]\n",
      "        entities = []\n\n        # Look to see if payload contains new measures\n        for measure in measures:\n            if measure[\"@id\"] in measurements:\n                continue\n\n            if \"latestReading\" not in measure:\n                # Don't create a sensor entity for a gauge that isn't available\n                continue\n\n            entities.append(Measurement(hass.data[DOMAIN][station_key], measure[\"@id\"]))\n            measurements.add(measure[\"@id\"])\n\n        async_add_entities(entities)\n\n        # Turn data.measures into a dict rather than a list so easier for entities to\n        # find themselves.\n        data[\"measures\"] = {measure[\"@id\"]: measure for measure in measures}\n\n        return data\n\n    hass.data[DOMAIN][station_key] = coordinator = DataUpdateCoordinator(\n        hass,\n        _LOGGER,\n        name=\"sensor\",\n        update_method=async_update_data,\n        update_interval=timedelta(seconds=15 * 60),\n    )\n\n    # Fetch initial data so we have data when entities subscribe\n    await coordinator.async_refresh()\n\n\nclass Measurement(CoordinatorEntity, SensorEntity):\n    \"\"\"A gauge at a flood monitoring station.\"\"\"\n\n    _attr_attribution = (\n        \"This uses Environment Agency flood and river level data \"\n        \"from the real-time data API\"\n    )\n    _attr_state_class = SensorStateClass.MEASUREMENT\n    _attr_has_entity_name = True\n    _attr_name = None\n\n    def __init__(self, coordinator, key):\n        \"\"\"Initialise the gauge with a data instance and station.\"\"\"\n        super().__init__(coordinator)\n        self.key = key\n        self._attr_unique_id = key\n\n    @property\n    def station_name(self):\n        \"\"\"Return the station name for the measure.\"\"\"\n        return self.coordinator.data[\"label\"]\n\n    @property\n    def station_id(self):\n        \"\"\"Return the station id for the measure.\"\"\"\n        return self.coordinator.data[\"measures\"][self.key][\"stationReference\"]\n\n    @property\n    def qualifier(self):\n        \"\"\"Return the qualifier for the station.\"\"\"",
      "        self._controller = controller\n        self._area_name = area_name\n\n    async def async_added_to_hass(self) -> None:\n        \"\"\"Register callbacks.\"\"\"\n        self._lutron_device.subscribe(self._update_callback, None)\n\n    def _update_callback(self, _device, _context, _event, _params):\n        \"\"\"Run when invoked by pylutron when the device state changes.\"\"\"\n        self.schedule_update_ha_state()\n\n    @property\n    def name(self) -> str:\n        \"\"\"Return the name of the device.\"\"\"\n        return f\"{self._area_name} {self._lutron_device.name}\"\n\n    @property\n    def unique_id(self):\n        \"\"\"Return a unique ID.\"\"\"\n        # Temporary fix for https://github.com/thecynic/pylutron/issues/70\n        if self._lutron_device.uuid is None:\n            return None\n        return f\"{self._controller.guid}_{self._lutron_device.uuid}\"\n\n\nclass LutronButton:\n    \"\"\"Representation of a button on a Lutron keypad.\n\n    This is responsible for firing events as keypad buttons are pressed\n    (and possibly released, depending on the button type). It is not\n    represented as an entity; it simply fires events.\n    \"\"\"\n\n    def __init__(self, hass, area_name, keypad, button):\n        \"\"\"Register callback for activity on the button.\"\"\"\n        name = f\"{keypad.name}: {button.name}\"\n        if button.name == \"Unknown Button\":\n            name += f\" {button.number}\"\n        self._hass = hass\n        self._has_release_event = (\n            button.button_type is not None and \"RaiseLower\" in button.button_type\n        )\n        self._id = slugify(name)\n        self._keypad = keypad\n        self._area_name = area_name\n        self._button_name = button.name\n        self._button = button\n        self._event = \"lutron_event\"\n        self._full_id = slugify(f\"{area_name} {name}\")\n        self._uuid = button.uuid\n\n        button.subscribe(self.button_callback, None)\n\n    def button_callback(self, button, context, event, params):\n        \"\"\"Fire an event about a button being pressed or released.\"\"\"\n        # Events per button type:\n        #   RaiseLower -> pressed/released\n        #   SingleAction -> single\n        action = None\n        if self._has_release_event:\n            if event == Button.Event.PRESSED:\n                action = \"pressed\"\n            else:\n                action = \"released\"",
      "    )\n    entry.add_to_hass(hass)\n\n    entity_registry = er.async_get(hass)\n    entity: er.RegistryEntry = entity_registry.async_get_or_create(\n        **entitydata,\n        config_entry=entry,\n    )\n    assert entity.unique_id == old_unique_id\n    assert await hass.config_entries.async_setup(entry.entry_id)\n    await hass.async_block_till_done()\n\n    entity_migrated = entity_registry.async_get(entity.entity_id)\n    assert entity_migrated\n    assert entity_migrated.unique_id == new_unique_id\n\n\n@pytest.mark.parametrize(\n    (\"entitydata\", \"unique_id\"),\n    [\n        (\n            {\n                \"domain\": SENSOR_DOMAIN,\n                \"platform\": FB_DOMAIN,\n                \"unique_id\": f\"{CONF_FAKE_AIN}_temperature\",\n                \"unit_of_measurement\": UnitOfTemperature.CELSIUS,\n            },\n            f\"{CONF_FAKE_AIN}_temperature\",\n        ),\n        (\n            {\n                \"domain\": BINARY_SENSOR_DOMAIN,\n                \"platform\": FB_DOMAIN,\n                \"unique_id\": f\"{CONF_FAKE_AIN}_alarm\",\n            },\n            f\"{CONF_FAKE_AIN}_alarm\",\n        ),\n        (\n            {\n                \"domain\": BINARY_SENSOR_DOMAIN,\n                \"platform\": FB_DOMAIN,\n                \"unique_id\": f\"{CONF_FAKE_AIN}_other\",\n            },\n            f\"{CONF_FAKE_AIN}_other\",\n        ),\n    ],\n)\nasync def test_update_unique_id_no_change(\n    hass: HomeAssistant,\n    fritz: Mock,\n    entitydata: dict,\n    unique_id: str,\n) -> None:\n    \"\"\"Test unique_id is not updated of integration.\"\"\"\n    entry = MockConfigEntry(\n        domain=FB_DOMAIN,\n        data=MOCK_CONFIG[FB_DOMAIN][CONF_DEVICES][0],\n        unique_id=\"any\",\n    )\n    entry.add_to_hass(hass)\n\n    entity_registry = er.async_get(hass)\n    entity = entity_registry.async_get_or_create(\n        **entitydata,",
      "\"\"\"The tests for the litejet component.\"\"\"\nfrom homeassistant.core import HomeAssistant\n\nfrom . import async_init_integration\n\nfrom tests.components.diagnostics import get_diagnostics_for_config_entry\nfrom tests.typing import ClientSessionGenerator\n\n\nasync def test_diagnostics(\n    hass: HomeAssistant, hass_client: ClientSessionGenerator, mock_litejet\n) -> None:\n    \"\"\"Test getting the LiteJet diagnostics.\"\"\"\n\n    config_entry = await async_init_integration(hass)\n\n    diag = await get_diagnostics_for_config_entry(hass, hass_client, config_entry)\n\n    assert diag == {\n        \"loads\": [1, 2],\n        \"button_switches\": [1, 2],\n        \"scenes\": [1, 2],\n        \"connected\": True,\n    }\n"
    ]
  },
  {
    "id": "hashicorp/terraform",
    "org": "hashicorp",
    "avatarURL": "https://avatars.githubusercontent.com/u/761456?v=4",
    "name": "hashicorp/terraform",
    "url": "https://github.com/hashicorp/terraform",
    "lang": "Go",
    "star_num": 38737,
    "fork_num": 9017,
    "snippets": [
      "\nimport \"strconv\"\n\nfunc _() {\n\t// An \"invalid array index\" compiler error signifies that the constant values have changed.\n\t// Re-run the stringer command to generate them again.\n\tvar x [1]struct{}\n\t_ = x[nestingModeInvalid-0]\n\t_ = x[NestingSingle-1]\n\t_ = x[NestingGroup-2]\n\t_ = x[NestingList-3]\n\t_ = x[NestingSet-4]\n\t_ = x[NestingMap-5]\n}\n\nconst _NestingMode_name = \"nestingModeInvalidNestingSingleNestingGroupNestingListNestingSetNestingMap\"\n\nvar _NestingMode_index = [...]uint8{0, 18, 31, 43, 54, 64, 74}\n\nfunc (i NestingMode) String() string {\n\tif i < 0 || i >= NestingMode(len(_NestingMode_index)-1) {\n\t\treturn \"NestingMode(\" + strconv.FormatInt(int64(i), 10) + \")\"\n\t}\n\treturn _NestingMode_name[_NestingMode_index[i]:_NestingMode_index[i+1]]\n}\n",
      "\t\t\"prefix\": statePrefix,\n\t})).(*Backend)\n\n\tb2 := backend.TestBackendConfig(t, New(), backend.TestWrapConfig(map[string]interface{}{\n\t\t\"bucket\": bucketName,\n\t\t\"prefix\": statePrefix,\n\t})).(*Backend)\n\n\tcreateOSSBucket(t, b1.ossClient, bucketName)\n\tdefer deleteOSSBucket(t, b1.ossClient, bucketName)\n\n\tbackend.TestBackendStates(t, b1)\n\tbackend.TestBackendStateLocks(t, b1, b2)\n\tbackend.TestBackendStateForceUnlock(t, b1, b2)\n}\n\nfunc createOSSBucket(t *testing.T, ossClient *oss.Client, bucketName string) {\n\t// Be clear about what we're doing in case the user needs to clean this up later.\n\tif err := ossClient.CreateBucket(bucketName); err != nil {\n\t\tt.Fatal(\"failed to create test OSS bucket:\", err)\n\t}\n}\n\nfunc deleteOSSBucket(t *testing.T, ossClient *oss.Client, bucketName string) {\n\twarning := \"WARNING: Failed to delete the test OSS bucket. It may have been left in your Alibaba Cloud account and may incur storage charges. (error was %s)\"\n\n\t// first we have to get rid of the env objects, or we can't delete the bucket\n\tbucket, err := ossClient.Bucket(bucketName)\n\tif err != nil {\n\t\tt.Fatal(\"Error getting bucket:\", err)\n\t\treturn\n\t}\n\tobjects, err := bucket.ListObjects()\n\tif err != nil {\n\t\tt.Logf(warning, err)\n\t\treturn\n\t}\n\tfor _, obj := range objects.Objects {\n\t\tif err := bucket.DeleteObject(obj.Key); err != nil {\n\t\t\t// this will need cleanup no matter what, so just warn and exit\n\t\t\tt.Logf(warning, err)\n\t\t\treturn\n\t\t}\n\t}\n\n\tif err := ossClient.DeleteBucket(bucketName); err != nil {\n\t\tt.Logf(warning, err)\n\t}\n}\n\n// create the tablestore table, and wait until we can query it.\nfunc createTablestoreTable(t *testing.T, otsClient *tablestore.TableStoreClient, tableName string) {\n\ttableMeta := new(tablestore.TableMeta)\n\ttableMeta.TableName = tableName\n\ttableMeta.AddPrimaryKeyColumn(pkName, tablestore.PrimaryKeyType_STRING)\n\n\ttableOption := new(tablestore.TableOption)\n\ttableOption.TimeToAlive = -1\n\ttableOption.MaxVersion = 1\n\n\treservedThroughput := new(tablestore.ReservedThroughput)\n\n\t_, err := otsClient.CreateTable(&tablestore.CreateTableRequest{\n\t\tTableMeta:          tableMeta,",
      "// Copyright (c) HashiCorp, Inc.\n// SPDX-License-Identifier: BUSL-1.1\n\npackage terraform\n\nimport \"os\"\n\n// This file holds feature flags for the next release\n\nvar flagWarnOutputErrors = os.Getenv(\"TF_WARN_OUTPUT_ERRORS\") != \"\"\n",
      "\t\t{\n\t\t\tModule{\"a\"},\n\t\t\tModule{\"b\"},\n\t\t},\n\t\t{\n\t\t\tModule{\"a\"},\n\t\t\tModule{\"a\", \"a\"},\n\t\t},\n\t\t{\n\t\t\tModule{\"a\", \"b\"},\n\t\t\tModule{\"a\", \"B\"},\n\t\t},\n\t}\n\tfor _, tc := range testCases {\n\t\tt.Run(fmt.Sprintf(\"%s = %s\", tc.left, tc.right), func(t *testing.T) {\n\t\t\tif tc.left.Equal(tc.right) {\n\t\t\t\tt.Fatalf(\"expected %#v not to be equal to %#v\", tc.left, tc.right)\n\t\t\t}\n\n\t\t\tif tc.right.Equal(tc.left) {\n\t\t\t\tt.Fatalf(\"expected %#v not to be equal to %#v\", tc.right, tc.left)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc TestModuleString(t *testing.T) {\n\ttestCases := map[string]Module{\n\t\t\"\": {},\n\t\t\"module.alpha\": {\n\t\t\t\"alpha\",\n\t\t},\n\t\t\"module.alpha.module.beta\": {\n\t\t\t\"alpha\",\n\t\t\t\"beta\",\n\t\t},\n\t\t\"module.alpha.module.beta.module.charlie\": {\n\t\t\t\"alpha\",\n\t\t\t\"beta\",\n\t\t\t\"charlie\",\n\t\t},\n\t}\n\tfor str, module := range testCases {\n\t\tt.Run(str, func(t *testing.T) {\n\t\t\tif got, want := module.String(), str; got != want {\n\t\t\t\tt.Errorf(\"wrong result: got %q, want %q\", got, want)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunc BenchmarkModuleStringShort(b *testing.B) {\n\tmodule := Module{\"a\", \"b\"}\n\tfor n := 0; n < b.N; n++ {\n\t\tmodule.String()\n\t}\n}\n\nfunc BenchmarkModuleStringLong(b *testing.B) {\n\tmodule := Module{\"southamerica-brazil-region\", \"user-regional-desktop\", \"user-name\"}\n\tfor n := 0; n < b.N; n++ {\n\t\tmodule.String()\n\t}\n}",
      "\t// Linking should, in most cases, be a much faster operation than\n\t// fetching. However, it could still potentially be slow in some unusual\n\t// cases like a particularly large source package on a system where symlinks\n\t// are impossible, or when either of the cache directories are on a network\n\t// filesystem accessed over a slow link.\n\tLinkFromCacheBegin   func(provider addrs.Provider, version getproviders.Version, cacheRoot string)\n\tLinkFromCacheSuccess func(provider addrs.Provider, version getproviders.Version, localDir string)\n\tLinkFromCacheFailure func(provider addrs.Provider, version getproviders.Version, err error)\n\n\t// The FetchPackage... family of events delimit the operation of retrieving\n\t// a package from a particular source location.\n\t//\n\t// A particular install operation includes only one fetch per distinct\n\t// provider, so a caller can use the provider argument as a unique\n\t// identifier to correlate between successive events.\n\t//\n\t// A particular provider will either notify the LinkFromCache... events\n\t// or the FetchPackage... events, never both in the same install operation.\n\t//\n\t// The Query, Begin, Success, and Failure events will each occur only once\n\t// per distinct provider.\n\tFetchPackageMeta    func(provider addrs.Provider, version getproviders.Version) // fetching metadata prior to real download\n\tFetchPackageBegin   func(provider addrs.Provider, version getproviders.Version, location getproviders.PackageLocation)\n\tFetchPackageSuccess func(provider addrs.Provider, version getproviders.Version, localDir string, authResult *getproviders.PackageAuthenticationResult)\n\tFetchPackageFailure func(provider addrs.Provider, version getproviders.Version, err error)\n\n\t// The ProvidersLockUpdated event is called whenever the lock file will be\n\t// updated. It provides the following information:\n\t//\n\t//   - `localHashes`: Hashes computed on the local system by analyzing\n\t//                    files on disk.\n\t//   - `signedHashes`: Hashes signed by the private key that the origin\n\t//                     registry claims is the owner of this provider.\n\t//   - `priorHashes`: Hashes already present in the lock file before we\n\t//                    made any changes.\n\t//\n\t// The final lock file will be updated with a union of all the provided\n\t// hashes. It not just likely, but expected that there will be duplicates\n\t// shared between all three collections of hashes i.e. the local hash and\n\t// remote hashes could already be in the cached hashes.\n\t//\n\t// In addition, we place a guarantee that the hash slices will be ordered\n\t// in the same manner enforced by the lock file within NewProviderLock.\n\tProvidersLockUpdated func(provider addrs.Provider, version getproviders.Version, localHashes []getproviders.Hash, signedHashes []getproviders.Hash, priorHashes []getproviders.Hash)\n\n\t// The ProvidersFetched event is called after all fetch operations if at\n\t// least one provider was fetched successfully.\n\tProvidersFetched func(authResults map[addrs.Provider]*getproviders.PackageAuthenticationResult)\n}\n\n// OnContext produces a context with all of the same behaviors as the given\n// context except that it will additionally carry the receiving\n// InstallerEvents.\n//\n// Passing the resulting context to an installer request will cause the\n// installer to send event notifications via the callbacks inside.\nfunc (e *InstallerEvents) OnContext(ctx context.Context) context.Context {\n\treturn context.WithValue(ctx, ctxInstallerEvents, e)\n}\n\n// installerEventsForContext looks on the given context for a registered\n// InstallerEvents and returns a pointer to it if so.\n//\n// For caller convenience, if there is no events object attached to the",
      "\t\t\tSeverity:  proto.Diagnostic_ERROR,\n\t\t\tSummary:   d.Error(),\n\t\t\tAttribute: ap,\n\t\t})\n\tcase error:\n\t\tdiags = append(diags, &proto.Diagnostic{\n\t\t\tSeverity: proto.Diagnostic_ERROR,\n\t\t\tSummary:  d.Error(),\n\t\t})\n\tcase string:\n\t\tdiags = append(diags, &proto.Diagnostic{\n\t\t\tSeverity: proto.Diagnostic_WARNING,\n\t\t\tSummary:  d,\n\t\t})\n\tcase *proto.Diagnostic:\n\t\tdiags = append(diags, d)\n\tcase []*proto.Diagnostic:\n\t\tdiags = append(diags, d...)\n\t}\n\treturn diags\n}\n\n// ProtoToDiagnostics converts a list of proto.Diagnostics to a tf.Diagnostics.\nfunc ProtoToDiagnostics(ds []*proto.Diagnostic) tfdiags.Diagnostics {\n\tvar diags tfdiags.Diagnostics\n\tfor _, d := range ds {\n\t\tvar severity tfdiags.Severity\n\n\t\tswitch d.Severity {\n\t\tcase proto.Diagnostic_ERROR:\n\t\t\tseverity = tfdiags.Error\n\t\tcase proto.Diagnostic_WARNING:\n\t\t\tseverity = tfdiags.Warning\n\t\t}\n\n\t\tvar newDiag tfdiags.Diagnostic\n\n\t\t// if there's an attribute path, we need to create a AttributeValue diagnostic\n\t\tif d.Attribute != nil {\n\t\t\tpath := AttributePathToPath(d.Attribute)\n\t\t\tnewDiag = tfdiags.AttributeValue(severity, d.Summary, d.Detail, path)\n\t\t} else {\n\t\t\tnewDiag = tfdiags.WholeContainingBody(severity, d.Summary, d.Detail)\n\t\t}\n\n\t\tdiags = diags.Append(newDiag)\n\t}\n\n\treturn diags\n}\n\n// AttributePathToPath takes the proto encoded path and converts it to a cty.Path\nfunc AttributePathToPath(ap *proto.AttributePath) cty.Path {\n\tvar p cty.Path\n\tfor _, step := range ap.Steps {\n\t\tswitch selector := step.Selector.(type) {\n\t\tcase *proto.AttributePath_Step_AttributeName:\n\t\t\tp = p.GetAttr(selector.AttributeName)\n\t\tcase *proto.AttributePath_Step_ElementKeyString:\n\t\t\tp = p.Index(cty.StringVal(selector.ElementKeyString))\n\t\tcase *proto.AttributePath_Step_ElementKeyInt:\n\t\t\tp = p.Index(cty.NumberIntVal(selector.ElementKeyInt))\n\t\t}\n\t}",
      "\t\"github.com/hashicorp/terraform/internal/communicator/remote\"\n\t\"github.com/hashicorp/terraform/internal/configs/configschema\"\n\t\"github.com/hashicorp/terraform/internal/provisioners\"\n\t\"github.com/hashicorp/terraform/internal/tfdiags\"\n\t\"github.com/mitchellh/go-linereader\"\n\t\"github.com/zclconf/go-cty/cty\"\n)\n\nfunc New() provisioners.Interface {\n\tctx, cancel := context.WithCancel(context.Background())\n\treturn &provisioner{\n\t\tctx:    ctx,\n\t\tcancel: cancel,\n\t}\n}\n\ntype provisioner struct {\n\t// We store a context here tied to the lifetime of the provisioner.\n\t// This allows the Stop method to cancel any in-flight requests.\n\tctx    context.Context\n\tcancel context.CancelFunc\n}\n\nfunc (p *provisioner) GetSchema() (resp provisioners.GetSchemaResponse) {\n\tschema := &configschema.Block{\n\t\tAttributes: map[string]*configschema.Attribute{\n\t\t\t\"inline\": {\n\t\t\t\tType:     cty.List(cty.String),\n\t\t\t\tOptional: true,\n\t\t\t},\n\t\t\t\"script\": {\n\t\t\t\tType:     cty.String,\n\t\t\t\tOptional: true,\n\t\t\t},\n\t\t\t\"scripts\": {\n\t\t\t\tType:     cty.List(cty.String),\n\t\t\t\tOptional: true,\n\t\t\t},\n\t\t},\n\t}\n\n\tresp.Provisioner = schema\n\treturn resp\n}\n\nfunc (p *provisioner) ValidateProvisionerConfig(req provisioners.ValidateProvisionerConfigRequest) (resp provisioners.ValidateProvisionerConfigResponse) {\n\tcfg, err := p.GetSchema().Provisioner.CoerceValue(req.Config)\n\tif err != nil {\n\t\tresp.Diagnostics = resp.Diagnostics.Append(tfdiags.WholeContainingBody(\n\t\t\ttfdiags.Error,\n\t\t\t\"Invalid remote-exec provisioner configuration\",\n\t\t\terr.Error(),\n\t\t))\n\t\treturn resp\n\t}\n\n\tinline := cfg.GetAttr(\"inline\")\n\tscript := cfg.GetAttr(\"script\")\n\tscripts := cfg.GetAttr(\"scripts\")\n\n\tset := 0\n\tif !inline.IsNull() {\n\t\tset++\n\t}",
      "\tcase 69 <= i && i <= 70:\n\t\ti -= 69\n\t\treturn _Status_name_1[_Status_index_1[i]:_Status_index_1[i+1]]\n\tcase i == 80:\n\t\treturn _Status_name_2\n\tdefault:\n\t\treturn \"Status(\" + strconv.FormatInt(int64(i), 10) + \")\"\n\t}\n}\n",
      "\t\t\tvs[v] = struct{}{}\n\t\t}\n\t\tif len(warningsResp) > 0 {\n\t\t\twarnings = append(warnings, warningsResp...)\n\t\t}\n\t}\n\n\tif len(vs) == 0 {\n\t\tif registryError {\n\t\t\treturn nil, nil, ErrRegistryProviderNotKnown{provider}\n\t\t} else {\n\t\t\treturn nil, nil, ErrProviderNotFound{provider, s.sourcesForProvider(provider)}\n\t\t}\n\t}\n\tret := make(VersionList, 0, len(vs))\n\tfor v := range vs {\n\t\tret = append(ret, v)\n\t}\n\tret.Sort()\n\n\treturn ret, warnings, nil\n}\n\n// PackageMeta retrieves the package metadata for the requested provider package\n// from the first selector that indicates availability of it.\nfunc (s MultiSource) PackageMeta(ctx context.Context, provider addrs.Provider, version Version, target Platform) (PackageMeta, error) {\n\tif len(s) == 0 { // Easy case: no providers exist at all\n\t\treturn PackageMeta{}, ErrProviderNotFound{provider, s.sourcesForProvider(provider)}\n\t}\n\n\tfor _, selector := range s {\n\t\tif !selector.CanHandleProvider(provider) {\n\t\t\tcontinue // doesn't match the given patterns\n\t\t}\n\t\tmeta, err := selector.Source.PackageMeta(ctx, provider, version, target)\n\t\tswitch err.(type) {\n\t\tcase nil:\n\t\t\treturn meta, nil\n\t\tcase ErrProviderNotFound, ErrRegistryProviderNotKnown, ErrPlatformNotSupported:\n\t\t\tcontinue // ignore, then\n\t\tdefault:\n\t\t\treturn PackageMeta{}, err\n\t\t}\n\t}\n\n\t// If we fall out here then none of the sources have the requested\n\t// package.\n\treturn PackageMeta{}, ErrPlatformNotSupported{\n\t\tProvider: provider,\n\t\tVersion:  version,\n\t\tPlatform: target,\n\t}\n}\n\n// MultiSourceSelector is an element of the source selection configuration on\n// MultiSource. A MultiSource has zero or more of these to configure which\n// underlying sources it should consult for a given provider.\ntype MultiSourceSelector struct {\n\t// Source is the underlying source that this selector applies to.\n\tSource Source\n\n\t// Include and Exclude are sets of provider matching patterns that\n\t// together define which providers are eligible to be potentially\n\t// installed from the corresponding Source.",
      "\t\t\t&Target{\n\t\t\t\tSubject: AbsResourceInstance{\n\t\t\t\t\tResource: ResourceInstance{\n\t\t\t\t\t\tResource: Resource{\n\t\t\t\t\t\t\tMode: DataResourceMode,\n\t\t\t\t\t\t\tType: \"aws_instance\",\n\t\t\t\t\t\t\tName: \"baz\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\tKey: StringKey(\"hello\"),\n\t\t\t\t\t},\n\t\t\t\t\tModule: ModuleInstance{\n\t\t\t\t\t\t{Name: \"foo\"},\n\t\t\t\t\t\t{Name: \"bar\"},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tSourceRange: tfdiags.SourceRange{\n\t\t\t\t\tStart: tfdiags.SourcePos{Line: 1, Column: 1, Byte: 0},\n\t\t\t\t\tEnd:   tfdiags.SourcePos{Line: 1, Column: 53, Byte: 52},\n\t\t\t\t},\n\t\t\t},\n\t\t\t``,\n\t\t},\n\n\t\t{\n\t\t\t`aws_instance`,\n\t\t\tnil,\n\t\t\t`Resource specification must include a resource type and name.`,\n\t\t},\n\t\t{\n\t\t\t`module`,\n\t\t\tnil,\n\t\t\t`Prefix \"module.\" must be followed by a module name.`,\n\t\t},\n\t\t{\n\t\t\t`module[\"baz\"]`,\n\t\t\tnil,\n\t\t\t`Prefix \"module.\" must be followed by a module name.`,\n\t\t},\n\t\t{\n\t\t\t`module.baz.bar`,\n\t\t\tnil,\n\t\t\t`Resource specification must include a resource type and name.`,\n\t\t},\n\t\t{\n\t\t\t`aws_instance.foo.bar`,\n\t\t\tnil,\n\t\t\t`Resource instance key must be given in square brackets.`,\n\t\t},\n\t\t{\n\t\t\t`aws_instance.foo[1].baz`,\n\t\t\tnil,\n\t\t\t`Unexpected extra operators after address.`,\n\t\t},\n\t}\n\n\tfor _, test := range tests {\n\t\tt.Run(test.Input, func(t *testing.T) {\n\t\t\ttraversal, travDiags := hclsyntax.ParseTraversalAbs([]byte(test.Input), \"\", hcl.Pos{Line: 1, Column: 1})\n\t\t\tif travDiags.HasErrors() {\n\t\t\t\tt.Fatal(travDiags.Error())\n\t\t\t}\n\n\t\t\tgot, diags := ParseTarget(traversal)\n"
    ]
  },
  {
    "id": "jekyll/jekyll",
    "org": "jekyll",
    "avatarURL": "https://avatars.githubusercontent.com/u/3083652?v=4",
    "name": "jekyll/jekyll",
    "url": "https://github.com/jekyll/jekyll",
    "lang": "Ruby",
    "star_num": 47187,
    "fork_num": 10185,
    "snippets": [
      "# frozen_string_literal: true\n\n# For testing excerpt handling of custom tags\n\nmodule Jekyll\n  class DoNothingBlock < Liquid::Block\n  end\n\n  class DoNothingOther < Liquid::Tag\n  end\nend\n\nLiquid::Template.register_tag(\"do_nothing\", Jekyll::DoNothingBlock)\nLiquid::Template.register_tag(\"do_nothing_other\", Jekyll::DoNothingOther)\n",
      "\nmodule Jekyll\n  module Hooks\n    DEFAULT_PRIORITY = 20\n\n    # compatibility layer for octopress-hooks users\n    PRIORITY_MAP = {\n      :low    => 10,\n      :normal => 20,\n      :high   => 30,\n    }.freeze\n\n    # initial empty hooks\n    @registry = {\n      :site      => {\n        :after_init  => [],\n        :after_reset => [],\n        :post_read   => [],\n        :pre_render  => [],\n        :post_render => [],\n        :post_write  => [],\n      },\n      :pages     => {\n        :post_init    => [],\n        :pre_render   => [],\n        :post_convert => [],\n        :post_render  => [],\n        :post_write   => [],\n      },\n      :posts     => {\n        :post_init    => [],\n        :pre_render   => [],\n        :post_convert => [],\n        :post_render  => [],\n        :post_write   => [],\n      },\n      :documents => {\n        :post_init    => [],\n        :pre_render   => [],\n        :post_convert => [],\n        :post_render  => [],\n        :post_write   => [],\n      },\n      :clean     => {\n        :on_obsolete => [],\n      },\n    }\n\n    # map of all hooks and their priorities\n    @hook_priority = {}\n\n    NotAvailable = Class.new(RuntimeError)\n    Uncallable = Class.new(RuntimeError)\n\n    # register hook(s) to be called later, public API\n    def self.register(owners, event, priority: DEFAULT_PRIORITY, &block)\n      Array(owners).each do |owner|\n        register_one(owner, event, priority_value(priority), &block)\n      end\n    end\n\n    # Ensure the priority is a Fixnum\n    def self.priority_value(priority)\n      return priority if priority.is_a?(Integer)",
      "                        'type: #{current}'.\"\n    end\n  end\nend\n",
      "# frozen_string_literal: true\n\nmodule Jekyll\n  module Drops\n    class StaticFileDrop < Drop\n      extend Forwardable\n      delegate_methods   :name, :extname, :modified_time, :basename\n      delegate_method_as :relative_path, :path\n      delegate_method_as :type, :collection\n\n      private delegate_method_as :data, :fallback_data\n    end\n  end\nend\n",
      "          rescue Liquid::Error => e\n            e.template_name = path\n            e.markup_context = \"included \" if e.markup_context.nil?\n            raise e\n          end\n        end\n      end\n\n      def add_include_to_dependency(site, path, context)\n        if context.registers[:page]&.key?(\"path\")\n          site.regenerator.add_dependency(\n            site.in_source_dir(context.registers[:page][\"path\"]),\n            path\n          )\n        end\n      end\n\n      def load_cached_partial(path, context)\n        context.registers[:cached_partials] ||= {}\n        cached_partial = context.registers[:cached_partials]\n\n        if cached_partial.key?(path)\n          cached_partial[path]\n        else\n          unparsed_file = context.registers[:site]\n            .liquid_renderer\n            .file(path)\n          begin\n            cached_partial[path] = unparsed_file.parse(read_file(path, context))\n          rescue Liquid::Error => e\n            e.template_name = path\n            e.markup_context = \"included \" if e.markup_context.nil?\n            raise e\n          end\n        end\n      end\n\n      def valid_include_file?(path, dir, safe)\n        !outside_site_source?(path, dir, safe) && File.file?(path)\n      end\n\n      def outside_site_source?(path, dir, safe)\n        safe && !realpath_prefixed_with?(path, dir)\n      end\n\n      def realpath_prefixed_with?(path, dir)\n        File.exist?(path) && File.realpath(path).start_with?(dir)\n      rescue StandardError\n        false\n      end\n\n      # This method allows to modify the file content by inheriting from the class.\n      def read_file(file, context)\n        File.read(file, **file_read_opts(context))\n      end\n\n      private\n\n      def could_not_locate_message(file, includes_dirs, safe)\n        message = \"Could not locate the included file '#{file}' in any of #{includes_dirs}. \" \\\n                  \"Ensure it exists in one of those directories and\"\n        message + if safe\n                    \" is not a symlink as those are not allowed in safe mode.\"\n                  else",
      "        end\n        # rubocop:enable Metrics/AbcSize\n\n        # Do a base pre-setup of WEBRick so that everything is in place\n        # when we get ready to party, checking for an setting up an error page\n        # and making sure our destination exists.\n        #\n        # rubocop:disable Security/IoMethods\n        def setup(destination)\n          require_relative \"serve/servlet\"\n\n          FileUtils.mkdir_p(destination)\n          if File.exist?(File.join(destination, \"404.html\"))\n            WEBrick::HTTPResponse.class_eval do\n              def create_error_page\n                @header[\"Content-Type\"] = \"text/html; charset=UTF-8\"\n                @body = IO.read(File.join(@config[:DocumentRoot], \"404.html\"))\n              end\n            end\n          end\n        end\n        # rubocop:enable Security/IoMethods\n\n        def webrick_opts(opts)\n          opts = {\n            :JekyllOptions      => opts,\n            :DoNotReverseLookup => true,\n            :MimeTypes          => mime_types,\n            :MimeTypesCharset   => mime_types_charset,\n            :DocumentRoot       => opts[\"destination\"],\n            :StartCallback      => start_callback(opts[\"detach\"]),\n            :StopCallback       => stop_callback(opts[\"detach\"]),\n            :BindAddress        => opts[\"host\"],\n            :Port               => opts[\"port\"],\n            :DirectoryIndex     => DIRECTORY_INDEX,\n          }\n\n          opts[:DirectoryIndex] = [] if opts[:JekyllOptions][\"show_dir_listing\"]\n\n          enable_ssl(opts)\n          enable_logging(opts)\n          opts\n        end\n\n        def start_up_webrick(opts, destination)\n          @reload_reactor.start(opts) if opts[\"livereload\"]\n\n          @server = WEBrick::HTTPServer.new(webrick_opts(opts)).tap { |o| o.unmount(\"\") }\n          @server.mount(opts[\"baseurl\"].to_s, Servlet, destination, file_handler_opts)\n\n          Jekyll.logger.info \"Server address:\", server_address(@server, opts)\n          launch_browser @server, opts if opts[\"open_url\"]\n          boot_or_detach @server, opts\n        end\n\n        # Recreate NondisclosureName under utf-8 circumstance\n        def file_handler_opts\n          WEBrick::Config::FileHandler.merge(\n            :FancyIndexing     => true,\n            :NondisclosureName => [\n              \".ht*\", \"~*\",\n            ]\n          )\n        end",
      "      assert_equal @js_output, File.read(@test_coffeescript_file)\n    end\n  end\nend\n",
      "# frozen_string_literal: true\n\nrequire \"helper\"\n\nclass TestRelatedPosts < JekyllUnitTest\n  context \"building related posts without lsi\" do\n    setup do\n      @site = fixture_site\n    end\n\n    should \"use the most recent posts for related posts\" do\n      @site.reset\n      @site.read\n\n      last_post     = @site.posts.last\n      related_posts = Jekyll::RelatedPosts.new(last_post).build\n\n      last_ten_recent_posts = (@site.posts.docs.reverse - [last_post]).first(10)\n      assert_equal last_ten_recent_posts, related_posts\n    end\n  end\n\n  context \"building related posts with LSI\" do\n    setup do\n      if jruby?\n        skip(\n          \"JRuby does not perform well with CExt, test disabled.\"\n        )\n      end\n\n      allow_any_instance_of(Jekyll::RelatedPosts).to receive(:display)\n      @site = fixture_site(\n        \"lsi\" => true\n      )\n\n      @site.reset\n      @site.read\n      require \"classifier-reborn\"\n      Jekyll::RelatedPosts.lsi = nil\n    end\n\n    should \"index Jekyll::Post objects\" do\n      @site.posts.docs = @site.posts.docs.first(1)\n      expect_any_instance_of(::ClassifierReborn::LSI).to \\\n        receive(:add_item).with(kind_of(Jekyll::Document))\n      Jekyll::RelatedPosts.new(@site.posts.last).build_index\n    end\n\n    should \"find related Jekyll::Post objects, given a Jekyll::Post object\" do\n      post = @site.posts.last\n      allow_any_instance_of(::ClassifierReborn::LSI).to receive(:build_index)\n      expect_any_instance_of(::ClassifierReborn::LSI).to \\\n        receive(:find_related).with(post, 11).and_return(@site.posts[-1..-9])\n\n      Jekyll::RelatedPosts.new(post).build\n    end\n\n    should \"use LSI for the related posts\" do\n      allow_any_instance_of(::ClassifierReborn::LSI).to \\\n        receive(:find_related).and_return(@site.posts[-1..-9])\n      allow_any_instance_of(::ClassifierReborn::LSI).to receive(:build_index)\n\n      assert_equal @site.posts[-1..-9], Jekyll::RelatedPosts.new(@site.posts.last).build\n    end",
      "    end\n  end\nend\n",
      "    end\n  end\nend\n"
    ]
  },
  {
    "id": "freeCodeCamp/freeCodeCamp",
    "org": "freeCodeCamp",
    "avatarURL": "https://avatars.githubusercontent.com/u/9892522?v=4",
    "name": "freeCodeCamp/freeCodeCamp",
    "url": "https://github.com/freeCodeCamp/freeCodeCamp",
    "lang": "JavaScript",
    "star_num": 373017,
    "fork_num": 33427,
    "snippets": [
      "import { csrfOptions } from './csurf.js';\n\nexport default function setCSRFCookie() {\n  return function (req, res, next) {\n    // not all paths require a CSRF token, so the function may not be available.\n    if (req.csrfToken && !req.cookies.csrf_token) {\n      // use the middleware to generate a token. The client sends this back via\n      // a header\n      res.cookie('csrf_token', req.csrfToken(), csrfOptions);\n    }\n    next();\n  };\n}\n",
      "      ...state,\n      isSearchBarFocused: payload\n    }),\n    [types.updateSearchQuery]: (state, { payload }) => {\n      return {\n        ...state,\n        query: payload\n      };\n    }\n  },\n  initialState\n);\n",
      "      {\n        href: 'https://api.sandbox.paypal.com/v1/notifications/webhooks-events/WH-1VF24938EU372274X-83540367M0110254R',\n        rel: 'self',\n        method: 'GET'\n      },\n      {\n        href: 'https://api.sandbox.paypal.com/v1/notifications/webhooks-events/WH-1VF24938EU372274X-83540367M0110254R/resend',\n        rel: 'resend',\n        method: 'POST'\n      }\n    ]\n  }\n};\nexport const mockActivationHook = {\n  headers: {\n    host: 'a47fb0f4.ngrok.io',\n    accept: '*/*',\n    'paypal-transmission-id': '22103660-5f7d-11ea-8ac4-7d4e2605c70c',\n    'paypal-transmission-time': '2020-03-06T07:36:03Z',\n    'paypal-transmission-sig':\n      'a;sldfn;lqwjhepjtn12l3n5123mnpu1i-sc-_+++dsflqenwpk1n234uthmsqwr123',\n    'paypal-auth-version': 'v2',\n    'paypal-cert-url':\n      'https://api.sandbox.paypal.com/v1/notifications/certs/CERT-360caa42-fca2a594-1d93a270',\n    'paypal-auth-algo': 'SHASHASHA',\n    'content-type': 'application/json',\n    'user-agent': 'PayPal/AUHD-214.0-54280748',\n    'correlation-id': 'e0b25772e11af',\n    client_pid: '14973',\n    'content-length': '2201',\n    'x-forwarded-proto': 'https',\n    'x-forwarded-for': '173.0.82.126'\n  },\n  body: {\n    id: 'WH-77687562XN25889J8-8Y6T55435R66168T6',\n    create_time: '2018-19-12T22:20:32.000Z',\n    resource_type: 'subscription',\n    event_type: 'BILLING.SUBSCRIPTION.ACTIVATED',\n    summary: 'A billing agreement was activated.',\n    resource: {\n      quantity: '20',\n      subscriber: {\n        name: {\n          given_name: 'John',\n          surname: 'Doe'\n        },\n        email_address: 'donor@freecodecamp.com',\n        shipping_address: {\n          name: {\n            full_name: 'John Doe'\n          },\n          address: {\n            address_line_1: '2211 N First Street',\n            address_line_2: 'Building 17',\n            admin_area_2: 'San Jose',\n            admin_area_1: 'CA',\n            postal_code: '95131',\n            country_code: 'US'\n          }\n        }\n      },\n      create_time: '2018-12-10T21:20:49Z',\n      shipping_amount: {\n        currency_code: 'USD',",
      "\n          worker.postMessage(data);\n        },\n        err => this.emit('error', err)\n      );\n      return this;\n    };\n\n    task.done = new Promise((resolve, reject) => {\n      task\n        .once('done', data => resolve(data))\n        .once('error', err => reject(err.message));\n    });\n\n    this._taskQueue.push(task);\n    this._processQueue();\n    return task;\n  }\n}\n\n// Error and completion handling\nconst eventify = self => {\n  self._events = {};\n\n  self.on = (event, listener) => {\n    if (typeof self._events[event] === 'undefined') {\n      self._events[event] = [];\n    }\n    self._events[event].push(listener);\n    return self;\n  };\n\n  self.removeListener = (event, listener) => {\n    if (typeof self._events[event] !== 'undefined') {\n      const index = self._events[event].indexOf(listener);\n      if (index !== -1) {\n        self._events[event].splice(index, 1);\n      }\n    }\n    return self;\n  };\n\n  self.emit = (event, ...args) => {\n    if (typeof self._events[event] !== 'undefined') {\n      const listeners = self._events[event].slice();\n      for (let listener of listeners) {\n        listener.apply(self, args);\n      }\n    }\n    return self;\n  };\n\n  self.once = (event, listener) => {\n    self.on(event, function handler(...args) {\n      self.removeListener(event, handler);\n      listener.apply(self, args);\n    });\n    return self;\n  };\n\n  return self;\n};\n\nexport default function createWorkerExecutor(workerName, options) {",
      "}\n",
      "module.exports = function mountRestApi(app) {\n  const restApi = app.loopback.rest();\n  const restApiRoot = app.get('restApiRoot');\n  app.use(restApiRoot, restApi);\n};\n",
      "      ([k, v]) => `${k} => ${v}`\n    ).join(', ')}})`;\n  } else if (typeof x === 'bigint') {\n    return x.toString() + 'n';\n  } else if (typeof x === 'symbol') {\n    return x.toString();\n  }\n  return inspect(x);\n}\n",
      "export function deprecatedEndpoint(_, res) {\n  return res.status(410).json({\n    message: {\n      type: 'info',\n      message: 'Please reload the app, this feature is no longer available.'\n    }\n  });\n}\n\nexport function temporarilyDisabledEndpoint(_, res) {\n  return res.status(404).json({\n    message: {\n      type: 'info',\n      message: 'Please reload the app, this feature is no longer available.'\n    }\n  });\n}\n",
      "            moment.utc(moment.utc().subtract(1, 'days')).valueOf(),\n            moment.utc(moment.utc().subtract(1, 'hours')).valueOf()\n          ])\n        )\n      ).toEqual(2);\n    });\n\n    it('should return 4 when there is a month long break', () => {\n      expect(\n        calcLongestStreak(\n          prepUniqueDaysByHours([\n            moment.utc('8/3/2015 2:00', 'M/D/YYYY H:mm').valueOf(),\n            moment.utc('9/11/2015 4:00', 'M/D/YYYY H:mm').valueOf(),\n            moment.utc('9/12/2015 2:00', 'M/D/YYYY H:mm').valueOf(),\n            moment.utc('10/4/2015 1:00', 'M/D/YYYY H:mm').valueOf(),\n            moment.utc('10/5/2015 5:00', 'M/D/YYYY H:mm').valueOf(),\n            moment.utc('10/6/2015 4:00', 'M/D/YYYY H:mm').valueOf(),\n            moment.utc('10/7/2015 5:00', 'M/D/YYYY H:mm').valueOf(),\n            moment.utc('11/3/2015 2:00', 'M/D/YYYY H:mm').valueOf()\n          ])\n        )\n      ).toEqual(4);\n    });\n\n    it(\n      'should return 2 when there is a more than 1.5 days ' +\n        'long break of (36 hours)',\n      () => {\n        expect(\n          calcLongestStreak(\n            prepUniqueDaysByHours([\n              moment.utc('8/3/2015 2:00', 'M/D/YYYY H:mm').valueOf(),\n              moment.utc('9/11/2015 4:00', 'M/D/YYYY H:mm').valueOf(),\n              moment.utc('9/12/2015 15:30', 'M/D/YYYY H:mm').valueOf(),\n              moment\n                .utc(\n                  moment\n                    .utc('9/12/2015 15:30', 'M/D/YYYY H:mm')\n                    .add(37, 'hours')\n                )\n                .valueOf(),\n              moment.utc('9/14/2015 22:00', 'M/D/YYYY H:mm').valueOf(),\n              moment.utc('9/15/2015 4:00', 'M/D/YYYY H:mm').valueOf(),\n              moment.utc('10/3/2015 2:00', 'M/D/YYYY H:mm').valueOf()\n            ])\n          )\n        ).toEqual(2);\n      }\n    );\n\n    it(\n      'should return 4 when the longest streak consist of ' +\n        'several same day timestamps',\n      () => {\n        expect(\n          calcLongestStreak(\n            prepUniqueDaysByHours([\n              moment.utc('8/3/2015 2:00', 'M/D/YYYY H:mm').valueOf(),\n              moment.utc('9/11/2015 4:00', 'M/D/YYYY H:mm').valueOf(),\n              moment.utc('9/12/2015 1:00', 'M/D/YYYY H:mm').valueOf(),\n              moment.utc('9/12/2015 1:00', 'M/D/YYYY H:mm').valueOf(),\n              moment.utc('9/12/2015 2:00', 'M/D/YYYY H:mm').valueOf(),\n              moment.utc('9/12/2015 3:00', 'M/D/YYYY H:mm').valueOf(),\n              moment.utc('9/13/2015 4:00', 'M/D/YYYY H:mm').valueOf(),",
      "  debounce,\n  put,\n  select,\n  takeEvery,\n  takeLatest\n} from 'redux-saga/effects';\nimport store from 'store';\n\nimport {\n  certTypeIdMap,\n  certTypes\n} from '../../../../config/certification-settings';\nimport { createFlashMessage } from '../../components/Flash/redux';\nimport { liveCerts } from '../../../config/cert-and-project-map';\nimport {\n  getUsernameExists,\n  putUpdateMyAbout,\n  putUpdateMyHonesty,\n  putUpdateMyKeyboardShortcuts,\n  putUpdateMyPortfolio,\n  putUpdateMyProfileUI,\n  putUpdateMyQuincyEmail,\n  putUpdateMySocials,\n  putUpdateMySound,\n  putUpdateMyTheme,\n  putUpdateMyUsername,\n  putVerifyCert\n} from '../../utils/ajax';\nimport { completedChallengesSelector } from '../selectors';\nimport {\n  submitNewAboutComplete,\n  submitNewAboutError,\n  submitNewUsernameComplete,\n  submitNewUsernameError,\n  submitProfileUIComplete,\n  submitProfileUIError,\n  updateMyHonestyComplete,\n  updateMyHonestyError,\n  updateMyKeyboardShortcutsComplete,\n  updateMyKeyboardShortcutsError,\n  updateMyPortfolioComplete,\n  updateMyPortfolioError,\n  updateMyQuincyEmailComplete,\n  updateMyQuincyEmailError,\n  updateMySocialsComplete,\n  updateMySocialsError,\n  updateMySoundComplete,\n  updateMySoundError,\n  updateMyThemeComplete,\n  updateMyThemeError,\n  validateUsernameComplete,\n  validateUsernameError,\n  verifyCertComplete,\n  verifyCertError\n} from './actions';\n\nfunction* submitNewAboutSaga({ payload }) {\n  try {\n    const { data } = yield call(putUpdateMyAbout, payload);\n    yield put(submitNewAboutComplete({ ...data, payload }));\n    yield put(createFlashMessage(data));\n  } catch (e) {\n    yield put(submitNewAboutError(e));\n  }"
    ]
  },
  {
    "id": "ansible/ansible",
    "org": "ansible",
    "avatarURL": "https://avatars.githubusercontent.com/u/1507452?v=4",
    "name": "ansible/ansible",
    "url": "https://github.com/ansible/ansible",
    "lang": "Python",
    "star_num": 58465,
    "fork_num": 23642,
    "snippets": [
      "    def put_file(self, in_path, out_path):\n        super(Connection, self).put_file(in_path, out_path)\n\n    def fetch_file(self, in_path, out_path):\n        super(Connection, self).fetch_file(in_path, out_path)\n\n    def close(self):\n        super(Connection, self).close()\n",
      "#############################################\n#\n# This file is auto generated by the resource\n#   module builder playbook.\n#\n# Do not edit this file manually.\n#\n# Changes to this file will be over written\n#   by the resource module builder.\n#\n# Changes should be made in the model used to\n#   generate this file or in the resource module\n#   builder template.\n#\n#############################################\n\"\"\"\nThe arg spec for the vyos_static_routes module\n\"\"\"\n\nfrom __future__ import absolute_import, division, print_function\n\n__metaclass__ = type\n\n\nclass Static_routesArgs(object):  # pylint: disable=R0903\n    \"\"\"The arg spec for the vyos_static_routes module\n    \"\"\"\n\n    def __init__(self, **kwargs):\n        pass\n\n    argument_spec = {\n        \"config\": {\n            \"elements\": \"dict\",\n            \"options\": {\n                \"address_families\": {\n                    \"elements\": \"dict\",\n                    \"options\": {\n                        \"afi\": {\n                            \"choices\": [\"ipv4\", \"ipv6\"],\n                            \"required\": True,\n                            \"type\": \"str\",\n                        },\n                        \"routes\": {\n                            \"elements\": \"dict\",\n                            \"options\": {\n                                \"blackhole_config\": {\n                                    \"options\": {\n                                        \"distance\": {\"type\": \"int\"},\n                                        \"type\": {\"type\": \"str\"},\n                                    },\n                                    \"type\": \"dict\",\n                                },\n                                \"dest\": {\"required\": True, \"type\": \"str\"},\n                                \"next_hops\": {\n                                    \"elements\": \"dict\",\n                                    \"options\": {\n                                        \"admin_distance\": {\"type\": \"int\"},\n                                        \"enabled\": {\"type\": \"bool\"},\n                                        \"forward_router_address\": {\n                                            \"required\": True,\n                                            \"type\": \"str\",\n                                        },\n                                        \"interface\": {\"type\": \"str\"},",
      "# -*- coding: utf-8 -*-\n\n# Copyright: (c) 2015, Peter Sprygada <psprygada@ansible.com>\n# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)\n\n\nclass ModuleDocFragment(object):\n\n    # Standard files documentation fragment\n    DOCUMENTATION = r\"\"\"options:\n  provider:\n    description:\n    - B(Deprecated)\n    - 'Starting with Ansible 2.5 we recommend using C(connection: network_cli).'\n    - For more information please see the L(Network Guide, ../network/getting_started/network_differences.html#multiple-communication-protocols).\n    - HORIZONTALLINE\n    - A dict object containing connection details.\n    type: dict\n    suboptions:\n      host:\n        description:\n        - Specifies the DNS host name or address for connecting to the remote device\n          over the specified transport.  The value of host is used as the destination\n          address for the transport.\n        type: str\n        required: true\n      port:\n        description:\n        - Specifies the port to use when building the connection to the remote device.\n        type: int\n        default: 22\n      username:\n        description:\n        - Configures the username to use to authenticate the connection to the remote\n          device.  This value is used to authenticate the SSH session. If the value\n          is not specified in the task, the value of environment variable C(ANSIBLE_NET_USERNAME)\n          will be used instead.\n        type: str\n      password:\n        description:\n        - Specifies the password to use to authenticate the connection to the remote\n          device.   This value is used to authenticate the SSH session. If the value\n          is not specified in the task, the value of environment variable C(ANSIBLE_NET_PASSWORD)\n          will be used instead.\n        type: str\n      timeout:\n        description:\n        - Specifies the timeout in seconds for communicating with the network device\n          for either connecting or sending commands.  If the timeout is exceeded before\n          the operation is completed, the module will error.\n        type: int\n        default: 10\n      ssh_keyfile:\n        description:\n        - Specifies the SSH key to use to authenticate the connection to the remote\n          device.   This value is the path to the key used to authenticate the SSH\n          session. If the value is not specified in the task, the value of environment\n          variable C(ANSIBLE_NET_SSH_KEYFILE) will be used instead.\n        type: path\nnotes:\n- For more information on using Ansible to manage network devices see the :ref:`Ansible\n  Network Guide <network_guide>`\n\"\"\"\n",
      "        host_state.controller_profile.configure()\n\n    if not args.delegate:\n        check_controller_python(args, host_state)\n\n        if requirements:\n            requirements(host_state.controller_profile)\n\n        def configure(profile: HostProfile) -> None:\n            \"\"\"Configure the given profile.\"\"\"\n            profile.wait()\n\n            if not skip_setup:\n                profile.configure()\n\n            if requirements:\n                requirements(profile)\n\n        dispatch_jobs([(profile, WrappedThread(functools.partial(configure, profile))) for profile in host_state.target_profiles])\n\n    return host_state\n\n\ndef check_controller_python(args: EnvironmentConfig, host_state: HostState) -> None:\n    \"\"\"Check the running environment to make sure it is what we expected.\"\"\"\n    sys_version = version_to_str(sys.version_info[:2])\n    controller_python = host_state.controller_profile.python\n\n    if expected_executable := verify_sys_executable(controller_python.path):\n        raise ApplicationError(f'Running under Python interpreter \"{sys.executable}\" instead of \"{expected_executable}\".')\n\n    expected_version = controller_python.version\n\n    if expected_version != sys_version:\n        raise ApplicationError(f'Running under Python version {sys_version} instead of {expected_version}.')\n\n    args.controller_python = controller_python\n\n\ndef cleanup_profiles(host_state: HostState) -> None:\n    \"\"\"Cleanup provisioned hosts when exiting.\"\"\"\n    for profile in host_state.profiles:\n        profile.deprovision()\n\n\ndef dispatch_jobs(jobs: list[tuple[HostProfile, WrappedThread]]) -> None:\n    \"\"\"Run the given profile job threads and wait for them to complete.\"\"\"\n    for profile, thread in jobs:\n        thread.daemon = True\n        thread.start()\n\n    while any(thread.is_alive() for profile, thread in jobs):\n        time.sleep(1)\n\n    failed = False\n    connection_failures = 0\n\n    for profile, thread in jobs:\n        try:\n            thread.wait_for_result()\n        except HostConnectionError as ex:\n            display.error(f'Host {profile.config} connection failed:\\n{ex}')\n            failed = True\n            connection_failures += 1",
      "data = 'spam5:bacon'\n",
      "      - Accepts a hash of task keywords (for example C(tags), C(become)) that will be applied to the tasks within the include.\n    type: str\n    version_added: '2.7'\n  free-form:\n    description:\n      - |\n        Specifies the name of the imported file directly without any other option C(- include_tasks: file.yml).\n      - Is the equivalent of specifying an argument for the O(file) parameter.\n      - Most keywords, including loop, with_items, and conditionals, apply to this statement unlike M(ansible.builtin.import_tasks).\n      - The do-until loop is not supported.\nextends_documentation_fragment:\n    - action_common_attributes\n    - action_common_attributes.conn\n    - action_common_attributes.flow\n    - action_core\n    - action_core.include\nattributes:\n    check_mode:\n        support: none\n    diff_mode:\n        support: none\nseealso:\n- module: ansible.builtin.import_playbook\n- module: ansible.builtin.import_role\n- module: ansible.builtin.import_tasks\n- module: ansible.builtin.include_role\n- ref: playbooks_reuse_includes\n  description: More information related to including and importing playbooks, roles and tasks.\n'''\n\nEXAMPLES = r'''\n- hosts: all\n  tasks:\n    - ansible.builtin.debug:\n        msg: task1\n\n    - name: Include task list in play\n      ansible.builtin.include_tasks:\n        file: stuff.yaml\n\n    - ansible.builtin.debug:\n        msg: task10\n\n- hosts: all\n  tasks:\n    - ansible.builtin.debug:\n        msg: task1\n\n    - name: Include task list in play only if the condition is true\n      ansible.builtin.include_tasks: \"{{ hostvar }}.yaml\"\n      when: hostvar is defined\n\n- name: Apply tags to tasks within included file\n  ansible.builtin.include_tasks:\n    file: install.yml\n    apply:\n      tags:\n        - install\n  tags:\n    - always\n\n- name: Apply tags to tasks within included file when using free-form\n  ansible.builtin.include_tasks: install.yml\n  args:",
      "        pass\n\n    coverage_config = generate_coverage_config(args)\n\n    if args.explain:\n        temp_dir = '/tmp/coverage-temp-dir'\n    else:\n        temp_dir = tempfile.mkdtemp()\n        ExitHandler.register(lambda: remove_tree(temp_dir))\n\n    path = os.path.join(temp_dir, COVERAGE_CONFIG_NAME)\n\n    if not args.explain:\n        write_text_file(path, coverage_config)\n\n    get_coverage_config.path = path  # type: ignore[attr-defined]\n\n    return path\n\n\ndef generate_coverage_config(args: TestConfig) -> str:\n    \"\"\"Generate code coverage configuration for tests.\"\"\"\n    if data_context().content.collection:\n        coverage_config = generate_collection_coverage_config(args)\n    else:\n        coverage_config = generate_ansible_coverage_config()\n\n    return coverage_config\n\n\ndef generate_ansible_coverage_config() -> str:\n    \"\"\"Generate code coverage configuration for Ansible tests.\"\"\"\n    coverage_config = '''\n[run]\nbranch = True\nconcurrency =\n    multiprocessing\n    thread\nparallel = True\n\nomit =\n    */python*/dist-packages/*\n    */python*/site-packages/*\n    */python*/distutils/*\n    */pyshared/*\n    */pytest\n    */AnsiballZ_*.py\n    */test/results/*\n'''\n\n    return coverage_config\n\n\ndef generate_collection_coverage_config(args: TestConfig) -> str:\n    \"\"\"Generate code coverage configuration for Ansible Collection tests.\"\"\"\n    coverage_config = '''\n[run]\nbranch = True\nconcurrency =\n    multiprocessing\n    thread\nparallel = True\ndisable_warnings =\n    no-data-collected",
      "#   module builder playbook.\n#\n# Do not edit this file manually.\n#\n# Changes to this file will be over written\n#   by the resource module builder.\n#\n# Changes should be made in the model used to\n#   generate this file or in the resource module\n#   builder template.\n#\n#############################################\n\"\"\"\nThe arg spec for the vyos_l3_interfaces module\n\"\"\"\n\n\nfrom __future__ import absolute_import, division, print_function\n\n__metaclass__ = type\n\n\nclass L3_interfacesArgs(object):  # pylint: disable=R0903\n    \"\"\"The arg spec for the vyos_l3_interfaces module\n    \"\"\"\n\n    def __init__(self, **kwargs):\n        pass\n\n    argument_spec = {\n        \"config\": {\n            \"elements\": \"dict\",\n            \"options\": {\n                \"ipv4\": {\n                    \"elements\": \"dict\",\n                    \"options\": {\"address\": {\"type\": \"str\"}},\n                    \"type\": \"list\",\n                },\n                \"ipv6\": {\n                    \"elements\": \"dict\",\n                    \"options\": {\"address\": {\"type\": \"str\"}},\n                    \"type\": \"list\",\n                },\n                \"name\": {\"required\": True, \"type\": \"str\"},\n                \"vifs\": {\n                    \"elements\": \"dict\",\n                    \"options\": {\n                        \"ipv4\": {\n                            \"elements\": \"dict\",\n                            \"options\": {\"address\": {\"type\": \"str\"}},\n                            \"type\": \"list\",\n                        },\n                        \"ipv6\": {\n                            \"elements\": \"dict\",\n                            \"options\": {\"address\": {\"type\": \"str\"}},\n                            \"type\": \"list\",\n                        },\n                        \"vlan_id\": {\"type\": \"int\"},\n                    },\n                    \"type\": \"list\",\n                },\n            },\n            \"type\": \"list\",\n        },",
      "# Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nfrom ansible.plugins.action import ActionBase\n\n\nclass ActionModule(ActionBase):\n\n    def run(self, tmp=None, task_vars=None):\n        result = super(ActionModule, self).run(tmp, task_vars)\n        result.update(self._execute_module('ping', task_vars=task_vars))\n        result['tmpdir'] = self._connection._shell.tmpdir\n        return result\n",
      "\n\n@pytest.mark.parametrize('namespace, value, expected', UUID_TEST_CASES)\ndef test_to_uuid(namespace, value, expected):\n    assert expected == to_uuid(value, namespace=namespace)\n\n\ndef test_to_uuid_invalid_namespace():\n    with pytest.raises(AnsibleFilterError) as e:\n        to_uuid('example.com', namespace='11111111-2222-3333-4444-555555555')\n    assert 'Invalid value' in to_native(e.value)\n"
    ]
  },
  {
    "id": "elastic/elasticsearch",
    "org": "elastic",
    "avatarURL": "https://avatars.githubusercontent.com/u/6764390?v=4",
    "name": "elastic/elasticsearch",
    "url": "https://github.com/elastic/elasticsearch",
    "lang": "Java",
    "star_num": 65004,
    "fork_num": 23526,
    "snippets": [
      "                df.getId(),\n                df.getJobId(),\n                df.getIndices(),\n                SearchRequest.DEFAULT_INDICES_OPTIONS\n            ).checkDatafeedTaskCanBeCreated()\n        );\n        assertThat(\n            e.getMessage(),\n            containsString(\n                \"No node found to start datafeed [datafeed_id], allocation explanation \"\n                    + \"[cannot start datafeed [datafeed_id] because it failed resolving \"\n                    + \"indices given [not_foo] and indices_options [IndicesOptions[ignore_unavailable=false, allow_no_indices=true, \"\n                    + \"expand_wildcards_open=true, expand_wildcards_closed=false, expand_wildcards_hidden=false, \"\n                    + \"allow_aliases_to_multiple_indices=true, forbid_closed_indices=true, ignore_aliases=false, ignore_throttled=true\"\n                    + \"]] with exception [no such index [not_foo]]]\"\n            )\n        );\n    }\n\n    public void testIndexPatternDoesntExist() {\n        Job job = createScheduledJob(\"job_id\").build(new Date());\n        DatafeedConfig df = createDatafeed(\"datafeed_id\", job.getId(), Arrays.asList(\"missing-*\", \"foo*\"));\n\n        PersistentTasksCustomMetadata.Builder tasksBuilder = PersistentTasksCustomMetadata.builder();\n        addJobTask(job.getId(), \"node_id\", JobState.OPENED, tasksBuilder);\n        tasks = tasksBuilder.build();\n\n        givenClusterState(\"foo\", 1, 0);\n\n        PersistentTasksCustomMetadata.Assignment result = new DatafeedNodeSelector(\n            clusterState,\n            resolver,\n            df.getId(),\n            df.getJobId(),\n            df.getIndices(),\n            SearchRequest.DEFAULT_INDICES_OPTIONS\n        ).selectNode(makeCandidateNodes(\"node_id\", \"other_node_id\"));\n        assertEquals(\"node_id\", result.getExecutorNode());\n        new DatafeedNodeSelector(clusterState, resolver, df.getId(), df.getJobId(), df.getIndices(), SearchRequest.DEFAULT_INDICES_OPTIONS)\n            .checkDatafeedTaskCanBeCreated();\n    }\n\n    public void testLocalIndexPatternWithoutMatchingIndicesAndRemoteIndexPattern() {\n        Job job = createScheduledJob(\"job_id\").build(new Date());\n        DatafeedConfig df = createDatafeed(\"datafeed_id\", job.getId(), Arrays.asList(\"missing-*\", \"remote:index-*\"));\n\n        PersistentTasksCustomMetadata.Builder tasksBuilder = PersistentTasksCustomMetadata.builder();\n        addJobTask(job.getId(), \"node_id\", JobState.OPENED, tasksBuilder);\n        tasks = tasksBuilder.build();\n\n        givenClusterState(\"foo\", 1, 0);\n\n        PersistentTasksCustomMetadata.Assignment result = new DatafeedNodeSelector(\n            clusterState,\n            resolver,\n            df.getId(),\n            df.getJobId(),\n            df.getIndices(),\n            SearchRequest.DEFAULT_INDICES_OPTIONS\n        ).selectNode(makeCandidateNodes(\"node_id\", \"other_node_id\"));\n        assertEquals(\"node_id\", result.getExecutorNode());\n        new DatafeedNodeSelector(clusterState, resolver, df.getId(), df.getJobId(), df.getIndices(), SearchRequest.DEFAULT_INDICES_OPTIONS)\n            .checkDatafeedTaskCanBeCreated();\n    }",
      "}\n",
      " * or more contributor license agreements. Licensed under the Elastic License\n * 2.0 and the Server Side Public License, v 1; you may not use this file except\n * in compliance with, at your election, the Elastic License 2.0 or the Server\n * Side Public License, v 1.\n */\n\npackage org.elasticsearch.action.admin.indices.template.get;\n\nimport org.elasticsearch.common.io.stream.Writeable;\nimport org.elasticsearch.test.AbstractWireSerializingTestCase;\n\npublic class GetComposableIndexTemplateRequestTests extends AbstractWireSerializingTestCase<GetComposableIndexTemplateAction.Request> {\n    @Override\n    protected Writeable.Reader<GetComposableIndexTemplateAction.Request> instanceReader() {\n        return GetComposableIndexTemplateAction.Request::new;\n    }\n\n    @Override\n    protected GetComposableIndexTemplateAction.Request createTestInstance() {\n        return new GetComposableIndexTemplateAction.Request(randomBoolean() ? null : randomAlphaOfLength(4));\n    }\n\n    @Override\n    protected GetComposableIndexTemplateAction.Request mutateInstance(GetComposableIndexTemplateAction.Request instance) {\n        return randomValueOtherThan(instance, this::createTestInstance);\n    }\n}\n",
      "import org.elasticsearch.common.Strings;\nimport org.elasticsearch.common.geo.GeoJson;\nimport org.elasticsearch.common.geo.GeoPoint;\nimport org.elasticsearch.core.Tuple;\nimport org.elasticsearch.geo.GeometryTestUtils;\nimport org.elasticsearch.geometry.Point;\nimport org.elasticsearch.geometry.utils.WellKnownText;\nimport org.elasticsearch.index.IndexMode;\nimport org.elasticsearch.index.IndexSettings;\nimport org.elasticsearch.xcontent.XContentBuilder;\nimport org.elasticsearch.xcontent.XContentFactory;\nimport org.elasticsearch.xcontent.XContentParser;\nimport org.elasticsearch.xcontent.XContentParserConfiguration;\nimport org.elasticsearch.xcontent.json.JsonXContent;\nimport org.junit.AssumptionViolatedException;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\nimport java.util.TreeMap;\n\nimport static org.elasticsearch.geometry.utils.Geohash.stringEncode;\nimport static org.elasticsearch.test.ListMatcher.matchesList;\nimport static org.elasticsearch.test.MapMatcher.assertMap;\nimport static org.hamcrest.Matchers.both;\nimport static org.hamcrest.Matchers.containsString;\nimport static org.hamcrest.Matchers.equalTo;\nimport static org.hamcrest.Matchers.hasSize;\nimport static org.hamcrest.Matchers.hasToString;\nimport static org.hamcrest.Matchers.instanceOf;\nimport static org.hamcrest.Matchers.is;\nimport static org.hamcrest.Matchers.notNullValue;\nimport static org.hamcrest.Matchers.nullValue;\n\npublic class GeoPointFieldMapperTests extends MapperTestCase {\n\n    @Override\n    protected void minimalMapping(XContentBuilder b) throws IOException {\n        b.field(\"type\", \"geo_point\");\n    }\n\n    @Override\n    protected void registerParameters(ParameterChecker checker) throws IOException {\n        checker.registerUpdateCheck(b -> b.field(\"ignore_z_value\", false), m -> {\n            GeoPointFieldMapper gpfm = (GeoPointFieldMapper) m;\n            assertFalse(gpfm.ignoreZValue());\n        });\n        checker.registerConflictCheck(\"null_value\", b -> b.field(\"null_value\", \"41.12,-71.34\"));\n        checker.registerConflictCheck(\"doc_values\", b -> b.field(\"doc_values\", false));\n        checker.registerConflictCheck(\"store\", b -> b.field(\"store\", true));\n        checker.registerConflictCheck(\"index\", b -> b.field(\"index\", false));\n    }\n\n    @Override\n    protected Object getSampleValueForDocument() {\n        return stringEncode(1.3, 1.2);\n    }\n\n    @Override\n    protected Object getSampleObjectForDocument() {\n        return Map.of(\"lat\", 41.12, \"lon\", -71.34);\n    }",
      "            )\n        );\n        assertThat(\n            Strings.toString(status),\n            equalTo(\n                \"\"\"\n                    {\"sessionId\":\"ABC:123\",\"last_updated\":\"1973-11-29T09:27:23.214Z\",\"status\":\"running\",\"active_operators\":[\"\"\"\n                    + \"\"\"\n                        {\"operator\":\"LuceneSource\",\"status\":\"\"\"\n                    + LuceneSourceOperatorStatusTests.simpleToJson()\n                    + \"},{\\\"operator\\\":\\\"ValuesSourceReader\\\",\\\"status\\\":\"\n                    + ValuesSourceReaderOperatorStatusTests.simpleToJson()\n                    + \"}]}\"\n            )\n        );\n    }\n\n    @Override\n    protected Writeable.Reader<DriverStatus> instanceReader() {\n        return DriverStatus::new;\n    }\n\n    @Override\n    protected DriverStatus createTestInstance() {\n        return new DriverStatus(randomSessionId(), randomLong(), randomStatus(), randomActiveOperators());\n    }\n\n    private String randomSessionId() {\n        return RandomStrings.randomAsciiLettersOfLengthBetween(random(), 1, 15);\n    }\n\n    private DriverStatus.Status randomStatus() {\n        return randomFrom(DriverStatus.Status.values());\n    }\n\n    private List<DriverStatus.OperatorStatus> randomActiveOperators() {\n        return randomList(0, 5, this::randomOperatorStatus);\n    }\n\n    private DriverStatus.OperatorStatus randomOperatorStatus() {\n        Supplier<Operator.Status> status = randomFrom(\n            new LuceneSourceOperatorStatusTests()::createTestInstance,\n            new ValuesSourceReaderOperatorStatusTests()::createTestInstance,\n            () -> null\n        );\n        return new DriverStatus.OperatorStatus(randomAlphaOfLength(3), status.get());\n    }\n\n    @Override\n    protected DriverStatus mutateInstance(DriverStatus instance) throws IOException {\n        var sessionId = instance.sessionId();\n        long lastUpdated = instance.lastUpdated();\n        var status = instance.status();\n        var operators = instance.activeOperators();\n        switch (between(0, 3)) {\n            case 0:\n                sessionId = randomValueOtherThan(sessionId, this::randomSessionId);\n                break;\n            case 1:\n                lastUpdated = randomValueOtherThan(lastUpdated, ESTestCase::randomLong);\n                break;\n            case 2:\n                status = randomValueOtherThan(status, this::randomStatus);\n                break;",
      "                                \"expressions \"\n                                    + Arrays.toString(action.indices())\n                                    + \" that match with both data streams and regular indices are disallowed\"\n                            );\n                        }\n                        for (String dataStreamName : concreteDataStreams) {\n                            for (String alias : concreteDataStreamAliases(action, state.metadata(), dataStreamName)) {\n                                finalActions.add(new AddDataStreamAlias(alias, dataStreamName, action.writeIndex(), action.filter()));\n                            }\n                        }\n                        continue;\n                    }\n                    case REMOVE -> {\n                        for (String dataStreamName : concreteDataStreams) {\n                            for (String alias : concreteDataStreamAliases(action, state.metadata(), dataStreamName)) {\n                                finalActions.add(new AliasAction.RemoveDataStreamAlias(alias, dataStreamName, action.mustExist()));\n                            }\n                        }\n                        if (nonBackingIndices.isEmpty() == false) {\n                            // Regular aliases/indices match as well with the provided expression.\n                            // (Only when adding new aliases, matching both data streams and indices is disallowed)\n                        } else {\n                            continue;\n                        }\n                    }\n                    default -> throw new IllegalArgumentException(\"Unsupported action [\" + action.actionType() + \"]\");\n                }\n            } else {\n                concreteIndices = indexNameExpressionResolver.concreteIndices(state, request.indicesOptions(), false, action.indices());\n            }\n\n            for (Index concreteIndex : concreteIndices) {\n                IndexAbstraction indexAbstraction = state.metadata().getIndicesLookup().get(concreteIndex.getName());\n                assert indexAbstraction != null : \"invalid cluster metadata. index [\" + concreteIndex.getName() + \"] was not found\";\n                if (indexAbstraction.getParentDataStream() != null) {\n                    throw new IllegalArgumentException(\n                        \"The provided expressions [\"\n                            + String.join(\",\", action.indices())\n                            + \"] match a backing index belonging to data stream [\"\n                            + indexAbstraction.getParentDataStream().getName()\n                            + \"]. Data stream backing indices don't support aliases.\"\n                    );\n                }\n            }\n            final Optional<Exception> maybeException = requestValidators.validateRequest(request, state, concreteIndices);\n            if (maybeException.isPresent()) {\n                listener.onFailure(maybeException.get());\n                return;\n            }\n\n            Collections.addAll(aliases, action.getOriginalAliases());\n            long now = System.currentTimeMillis();\n            for (final Index index : concreteIndices) {\n                switch (action.actionType()) {\n                    case ADD:\n                        for (String alias : concreteAliases(action, state.metadata(), index.getName())) {\n                            String resolvedName = IndexNameExpressionResolver.resolveDateMathExpression(alias, now);\n                            finalActions.add(\n                                new AliasAction.Add(\n                                    index.getName(),\n                                    resolvedName,\n                                    action.filter(),\n                                    action.indexRouting(),\n                                    action.searchRouting(),",
      "     * including those that need global ordinals\n     */\n    private static RareTermsAggregatorSupplier bytesSupplier() {\n        return (name, factories, valuesSource, format, maxDocCount, precision, includeExclude, context, parent, cardinality, metadata) -> {\n\n            ExecutionMode execution = ExecutionMode.MAP; // TODO global ords not implemented yet, only supports \"map\"\n\n            if ((includeExclude != null) && (includeExclude.isRegexBased()) && format != DocValueFormat.RAW) {\n                throw new IllegalArgumentException(\n                    \"Aggregation [\"\n                        + name\n                        + \"] cannot support \"\n                        + \"regular expression style include/exclude settings as they can only be applied to string fields. \"\n                        + \"Use an array of values for include/exclude clauses\"\n                );\n            }\n\n            return execution.create(\n                name,\n                factories,\n                valuesSource,\n                format,\n                includeExclude,\n                context,\n                parent,\n                metadata,\n                maxDocCount,\n                precision,\n                cardinality\n            );\n\n        };\n    }\n\n    /**\n     * This supplier is used for all fields that expect to be aggregated as a numeric value.\n     * This includes floating points, and formatted types that use numerics internally for storage (date, boolean, etc)\n     */\n    private static RareTermsAggregatorSupplier numericSupplier() {\n        return (name, factories, valuesSource, format, maxDocCount, precision, includeExclude, context, parent, cardinality, metadata) -> {\n\n            if ((includeExclude != null) && (includeExclude.isRegexBased())) {\n                throw new IllegalArgumentException(\n                    \"Aggregation [\"\n                        + name\n                        + \"] cannot support regular expression \"\n                        + \"style include/exclude settings as they can only be applied to string fields. Use an array of numeric \"\n                        + \"values for include/exclude clauses used to filter numeric fields\"\n                );\n            }\n\n            IncludeExclude.LongFilter longFilter = null;\n            if (((ValuesSource.Numeric) valuesSource).isFloatingPoint()) {\n                throw new IllegalArgumentException(\"RareTerms aggregation does not support floating point fields.\");\n            }\n            if (includeExclude != null) {\n                longFilter = includeExclude.convertToLongFilter(format);\n            }\n            return new LongRareTermsAggregator(\n                name,\n                factories,\n                (ValuesSource.Numeric) valuesSource,\n                format,\n                context,",
      "/*\n * @notice\n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * Modifications copyright (C) 2021 Elasticsearch B.V.\n */\npackage org.elasticsearch.xpack.lucene.bwc.codecs.lucene70.fst;\n\nimport org.apache.lucene.store.DataInput;\nimport org.apache.lucene.store.DataOutput;\nimport org.apache.lucene.util.RamUsageEstimator;\n\nimport java.io.IOException;\n\n/**\n * Provides storage of finite state machine (FST), using byte array or byte store allocated on heap.\n *\n */\npublic final class OnHeapFSTStore implements FSTStore {\n\n    private static final long BASE_RAM_BYTES_USED = RamUsageEstimator.shallowSizeOfInstance(OnHeapFSTStore.class);\n\n    /**\n     * A {@link BytesStore}, used during building, or during reading when the FST is very large (more\n     * than 1 GB). If the FST is less than 1 GB then bytesArray is set instead.\n     */\n    private BytesStore bytes;\n\n    /** Used at read time when the FST fits into a single byte[]. */\n    private byte[] bytesArray;\n\n    private final int maxBlockBits;\n\n    public OnHeapFSTStore(int maxBlockBits) {\n        if (maxBlockBits < 1 || maxBlockBits > 30) {\n            throw new IllegalArgumentException(\"maxBlockBits should be 1 .. 30; got \" + maxBlockBits);\n        }\n\n        this.maxBlockBits = maxBlockBits;\n    }\n\n    @Override\n    public void init(DataInput in, long numBytes) throws IOException {\n        if (numBytes > 1 << this.maxBlockBits) {\n            // FST is big: we need multiple pages\n            bytes = new BytesStore(in, numBytes, 1 << this.maxBlockBits);\n        } else {\n            // FST fits into a single block: use ByteArrayBytesStoreReader for less overhead\n            bytesArray = new byte[(int) numBytes];\n            in.readBytes(bytesArray, 0, bytesArray.length);\n        }",
      "    protected Range nextRange(int dimensions) throws Exception {\n        long value1 = nextLongInternal();\n        long value2 = nextLongInternal();\n        long min = Math.min(value1, value2);\n        long max = Math.max(value1, value2);\n        return new LongTestRange(min, max);\n    }\n\n    private long nextLongInternal() {\n        switch (random().nextInt(5)) {\n            case 0:\n                return Long.MIN_VALUE;\n            case 1:\n                return Long.MAX_VALUE;\n            default:\n                int bpv = random().nextInt(64);\n                switch (bpv) {\n                    case 64:\n                        return random().nextLong();\n                    default:\n                        long v = TestUtil.nextLong(random(), 0, (1L << bpv) - 1);\n                        if (bpv > 0) {\n                            // negative values sometimes\n                            v -= 1L << (bpv - 1);\n                        }\n                        return v;\n                }\n        }\n    }\n\n    private static class LongTestRange extends AbstractRange<Long> {\n        long min;\n        long max;\n\n        LongTestRange(long min, long max) {\n            this.min = min;\n            this.max = max;\n        }\n\n        @Override\n        public Long getMin() {\n            return min;\n        }\n\n        @Override\n        protected void setMin(int dim, Object val) {\n            assert dim == 0;\n            long v = (Long) val;\n            if (min < v) {\n                max = v;\n            } else {\n                min = v;\n            }\n        }\n\n        @Override\n        public Long getMax() {\n            return max;\n        }\n\n        @Override\n        protected void setMax(int dim, Object val) {\n            assert dim == 0;\n            long v = (Long) val;",
      "                jwtIssuer.close();\n                throw t;\n            }\n        }\n        allRealms.forEach(realm -> realm.initialize(allRealms, licenseState)); // JWT realms and authz realms\n        jwtIssuerAndRealms.forEach(p -> p.realm.ensureInitialized()); // verify no exception after initialize()\n        return jwtIssuerAndRealms;\n    }\n\n    protected JwtIssuer createJwtIssuer(\n        final int i,\n        final int algsCount,\n        final int audiencesCount,\n        final int userCount,\n        final int roleCount,\n        final boolean createHttpsServer\n    ) throws Exception {\n        final String issuer = \"iss\" + (i + 1) + \"_\" + randomIntBetween(0, 9999);\n        final List<String> audiences = IntStream.range(0, audiencesCount).mapToObj(j -> issuer + \"_aud\" + (j + 1)).toList();\n        final Map<String, User> users = JwtTestCase.generateTestUsersWithRoles(userCount, roleCount);\n        // Allow algorithm repeats, to cover testing of multiple JWKs for same algorithm\n        final JwtIssuer jwtIssuer = new JwtIssuer(issuer, audiences, users, createHttpsServer);\n        final List<String> algorithms = randomOfMinMaxNonUnique(algsCount, algsCount, JwtRealmSettings.SUPPORTED_SIGNATURE_ALGORITHMS);\n        final boolean areHmacJwksOidcSafe = randomBoolean();\n        final List<JwtIssuer.AlgJwkPair> algAndJwks = JwtRealmTestCase.randomJwks(algorithms, areHmacJwksOidcSafe);\n        jwtIssuer.setJwks(algAndJwks, areHmacJwksOidcSafe);\n        return jwtIssuer;\n    }\n\n    protected void copyIssuerJwksToRealmConfig(final JwtIssuerAndRealm jwtIssuerAndRealm) throws Exception {\n        if (JwtRealmInspector.isConfiguredJwkSetPkc(jwtIssuerAndRealm.realm)\n            && (JwtRealmInspector.getJwkSetPathUri(jwtIssuerAndRealm.realm) == null)) {\n            logger.trace(\"Updating JwtRealm PKC public JWKSet local file\");\n            final Path path = PathUtils.get(JwtRealmInspector.getJwkSetPath(jwtIssuerAndRealm.realm));\n            Files.writeString(path, jwtIssuerAndRealm.issuer.encodedJwkSetPkcPublic);\n        }\n\n        // TODO If x-pack Security plug-in add supports for reloadable settings, update HMAC JWKSet and HMAC OIDC JWK in ES Keystore\n    }\n\n    protected JwtRealmSettingsBuilder createJwtRealmSettingsBuilder(final JwtIssuer jwtIssuer, final int authzCount, final int jwtCacheSize)\n        throws Exception {\n        final String authcRealmName = \"realm_\" + jwtIssuer.issuerClaimValue;\n        final String[] authzRealmNames = IntStream.range(0, authzCount).mapToObj(z -> authcRealmName + \"_authz\" + z).toArray(String[]::new);\n\n        final ClientAuthenticationType clientAuthenticationType = randomFrom(ClientAuthenticationType.values());\n        final Settings.Builder authcSettings = Settings.builder()\n            .put(globalSettings)\n            .put(RealmSettings.getFullSettingKey(authcRealmName, JwtRealmSettings.ALLOWED_ISSUER), jwtIssuer.issuerClaimValue)\n            .put(\n                RealmSettings.getFullSettingKey(authcRealmName, JwtRealmSettings.ALLOWED_SIGNATURE_ALGORITHMS),\n                String.join(\",\", jwtIssuer.algorithmsAll)\n            )\n            .put(\n                RealmSettings.getFullSettingKey(authcRealmName, JwtRealmSettings.ALLOWED_AUDIENCES),\n                randomFrom(jwtIssuer.audiencesClaimValue)\n            );\n        authcSettings.put(\n            RealmSettings.getFullSettingKey(authcRealmName, JwtRealmSettings.CLAIMS_PRINCIPAL.getClaim()),\n            jwtIssuer.principalClaimName\n        );\n        if ((ClientAuthenticationType.SHARED_SECRET != clientAuthenticationType) || (randomBoolean())) {\n            // always set \"None\", optionally set \"SharedSecret\" or let it get picked by default\n            authcSettings.put("
    ]
  },
  {
    "id": "mongodb/mongo",
    "org": "mongodb",
    "avatarURL": "https://avatars.githubusercontent.com/u/45120?v=4",
    "name": "mongodb/mongo",
    "url": "https://github.com/mongodb/mongo",
    "lang": "C++",
    "star_num": 24337,
    "fork_num": 5610,
    "snippets": [
      "\n    print_time( t1, \"Consecutive lookup\",  s, map.size() );\n\n    s = 0;\n\n    for( int j = 0; j < K; ++j )\n    {\n        for( unsigned i = 1; i <= N * 2; ++i )\n        {\n            auto it = map.find( indices2[ i ] );\n            if( it != map.end() ) s += it->second;\n        }\n    }\n\n    print_time( t1, \"Random lookup\",  s, map.size() );\n\n    std::cout << std::endl;\n}\n\ntemplate<class Map> BOOST_NOINLINE void test_iteration( Map& map, std::chrono::steady_clock::time_point & t1 )\n{\n    auto it = map.begin();\n\n    while( it != map.end() )\n    {\n        if( it->second & 1 )\n        {\n            map.erase( it++ );\n        }\n        else\n        {\n            ++it;\n        }\n    }\n\n    print_time( t1, \"Iterate and erase odd elements\",  0, map.size() );\n\n    std::cout << std::endl;\n}\n\ntemplate<class Map> BOOST_NOINLINE void test_erase( Map& map, std::chrono::steady_clock::time_point & t1 )\n{\n    for( unsigned i = 1; i <= N; ++i )\n    {\n        map.erase( indices1[ i ] );\n    }\n\n    print_time( t1, \"Consecutive erase\",  0, map.size() );\n\n    {\n        boost::detail::splitmix64 rng;\n\n        for( unsigned i = 1; i <= N; ++i )\n        {\n            map.erase( indices2[ i ] );\n        }\n    }\n\n    print_time( t1, \"Random erase\",  0, map.size() );\n\n    std::cout << std::endl;\n}\n\n// counting allocator",
      "/* This routine applies rounding while keeping the length of the      */\n/* coefficient constant.  The exponent and status are unchanged       */\n/* except if:                                                         */\n/*                                                                    */\n/*   -- the coefficient was increased and is all nines (in which      */\n/*      case Overflow could occur, and is handled directly here so    */\n/*      the caller does not need to re-test for overflow)             */\n/*                                                                    */\n/*   -- the coefficient was decreased and becomes all nines (in which */\n/*      case Underflow could occur, and is also handled directly).    */\n/*                                                                    */\n/* All fields in dn are updated as required.                          */\n/*                                                                    */\n/* ------------------------------------------------------------------ */\nstatic void decApplyRound(decNumber *dn, decContext *set, Int residue,\n                          uInt *status) {\n  Int  bump;                  /* 1 if coefficient needs to be incremented  */\n                              /* -1 if coefficient needs to be decremented  */\n\n  if (residue==0) return;     /* nothing to apply  */\n\n  bump=0;                     /* assume a smooth ride  */\n\n  /* now decide whether, and how, to round, depending on mode  */\n  switch (set->round) {\n    case DEC_ROUND_05UP: {    /* round zero or five up (for reround)  */\n      /* This is the same as DEC_ROUND_DOWN unless there is a  */\n      /* positive residue and the lsd of dn is 0 or 5, in which case  */\n      /* it is bumped; when residue is <0, the number is therefore  */\n      /* bumped down unless the final digit was 1 or 6 (in which  */\n      /* case it is bumped down and then up -- a no-op)  */\n      Int lsd5=*dn->lsu%5;     /* get lsd and quintate  */\n      if (residue<0 && lsd5!=1) bump=-1;\n       else if (residue>0 && lsd5==0) bump=1;\n      /* [bump==1 could be applied directly; use common path for clarity]  */\n      break;} /* r-05  */\n\n    case DEC_ROUND_DOWN: {\n      /* no change, except if negative residue  */\n      if (residue<0) bump=-1;\n      break;} /* r-d  */\n\n    case DEC_ROUND_HALF_DOWN: {\n      if (residue>5) bump=1;\n      break;} /* r-h-d  */\n\n    case DEC_ROUND_HALF_EVEN: {\n      if (residue>5) bump=1;            /* >0.5 goes up  */\n       else if (residue==5) {           /* exactly 0.5000...  */\n        /* 0.5 goes up iff [new] lsd is odd  */\n        if (*dn->lsu & 0x01) bump=1;\n        }\n      break;} /* r-h-e  */\n\n    case DEC_ROUND_HALF_UP: {\n      if (residue>=5) bump=1;\n      break;} /* r-h-u  */\n\n    case DEC_ROUND_UP: {\n      if (residue>0) bump=1;\n      break;} /* r-u  */\n\n    case DEC_ROUND_CEILING: {\n      /* same as _UP for positive numbers, and as _DOWN for negatives  */",
      "#endif\n#ifdef INITGUID\n#error \"vm/RegExpStatics.cpp defines INITGUID, so it cannot be built in unified mode.\"\n#undef INITGUID\n#endif",
      "    BSONObjBuilder bob;\n    bob.appendMinKey(\"\");\n    bob.appendMaxKey(\"\");\n    return makeRangeInterval(bob.obj(), BoundInclusion::kIncludeBothStartAndEndKeys);\n}\n\nbool IntervalComparison(const Interval& lhs, const Interval& rhs) {\n    int wo = lhs.start.woCompare(rhs.start, false);\n    if (0 != wo) {\n        return wo < 0;\n    }\n\n    // The start and end are equal.\n    // Strict weak requires irreflexivity which implies that equivalence returns false.\n    if (lhs.startInclusive == rhs.startInclusive) {\n        return false;\n    }\n\n    // Put the bound that's inclusive to the left.\n    return lhs.startInclusive;\n}\n\n// static\nvoid IndexBoundsBuilder::translateAndIntersect(const MatchExpression* expr,\n                                               const BSONElement& elt,\n                                               const IndexEntry& index,\n                                               OrderedIntervalList* oilOut,\n                                               BoundsTightness* tightnessOut,\n                                               interval_evaluation_tree::Builder* ietBuilder) {\n    OrderedIntervalList arg;\n    translate(expr, elt, index, &arg, tightnessOut, ietBuilder);\n\n    // translate outputs arg in sorted order.  intersectize assumes that its arguments are\n    // sorted.\n    intersectize(arg, oilOut);\n\n    if (ietBuilder != nullptr) {\n        ietBuilder->addIntersect();\n    }\n}\n\n// static\nvoid IndexBoundsBuilder::translateAndUnion(const MatchExpression* expr,\n                                           const BSONElement& elt,\n                                           const IndexEntry& index,\n                                           OrderedIntervalList* oilOut,\n                                           BoundsTightness* tightnessOut,\n                                           interval_evaluation_tree::Builder* ietBuilder) {\n    OrderedIntervalList arg;\n    translate(expr, elt, index, &arg, tightnessOut, ietBuilder);\n\n    // Append the new intervals to oilOut.\n    oilOut->intervals.insert(oilOut->intervals.end(), arg.intervals.begin(), arg.intervals.end());\n\n    // Union the appended intervals with the existing ones.\n    unionize(oilOut);\n\n    if (ietBuilder != nullptr) {\n        ietBuilder->addUnion();\n    }\n}\n\nbool typeMatch(const BSONObj& obj) {\n    BSONObjIterator it(obj);",
      "#include \"mozilla/Encoding.h\"\n#include \"mozilla/Unused.h\"\n\nusing namespace mozilla;\n\nNS_IMPL_ISUPPORTS(nsConverterOutputStream, nsIUnicharOutputStream,\n                  nsIConverterOutputStream)\n\nnsConverterOutputStream::~nsConverterOutputStream() { Close(); }\n\nNS_IMETHODIMP\nnsConverterOutputStream::Init(nsIOutputStream* aOutStream,\n                              const char* aCharset) {\n  MOZ_ASSERT(aOutStream, \"Null output stream!\");\n\n  const Encoding* encoding;\n  if (!aCharset) {\n    encoding = UTF_8_ENCODING;\n  } else {\n    encoding = Encoding::ForLabelNoReplacement(MakeStringSpan(aCharset));\n    if (!encoding || encoding == UTF_16LE_ENCODING ||\n        encoding == UTF_16BE_ENCODING) {\n      return NS_ERROR_UCONV_NOCONV;\n    }\n  }\n\n  mConverter = encoding->NewEncoder();\n\n  mOutStream = aOutStream;\n\n  return NS_OK;\n}\n\nNS_IMETHODIMP\nnsConverterOutputStream::Write(uint32_t aCount, const char16_t* aChars,\n                               bool* aSuccess) {\n  if (!mOutStream) {\n    NS_ASSERTION(!mConverter, \"Closed streams shouldn't have converters\");\n    return NS_BASE_STREAM_CLOSED;\n  }\n  MOZ_ASSERT(mConverter, \"Must have a converter when not closed\");\n  uint8_t buffer[4096];\n  auto dst = Span(buffer);\n  auto src = Span(aChars, aCount);\n  for (;;) {\n    uint32_t result;\n    size_t read;\n    size_t written;\n    bool hadErrors;\n    Tie(result, read, written, hadErrors) =\n        mConverter->EncodeFromUTF16(src, dst, false);\n    Unused << hadErrors;\n    src = src.From(read);\n    uint32_t streamWritten;\n    nsresult rv = mOutStream->Write(reinterpret_cast<char*>(dst.Elements()),\n                                    written, &streamWritten);\n    *aSuccess = NS_SUCCEEDED(rv) && written == streamWritten;\n    if (!(*aSuccess)) {\n      return rv;\n    }\n    if (result == kInputEmpty) {\n      return NS_OK;\n    }\n  }",
      "    createMetricsAndAssertIncrementsCumulativeMetricsField(\n        [](auto metrics) { metrics->onFailure(true /*isSameKeyResharding*/); },\n        Section::kRoot,\n        \"countSameKeyFailed\");\n}\n\nTEST_F(ShardingDataTransformInstanceMetricsTest, OnCanceledIncrementsCumulativeMetrics) {\n    RAIIServerParameterControllerForTest controller(\"featureFlagReshardingImprovements\", true);\n    createMetricsAndAssertIncrementsCumulativeMetricsField(\n        [](auto metrics) { metrics->onCanceled(false /*isSameKeyResharding*/); },\n        Section::kRoot,\n        \"countCanceled\");\n    createMetricsAndAssertIncrementsCumulativeMetricsField(\n        [](auto metrics) { metrics->onCanceled(true /*isSameKeyResharding*/); },\n        Section::kRoot,\n        \"countSameKeyCanceled\");\n}\n\nTEST_F(ShardingDataTransformInstanceMetricsTest, SetChunkImbalanceIncrementsCumulativeMetrics) {\n    createMetricsAndAssertIncrementsCumulativeMetricsField(\n        [](auto metrics) { metrics->setLastOpEndingChunkImbalance(1); },\n        Section::kRoot,\n        \"lastOpEndingChunkImbalance\");\n}\n\nTEST_F(ShardingDataTransformInstanceMetricsTest,\n       OnReadDuringCriticalSectionIncrementsCumulativeMetrics) {\n    createMetricsAndAssertIncrementsCumulativeMetricsField(\n        [](auto metrics) { metrics->onReadDuringCriticalSection(); },\n        Section::kActive,\n        \"countReadsDuringCriticalSection\");\n}\n\nTEST_F(ShardingDataTransformInstanceMetricsTest,\n       OnWriteDuringCriticalSectionIncrementsCumulativeMetrics) {\n    createMetricsAndAssertIncrementsCumulativeMetricsField(\n        [](auto metrics) { metrics->onWriteDuringCriticalSection(); },\n        Section::kActive,\n        \"countWritesDuringCriticalSection\");\n}\n\nTEST_F(ShardingDataTransformInstanceMetricsTest,\n       OnWriteToStashCollectionsIncrementsCumulativeMetrics) {\n    createMetricsAndAssertIncrementsCumulativeMetricsField(\n        [](auto metrics) { metrics->onWriteToStashedCollections(); },\n        Section::kActive,\n        \"countWritesToStashCollections\");\n}\n\nTEST_F(ShardingDataTransformInstanceMetricsTest,\n       OnCloningRemoteBatchRetrievalIncrementsCumulativeMetricsCount) {\n    createMetricsAndAssertIncrementsCumulativeMetricsField(\n        [](auto metrics) { metrics->onCloningRemoteBatchRetrieval(Milliseconds{0}); },\n        Section::kLatencies,\n        \"collectionCloningTotalRemoteBatchesRetrieved\");\n}\n\nTEST_F(ShardingDataTransformInstanceMetricsTest,\n       OnCloningRemoteBatchRetrievalIncrementsCumulativeMetricsTime) {\n    createMetricsAndAssertIncrementsCumulativeMetricsField(\n        [](auto metrics) { metrics->onCloningRemoteBatchRetrieval(Milliseconds{1}); },\n        Section::kLatencies,\n        \"collectionCloningTotalRemoteBatchRetrievalTimeMillis\");\n}",
      "#include \"mongo/base/error_codes.h\"\n#include \"mongo/db/auth/action_type.h\"\n#include \"mongo/db/auth/authorization_session.h\"\n#include \"mongo/db/auth/resource_pattern.h\"\n#include \"mongo/db/commands.h\"\n#include \"mongo/db/namespace_string.h\"\n#include \"mongo/db/operation_context.h\"\n#include \"mongo/db/service_context.h\"\n#include \"mongo/logv2/log.h\"\n#include \"mongo/s/client/shard.h\"\n#include \"mongo/s/client/shard_registry.h\"\n#include \"mongo/s/grid.h\"\n#include \"mongo/s/request_types/abort_reshard_collection_gen.h\"\n#include \"mongo/s/resharding/resharding_feature_flag_gen.h\"\n#include \"mongo/util/assert_util.h\"\n\n#define MONGO_LOGV2_DEFAULT_COMPONENT ::mongo::logv2::LogComponent::kCommand\n\n\nnamespace mongo {\nnamespace {\n\nclass ClusterAbortUnshardCollectionCmd : public TypedCommand<ClusterAbortUnshardCollectionCmd> {\npublic:\n    using Request = AbortUnshardCollection;\n\n    class Invocation final : public InvocationBase {\n    public:\n        using InvocationBase::InvocationBase;\n\n        void typedRun(OperationContext* opCtx) {\n            const NamespaceString& nss = ns();\n\n            LOGV2(8018600, \"Beginning unshard collection abort operation\", logAttrs(ns()));\n\n            ConfigsvrAbortReshardCollection configsvrAbortReshardCollection(nss);\n            configsvrAbortReshardCollection.setDbName(request().getDbName());\n\n            auto configShard = Grid::get(opCtx)->shardRegistry()->getConfigShard();\n            auto cmdResponse = uassertStatusOK(configShard->runCommandWithFixedRetryAttempts(\n                opCtx,\n                ReadPreferenceSetting(ReadPreference::PrimaryOnly),\n                DatabaseName::kAdmin,\n                CommandHelpers::appendMajorityWriteConcern(\n                    configsvrAbortReshardCollection.toBSON({}), opCtx->getWriteConcern()),\n                Shard::RetryPolicy::kIdempotent));\n            uassertStatusOK(cmdResponse.commandStatus);\n            uassertStatusOK(cmdResponse.writeConcernStatus);\n        }\n\n    private:\n        NamespaceString ns() const override {\n            return request().getCommandParameter();\n        }\n\n        bool supportsWriteConcern() const override {\n            return false;\n        }\n\n        void doCheckAuthorization(OperationContext* opCtx) const override {\n            uassert(ErrorCodes::Unauthorized,\n                    \"Unauthorized\",\n                    AuthorizationSession::get(opCtx->getClient())\n                        ->isAuthorizedForActionsOnResource(ResourcePattern::forExactNamespace(ns()),",
      "    virtual std::wstring convert(converter_base::conversion_type how,wchar_t const *begin,wchar_t const *end,int flags = 0) const \n    {\n        switch(how) {\n        case converter_base::upper_case:\n            return towupper_l(begin,end,lc_);\n        case converter_base::lower_case:\n            return towlower_l(begin,end,lc_);\n        case converter_base::case_folding:\n            return wcsfold(begin,end);\n        case converter_base::normalization:\n            return wcsnormalize(static_cast<norm_type>(flags),begin,end);\n        default:\n            return std::wstring(begin,end-begin);\n        }\n    }\nprivate:\n    winlocale lc_;\n};\n\nclass utf8_converter : public converter<char> {\npublic:\n    utf8_converter(winlocale const &lc,size_t refs = 0) : \n        converter<char>(refs),\n        lc_(lc)\n    {\n    }\n    virtual std::string convert(converter_base::conversion_type how,char const *begin,char const *end,int flags = 0) const \n    {\n        std::wstring tmp = conv::to_utf<wchar_t>(begin,end,\"UTF-8\");\n        wchar_t const *wb=tmp.c_str();\n        wchar_t const *we=wb+tmp.size();\n\n        std::wstring res;\n\n        switch(how) {\n        case upper_case:\n            res = towupper_l(wb,we,lc_);\n            break;\n        case lower_case:\n            res = towlower_l(wb,we,lc_);\n            break;\n        case case_folding:\n            res = wcsfold(wb,we);\n            break;\n        case normalization:\n            res = wcsnormalize(static_cast<norm_type>(flags),wb,we);\n            break;\n        default:\n            res = tmp; // make gcc happy\n        }\n        return conv::from_utf(res,\"UTF-8\");\n    }\nprivate:\n    winlocale lc_;\n};\n\nstd::locale create_convert( std::locale const &in,\n                            winlocale const &lc,\n                            character_facet_type type)\n{\n        switch(type) {\n        case char_facet: \n            return std::locale(in,new utf8_converter(lc));\n        case wchar_t_facet:",
      "typedef DTPerformanceSessionRef (*DTPerformanceSessionCreateFunction)(\n    CFStringRef, CFStringRef, CFDictionaryRef, CFErrorRef*);\ntypedef bool (*DTPerformanceSessionAddInstrumentFunction)(\n    DTPerformanceSessionRef, CFStringRef, CFDictionaryRef, dtps_errorcallback_t,\n    CFErrorRef*);\ntypedef bool (*DTPerformanceSessionIsRecordingFunction)(\n    DTPerformanceSessionRef);\ntypedef bool (*DTPerformanceSessionStartFunction)(DTPerformanceSessionRef,\n                                                  CFArrayRef, CFErrorRef*);\ntypedef bool (*DTPerformanceSessionStopFunction)(DTPerformanceSessionRef,\n                                                 CFArrayRef, CFErrorRef*);\ntypedef bool (*DTPerformanceSessionSaveFunction)(DTPerformanceSessionRef,\n                                                 CFStringRef, CFErrorRef*);\n\n}  // extern \"C\"\n\nnamespace Instruments {\n\nstatic const int kSamplingInterval = 20;  // microseconds\n\ntemplate <typename T>\nclass AutoReleased {\n public:\n  MOZ_IMPLICIT AutoReleased(T aTypeRef) : mTypeRef(aTypeRef) {}\n  ~AutoReleased() {\n    if (mTypeRef) {\n      CFRelease(mTypeRef);\n    }\n  }\n\n  operator T() { return mTypeRef; }\n\n private:\n  T mTypeRef;\n};\n\n#  define DTPERFORMANCE_SYMBOLS               \\\n    SYMBOL(DTPerformanceSessionCreate)        \\\n    SYMBOL(DTPerformanceSessionAddInstrument) \\\n    SYMBOL(DTPerformanceSessionIsRecording)   \\\n    SYMBOL(DTPerformanceSessionStart)         \\\n    SYMBOL(DTPerformanceSessionStop)          \\\n    SYMBOL(DTPerformanceSessionSave)\n\n#  define SYMBOL(_sym) _sym##Function _sym = nullptr;\n\nDTPERFORMANCE_SYMBOLS\n\n#  undef SYMBOL\n\nvoid* LoadDTPerformanceLibraries(bool dontLoad) {\n  int flags = RTLD_LAZY | RTLD_LOCAL | RTLD_NODELETE;\n  if (dontLoad) {\n    flags |= RTLD_NOLOAD;\n  }\n\n  void* DTPerformanceLibrary = dlopen(DTPerformanceLibraryPath, flags);\n  if (!DTPerformanceLibrary) {\n    DTPerformanceLibrary = dlopen(OldDTPerformanceLibraryPath, flags);\n  }\n  return DTPerformanceLibrary;\n}\n\nbool LoadDTPerformanceLibrary() {",
      "        }\n    } else if (readToken(\"NumberInt\")) {\n        Status ret = numberInt(fieldName, builder);\n        if (ret != Status::OK()) {\n            return ret;\n        }\n    } else if (readToken(\"NumberDecimal\")) {\n        Status ret = numberDecimal(fieldName, builder);\n        if (ret != Status::OK()) {\n            return ret;\n        }\n    } else if (readToken(\"Dbref\") || readToken(\"DBRef\")) {\n        Status ret = dbRef(fieldName, builder);\n        if (ret != Status::OK()) {\n            return ret;\n        }\n    } else if (readToken(\"UUID\")) {\n        Status ret = uuid(fieldName, builder);\n        if (ret != Status::OK()) {\n            return ret;\n        }\n    } else if (peekToken(FORWARDSLASH)) {\n        Status ret = regex(fieldName, builder);\n        if (ret != Status::OK()) {\n            return ret;\n        }\n    } else if (peekToken(DOUBLEQUOTE) || peekToken(SINGLEQUOTE)) {\n        std::string valueString;\n        valueString.reserve(STRINGVAL_RESERVE_SIZE);\n        Status ret = quotedString(&valueString);\n        if (ret != Status::OK()) {\n            return ret;\n        }\n        builder.append(fieldName, valueString);\n    } else if (readToken(\"true\")) {\n        builder.append(fieldName, true);\n    } else if (readToken(\"false\")) {\n        builder.append(fieldName, false);\n    } else if (readToken(\"null\")) {\n        builder.appendNull(fieldName);\n    } else if (readToken(\"undefined\")) {\n        builder.appendUndefined(fieldName);\n    } else if (readToken(\"NaN\")) {\n        builder.append(fieldName, std::numeric_limits<double>::quiet_NaN());\n    } else if (readToken(\"Infinity\")) {\n        builder.append(fieldName, std::numeric_limits<double>::infinity());\n    } else if (readToken(\"-Infinity\")) {\n        builder.append(fieldName, -std::numeric_limits<double>::infinity());\n    } else {\n        Status ret = number(fieldName, builder);\n        if (ret != Status::OK()) {\n            return ret.withContext(\n                \"Attempted to parse a number array element, not recognizing any other keywords. \"\n                \"Perhaps you left a trailing comma or forgot a '{'?\");\n        }\n    }\n    return Status::OK();\n}\n\nStatus JParse::parse(BSONObjBuilder& builder) {\n    return isArray() ? array(\"UNUSED\", builder, false) : object(\"UNUSED\", builder, false);\n}\n\nStatus JParse::object(StringData fieldName, BSONObjBuilder& builder, bool subObject) {"
    ]
  },
  {
    "id": "grafana/grafana",
    "org": "grafana",
    "avatarURL": "https://avatars.githubusercontent.com/u/7195757?v=4",
    "name": "grafana/grafana",
    "url": "https://github.com/grafana/grafana",
    "lang": "Go, TypeScript",
    "star_num": 56974,
    "fork_num": 11232,
    "snippets": [
      "import { getBackendSrv } from '@grafana/runtime';\nimport { updateConfigurationSubtitle } from 'app/core/actions';\nimport { ThunkResult } from 'app/types';\n\nimport { organizationLoaded, userOrganizationsLoaded } from './reducers';\n\ntype OrganizationDependencies = { getBackendSrv: typeof getBackendSrv };\n\nexport function loadOrganization(\n  dependencies: OrganizationDependencies = { getBackendSrv: getBackendSrv }\n): ThunkResult<any> {\n  return async (dispatch) => {\n    const organizationResponse = await dependencies.getBackendSrv().get('/api/org');\n    dispatch(organizationLoaded(organizationResponse));\n\n    return organizationResponse;\n  };\n}\n\nexport function updateOrganization(\n  dependencies: OrganizationDependencies = { getBackendSrv: getBackendSrv }\n): ThunkResult<any> {\n  return async (dispatch, getStore) => {\n    const organization = getStore().organization.organization;\n\n    await dependencies.getBackendSrv().put('/api/org', { name: organization.name });\n\n    dispatch(updateConfigurationSubtitle(organization.name));\n    dispatch(loadOrganization(dependencies));\n  };\n}\n\nexport function setUserOrganization(\n  orgId: number,\n  dependencies: OrganizationDependencies = { getBackendSrv: getBackendSrv }\n): ThunkResult<any> {\n  return async (dispatch) => {\n    const organizationResponse = await dependencies.getBackendSrv().post('/api/user/using/' + orgId);\n\n    dispatch(updateConfigurationSubtitle(organizationResponse.name));\n  };\n}\n\nexport function createOrganization(\n  newOrg: { name: string },\n  dependencies: OrganizationDependencies = { getBackendSrv: getBackendSrv }\n): ThunkResult<any> {\n  return async (dispatch) => {\n    const result = await dependencies.getBackendSrv().post('/api/orgs/', newOrg);\n\n    dispatch(setUserOrganization(result.orgId));\n  };\n}\n\nexport function getUserOrganizations(\n  dependencies: OrganizationDependencies = { getBackendSrv: getBackendSrv }\n): ThunkResult<any> {\n  return async (dispatch) => {\n    const result = await dependencies.getBackendSrv().get('/api/user/orgs');\n    dispatch(userOrganizationsLoaded(result));\n\n    return result;\n  };\n}",
      "\t\"net/url\"\n\t\"path\"\n\n\t\"github.com/grafana/grafana-azure-sdk-go/azcredentials\"\n\t\"github.com/grafana/grafana-azure-sdk-go/azhttpclient\"\n\t\"github.com/grafana/grafana-azure-sdk-go/azsettings\"\n\t\"github.com/grafana/grafana-azure-sdk-go/util/maputil\"\n\t\"github.com/grafana/grafana-plugin-sdk-go/backend\"\n\tsdkhttpclient \"github.com/grafana/grafana-plugin-sdk-go/backend/httpclient\"\n\n\t\"github.com/grafana/grafana/pkg/tsdb/prometheus/utils\"\n)\n\nvar (\n\tazurePrometheusScopes = map[string][]string{\n\t\tazsettings.AzurePublic:       {\"https://prometheus.monitor.azure.com/.default\"},\n\t\tazsettings.AzureChina:        {\"https://prometheus.monitor.azure.cn/.default\"},\n\t\tazsettings.AzureUSGovernment: {\"https://prometheus.monitor.azure.us/.default\"},\n\t}\n)\n\nfunc ConfigureAzureAuthentication(settings backend.DataSourceInstanceSettings, azureSettings *azsettings.AzureSettings, clientOpts *sdkhttpclient.Options) error {\n\tjsonData, err := utils.GetJsonData(settings)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to get jsonData: %w\", err)\n\t}\n\tcredentials, err := azcredentials.FromDatasourceData(jsonData, settings.DecryptedSecureJSONData)\n\tif err != nil {\n\t\terr = fmt.Errorf(\"invalid Azure credentials: %w\", err)\n\t\treturn err\n\t}\n\n\tif credentials != nil {\n\t\tvar scopes []string\n\n\t\tif scopes, err = getOverriddenScopes(jsonData); err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tif scopes == nil {\n\t\t\tif scopes, err = getPrometheusScopes(azureSettings, credentials); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\t\t}\n\n\t\tauthOpts := azhttpclient.NewAuthOptions(azureSettings)\n\t\tauthOpts.Scopes(scopes)\n\t\tazhttpclient.AddAzureAuthentication(clientOpts, authOpts, credentials)\n\t}\n\n\treturn nil\n}\n\nfunc getOverriddenScopes(jsonData map[string]any) ([]string, error) {\n\tresourceIdStr, err := maputil.GetStringOptional(jsonData, \"azureEndpointResourceId\")\n\tif err != nil {\n\t\terr = fmt.Errorf(\"overridden resource ID (audience) invalid\")\n\t\treturn nil, err\n\t} else if resourceIdStr == \"\" {\n\t\treturn nil, nil\n\t}\n\n\tresourceId, err := url.Parse(resourceIdStr)\n\tif err != nil || resourceId.Scheme == \"\" || resourceId.Host == \"\" {",
      "  // Make sure the mock works\n  expect(Date.now()).toEqual(dateNowValue);\n  expect(console.warn).toHaveBeenCalledTimes(0);\n\n  // Call the deprecation many times\n  deprecationWarning('file', 'oldName', 'newName');\n  deprecationWarning('file', 'oldName', 'newName');\n  deprecationWarning('file', 'oldName', 'newName');\n  deprecationWarning('file', 'oldName', 'newName');\n  deprecationWarning('file', 'oldName', 'newName');\n  expect(console.warn).toHaveBeenCalledTimes(1);\n\n  // Increment the time by 1min\n  dateNowValue += 60000;\n  deprecationWarning('file', 'oldName', 'newName');\n  deprecationWarning('file', 'oldName', 'newName');\n  expect(console.warn).toHaveBeenCalledTimes(2);\n\n  deprecationWarning('file2', 'oldName', 'newName');\n  deprecationWarning('file2', 'oldName', 'newName');\n  deprecationWarning('file2', 'oldName', 'newName');\n  expect(console.warn).toHaveBeenCalledTimes(3);\n\n  // or restoreMocks automatically?\n  spyConsoleWarn.mockRestore();\n  spyDateNow.mockRestore();\n});\n",
      "}\n\ntype DashboardUpdater struct {\n\tpluginStore            plugins.Store\n\tpluginDashboardService plugindashboards.Service\n\tdashboardImportService dashboardimport.Service\n\tpluginSettingsService  pluginsettings.Service\n\tdashboardPluginService dashboards.PluginService\n\tdashboardService       dashboards.DashboardService\n\tlogger                 log.Logger\n}\n\nfunc (du *DashboardUpdater) updateAppDashboards() {\n\tdu.logger.Debug(\"Looking for app dashboard updates\")\n\n\tpluginSettings, err := du.pluginSettingsService.GetPluginSettings(context.Background(), &pluginsettings.GetArgs{OrgID: 0})\n\tif err != nil {\n\t\tdu.logger.Error(\"Failed to get all plugin settings\", \"error\", err)\n\t\treturn\n\t}\n\n\tfor _, pluginSetting := range pluginSettings {\n\t\t// ignore disabled plugins\n\t\tif !pluginSetting.Enabled {\n\t\t\tcontinue\n\t\t}\n\n\t\tif pluginDef, exists := du.pluginStore.Plugin(context.Background(), pluginSetting.PluginID); exists {\n\t\t\tif pluginDef.Info.Version != pluginSetting.PluginVersion {\n\t\t\t\tdu.syncPluginDashboards(context.Background(), pluginDef, pluginSetting.OrgID)\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc (du *DashboardUpdater) syncPluginDashboards(ctx context.Context, plugin plugins.PluginDTO, orgID int64) {\n\tdu.logger.Info(\"Syncing plugin dashboards to DB\", \"pluginId\", plugin.ID)\n\n\t// Get plugin dashboards\n\treq := &plugindashboards.ListPluginDashboardsRequest{\n\t\tOrgID:    orgID,\n\t\tPluginID: plugin.ID,\n\t}\n\tresp, err := du.pluginDashboardService.ListPluginDashboards(ctx, req)\n\tif err != nil {\n\t\tdu.logger.Error(\"Failed to load app dashboards\", \"error\", err)\n\t\treturn\n\t}\n\n\t// Update dashboards with updated revisions\n\tfor _, dash := range resp.Items {\n\t\t// remove removed ones\n\t\tif dash.Removed {\n\t\t\tdu.logger.Info(\"Deleting plugin dashboard\", \"pluginId\", plugin.ID, \"dashboard\", dash.Slug)\n\n\t\t\tif err := du.dashboardService.DeleteDashboard(ctx, dash.DashboardId, orgID); err != nil {\n\t\t\t\tdu.logger.Error(\"Failed to auto update app dashboard\", \"pluginId\", plugin.ID, \"error\", err)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tcontinue\n\t\t}\n\n\t\t// update updated ones",
      "\t\tvar response errorResponseBody\n\t\terr = json.Unmarshal(responseBody, &response)\n\t\trequire.NoError(t, err)\n\n\t\trequire.Contains(t, response.Message, \"Permissions needed: datasources:write\")\n\n\t\trequire.NoError(t, res.Body.Close())\n\t})\n\n\tt.Run(\"missing source data source in body should result in a 400\", func(t *testing.T) {\n\t\tres := ctx.Post(PostParams{\n\t\t\turl:  fmt.Sprintf(\"/api/datasources/uid/%s/correlations\", \"nonexistent-ds-uid\"),\n\t\t\tbody: `{}`,\n\t\t\tuser: adminUser,\n\t\t})\n\t\trequire.Equal(t, http.StatusBadRequest, res.StatusCode)\n\n\t\tresponseBody, err := io.ReadAll(res.Body)\n\t\trequire.NoError(t, err)\n\n\t\tvar response errorResponseBody\n\t\terr = json.Unmarshal(responseBody, &response)\n\t\trequire.NoError(t, err)\n\n\t\trequire.Equal(t, \"bad request data\", response.Message)\n\n\t\trequire.NoError(t, res.Body.Close())\n\t})\n\n\tt.Run(\"inexistent source data source should result in a 404\", func(t *testing.T) {\n\t\tres := ctx.Post(PostParams{\n\t\t\turl: fmt.Sprintf(\"/api/datasources/uid/%s/correlations\", \"nonexistent-ds-uid\"),\n\t\t\tbody: fmt.Sprintf(`{\n\t\t\t\t\t\"targetUID\": \"%s\",\n\t\t\t\t\t\"config\": {\n\t\t\t\t\t\t\"type\": \"query\",\n\t\t\t\t\t\t\"field\": \"message\",\n\t\t\t\t\t\t\"target\": {}\n\t\t\t\t\t}\n\t\t\t\t}`, writableDs),\n\t\t\tuser: adminUser,\n\t\t})\n\t\trequire.Equal(t, http.StatusNotFound, res.StatusCode)\n\n\t\tresponseBody, err := io.ReadAll(res.Body)\n\t\trequire.NoError(t, err)\n\n\t\tvar response errorResponseBody\n\t\terr = json.Unmarshal(responseBody, &response)\n\t\trequire.NoError(t, err)\n\n\t\trequire.Equal(t, \"Data source not found\", response.Message)\n\t\trequire.Equal(t, correlations.ErrSourceDataSourceDoesNotExists.Error(), response.Error)\n\n\t\trequire.NoError(t, res.Body.Close())\n\t})\n\n\tt.Run(\"inexistent target data source should result in a 404 if config.type=query\", func(t *testing.T) {\n\t\tres := ctx.Post(PostParams{\n\t\t\turl: fmt.Sprintf(\"/api/datasources/uid/%s/correlations\", writableDs),\n\t\t\tbody: `{\n\t\t\t\t\t\"targetUID\": \"nonexistent-uid-uid\",\n\t\t\t\t\t\"config\": {\n\t\t\t\t\t\t\"type\": \"query\",",
      "          type: FieldType.string,\n          config: {},\n          values: ['foo=\"bar\" bar=\"baz\"', 'foo=\"bar\" bar=\"baz\"'],\n        },\n      ],\n    };\n\n    it('suggest logfmt parser when no parser in query', () => {\n      expect(getQueryHints('{job=\"grafana\"', [logfmtSeries])).toEqual(\n        expect.arrayContaining([expect.objectContaining({ type: 'ADD_LOGFMT_PARSER' })])\n      );\n    });\n\n    it('does not suggest parser when parser in query', () => {\n      expect(getQueryHints('{job=\"grafana\" | logfmt', [logfmtSeries])).not.toEqual(\n        expect.arrayContaining([expect.objectContaining({ type: 'ADD_LOGFMT_PARSER' })])\n      );\n    });\n  });\n\n  describe('when series with json and logfmt logs', () => {\n    const jsonAndLogfmtSeries: DataFrame = {\n      name: 'logs',\n      length: 2,\n      fields: [\n        {\n          name: 'Line',\n          type: FieldType.string,\n          config: {},\n          values: ['{\"foo\": \"bar\", \"bar\": \"baz\"}', 'foo=\"bar\" bar=\"baz\"'],\n        },\n      ],\n    };\n\n    it('suggest logfmt and json parser when no parser in query', () => {\n      expect(getQueryHints('{job=\"grafana\"', [jsonAndLogfmtSeries])).toEqual(\n        expect.arrayContaining([\n          expect.objectContaining({ type: 'ADD_JSON_PARSER' }),\n          expect.objectContaining({ type: 'ADD_LOGFMT_PARSER' }),\n        ])\n      );\n    });\n\n    it('does not suggest parser when parser in query', () => {\n      expect(getQueryHints('{job=\"grafana\"} | json', [jsonAndLogfmtSeries])).not.toEqual(\n        expect.arrayContaining([\n          expect.objectContaining({ type: 'ADD_JSON_PARSER' }),\n          expect.objectContaining({ type: 'ADD_LOGFMT_PARSER' }),\n        ])\n      );\n    });\n  });\n\n  describe('when series with json and packed logs', () => {\n    const jsonAndPackSeries: DataFrame = {\n      name: 'logs',\n      length: 2,\n      fields: [\n        {\n          name: 'Line',\n          type: FieldType.string,\n          config: {},\n          values: ['{\"_entry\": \"bar\", \"bar\": \"baz\"}'],\n        },",
      "\t\t\t}\n\t\t\treturn t.leaves[i].handle, true\n\t\tcase _PATTERN_PATH_EXT:\n\t\t\tj := strings.LastIndex(url, \".\")\n\t\t\tif j > -1 {\n\t\t\t\tparams[\":path\"] = url[:j]\n\t\t\t\tparams[\":ext\"] = url[j+1:]\n\t\t\t} else {\n\t\t\t\tparams[\":path\"] = url\n\t\t\t}\n\t\t\treturn t.leaves[i].handle, true\n\t\tcase _PATTERN_HOLDER:\n\t\t\tparams[t.leaves[i].wildcards[0]] = url\n\t\t\treturn t.leaves[i].handle, true\n\t\tcase _PATTERN_MATCH_ALL:\n\t\t\tparams[\"*\"] = url\n\t\t\tparams[\"*\"+strconv.Itoa(globLevel)] = url\n\t\t\treturn t.leaves[i].handle, true\n\t\t}\n\t}\n\treturn nil, false\n}\n\nfunc (t *Tree) matchSubtree(globLevel int, segment, url string, params map[string]string) (Handle, bool) {\n\tunescapedSegment, err := urlpkg.PathUnescape(segment)\n\tif err != nil {\n\t\treturn nil, false\n\t}\n\tfor i := 0; i < len(t.subtrees); i++ {\n\t\tswitch t.subtrees[i].typ {\n\t\tcase _PATTERN_STATIC:\n\t\t\tif t.subtrees[i].pattern == unescapedSegment {\n\t\t\t\tif handle, ok := t.subtrees[i].matchNextSegment(globLevel, url, params); ok {\n\t\t\t\t\treturn handle, true\n\t\t\t\t}\n\t\t\t}\n\t\tcase _PATTERN_REGEXP:\n\t\t\tresults := t.subtrees[i].reg.FindStringSubmatch(unescapedSegment)\n\t\t\tif len(results)-1 != len(t.subtrees[i].wildcards) {\n\t\t\t\tbreak\n\t\t\t}\n\n\t\t\tfor j := 0; j < len(t.subtrees[i].wildcards); j++ {\n\t\t\t\tparams[t.subtrees[i].wildcards[j]] = results[j+1]\n\t\t\t}\n\t\t\tif handle, ok := t.subtrees[i].matchNextSegment(globLevel, url, params); ok {\n\t\t\t\treturn handle, true\n\t\t\t}\n\t\tcase _PATTERN_HOLDER:\n\t\t\tif handle, ok := t.subtrees[i].matchNextSegment(globLevel+1, url, params); ok {\n\t\t\t\tparams[t.subtrees[i].wildcards[0]] = unescapedSegment\n\t\t\t\treturn handle, true\n\t\t\t}\n\t\tcase _PATTERN_MATCH_ALL:\n\t\t\tif handle, ok := t.subtrees[i].matchNextSegment(globLevel+1, url, params); ok {\n\t\t\t\tparams[\"*\"+strconv.Itoa(globLevel)] = unescapedSegment\n\t\t\t\treturn handle, true\n\t\t\t}\n\t\tdefault: // ignore\n\t\t}\n\t}\n\n\tif len(t.leaves) > 0 {\n\t\tleaf := t.leaves[len(t.leaves)-1]",
      "import { useMemo } from 'react';\n\nimport { useQuery } from '../components/QueryEditor/ElasticsearchQueryContext';\nimport { MetricAggregation, BucketAggregation } from '../types';\n\nconst toId = <T extends { id: unknown }>(e: T): T['id'] => e.id;\n\nconst toInt = (idString: string) => parseInt(idString, 10);\n\nexport const useNextId = (): MetricAggregation['id'] | BucketAggregation['id'] => {\n  const { metrics, bucketAggs } = useQuery();\n\n  return useMemo(\n    () =>\n      (Math.max(...[...(metrics?.map(toId) || ['0']), ...(bucketAggs?.map(toId) || ['0'])].map(toInt)) + 1).toString(),\n    [metrics, bucketAggs]\n  );\n};\n",
      "package util\n\nimport (\n\t\"testing\"\n\n\t\"github.com/google/go-cmp/cmp\"\n)\n\nfunc TestReverse(t *testing.T) {\n\tinput := []int{1, 2, 3, 4, 5}\n\n\tif diff := cmp.Diff([]int{5, 4, 3, 2, 1}, Reverse(input)); diff != \"\" {\n\t\tt.Errorf(\"Result mismatch (-want +got):\\n%s\", diff)\n\t}\n}\n",
      "    });\n  });\n\n  return graph;\n}\n\n/**\n * parse an expression like \"$A > $B\" or \"${FOO BAR} > 0\" to an array of refIds\n */\nexport function parseRefsFromMathExpression(input: string): string[] {\n  // we'll use two regular expressions, one for \"${var}\" and one for \"$var\"\n  const r1 = new RegExp(/\\$\\{(?<var>[a-zA-Z0-9_ ]+?)\\}/gm);\n  const r2 = new RegExp(/\\$(?<var>[a-zA-Z0-9_]+)/gm);\n\n  const m1 = Array.from(input.matchAll(r1)).map((m) => m.groups?.var);\n  const m2 = Array.from(input.matchAll(r2)).map((m) => m.groups?.var);\n\n  return compact(uniq([...m1, ...m2]));\n}\n\nexport const getOriginOfRefId = memoize(_getOriginsOfRefId, (refId, graph) => refId + fingerprintGraph(graph));\n\nexport function _getOriginsOfRefId(refId: string, graph: Graph): string[] {\n  const node = graph.getNode(refId);\n\n  let origins: Node[] = [];\n\n  // recurse through \"node > inputEdges > inputNode\"\n  function findChildNode(node: Node) {\n    const inputEdges = node.inputEdges;\n\n    if (inputEdges.length > 0) {\n      inputEdges.forEach((edge) => {\n        if (edge.inputNode) {\n          findChildNode(edge.inputNode);\n        }\n      });\n    } else {\n      origins?.push(node);\n    }\n  }\n\n  findChildNode(node);\n\n  return origins.map((origin) => origin.name);\n}\n\n// create a unique fingerprint of the DAG\nexport function fingerprintGraph(graph: Graph) {\n  return Object.keys(graph.nodes)\n    .map((name) => {\n      const n = graph.nodes[name];\n      let outputEdges = n.outputEdges.map((e: Edge) => e.outputNode?.name).join(', ');\n      let inputEdges = n.inputEdges.map((e: Edge) => e.inputNode?.name).join(', ');\n      return `${n.name}:${outputEdges}:${inputEdges}`;\n    })\n    .join(' ');\n}\n\n// create a unique fingerprint of the array of queries\nexport function fingerPrintQueries(queries: AlertQuery[]) {\n  return queries\n    .map((query) => {\n      const type = isExpressionQuery(query.model) ? query.model.type : query.queryType;"
    ]
  },
  {
    "id": "prometheus/prometheus",
    "org": "prometheus",
    "avatarURL": "https://avatars.githubusercontent.com/u/3380462?v=4",
    "name": "prometheus/prometheus",
    "url": "https://github.com/prometheus/prometheus",
    "lang": "Go",
    "star_num": 49752,
    "fork_num": 8457,
    "snippets": [
      "// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\npackage index\n\nimport (\n\t\"testing\"\n\n\t\"github.com/stretchr/testify/require\"\n)\n\nfunc TestPostingsStats(t *testing.T) {\n\tstats := &maxHeap{}\n\tmax := 3000000\n\theapLength := 10\n\tstats.init(heapLength)\n\tfor i := 0; i < max; i++ {\n\t\titem := Stat{\n\t\t\tName:  \"Label-da\",\n\t\t\tCount: uint64(i),\n\t\t}\n\t\tstats.push(item)\n\t}\n\tstats.push(Stat{Name: \"Stuff\", Count: 3000000})\n\n\tdata := stats.get()\n\trequire.Equal(t, 10, len(data))\n\tfor i := 0; i < heapLength; i++ {\n\t\trequire.Equal(t, uint64(max-i), data[i].Count)\n\t}\n}\n\nfunc TestPostingsStats2(t *testing.T) {\n\tstats := &maxHeap{}\n\theapLength := 10\n\n\tstats.init(heapLength)\n\tstats.push(Stat{Name: \"Stuff\", Count: 10})\n\tstats.push(Stat{Name: \"Stuff\", Count: 11})\n\tstats.push(Stat{Name: \"Stuff\", Count: 1})\n\tstats.push(Stat{Name: \"Stuff\", Count: 6})\n\n\tdata := stats.get()\n\n\trequire.Equal(t, 4, len(data))\n\trequire.Equal(t, uint64(11), data[0].Count)\n}\n\nfunc BenchmarkPostingStatsMaxHep(b *testing.B) {\n\tstats := &maxHeap{}\n\tmax := 9000000\n\theapLength := 10\n\tb.ResetTimer()\n\tfor n := 0; n < b.N; n++ {\n\t\tstats.init(heapLength)\n\t\tfor i := 0; i < max; i++ {\n\t\t\titem := Stat{\n\t\t\t\tName:  \"Label-da\",",
      "\t\t\t\t`[{\"labels\": {\"k\": \"1\"}, \"targets\": [\"127.0.0.1\"]}, {\"labels\": {\"k\": \"2\"}, \"targets\": [\"127.0.0.1\"]}, {\"labels\": {\"k\": \"3\"}, \"targets\": [\"127.0.0.1\"]}]`,\n\t\t\t\t`[{\"labels\": {\"k\": \"1\"}, \"targets\": [\"127.0.0.1\"]}]`,\n\t\t\t\t`[{\"labels\": {\"k\": \"v\"}, \"targets\": [\"127.0.0.2\"]}, {\"labels\": {\"k\": \"vv\"}, \"targets\": [\"127.0.0.3\"]}]`,\n\t\t\t},\n\t\t\texpectedTargets: [][]*targetgroup.Group{\n\t\t\t\t{\n\t\t\t\t\t{\n\t\t\t\t\t\tTargets: []model.LabelSet{\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tmodel.AddressLabel: model.LabelValue(\"127.0.0.1\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tLabels: model.LabelSet{\n\t\t\t\t\t\t\tmodel.LabelName(\"k\"):          model.LabelValue(\"1\"),\n\t\t\t\t\t\t\tmodel.LabelName(\"__meta_url\"): model.LabelValue(ts.URL),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tSource: urlSource(ts.URL, 0),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tTargets: []model.LabelSet{\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tmodel.AddressLabel: model.LabelValue(\"127.0.0.1\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tLabels: model.LabelSet{\n\t\t\t\t\t\t\tmodel.LabelName(\"k\"):          model.LabelValue(\"2\"),\n\t\t\t\t\t\t\tmodel.LabelName(\"__meta_url\"): model.LabelValue(ts.URL),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tSource: urlSource(ts.URL, 1),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tTargets: []model.LabelSet{\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tmodel.AddressLabel: model.LabelValue(\"127.0.0.1\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tLabels: model.LabelSet{\n\t\t\t\t\t\t\tmodel.LabelName(\"k\"):          model.LabelValue(\"3\"),\n\t\t\t\t\t\t\tmodel.LabelName(\"__meta_url\"): model.LabelValue(ts.URL),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tSource: urlSource(ts.URL, 2),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t{\n\t\t\t\t\t\tTargets: []model.LabelSet{\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tmodel.AddressLabel: model.LabelValue(\"127.0.0.1\"),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tLabels: model.LabelSet{\n\t\t\t\t\t\t\tmodel.LabelName(\"k\"):          model.LabelValue(\"1\"),\n\t\t\t\t\t\t\tmodel.LabelName(\"__meta_url\"): model.LabelValue(ts.URL),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tSource: urlSource(ts.URL, 0),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tTargets: nil,\n\t\t\t\t\t\tLabels:  nil,\n\t\t\t\t\t\tSource:  urlSource(ts.URL, 1),\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tTargets: nil,\n\t\t\t\t\t\tLabels:  nil,",
      "\n\t_, last, _ := wlog.Segments(db.wal.Dir())\n\n\t// We want to keep series records for any newly deleted series\n\t// until we've passed the last recorded segment. This prevents\n\t// the WAL having samples for series records that no longer exist.\n\tfor ref := range deleted {\n\t\tdb.deleted[ref] = last\n\t}\n\n\tdb.metrics.numWALSeriesPendingDeletion.Set(float64(len(db.deleted)))\n}\n\n// StartTime implements the Storage interface.\nfunc (db *DB) StartTime() (int64, error) {\n\treturn int64(model.Latest), nil\n}\n\n// Querier implements the Storage interface.\nfunc (db *DB) Querier(context.Context, int64, int64) (storage.Querier, error) {\n\treturn nil, ErrUnsupported\n}\n\n// ChunkQuerier implements the Storage interface.\nfunc (db *DB) ChunkQuerier(context.Context, int64, int64) (storage.ChunkQuerier, error) {\n\treturn nil, ErrUnsupported\n}\n\n// ExemplarQuerier implements the Storage interface.\nfunc (db *DB) ExemplarQuerier(context.Context) (storage.ExemplarQuerier, error) {\n\treturn nil, ErrUnsupported\n}\n\n// Appender implements storage.Storage.\nfunc (db *DB) Appender(context.Context) storage.Appender {\n\treturn db.appenderPool.Get().(storage.Appender)\n}\n\n// Close implements the Storage interface.\nfunc (db *DB) Close() error {\n\tdb.mtx.Lock()\n\tdefer db.mtx.Unlock()\n\n\tclose(db.stopc)\n\t<-db.donec\n\n\tdb.metrics.Unregister()\n\n\treturn tsdb_errors.NewMulti(db.locker.Release(), db.wal.Close()).Err()\n}\n\ntype appender struct {\n\t*DB\n\n\tpendingSeries          []record.RefSeries\n\tpendingSamples         []record.RefSample\n\tpendingHistograms      []record.RefHistogramSample\n\tpendingFloatHistograms []record.RefFloatHistogramSample\n\tpendingExamplars       []record.RefExemplar\n\n\t// Pointers to the series referenced by each element of pendingSamples.\n\t// Series lock is not held on elements.\n\tsampleSeries []*memSeries\n",
      "\tb2, err := marshalTargetGroups(res)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\trequire.Equal(t, string(b1), string(b2))\n}\n\n// marshalTargetGroups serializes a set of target groups to JSON, ignoring the\n// custom MarshalJSON function defined on the targetgroup.Group struct.\n// marshalTargetGroups can be used for making exact comparisons between target groups\n// as it will serialize all target labels.\nfunc marshalTargetGroups(tgs map[string]*targetgroup.Group) ([]byte, error) {\n\ttype targetGroupAlias targetgroup.Group\n\n\taliases := make(map[string]*targetGroupAlias, len(tgs))\n\tfor k, v := range tgs {\n\t\ttg := targetGroupAlias(*v)\n\t\taliases[k] = &tg\n\t}\n\n\treturn json.Marshal(aliases)\n}\n\ntype hasSynced interface {\n\t// hasSynced returns true if all informers synced.\n\t// This is only used in testing to determine when discoverer synced to\n\t// kubernetes apiserver.\n\thasSynced() bool\n}\n\nvar (\n\t_ hasSynced = &Discovery{}\n\t_ hasSynced = &Node{}\n\t_ hasSynced = &Endpoints{}\n\t_ hasSynced = &EndpointSlice{}\n\t_ hasSynced = &Ingress{}\n\t_ hasSynced = &Pod{}\n\t_ hasSynced = &Service{}\n)\n\nfunc (d *Discovery) hasSynced() bool {\n\td.RLock()\n\tdefer d.RUnlock()\n\tfor _, discoverer := range d.discoverers {\n\t\tif hasSynceddiscoverer, ok := discoverer.(hasSynced); ok {\n\t\t\tif !hasSynceddiscoverer.hasSynced() {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t}\n\treturn true\n}\n\nfunc (n *Node) hasSynced() bool {\n\treturn n.informer.HasSynced()\n}\n\nfunc (e *Endpoints) hasSynced() bool {\n\treturn e.endpointsInf.HasSynced() && e.serviceInf.HasSynced() && e.podInf.HasSynced()\n}\n\nfunc (e *EndpointSlice) hasSynced() bool {\n\treturn e.endpointSliceInf.HasSynced() && e.serviceInf.HasSynced() && e.podInf.HasSynced()",
      "// Note that the writer will not check if the target directory exists or\n// contains anything at all. It is the caller's responsibility to\n// ensure that the resulting blocks do not overlap etc.\n// Writer ensures the block flush is atomic (via rename).\nfunc NewBlockWriter(logger log.Logger, dir string, blockSize int64) (*BlockWriter, error) {\n\tw := &BlockWriter{\n\t\tlogger:         logger,\n\t\tdestinationDir: dir,\n\t\tblockSize:      blockSize,\n\t}\n\tif err := w.initHead(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn w, nil\n}\n\n// initHead creates and initialises a new TSDB head.\nfunc (w *BlockWriter) initHead() error {\n\tchunkDir, err := os.MkdirTemp(os.TempDir(), \"head\")\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"create temp dir\")\n\t}\n\tw.chunkDir = chunkDir\n\topts := DefaultHeadOptions()\n\topts.ChunkRange = w.blockSize\n\topts.ChunkDirRoot = w.chunkDir\n\topts.EnableNativeHistograms.Store(true)\n\th, err := NewHead(nil, w.logger, nil, nil, opts, NewHeadStats())\n\tif err != nil {\n\t\treturn errors.Wrap(err, \"tsdb.NewHead\")\n\t}\n\n\tw.head = h\n\treturn w.head.Init(math.MinInt64)\n}\n\n// Appender returns a new appender on the database.\n// Appender can't be called concurrently. However, the returned Appender can safely be used concurrently.\nfunc (w *BlockWriter) Appender(ctx context.Context) storage.Appender {\n\treturn w.head.Appender(ctx)\n}\n\n// Flush implements the Writer interface. This is where actual block writing\n// happens. After flush completes, no writes can be done.\nfunc (w *BlockWriter) Flush(ctx context.Context) (ulid.ULID, error) {\n\tmint := w.head.MinTime()\n\t// Add +1 millisecond to block maxt because block intervals are half-open: [b.MinTime, b.MaxTime).\n\t// Because of this block intervals are always +1 than the total samples it includes.\n\tmaxt := w.head.MaxTime() + 1\n\tlevel.Info(w.logger).Log(\"msg\", \"flushing\", \"series_count\", w.head.NumSeries(), \"mint\", timestamp.Time(mint), \"maxt\", timestamp.Time(maxt))\n\n\tcompactor, err := NewLeveledCompactor(ctx,\n\t\tnil,\n\t\tw.logger,\n\t\t[]int64{w.blockSize},\n\t\tchunkenc.NewPool(), nil)\n\tif err != nil {\n\t\treturn ulid.ULID{}, errors.Wrap(err, \"create leveled compactor\")\n\t}\n\tid, err := compactor.Write(w.destinationDir, w.head, mint, maxt, nil)\n\tif err != nil {\n\t\treturn ulid.ULID{}, errors.Wrap(err, \"compactor write\")\n\t}\n",
      "\tqueue.close()\n\n\t// No more pushing allowed after close.\n\trequire.False(t, queue.push(chunkWriteJob{seriesRef: HeadSeriesRef(11111)}))\n\n\t// Verify that we can still read all pushed elements.\n\tfor i := 0; i < count; i++ {\n\t\tj, b := queue.pop()\n\t\trequire.True(t, b)\n\t\trequire.Equal(t, HeadSeriesRef(i), j.seriesRef)\n\t}\n\n\t_, b := queue.pop()\n\trequire.False(t, b)\n}\n\nfunc TestQueuePushPopManyGoroutines(t *testing.T) {\n\tconst readGoroutines = 5\n\tconst writeGoroutines = 10\n\tconst writes = 500\n\n\tqueue := newWriteJobQueue(1024, 64)\n\n\t// Reading goroutine\n\trefsMx := sync.Mutex{}\n\trefs := map[HeadSeriesRef]bool{}\n\n\treadersWG := sync.WaitGroup{}\n\tfor i := 0; i < readGoroutines; i++ {\n\t\treadersWG.Add(1)\n\n\t\tgo func() {\n\t\t\tdefer readersWG.Done()\n\n\t\t\tfor j, ok := queue.pop(); ok; j, ok = queue.pop() {\n\t\t\t\trefsMx.Lock()\n\t\t\t\trefs[j.seriesRef] = true\n\t\t\t\trefsMx.Unlock()\n\t\t\t}\n\t\t}()\n\t}\n\n\tid := atomic.Uint64{}\n\n\twritersWG := sync.WaitGroup{}\n\tfor i := 0; i < writeGoroutines; i++ {\n\t\twritersWG.Add(1)\n\n\t\tgo func() {\n\t\t\tdefer writersWG.Done()\n\n\t\t\tfor i := 0; i < writes; i++ {\n\t\t\t\tref := id.Inc()\n\n\t\t\t\trequire.True(t, queue.push(chunkWriteJob{seriesRef: HeadSeriesRef(ref)}))\n\t\t\t}\n\t\t}()\n\t}\n\n\t// Wait until all writes are done.\n\twritersWG.Wait()\n\n\t// Close the queue and wait for reading to be done.\n\tqueue.close()",
      "\n\t// Replace all non-alphanumeric runes with underscores\n\tlabel = strings.Map(sanitizeRune, label)\n\n\t// If label starts with a number, prepend with \"key_\"\n\tif unicode.IsDigit(rune(label[0])) {\n\t\tlabel = \"key_\" + label\n\t}\n\n\treturn label\n}\n\n// Return '_' for anything non-alphanumeric\nfunc sanitizeRune(r rune) rune {\n\tif unicode.IsLetter(r) || unicode.IsDigit(r) {\n\t\treturn r\n\t}\n\treturn '_'\n}\n",
      "\n// TestDirLockerUsage performs a set of tests which guarantee correct usage of\n// DirLocker. open should use data as the storage directory, and createLock\n// to determine if a lock file should be used.\nfunc TestDirLockerUsage(t *testing.T, open func(t *testing.T, data string, createLock bool) (*DirLocker, testutil.Closer)) {\n\tt.Helper()\n\n\tcases := []struct {\n\t\tfileAlreadyExists bool\n\t\tlockFileDisabled  bool\n\t\texpectedValue     int\n\t}{\n\t\t{\n\t\t\tfileAlreadyExists: false,\n\t\t\tlockFileDisabled:  false,\n\t\t\texpectedValue:     lockfileCreatedCleanly,\n\t\t},\n\t\t{\n\t\t\tfileAlreadyExists: true,\n\t\t\tlockFileDisabled:  false,\n\t\t\texpectedValue:     lockfileReplaced,\n\t\t},\n\t\t{\n\t\t\tfileAlreadyExists: true,\n\t\t\tlockFileDisabled:  true,\n\t\t\texpectedValue:     lockfileDisabled,\n\t\t},\n\t\t{\n\t\t\tfileAlreadyExists: false,\n\t\t\tlockFileDisabled:  true,\n\t\t\texpectedValue:     lockfileDisabled,\n\t\t},\n\t}\n\n\tfor _, c := range cases {\n\t\tt.Run(fmt.Sprintf(\"%+v\", c), func(t *testing.T) {\n\t\t\ttmpdir, err := os.MkdirTemp(\"\", \"test\")\n\t\t\trequire.NoError(t, err)\n\t\t\tt.Cleanup(func() {\n\t\t\t\trequire.NoError(t, os.RemoveAll(tmpdir))\n\t\t\t})\n\n\t\t\t// Test preconditions (file already exists + lockfile option)\n\t\t\tif c.fileAlreadyExists {\n\t\t\t\ttmpLocker, err := NewDirLocker(tmpdir, \"tsdb\", log.NewNopLogger(), nil)\n\t\t\t\trequire.NoError(t, err)\n\t\t\t\terr = os.WriteFile(tmpLocker.path, []byte{}, 0o644)\n\t\t\t\trequire.NoError(t, err)\n\t\t\t}\n\n\t\t\tlocker, closer := open(t, tmpdir, !c.lockFileDisabled)\n\t\t\trequire.Equal(t, float64(c.expectedValue), prom_testutil.ToFloat64(locker.createdCleanly))\n\n\t\t\t// Close the client. This should delete the lockfile.\n\t\t\tcloser.Close()\n\n\t\t\t// Check that the lockfile is always deleted\n\t\t\tif !c.lockFileDisabled {\n\t\t\t\t_, err = os.Stat(locker.path)\n\t\t\t\trequire.True(t, os.IsNotExist(err), \"lockfile was not deleted\")\n\t\t\t}\n\t\t})\n\t}\n}",
      "\t}\n\tif len(refs) == 0 {\n\t\treturn -1, -1, nil\n\t}\n\treturn refs[0].index, refs[len(refs)-1].index, nil\n}\n\ntype segmentRef struct {\n\tname  string\n\tindex int\n}\n\nfunc listSegments(dir string) (refs []segmentRef, err error) {\n\tfiles, err := os.ReadDir(dir)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tfor _, f := range files {\n\t\tfn := f.Name()\n\t\tk, err := strconv.Atoi(fn)\n\t\tif err != nil {\n\t\t\tcontinue\n\t\t}\n\t\trefs = append(refs, segmentRef{name: fn, index: k})\n\t}\n\tslices.SortFunc(refs, func(a, b segmentRef) bool {\n\t\treturn a.index < b.index\n\t})\n\tfor i := 0; i < len(refs)-1; i++ {\n\t\tif refs[i].index+1 != refs[i+1].index {\n\t\t\treturn nil, errors.New(\"segments are not sequential\")\n\t\t}\n\t}\n\treturn refs, nil\n}\n\n// SegmentRange groups segments by the directory and the first and last index it includes.\ntype SegmentRange struct {\n\tDir         string\n\tFirst, Last int\n}\n\n// NewSegmentsReader returns a new reader over all segments in the directory.\nfunc NewSegmentsReader(dir string) (io.ReadCloser, error) {\n\treturn NewSegmentsRangeReader(SegmentRange{dir, -1, -1})\n}\n\n// NewSegmentsRangeReader returns a new reader over the given WAL segment ranges.\n// If first or last are -1, the range is open on the respective end.\nfunc NewSegmentsRangeReader(sr ...SegmentRange) (io.ReadCloser, error) {\n\tvar segs []*Segment\n\n\tfor _, sgmRange := range sr {\n\t\trefs, err := listSegments(sgmRange.Dir)\n\t\tif err != nil {\n\t\t\treturn nil, errors.Wrapf(err, \"list segment in dir:%v\", sgmRange.Dir)\n\t\t}\n\n\t\tfor _, r := range refs {\n\t\t\tif sgmRange.First >= 0 && r.index < sgmRange.First {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif sgmRange.Last >= 0 && r.index > sgmRange.Last {\n\t\t\t\tbreak",
      "func newTritonDiscovery(c SDConfig) (*Discovery, error) {\n\treturn New(nil, &c)\n}\n\nfunc TestTritonSDNew(t *testing.T) {\n\ttd, err := newTritonDiscovery(conf)\n\trequire.NoError(t, err)\n\trequire.NotNil(t, td)\n\trequire.NotNil(t, td.client)\n\trequire.NotZero(t, td.interval)\n\trequire.NotNil(t, td.sdConfig)\n\trequire.Equal(t, conf.Account, td.sdConfig.Account)\n\trequire.Equal(t, conf.DNSSuffix, td.sdConfig.DNSSuffix)\n\trequire.Equal(t, conf.Endpoint, td.sdConfig.Endpoint)\n\trequire.Equal(t, conf.Port, td.sdConfig.Port)\n}\n\nfunc TestTritonSDNewBadConfig(t *testing.T) {\n\ttd, err := newTritonDiscovery(badconf)\n\trequire.Error(t, err)\n\trequire.Nil(t, td)\n}\n\nfunc TestTritonSDNewGroupsConfig(t *testing.T) {\n\ttd, err := newTritonDiscovery(groupsconf)\n\trequire.NoError(t, err)\n\trequire.NotNil(t, td)\n\trequire.NotNil(t, td.client)\n\trequire.NotZero(t, td.interval)\n\trequire.NotNil(t, td.sdConfig)\n\trequire.Equal(t, groupsconf.Account, td.sdConfig.Account)\n\trequire.Equal(t, groupsconf.DNSSuffix, td.sdConfig.DNSSuffix)\n\trequire.Equal(t, groupsconf.Endpoint, td.sdConfig.Endpoint)\n\trequire.Equal(t, groupsconf.Groups, td.sdConfig.Groups)\n\trequire.Equal(t, groupsconf.Port, td.sdConfig.Port)\n}\n\nfunc TestTritonSDNewCNConfig(t *testing.T) {\n\ttd, err := newTritonDiscovery(cnconf)\n\trequire.NoError(t, err)\n\trequire.NotNil(t, td)\n\trequire.NotNil(t, td.client)\n\trequire.NotZero(t, td.interval)\n\trequire.NotZero(t, td.sdConfig)\n\trequire.Equal(t, cnconf.Role, td.sdConfig.Role)\n\trequire.Equal(t, cnconf.Account, td.sdConfig.Account)\n\trequire.Equal(t, cnconf.DNSSuffix, td.sdConfig.DNSSuffix)\n\trequire.Equal(t, cnconf.Endpoint, td.sdConfig.Endpoint)\n\trequire.Equal(t, cnconf.Port, td.sdConfig.Port)\n}\n\nfunc TestTritonSDRefreshNoTargets(t *testing.T) {\n\ttgts := testTritonSDRefresh(t, conf, \"{\\\"containers\\\":[]}\")\n\trequire.Nil(t, tgts)\n}\n\nfunc TestTritonSDRefreshMultipleTargets(t *testing.T) {\n\tdstr := `{\"containers\":[\n\t\t \t{\n                                \"groups\":[\"foo\",\"bar\",\"baz\"],\n\t\t\t\t\"server_uuid\":\"44454c4c-5000-104d-8037-b7c04f5a5131\",\n\t\t\t\t\"vm_alias\":\"server01\",\n\t\t\t\t\"vm_brand\":\"lx\",\n\t\t\t\t\"vm_image_uuid\":\"7b27a514-89d7-11e6-bee6-3f96f367bee7\","
    ]
  },
  {
    "id": "netdata/netdata",
    "org": "netdata",
    "avatarURL": "https://avatars.githubusercontent.com/u/43390781?v=4",
    "name": "netdata/netdata",
    "url": "https://github.com/netdata/netdata",
    "lang": "C",
    "star_num": 64943,
    "fork_num": 5654,
    "snippets": [
      "    fprintf(stderr, ##args); \\\n    fprintf(stderr, \"\\n\"); }\n\nint running = 1;\nint debug = 0;\nsize_t lines_discovered = 0;\nint redraw_chart = 0;\n\n// ----------------------------------------------------------------------------\n\n// Slabinfo format :\n// format 2.1 Was provided by 57ed3eda977a215f054102b460ab0eb5d8d112e6 (2.6.24-rc6) as:\n// seq_puts(m, \"# name  <active_objs> <num_objs> <objsize> <objperslab> <pagesperslab>\");\n// seq_puts(m, \" : tunables <limit> <batchcount> <sharedfactor>\");\n// seq_puts(m, \" : slabdata <active_slabs> <num_slabs> <sharedavail>\");\n//\n// With max values:\n// seq_printf(m, \"%-17s %6lu %6lu %6u %4u %4d\",\n//   cache_name(s), sinfo.active_objs, sinfo.num_objs, s->size, sinfo.objects_per_slab, (1 << sinfo.cache_order));\n// seq_printf(m, \" : tunables %4u %4u %4u\",\n//   sinfo.limit, sinfo.batchcount, sinfo.shared);\n// seq_printf(m, \" : slabdata %6lu %6lu %6lu\",\n//   sinfo.active_slabs, sinfo.num_slabs, sinfo.shared_avail);\n//\n// If CONFIG_DEBUG_SLAB is set, it will also add columns from slabinfo_show_stats (for SLAB only):\n// seq_printf(m, \" : globalstat %7lu %6lu %5lu %4lu %4lu %4lu %4lu %4lu %4lu\",\n//   allocs, high, grown, reaped, errors, max_freeable, node_allocs, node_frees, overflows);\n// seq_printf(m, \" : cpustat %6lu %6lu %6lu %6lu\",\n//   allochit, allocmiss, freehit, freemiss);\n//\n// Implementation choices:\n// - Iterates through a linked list of kmem_cache.\n// - Name is a char* from struct kmem_cache (mm/slab.h).\n// - max name size found is 24:\n//     grep -roP 'kmem_cache_create\\(\".+\"'| awk '{split($0,a,\"\\\"\"); print a[2],length(a[2]); }' | sort -k2 -n\n// - Using uint64 everywhere, as types fits and allows to use standard helpers\n\nstruct slabinfo {\n    // procfile fields\n    const char *name;\n    uint64_t active_objs;\n    uint64_t num_objs;\n    uint64_t obj_size;\n    uint64_t obj_per_slab;\n    uint64_t pages_per_slab;\n    uint64_t tune_limit;\n    uint64_t tune_batchcnt;\n    uint64_t tune_shared_factor;\n    uint64_t data_active_slabs;\n    uint64_t data_num_slabs;\n    uint64_t data_shared_avail;\n\n    // Calculated fields\n    uint64_t mem_usage;\n    uint64_t mem_waste;\n    uint8_t  obj_filling;\n\n    uint32_t hash;\n    struct slabinfo *next;\n} *slabinfo_root = NULL, *slabinfo_next = NULL, *slabinfo_last_used = NULL;\n\n// The code is very inspired from \"proc_net_dev.c\" and \"perf_plugin.c\"\n\n// Get the existing object, or create a new one",
      "const struct netdata_static_thread static_threads_freebsd[] = {\n    {\n        .name = \"P[freebsd]\",\n        .config_section = CONFIG_SECTION_PLUGINS,\n        .config_name = \"freebsd\",\n        .enabled = 1,\n        .thread = NULL,\n        .init_routine = NULL,\n        .start_routine = freebsd_main\n    },\n\n    {NULL, NULL, NULL, 0, NULL, NULL, NULL}\n};\n\nconst struct netdata_static_thread static_threads_linux[] = {\n    {NULL, NULL, NULL, 0, NULL, NULL, NULL}\n};\n\nconst struct netdata_static_thread static_threads_macos[] = {\n    {NULL, NULL, NULL, 0, NULL, NULL, NULL}\n};\n\nstruct netdata_static_thread *static_threads_get() {\n    return static_threads_concat(static_threads_common, static_threads_freebsd);\n}\n",
      "}\n\nint do_proc_sys_devices_system_node(int update_every, usec_t dt) {\n    (void)dt;\n\n    static uint32_t hash_local_node = 0, hash_numa_foreign = 0, hash_interleave_hit = 0, hash_other_node = 0, hash_numa_hit = 0, hash_numa_miss = 0;\n    static int do_numastat = -1, numa_node_count = 0;\n    struct node *m;\n\n    if(unlikely(numa_root == NULL)) {\n        numa_node_count = find_all_nodes();\n        if(unlikely(numa_root == NULL))\n            return 1;\n    }\n\n    if(unlikely(do_numastat == -1)) {\n        do_numastat = config_get_boolean_ondemand(\"plugin:proc:/sys/devices/system/node\", \"enable per-node numa metrics\", CONFIG_BOOLEAN_AUTO);\n\n        hash_local_node     = simple_hash(\"local_node\");\n        hash_numa_foreign   = simple_hash(\"numa_foreign\");\n        hash_interleave_hit = simple_hash(\"interleave_hit\");\n        hash_other_node     = simple_hash(\"other_node\");\n        hash_numa_hit       = simple_hash(\"numa_hit\");\n        hash_numa_miss      = simple_hash(\"numa_miss\");\n    }\n\n    if(do_numastat == CONFIG_BOOLEAN_YES || (do_numastat == CONFIG_BOOLEAN_AUTO &&\n                                             (numa_node_count >= 2 || netdata_zero_metrics_enabled == CONFIG_BOOLEAN_YES))) {\n        for(m = numa_root; m; m = m->next) {\n            if(m->numastat_filename) {\n\n                if(unlikely(!m->numastat_ff)) {\n                    m->numastat_ff = procfile_open(m->numastat_filename, \" \", PROCFILE_FLAG_DEFAULT);\n\n                    if(unlikely(!m->numastat_ff))\n                        continue;\n                }\n\n                m->numastat_ff = procfile_readall(m->numastat_ff);\n                if(unlikely(!m->numastat_ff || procfile_lines(m->numastat_ff) < 1 || procfile_linewords(m->numastat_ff, 0) < 1))\n                    continue;\n\n                if(unlikely(!m->numastat_st)) {\n                    m->numastat_st = rrdset_create_localhost(\n                            \"mem\"\n                            , m->name\n                            , NULL\n                            , \"numa\"\n                            , \"mem.numa_nodes\"\n                            , \"NUMA events\"\n                            , \"events/s\"\n                            , PLUGIN_PROC_NAME\n                            , \"/sys/devices/system/node\"\n                            , NETDATA_CHART_PRIO_MEM_NUMA_NODES\n                            , update_every\n                            , RRDSET_TYPE_LINE\n                    );\n\n                    rrdlabels_add(m->numastat_st->rrdlabels, \"numa_node\", m->name, RRDLABEL_SRC_AUTO);\n\n                    rrdset_flag_set(m->numastat_st, RRDSET_FLAG_DETAIL);\n\n                    rrddim_add(m->numastat_st, \"numa_hit\",       \"hit\",        1, 1, RRD_ALGORITHM_INCREMENTAL);\n                    rrddim_add(m->numastat_st, \"numa_miss\",      \"miss\",       1, 1, RRD_ALGORITHM_INCREMENTAL);",
      "void ebpf_ut_initialize_structure(netdata_run_mode_t mode)\n{\n    memset(&test_em, 0, sizeof(ebpf_module_t));\n    test_em.thread_name = strdupz(\"process\");\n    test_em.config_name = test_em.thread_name;\n    test_em.kernels = NETDATA_V3_10 | NETDATA_V4_14 | NETDATA_V4_16 | NETDATA_V4_18 | NETDATA_V5_4 | NETDATA_V5_10 |\n                      NETDATA_V5_14;\n    test_em.pid_map_size = ND_EBPF_DEFAULT_PID_SIZE;\n    test_em.apps_level = NETDATA_APPS_LEVEL_REAL_PARENT;\n    test_em.mode = mode;\n}\n\n/**\n * Clean UP Memory\n *\n * Clean up  allocated data during unit test;\n */\nvoid ebpf_ut_cleanup_memory()\n{\n    freez((void *)test_em.thread_name);\n}\n\n/**\n * Load Binary\n *\n * Test load of legacy eBPF programs.\n *\n * @return It returns 0 on success and -1 otherwise.\n */\nstatic int ebpf_ut_load_binary()\n{\n    test_em.probe_links = ebpf_load_program(ebpf_plugin_dir, &test_em, running_on_kernel, isrh, &test_em.objects);\n    if (!test_em.probe_links)\n        return -1;\n\n    ebpf_unload_legacy_code(test_em.objects, test_em.probe_links);\n\n    return 0;\n}\n\n/**\n * Load Real Binary\n *\n * Load an existent binary inside plugin directory.\n *\n * @return It returns 0 on success and -1 otherwise.\n */\nint ebpf_ut_load_real_binary()\n{\n    return ebpf_ut_load_binary();\n}\n/**\n * Load fake Binary\n *\n * Try to load a binary not generated by netdata.\n *\n * @return It returns 0 on success and -1 otherwise. The success for this function means we could work properly with\n * expected fails.\n */\nint ebpf_ut_load_fake_binary()\n{\n    const char *original = test_em.thread_name;\n\n    test_em.thread_name = strdupz(\"I_am_not_here\");",
      "        }\n    }\n\n    // ------------------------------------------------------------------------\n\n    if(do_sockets == CONFIG_BOOLEAN_YES || (do_sockets == CONFIG_BOOLEAN_AUTO &&\n                                            (sockstat_root.sockets_used ||\n                                             netdata_zero_metrics_enabled == CONFIG_BOOLEAN_YES))) {\n        do_sockets = CONFIG_BOOLEAN_YES;\n\n        static RRDSET *st = NULL;\n        static RRDDIM *rd_used = NULL;\n\n        if(unlikely(!st)) {\n            st = rrdset_create_localhost(\n                    \"ipv4\"\n                    , \"sockstat_sockets\"\n                    , NULL\n                    , \"sockets\"\n                    , NULL\n                    , \"IPv4 Sockets Used\"\n                    , \"sockets\"\n                    , PLUGIN_PROC_NAME\n                    , PLUGIN_PROC_MODULE_NET_SOCKSTAT_NAME\n                    , NETDATA_CHART_PRIO_IPV4_SOCKETS\n                    , update_every\n                    , RRDSET_TYPE_LINE\n            );\n\n            rd_used = rrddim_add(st, \"used\", NULL,  1, 1, RRD_ALGORITHM_ABSOLUTE);\n        }\n\n        rrddim_set_by_pointer(st, rd_used, (collected_number)sockstat_root.sockets_used);\n        rrdset_done(st);\n    }\n\n    // ------------------------------------------------------------------------\n\n    if(do_tcp_sockets == CONFIG_BOOLEAN_YES || (do_tcp_sockets == CONFIG_BOOLEAN_AUTO &&\n                                                (sockstat_root.tcp_inuse ||\n                                                 sockstat_root.tcp_orphan ||\n                                                 sockstat_root.tcp_tw ||\n                                                 sockstat_root.tcp_alloc ||\n                                                 netdata_zero_metrics_enabled == CONFIG_BOOLEAN_YES))) {\n        do_tcp_sockets = CONFIG_BOOLEAN_YES;\n\n        static RRDSET *st = NULL;\n        static RRDDIM *rd_inuse = NULL,\n                      *rd_orphan = NULL,\n                      *rd_timewait = NULL,\n                      *rd_alloc = NULL;\n\n        if(unlikely(!st)) {\n            st = rrdset_create_localhost(\n                    \"ipv4\"\n                    , \"sockstat_tcp_sockets\"\n                    , NULL\n                    , \"tcp\"\n                    , NULL\n                    , \"IPv4 TCP Sockets\"\n                    , \"sockets\"\n                    , PLUGIN_PROC_NAME\n                    , PLUGIN_PROC_MODULE_NET_SOCKSTAT_NAME\n                    , NETDATA_CHART_PRIO_IPV4_TCP_SOCKETS",
      "\n    RRDDIM *rd;\n\n} macos_modules[] = {\n    {.name = \"sysctl\",                           .dim = \"sysctl\",   .enabled = 1, .func = do_macos_sysctl},\n    {.name = \"mach system management interface\", .dim = \"mach_smi\", .enabled = 1, .func = do_macos_mach_smi},\n    {.name = \"iokit\",                            .dim = \"iokit\",    .enabled = 1, .func = do_macos_iokit},\n\n    // the terminator of this array\n    {.name = NULL, .dim = NULL, .enabled = 0, .func = NULL}\n};\n\n#if WORKER_UTILIZATION_MAX_JOB_TYPES < 3\n#error WORKER_UTILIZATION_MAX_JOB_TYPES has to be at least 3\n#endif\n\nstatic void macos_main_cleanup(void *ptr)\n{\n    worker_unregister();\n\n    struct netdata_static_thread *static_thread = (struct netdata_static_thread *)ptr;\n    static_thread->enabled = NETDATA_MAIN_THREAD_EXITING;\n\n    collector_info(\"cleaning up...\");\n\n    static_thread->enabled = NETDATA_MAIN_THREAD_EXITED;\n}\n\nvoid *macos_main(void *ptr)\n{\n    worker_register(\"MACOS\");\n\n    netdata_thread_cleanup_push(macos_main_cleanup, ptr);\n\n    // check the enabled status for each module\n    for (int i = 0; macos_modules[i].name; i++) {\n        struct macos_module *pm = &macos_modules[i];\n\n        pm->enabled = config_get_boolean(\"plugin:macos\", pm->name, pm->enabled);\n        pm->rd = NULL;\n\n        worker_register_job_name(i, macos_modules[i].dim);\n    }\n\n    usec_t step = localhost->rrd_update_every * USEC_PER_SEC;\n    heartbeat_t hb;\n    heartbeat_init(&hb);\n\n    while (!netdata_exit) {\n        worker_is_idle();\n        usec_t hb_dt = heartbeat_next(&hb, step);\n\n        for (int i = 0; macos_modules[i].name; i++) {\n            struct macos_module *pm = &macos_modules[i];\n            if (unlikely(!pm->enabled))\n                continue;\n\n            netdata_log_debug(D_PROCNETDEV_LOOP, \"macos calling %s.\", pm->name);\n\n            worker_is_busy(i);\n            pm->enabled = !pm->func(localhost->rrd_update_every, hb_dt);\n\n            if (unlikely(netdata_exit))\n                break;",
      "static void mount_collector(ebpf_module_t *em)\n{\n    memset(mount_hash_values, 0, sizeof(mount_hash_values));\n\n    heartbeat_t hb;\n    heartbeat_init(&hb);\n    int update_every = em->update_every;\n    int counter = update_every - 1;\n    int maps_per_core = em->maps_per_core;\n    uint32_t running_time = 0;\n    uint32_t lifetime = em->lifetime;\n    while (!ebpf_exit_plugin && running_time < lifetime) {\n        (void)heartbeat_next(&hb, USEC_PER_SEC);\n        if (ebpf_exit_plugin || ++counter != update_every)\n            continue;\n\n        counter = 0;\n        ebpf_mount_read_global_table(maps_per_core);\n        pthread_mutex_lock(&lock);\n\n        ebpf_mount_send_data();\n\n        pthread_mutex_unlock(&lock);\n\n        pthread_mutex_lock(&ebpf_exit_cleanup);\n        if (running_time && !em->running_time)\n            running_time = update_every;\n        else\n            running_time += update_every;\n\n        em->running_time = running_time;\n        pthread_mutex_unlock(&ebpf_exit_cleanup);\n    }\n}\n\n/*****************************************************************\n *\n *  INITIALIZE THREAD\n *\n *****************************************************************/\n\n/**\n * Create mount charts\n *\n * Call ebpf_create_chart to create the charts for the collector.\n *\n * @param update_every value to overwrite the update frequency set by the server.\n */\nstatic void ebpf_create_mount_charts(int update_every)\n{\n    ebpf_create_chart(NETDATA_EBPF_MOUNT_GLOBAL_FAMILY, NETDATA_EBPF_MOUNT_CALLS,\n                      \"Calls to mount and umount syscalls\",\n                      EBPF_COMMON_DIMENSION_CALL, NETDATA_EBPF_MOUNT_FAMILY,\n                      NULL,\n                      NETDATA_EBPF_CHART_TYPE_LINE,\n                      NETDATA_CHART_PRIO_EBPF_MOUNT_CHARTS,\n                      ebpf_create_global_dimension,\n                      mount_publish_aggregated, NETDATA_EBPF_MOUNT_SYSCALL,\n                      update_every, NETDATA_EBPF_MODULE_NAME_MOUNT);\n\n    ebpf_create_chart(NETDATA_EBPF_MOUNT_GLOBAL_FAMILY, NETDATA_EBPF_MOUNT_ERRORS,\n                      \"Errors to mount and umount file systems\",\n                      EBPF_COMMON_DIMENSION_CALL, NETDATA_EBPF_MOUNT_FAMILY,\n                      NULL,",
      "    // not used: GETSYSCTL_SIMPLE(\"kstat.zfs.misc.arcstats.other_size\", mibs.other_size, arcstats.other_size);\n    // not used: GETSYSCTL_SIMPLE(\"kstat.zfs.misc.arcstats.anon_size\", mibs.anon_size, arcstats.anon_size);\n    // not used: GETSYSCTL_SIMPLE(\"kstat.zfs.misc.arcstats.anon_evictable_data\", mibs.anon_evictable_data, arcstats.anon_evictable_data);\n    // not used: GETSYSCTL_SIMPLE(\"kstat.zfs.misc.arcstats.anon_evictable_metadata\", mibs.anon_evictable_metadata, arcstats.anon_evictable_metadata);\n    GETSYSCTL_SIMPLE(\"kstat.zfs.misc.arcstats.mru_size\", mibs.mru_size, arcstats.mru_size);\n    // not used: GETSYSCTL_SIMPLE(\"kstat.zfs.misc.arcstats.mru_evictable_data\", mibs.mru_evictable_data, arcstats.mru_evictable_data);\n    // not used: GETSYSCTL_SIMPLE(\"kstat.zfs.misc.arcstats.mru_evictable_metadata\", mibs.mru_evictable_metadata, arcstats.mru_evictable_metadata);\n    // not used: GETSYSCTL_SIMPLE(\"kstat.zfs.misc.arcstats.mru_ghost_size\", mibs.mru_ghost_size, arcstats.mru_ghost_size);\n    // not used: GETSYSCTL_SIMPLE(\"kstat.zfs.misc.arcstats.mru_ghost_evictable_data\", mibs.mru_ghost_evictable_data, arcstats.mru_ghost_evictable_data);\n    // not used: GETSYSCTL_SIMPLE(\"kstat.zfs.misc.arcstats.mru_ghost_evictable_metadata\", mibs.mru_ghost_evictable_metadata, arcstats.mru_ghost_evictable_metadata);\n    GETSYSCTL_SIMPLE(\"kstat.zfs.misc.arcstats.mfu_size\", mibs.mfu_size, arcstats.mfu_size);\n    // not used: GETSYSCTL_SIMPLE(\"kstat.zfs.misc.arcstats.mfu_evictable_data\", mibs.mfu_evictable_data, arcstats.mfu_evictable_data);\n    // not used: GETSYSCTL_SIMPLE(\"kstat.zfs.misc.arcstats.mfu_evictable_metadata\", mibs.mfu_evictable_metadata, arcstats.mfu_evictable_metadata);\n    // not used: GETSYSCTL_SIMPLE(\"kstat.zfs.misc.arcstats.mfu_ghost_size\", mibs.mfu_ghost_size, arcstats.mfu_ghost_size);\n    // not used: GETSYSCTL_SIMPLE(\"kstat.zfs.misc.arcstats.mfu_ghost_evictable_data\", mibs.mfu_ghost_evictable_data, arcstats.mfu_ghost_evictable_data);\n    // not used: GETSYSCTL_SIMPLE(\"kstat.zfs.misc.arcstats.mfu_ghost_evictable_metadata\", mibs.mfu_ghost_evictable_metadata, arcstats.mfu_ghost_evictable_metadata);\n    GETSYSCTL_SIMPLE(\"kstat.zfs.misc.arcstats.l2_hits\", mibs.l2_hits, arcstats.l2_hits);\n    GETSYSCTL_SIMPLE(\"kstat.zfs.misc.arcstats.l2_misses\", mibs.l2_misses, arcstats.l2_misses);\n    // not used: GETSYSCTL_SIMPLE(\"kstat.zfs.misc.arcstats.l2_feeds\", mibs.l2_feeds, arcstats.l2_feeds);\n    // not used: GETSYSCTL_SIMPLE(\"kstat.zfs.misc.arcstats.l2_rw_clash\", mibs.l2_rw_clash, arcstats.l2_rw_clash);\n    GETSYSCTL_SIMPLE(\"kstat.zfs.misc.arcstats.l2_read_bytes\", mibs.l2_read_bytes, arcstats.l2_read_bytes);\n    GETSYSCTL_SIMPLE(\"kstat.zfs.misc.arcstats.l2_write_bytes\", mibs.l2_write_bytes, arcstats.l2_write_bytes);\n    // not used: GETSYSCTL_SIMPLE(\"kstat.zfs.misc.arcstats.l2_writes_sent\", mibs.l2_writes_sent, arcstats.l2_writes_sent);\n    // not used: GETSYSCTL_SIMPLE(\"kstat.zfs.misc.arcstats.l2_writes_done\", mibs.l2_writes_done, arcstats.l2_writes_done);\n    // not used: GETSYSCTL_SIMPLE(\"kstat.zfs.misc.arcstats.l2_writes_error\", mibs.l2_writes_error, arcstats.l2_writes_error);\n    // not used: GETSYSCTL_SIMPLE(\"kstat.zfs.misc.arcstats.l2_writes_lock_retry\", mibs.l2_writes_lock_retry, arcstats.l2_writes_lock_retry);\n    // not used: GETSYSCTL_SIMPLE(\"kstat.zfs.misc.arcstats.l2_evict_lock_retry\", mibs.l2_evict_lock_retry, arcstats.l2_evict_lock_retry);\n    // not used: GETSYSCTL_SIMPLE(\"kstat.zfs.misc.arcstats.l2_evict_reading\", mibs.l2_evict_reading, arcstats.l2_evict_reading);\n    // not used: GETSYSCTL_SIMPLE(\"kstat.zfs.misc.arcstats.l2_evict_l1cached\", mibs.l2_evict_l1cached, arcstats.l2_evict_l1cached);\n    // not used: GETSYSCTL_SIMPLE(\"kstat.zfs.misc.arcstats.l2_free_on_write\", mibs.l2_free_on_write, arcstats.l2_free_on_write);\n    // missing mib: GETSYSCTL_SIMPLE(\"kstat.zfs.misc.arcstats.l2_cdata_free_on_write\", mibs.l2_cdata_free_on_write, arcstats.l2_cdata_free_on_write);\n    // not used: GETSYSCTL_SIMPLE(\"kstat.zfs.misc.arcstats.l2_abort_lowmem\", mibs.l2_abort_lowmem, arcstats.l2_abort_lowmem);\n    // not used: GETSYSCTL_SIMPLE(\"kstat.zfs.misc.arcstats.l2_cksum_bad\", mibs.l2_cksum_bad, arcstats.l2_cksum_bad);\n    // not used: GETSYSCTL_SIMPLE(\"kstat.zfs.misc.arcstats.l2_io_error\", mibs.l2_io_error, arcstats.l2_io_error);\n    GETSYSCTL_SIMPLE(\"kstat.zfs.misc.arcstats.l2_size\", mibs.l2_size, arcstats.l2_size);\n    GETSYSCTL_SIMPLE(\"kstat.zfs.misc.arcstats.l2_asize\", mibs.l2_asize, arcstats.l2_asize);\n    // not used: GETSYSCTL_SIMPLE(\"kstat.zfs.misc.arcstats.l2_hdr_size\", mibs.l2_hdr_size, arcstats.l2_hdr_size);\n    // missing mib: GETSYSCTL_SIMPLE(\"kstat.zfs.misc.arcstats.l2_compress_successes\", mibs.l2_compress_successes, arcstats.l2_compress_successes);\n    // missing mib: GETSYSCTL_SIMPLE(\"kstat.zfs.misc.arcstats.l2_compress_zeros\", mibs.l2_compress_zeros, arcstats.l2_compress_zeros);\n    // missing mib: GETSYSCTL_SIMPLE(\"kstat.zfs.misc.arcstats.l2_compress_failures\", mibs.l2_compress_failures, arcstats.l2_compress_failures);\n    GETSYSCTL_SIMPLE(\"kstat.zfs.misc.arcstats.memory_throttle_count\", mibs.memory_throttle_count, arcstats.memory_throttle_count);\n    // missing mib: GETSYSCTL_SIMPLE(\"kstat.zfs.misc.arcstats.duplicate_buffers\", mibs.duplicate_buffers, arcstats.duplicate_buffers);\n    // missing mib: GETSYSCTL_SIMPLE(\"kstat.zfs.misc.arcstats.duplicate_buffers_size\", mibs.duplicate_buffers_size, arcstats.duplicate_buffers_size);\n    // missing mib: GETSYSCTL_SIMPLE(\"kstat.zfs.misc.arcstats.duplicate_reads\", mibs.duplicate_reads, arcstats.duplicate_reads);\n    // missing mib: GETSYSCTL_SIMPLE(\"kstat.zfs.misc.arcstats.memory_direct_count\", mibs.memory_direct_count, arcstats.memory_direct_count);\n    // missing mib: GETSYSCTL_SIMPLE(\"kstat.zfs.misc.arcstats.memory_indirect_count\", mibs.memory_indirect_count, arcstats.memory_indirect_count);\n    // missing mib: GETSYSCTL_SIMPLE(\"kstat.zfs.misc.arcstats.arc_no_grow\", mibs.arc_no_grow, arcstats.arc_no_grow);\n    // missing mib: GETSYSCTL_SIMPLE(\"kstat.zfs.misc.arcstats.arc_tempreserve\", mibs.arc_tempreserve, arcstats.arc_tempreserve);\n    // missing mib: GETSYSCTL_SIMPLE(\"kstat.zfs.misc.arcstats.arc_loaned_bytes\", mibs.arc_loaned_bytes, arcstats.arc_loaned_bytes);\n    // missing mib: GETSYSCTL_SIMPLE(\"kstat.zfs.misc.arcstats.arc_prune\", mibs.arc_prune, arcstats.arc_prune);\n    // not used: GETSYSCTL_SIMPLE(\"kstat.zfs.misc.arcstats.arc_meta_used\", mibs.arc_meta_used, arcstats.arc_meta_used);\n    // not used: GETSYSCTL_SIMPLE(\"kstat.zfs.misc.arcstats.arc_meta_limit\", mibs.arc_meta_limit, arcstats.arc_meta_limit);\n    // not used: GETSYSCTL_SIMPLE(\"kstat.zfs.misc.arcstats.arc_meta_max\", mibs.arc_meta_max, arcstats.arc_meta_max);\n    // not used: GETSYSCTL_SIMPLE(\"kstat.zfs.misc.arcstats.arc_meta_min\", mibs.arc_meta_min, arcstats.arc_meta_min);\n    // missing mib: GETSYSCTL_SIMPLE(\"kstat.zfs.misc.arcstats.arc_need_free\", mibs.arc_need_free, arcstats.arc_need_free);\n    // missing mib: GETSYSCTL_SIMPLE(\"kstat.zfs.misc.arcstats.arc_sys_free\", mibs.arc_sys_free, arcstats.arc_sys_free);\n\n    if (arcstats.size > arcstats.c_min) {\n        zfs_arcstats_shrinkable_cache_size_bytes = arcstats.size - arcstats.c_min;\n    } else {\n        zfs_arcstats_shrinkable_cache_size_bytes = 0;\n    }\n\n    generate_charts_arcstats(\"freebsd.plugin\", \"zfs\", show_zero_charts, update_every);",
      "                i = sends[idx];\n                pi = &p.inf[i];\n                pf = &p.fds[i];\n                pf->revents = 0;\n                processed += poll_process_send(&p, pi, pf, now);\n            }\n\n            // process UDP reads\n            for (idx = 0; idx < udprd_max; idx++) {\n                i = udprd[idx];\n                pi = &p.inf[i];\n                pf = &p.fds[i];\n                pf->revents = 0;\n                processed += poll_process_udp_read(pi, pf, now);\n            }\n\n            // process TCP reads\n            for (idx = 0; idx < reads_max; idx++) {\n                i = reads[idx];\n                pi = &p.inf[i];\n                pf = &p.fds[i];\n                pf->revents = 0;\n                processed += poll_process_tcp_read(&p, pi, pf, now);\n            }\n\n            if(!processed && (!p.limit || p.used < p.limit)) {\n                // nothing processed above (rcv, snd) and we have room for another TCP connection\n                // so, accept one TCP connection\n                for (idx = 0; idx < conns_max; idx++) {\n                    i = conns[idx];\n                    pi = &p.inf[i];\n                    pf = &p.fds[i];\n                    pf->revents = 0;\n                    if (poll_process_new_tcp_connection(&p, pi, pf, now))\n                        break;\n                }\n            }\n        }\n\n        if(unlikely(p.checks_every > 0 && now - last_check > p.checks_every)) {\n            last_check = now;\n\n            // cleanup old sockets\n            for(i = 0; i <= p.max; i++) {\n                POLLINFO *pi = &p.inf[i];\n\n                if(likely(pi->flags & POLLINFO_FLAG_CLIENT_SOCKET)) {\n                    if (unlikely(pi->send_count == 0 && p.complete_request_timeout > 0 && (now - pi->connected_t) >= p.complete_request_timeout)) {\n                        netdata_log_info(\"POLLFD: LISTENER: client slot %zu (fd %d) from %s port %s has not sent a complete request in %zu seconds - closing it. \"\n                              , i\n                              , pi->fd\n                              , pi->client_ip ? pi->client_ip : \"<undefined-ip>\"\n                              , pi->client_port ? pi->client_port : \"<undefined-port>\"\n                              , (size_t) p.complete_request_timeout\n                        );\n                        poll_close_fd(pi);\n                    }\n                    else if(unlikely(pi->recv_count && p.idle_timeout > 0 && now - ((pi->last_received_t > pi->last_sent_t) ? pi->last_received_t : pi->last_sent_t) >= p.idle_timeout )) {\n                        netdata_log_info(\"POLLFD: LISTENER: client slot %zu (fd %d) from %s port %s is idle for more than %zu seconds - closing it. \"\n                              , i\n                              , pi->fd\n                              , pi->client_ip ? pi->client_ip : \"<undefined-ip>\"\n                              , pi->client_port ? pi->client_port : \"<undefined-port>\"\n                              , (size_t) p.idle_timeout",
      ""
    ]
  },
  {
    "id": "JetBrains/kotlin",
    "org": "JetBrains",
    "avatarURL": "https://avatars.githubusercontent.com/u/878437?v=4",
    "name": "JetBrains/kotlin",
    "url": "https://github.com/JetBrains/kotlin",
    "lang": "Kotlin",
    "star_num": 45664,
    "fork_num": 5648,
    "snippets": [
      "    // Ok for override\n\n    override val x = null!!\n\n    override fun foo() = null!!\n}\n",
      "",
      "open class Open\n\n@JvmSuppressWildcards(true)\nfun deepOpen(x: Out<Out<Out<Open>>>) {}\n\n@JvmSuppressWildcards(false)\nfun bar(): Out<Open> = null!!\n\nfun simpleOut(x: Out<@JvmWildcard Final>) {}\nfun simpleIn(x: In<@JvmWildcard Any?>) {}\n\nfun falseTrueFalse(): @JvmSuppressWildcards(false) OutPair<Final, @JvmSuppressWildcards OutPair<Out<Final>, Out<@JvmSuppressWildcards(false) Final>>> = null!!\nfun combination(): @JvmSuppressWildcards OutPair<Open, @JvmWildcard OutPair<Open, @JvmWildcard Out<Open>>> = null!!\n\n@JvmSuppressWildcards(false)\nfun foo(x: Boolean, y: Out<Int>): Int = 1\n\n@JvmSuppressWildcards(true)\nfun bar(x: Boolean, y: In<Long>, z: @JvmSuppressWildcards(false) Long): Int = 1\n\n@JvmSuppressWildcards(true)\nfun foo2(): Out<T>\n\n@JvmSuppressWildcards(true)\nfun foo3(): In<Open>\n// COMPILATION_ERRORS",
      "}\n",
      "    // jspecify_nullness_mismatch, jspecify_nullness_mismatch\n    b2.bar<<!UPPER_BOUND_VIOLATED!>T?<!>>(<!NULL_FOR_NONNULL_TYPE!>null<!>)\n    b2.bar<T>(x)\n}\n",
      "{\n        companion object\n        {\n                public enum class OsType {\n                        LINUX,\n                        OTHER;\n                }\n\n                public val operatingSystemType: OsType\n                        get() = OsType.OTHER\n        }\n}\n",
      "public class Test {\n    val content = 1\n    inner class A {\n        val v = object {\n            fun f() = content\n        }\n    }\n}\n\nfun box(): String {\n    Test().A()\n\n    return \"OK\"\n}",
      "// TARGET_BACKEND: JVM\n\nclass MyMapEntry<K, V>: Map.Entry<K, V> {\n    override fun hashCode(): Int = 0\n    override fun equals(other: Any?): Boolean = false\n    override val key: K get() = throw UnsupportedOperationException()\n    override val value: V get() = throw UnsupportedOperationException()\n\n    public fun setValue(value: V): V = value\n}\n\nfun box(): String {\n    (MyMapEntry<String, Int>() as java.util.Map.Entry<String, Int>).setValue(1)\n\n    return \"OK\"\n}\n",
      "// WITH_STDLIB\n// WORKS_WHEN_VALUE_CLASS\n// LANGUAGE: +ValueClasses\n\nOPTIONAL_JVM_INLINE_ANNOTATION\nvalue class R(private val r: Long) {\n    fun test() = run { ok() }\n\n    private fun ok() = \"OK\"\n}\n\nfun box() = R(0).test()",
      "enum class MyEnum {\n    O;\n    companion object {\n        val K = \"K\"\n    }\n}\n\ntypealias MyAlias = MyEnum\n\nfun box() = MyAlias.O.name + MyAlias.K"
    ]
  },
  {
    "id": "coreos/etcd",
    "org": "coreos",
    "avatarURL": "https://avatars.githubusercontent.com/u/41972792?v=4",
    "name": "coreos/etcd",
    "url": "https://github.com/etcd-io/etcd",
    "lang": "Go",
    "star_num": 44399,
    "fork_num": 9469,
    "snippets": [
      "\n\t\"go.uber.org/zap\"\n\n\t\"go.etcd.io/etcd/client/pkg/v3/fileutil\"\n\t\"go.etcd.io/etcd/server/v3/storage/wal/walpb\"\n)\n\n// Repair tries to repair ErrUnexpectedEOF in the\n// last wal file by truncating.\nfunc Repair(lg *zap.Logger, dirpath string) bool {\n\tif lg == nil {\n\t\tlg = zap.NewNop()\n\t}\n\tf, err := openLast(lg, dirpath)\n\tif err != nil {\n\t\treturn false\n\t}\n\tdefer f.Close()\n\n\tlg.Info(\"repairing\", zap.String(\"path\", f.Name()))\n\n\trec := &walpb.Record{}\n\tdecoder := NewDecoder(fileutil.NewFileReader(f.File))\n\tfor {\n\t\tlastOffset := decoder.LastOffset()\n\t\terr := decoder.Decode(rec)\n\t\tswitch {\n\t\tcase err == nil:\n\t\t\t// update crc of the decoder when necessary\n\t\t\tswitch rec.Type {\n\t\t\tcase CrcType:\n\t\t\t\tcrc := decoder.LastCRC()\n\t\t\t\t// current crc of decoder must match the crc of the record.\n\t\t\t\t// do no need to match 0 crc, since the decoder is a new one at this case.\n\t\t\t\tif crc != 0 && rec.Validate(crc) != nil {\n\t\t\t\t\treturn false\n\t\t\t\t}\n\t\t\t\tdecoder.UpdateCRC(rec.Crc)\n\t\t\t}\n\t\t\tcontinue\n\n\t\tcase errors.Is(err, io.EOF):\n\t\t\tlg.Info(\"repaired\", zap.String(\"path\", f.Name()), zap.Error(io.EOF))\n\t\t\treturn true\n\n\t\tcase errors.Is(err, io.ErrUnexpectedEOF):\n\t\t\tbrokenName := f.Name() + \".broken\"\n\t\t\tbf, bferr := os.Create(brokenName)\n\t\t\tif bferr != nil {\n\t\t\t\tlg.Warn(\"failed to create backup file\", zap.String(\"path\", brokenName), zap.Error(bferr))\n\t\t\t\treturn false\n\t\t\t}\n\t\t\tdefer bf.Close()\n\n\t\t\tif _, err = f.Seek(0, io.SeekStart); err != nil {\n\t\t\t\tlg.Warn(\"failed to read file\", zap.String(\"path\", f.Name()), zap.Error(err))\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\tif _, err = io.Copy(bf, f); err != nil {\n\t\t\t\tlg.Warn(\"failed to copy\", zap.String(\"from\", f.Name()), zap.String(\"to\", brokenName), zap.Error(err))\n\t\t\t\treturn false\n\t\t\t}\n",
      "\npackage concurrency_test\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"testing\"\n\n\tclientv3 \"go.etcd.io/etcd/client/v3\"\n\t\"go.etcd.io/etcd/client/v3/concurrency\"\n\tintegration2 \"go.etcd.io/etcd/tests/v3/framework/integration\"\n)\n\nfunc TestMutexLockSessionExpired(t *testing.T) {\n\tcli, err := integration2.NewClient(t, clientv3.Config{Endpoints: exampleEndpoints()})\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tdefer cli.Close()\n\n\t// create two separate sessions for lock competition\n\ts1, err := concurrency.NewSession(cli)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tdefer s1.Close()\n\tm1 := concurrency.NewMutex(s1, \"/my-lock/\")\n\n\ts2, err := concurrency.NewSession(cli)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tm2 := concurrency.NewMutex(s2, \"/my-lock/\")\n\n\t// acquire lock for s1\n\tif err := m1.Lock(context.TODO()); err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\tm2Locked := make(chan struct{})\n\tvar err2 error\n\tgo func() {\n\t\tdefer close(m2Locked)\n\t\t// m2 blocks since m1 already acquired lock /my-lock/\n\t\tif err2 = m2.Lock(context.TODO()); err2 == nil {\n\t\t\tt.Error(\"expect session expired error\")\n\t\t}\n\t}()\n\n\t// revoke the session of m2 before unlock m1\n\terr = s2.Close()\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tif err := m1.Unlock(context.TODO()); err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\t<-m2Locked\n}\n\nfunc TestMutexUnlock(t *testing.T) {\n\tcli, err := integration2.NewClient(t, clientv3.Config{Endpoints: exampleEndpoints()})\n\tif err != nil {",
      "\t\t}\n\t\tstacks = strings.Join(goroutines, \"\\n\\n\")\n\n\t\tfor substr, what := range badSubstring {\n\t\t\tif strings.Contains(stacks, substr) {\n\t\t\t\tbad = what\n\t\t\t}\n\t\t}\n\t\t// Undesired goroutines found, but goroutines might just still be\n\t\t// shutting down, so give it some time.\n\t\truntime.Gosched()\n\t\ttime.Sleep(50 * time.Millisecond)\n\t}\n\treturn fmt.Errorf(\"appears to have leaked %s:\\n%s\", bad, stacks)\n}\n\n// RegisterLeakDetection is a convenient way to register before-and-after code to a test.\n// If you execute RegisterLeakDetection, you don't need to explicitly register AfterTest.\nfunc RegisterLeakDetection(t TB) {\n\tif err := CheckAfterTest(10 * time.Millisecond); err != nil {\n\t\tt.Skip(\"Found leaked goroutined BEFORE test\", err)\n\t\treturn\n\t}\n\tt.Cleanup(func() {\n\t\tafterTest(t)\n\t})\n}\n\n// afterTest is meant to run in a defer that executes after a test completes.\n// It will detect common goroutine leaks, retrying in case there are goroutines\n// not synchronously torn down, and fail the test if any goroutines are stuck.\nfunc afterTest(t TB) {\n\t// If test-failed the leaked goroutines list is hidding the real\n\t// source of problem.\n\tif !t.Failed() {\n\t\tif err := CheckAfterTest(1 * time.Second); err != nil {\n\t\t\tt.Errorf(\"Test %v\", err)\n\t\t}\n\t}\n}\n\nfunc interestingGoroutines() (gs []string) {\n\tbuf := make([]byte, 2<<20)\n\tbuf = buf[:runtime.Stack(buf, true)]\n\tfor _, g := range strings.Split(string(buf), \"\\n\\n\") {\n\t\tsl := strings.SplitN(g, \"\\n\", 2)\n\t\tif len(sl) != 2 {\n\t\t\tcontinue\n\t\t}\n\t\tstack := strings.TrimSpace(sl[1])\n\t\tif stack == \"\" ||\n\t\t\tstrings.Contains(stack, \"sync.(*WaitGroup).Done\") ||\n\t\t\tstrings.Contains(stack, \"os.(*file).close\") ||\n\t\t\tstrings.Contains(stack, \"os.(*Process).Release\") ||\n\t\t\tstrings.Contains(stack, \"created by os/signal.init\") ||\n\t\t\tstrings.Contains(stack, \"runtime/panic.go\") ||\n\t\t\tstrings.Contains(stack, \"created by testing.RunTests\") ||\n\t\t\tstrings.Contains(stack, \"created by testing.runTests\") ||\n\t\t\tstrings.Contains(stack, \"created by testing.(*T).Run\") ||\n\t\t\tstrings.Contains(stack, \"testing.Main(\") ||\n\t\t\tstrings.Contains(stack, \"runtime.goexit\") ||\n\t\t\tstrings.Contains(stack, \"go.etcd.io/etcd/client/pkg/v3/testutil.interestingGoroutines\") ||\n\t\t\tstrings.Contains(stack, \"go.etcd.io/etcd/client/pkg/v3/logutil.(*MergeLogger).outputLoop\") ||\n\t\t\tstrings.Contains(stack, \"github.com/golang/glog.(*loggingT).flushDaemon\") ||",
      "\t\t},\n\t}\n\tfor i, tt := range tests {\n\t\tb, _ := betesting.NewDefaultTmpBackend(t)\n\t\ts := NewStore(zaptest.NewLogger(t), b, &lease.FakeLessor{}, StoreConfig{})\n\t\tfi := newFakeIndex()\n\t\tfi.indexCompactRespc <- tt.keep\n\t\ts.kvindex = fi\n\n\t\ttx := s.b.BatchTx()\n\n\t\ttx.Lock()\n\t\tibytes := newRevBytes()\n\t\tfor _, rev := range revs {\n\t\t\trevToBytes(rev, ibytes)\n\t\t\ttx.UnsafePut(schema.Key, ibytes, []byte(\"bar\"))\n\t\t}\n\t\ttx.Unlock()\n\n\t\t_, err := s.scheduleCompaction(tt.rev, 0)\n\t\tif err != nil {\n\t\t\tt.Error(err)\n\t\t}\n\n\t\ttx.Lock()\n\t\tfor _, rev := range tt.wrevs {\n\t\t\trevToBytes(rev, ibytes)\n\t\t\tkeys, _ := tx.UnsafeRange(schema.Key, ibytes, nil, 0)\n\t\t\tif len(keys) != 1 {\n\t\t\t\tt.Errorf(\"#%d: range on %v = %d, want 1\", i, rev, len(keys))\n\t\t\t}\n\t\t}\n\t\tvals, _ := UnsafeReadFinishedCompact(tx)\n\t\tif !reflect.DeepEqual(vals, tt.rev) {\n\t\t\tt.Errorf(\"#%d: finished compact equal %+v, want %+v\", i, vals, tt.rev)\n\t\t}\n\t\ttx.Unlock()\n\n\t\tcleanup(s, b)\n\t}\n}\n\nfunc TestCompactAllAndRestore(t *testing.T) {\n\tb, _ := betesting.NewDefaultTmpBackend(t)\n\ts0 := NewStore(zaptest.NewLogger(t), b, &lease.FakeLessor{}, StoreConfig{})\n\tdefer b.Close()\n\n\ts0.Put([]byte(\"foo\"), []byte(\"bar\"), lease.NoLease)\n\ts0.Put([]byte(\"foo\"), []byte(\"bar1\"), lease.NoLease)\n\ts0.Put([]byte(\"foo\"), []byte(\"bar2\"), lease.NoLease)\n\ts0.DeleteRange([]byte(\"foo\"), nil)\n\n\trev := s0.Rev()\n\t// compact all keys\n\tdone, err := s0.Compact(traceutil.TODO(), rev)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\n\tselect {\n\tcase <-done:\n\tcase <-time.After(10 * time.Second):\n\t\tt.Fatal(\"timeout waiting for compaction to finish\")\n\t}",
      "}\n",
      "\t\tt.Fatal(err)\n\t}\n\tif cw.writes != 2 {\n\t\tt.Fatalf(\"got %d writes, expected 2\", cw.writes)\n\t}\n}\n\n// TestPageWriterOffset tests if page writer correctly repositions when offset is given.\nfunc TestPageWriterOffset(t *testing.T) {\n\tdefaultBufferBytes = 1024\n\tpageBytes := 128\n\tbuf := make([]byte, defaultBufferBytes)\n\tcw := &checkPageWriter{pageBytes: 64, t: t}\n\tw := NewPageWriter(cw, pageBytes, 0)\n\tif _, err := w.Write(buf[:64]); err != nil {\n\t\tt.Fatal(err)\n\t}\n\tif err := w.Flush(); err != nil {\n\t\tt.Fatal(err)\n\t}\n\tif w.pageOffset != 64 {\n\t\tt.Fatalf(\"w.pageOffset expected 64, got %d\", w.pageOffset)\n\t}\n\n\tw = NewPageWriter(cw, w.pageOffset, pageBytes)\n\tif _, err := w.Write(buf[:64]); err != nil {\n\t\tt.Fatal(err)\n\t}\n\tif err := w.Flush(); err != nil {\n\t\tt.Fatal(err)\n\t}\n\tif w.pageOffset != 0 {\n\t\tt.Fatalf(\"w.pageOffset expected 0, got %d\", w.pageOffset)\n\t}\n}\n\nfunc TestPageWriterPageBytes(t *testing.T) {\n\tcases := []struct {\n\t\tname        string\n\t\tpageBytes   int\n\t\texpectPanic bool\n\t}{\n\t\t{\n\t\t\tname:        \"normal page bytes\",\n\t\t\tpageBytes:   4096,\n\t\t\texpectPanic: false,\n\t\t},\n\t\t{\n\t\t\tname:        \"negative page bytes\",\n\t\t\tpageBytes:   -1,\n\t\t\texpectPanic: true,\n\t\t},\n\t\t{\n\t\t\tname:        \"zero page bytes\",\n\t\t\tpageBytes:   0,\n\t\t\texpectPanic: true,\n\t\t},\n\t}\n\n\tfor _, tc := range cases {\n\t\tt.Run(tc.name, func(t *testing.T) {\n\t\t\tdefaultBufferBytes = 1024\n\t\t\tcw := &checkPageWriter{pageBytes: tc.pageBytes, t: t}\n\t\t\tif tc.expectPanic {",
      "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage interfaces\n\nimport (\n\t\"context\"\n\t\"testing\"\n\n\tclientv3 \"go.etcd.io/etcd/client/v3\"\n\t\"go.etcd.io/etcd/tests/v3/framework/config\"\n)\n\ntype TestRunner interface {\n\tTestMain(m *testing.M)\n\tBeforeTest(testing.TB)\n\tNewCluster(context.Context, testing.TB, ...config.ClusterOption) Cluster\n}\n\ntype Cluster interface {\n\tMembers() []Member\n\tClient(opts ...config.ClientOption) (Client, error)\n\tWaitLeader(t testing.TB) int\n\tClose() error\n\tEndpoints() []string\n}\n\ntype Member interface {\n\tClient() Client\n\tStart(ctx context.Context) error\n\tStop()\n}\n\ntype Client interface {\n\tPut(context context.Context, key, value string, opts config.PutOptions) error\n\tGet(context context.Context, key string, opts config.GetOptions) (*clientv3.GetResponse, error)\n\tDelete(context context.Context, key string, opts config.DeleteOptions) (*clientv3.DeleteResponse, error)\n\tCompact(context context.Context, rev int64, opts config.CompactOption) (*clientv3.CompactResponse, error)\n\tStatus(context context.Context) ([]*clientv3.StatusResponse, error)\n\tHashKV(context context.Context, rev int64) ([]*clientv3.HashKVResponse, error)\n\tHealth(context context.Context) error\n\tDefragment(context context.Context, opts config.DefragOption) error\n\tAlarmList(context context.Context) (*clientv3.AlarmResponse, error)\n\tAlarmDisarm(context context.Context, alarmMember *clientv3.AlarmMember) (*clientv3.AlarmResponse, error)\n\tGrant(context context.Context, ttl int64) (*clientv3.LeaseGrantResponse, error)\n\tTimeToLive(context context.Context, id clientv3.LeaseID, opts config.LeaseOption) (*clientv3.LeaseTimeToLiveResponse, error)\n\tLeases(context context.Context) (*clientv3.LeaseLeasesResponse, error)\n\tKeepAliveOnce(context context.Context, id clientv3.LeaseID) (*clientv3.LeaseKeepAliveResponse, error)\n\tRevoke(context context.Context, id clientv3.LeaseID) (*clientv3.LeaseRevokeResponse, error)\n\n\tAuthEnable(context context.Context) error\n\tAuthDisable(context context.Context) error\n\tAuthStatus(context context.Context) (*clientv3.AuthStatusResponse, error)\n\tUserAdd(context context.Context, name, password string, opts config.UserAddOptions) (*clientv3.AuthUserAddResponse, error)\n\tUserGet(context context.Context, name string) (*clientv3.AuthUserGetResponse, error)\n\tUserList(context context.Context) (*clientv3.AuthUserListResponse, error)\n\tUserDelete(context context.Context, name string) (*clientv3.AuthUserDeleteResponse, error)\n\tUserChangePass(context context.Context, user, newPass string) error\n\tUserGrantRole(context context.Context, user string, role string) (*clientv3.AuthUserGrantRoleResponse, error)\n\tUserRevokeRole(context context.Context, user string, role string) (*clientv3.AuthUserRevokeRoleResponse, error)\n\tRoleAdd(context context.Context, name string) (*clientv3.AuthRoleAddResponse, error)\n\tRoleGrantPermission(context context.Context, name string, key, rangeEnd string, permType clientv3.PermissionType) (*clientv3.AuthRoleGrantPermissionResponse, error)\n\tRoleGet(context context.Context, role string) (*clientv3.AuthRoleGetResponse, error)",
      "\t// Scheduled returns the number of scheduled jobs (excluding pending jobs)\n\tScheduled() int\n\n\t// Finished returns the number of finished jobs\n\tFinished() int\n\n\t// WaitFinish waits until at least n job are finished and all pending jobs are finished.\n\tWaitFinish(n int)\n\n\t// Stop stops the scheduler.\n\tStop()\n}\n\ntype fifo struct {\n\tmu sync.Mutex\n\n\tresume    chan struct{}\n\tscheduled int\n\tfinished  int\n\tpendings  []Job\n\n\tctx    context.Context\n\tcancel context.CancelFunc\n\n\tfinishCond *sync.Cond\n\tdonec      chan struct{}\n\tlg         *zap.Logger\n}\n\n// NewFIFOScheduler returns a Scheduler that schedules jobs in FIFO\n// order sequentially\nfunc NewFIFOScheduler(lg *zap.Logger) Scheduler {\n\tverify.Assert(lg != nil, \"the logger should not be nil\")\n\n\tf := &fifo{\n\t\tresume: make(chan struct{}, 1),\n\t\tdonec:  make(chan struct{}, 1),\n\t\tlg:     lg,\n\t}\n\tf.finishCond = sync.NewCond(&f.mu)\n\tf.ctx, f.cancel = context.WithCancel(context.Background())\n\tgo f.run()\n\treturn f\n}\n\n// Schedule schedules a job that will be ran in FIFO order sequentially.\nfunc (f *fifo) Schedule(j Job) {\n\tf.mu.Lock()\n\tdefer f.mu.Unlock()\n\n\tif f.cancel == nil {\n\t\tpanic(\"schedule: schedule to stopped scheduler\")\n\t}\n\n\tif len(f.pendings) == 0 {\n\t\tselect {\n\t\tcase f.resume <- struct{}{}:\n\t\tdefault:\n\t\t}\n\t}\n\tf.pendings = append(f.pendings, j)\n}\n\nfunc (f *fifo) Pending() int {",
      "\n\tlearners, err := clus.GetLearnerMembers()\n\tif err != nil {\n\t\tt.Fatalf(\"failed to get the learner members in Cluster: %v\", err)\n\t}\n\tif len(learners) != 1 {\n\t\tt.Fatalf(\"added 1 learner to Cluster, got %d\", len(learners))\n\t}\n\n\tleaderIdx := clus.WaitLeader(t)\n\terrCh := make(chan error, 1)\n\tgo func() {\n\t\t// note that this cluster has 1 leader and 1 learner. TryTransferLeadershipOnShutdown should return nil.\n\t\t// Leadership transfer is skipped in cluster with 1 voting member.\n\t\terrCh <- clus.Members[leaderIdx].Server.TryTransferLeadershipOnShutdown()\n\t}()\n\tselect {\n\tcase err := <-errCh:\n\t\tif err != nil {\n\t\t\tt.Errorf(\"got error during leadership transfer: %v\", err)\n\t\t}\n\tcase <-time.After(5 * time.Second):\n\t\tt.Error(\"timed out waiting for leader transition\")\n\t}\n}\n\nfunc TestFirstCommitNotification(t *testing.T) {\n\tintegration.BeforeTest(t)\n\tctx := context.Background()\n\tclusterSize := 3\n\tcluster := integration.NewCluster(t, &integration.ClusterConfig{Size: clusterSize})\n\tdefer cluster.Terminate(t)\n\n\toldLeaderIdx := cluster.WaitLeader(t)\n\toldLeaderClient := cluster.Client(oldLeaderIdx)\n\n\tnewLeaderIdx := (oldLeaderIdx + 1) % clusterSize\n\tnewLeaderId := uint64(cluster.Members[newLeaderIdx].ID())\n\n\tnotifiers := make(map[int]<-chan struct{}, clusterSize)\n\tfor i, clusterMember := range cluster.Members {\n\t\tnotifiers[i] = clusterMember.Server.FirstCommitInTermNotify()\n\t}\n\n\t_, err := oldLeaderClient.MoveLeader(context.Background(), newLeaderId)\n\n\tif err != nil {\n\t\tt.Errorf(\"got error during leadership transfer: %v\", err)\n\t}\n\n\tt.Logf(\"Leadership transferred.\")\n\tt.Logf(\"Submitting write to make sure empty and 'foo' index entry was already flushed\")\n\tcli := cluster.RandClient()\n\n\tif _, err := cli.Put(ctx, \"foo\", \"bar\"); err != nil {\n\t\tt.Fatalf(\"Failed to put kv pair.\")\n\t}\n\n\t// It's guaranteed now that leader contains the 'foo'->'bar' index entry.\n\tleaderAppliedIndex := cluster.Members[newLeaderIdx].Server.AppliedIndex()\n\n\tctx, cancel := context.WithTimeout(ctx, 5*time.Second)\n\tdefer cancel()\n",
      "// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// etcdctl is a command line application that controls etcd.\npackage main\n\nimport (\n\t\"go.etcd.io/etcd/etcdctl/v3/ctlv3\"\n)\n\n/*\n*\nmainWithError is fully analogous to main, but instead of signaling errors\nby os.Exit, it exposes the error explicitly, such that test-logic can intercept\ncontrol to e.g. dump coverage data (even for test-for-failure scenarios).\n*/\nfunc mainWithError() error {\n\treturn ctlv3.Start()\n}\n\nfunc main() {\n\tctlv3.MustStart()\n\treturn\n}\n"
    ]
  },
  {
    "id": "JuliaLang/julia",
    "org": "JuliaLang",
    "avatarURL": "https://avatars.githubusercontent.com/u/743164?v=4",
    "name": "JuliaLang/julia",
    "url": "https://github.com/JuliaLang/julia",
    "lang": "Julia",
    "star_num": 43089,
    "fork_num": 5276,
    "snippets": [
      "\"\"\"\nstruct InternalCodeCache end\n\nfunction setindex!(cache::InternalCodeCache, ci::CodeInstance, mi::MethodInstance)\n    ccall(:jl_mi_cache_insert, Cvoid, (Any, Any), mi, ci)\n    return cache\nend\n\nconst GLOBAL_CI_CACHE = InternalCodeCache()\n\nstruct WorldRange\n    min_world::UInt\n    max_world::UInt\nend\nWorldRange() = WorldRange(typemin(UInt), typemax(UInt))\nWorldRange(w::UInt) = WorldRange(w, w)\nWorldRange(r::UnitRange) = WorldRange(first(r), last(r))\nfirst(wr::WorldRange) = wr.min_world\nlast(wr::WorldRange) = wr.max_world\nin(world::UInt, wr::WorldRange) = wr.min_world <= world <= wr.max_world\n\nfunction intersect(a::WorldRange, b::WorldRange)\n    ret = WorldRange(max(a.min_world, b.min_world), min(a.max_world, b.max_world))\n    @assert ret.min_world <= ret.max_world\n    return ret\nend\n\n\"\"\"\n    struct WorldView\n\nTakes a given cache and provides access to the cache contents for the given\nrange of world ages, rather than defaulting to the current active world age.\n\"\"\"\nstruct WorldView{Cache}\n    cache::Cache\n    worlds::WorldRange\n    WorldView(cache::Cache, range::WorldRange) where Cache = new{Cache}(cache, range)\nend\nWorldView(cache, args...) = WorldView(cache, WorldRange(args...))\nWorldView(wvc::WorldView, wr::WorldRange) = WorldView(wvc.cache, wr)\nWorldView(wvc::WorldView, args...) = WorldView(wvc.cache, args...)\n\nfunction haskey(wvc::WorldView{InternalCodeCache}, mi::MethodInstance)\n    return ccall(:jl_rettype_inferred, Any, (Any, UInt, UInt), mi, first(wvc.worlds), last(wvc.worlds)) !== nothing\nend\n\nfunction get(wvc::WorldView{InternalCodeCache}, mi::MethodInstance, default)\n    r = ccall(:jl_rettype_inferred, Any, (Any, UInt, UInt), mi, first(wvc.worlds), last(wvc.worlds))\n    if r === nothing\n        return default\n    end\n    return r::CodeInstance\nend\n\nfunction getindex(wvc::WorldView{InternalCodeCache}, mi::MethodInstance)\n    r = get(wvc, mi, nothing)\n    r === nothing && throw(KeyError(mi))\n    return r::CodeInstance\nend\n\nfunction setindex!(wvc::WorldView{InternalCodeCache}, ci::CodeInstance, mi::MethodInstance)\n    setindex!(wvc.cache, ci, mi)\n    return wvc\nend",
      "module ExtensionFolder\n\nusing ExtDep, ExtDep2, HasExtensions\n\nfunction __init__()\n    HasExtensions.ext_folder_loaded = true\nend\n\nend\n",
      "        buf[pos + 2] = UInt8('f')\n        return pos + 3\n    end\n\n    bits = Core.bitcast(UInt64, x)\n    mant = bits & MANTISSA_MASK\n    exp = Int((bits >> 52) & EXP_MASK)\n\n    if exp == 0\n        e2 = 1 - 1023 - 52\n        m2 = mant\n    else\n        e2 = exp - 1023 - 52\n        m2 = (Int64(1) << 52) | mant\n    end\n    nonzero = false\n    if e2 >= -52\n        idx = e2 < 0 ? 0 : indexforexp(e2)\n        p10bits = pow10bitsforindex(idx)\n        len = lengthforindex(idx)\n        i = len - 1\n        while i >= 0\n            j = p10bits - e2\n            #=@inbounds=# mula, mulb, mulc = POW10_SPLIT[POW10_OFFSET[idx + 1] + i + 1]\n            digits = mulshiftmod1e9(m2 << 8, mula, mulb, mulc, j + 8)\n            if nonzero\n                pos = append_nine_digits(digits, buf, pos)\n            elseif digits != 0\n                olength = decimallength(digits)\n                pos = append_n_digits(olength, digits, buf, pos)\n                nonzero = true\n            end\n            i -= 1\n        end\n    end\n    if !nonzero\n        buf[pos] = UInt8('0')\n        pos += 1\n    end\n    hasfractional = false\n    if precision > 0 || hash\n        buf[pos] = decchar\n        pos += 1\n        hasfractional = true\n    end\n    if e2 < 0\n        idx = div(-e2, 16)\n        blocks = div(precision, 9) + 1\n        roundUp = 0\n        i = 0\n        if blocks <= MIN_BLOCK_2[idx + 1]\n            i = blocks\n            for _ = 1:precision\n                buf[pos] = UInt8('0')\n                pos += 1\n            end\n        elseif i < MIN_BLOCK_2[idx + 1]\n            i = MIN_BLOCK_2[idx + 1]\n            for _ = 1:(9 * i)\n                buf[pos] = UInt8('0')\n                pos += 1\n            end\n        end\n        while i < blocks",
      "    @test g2(1.0f0, 2, 100_000_000) == 0\n    g2′(start, N) = g2(start, 2, N)\n    @test g2′(1.0, 100_000_000) == 0\n    @test g2′(1.0f0, 100_000_000) == 0\n\n    function g3(start, three, N)\n        x = start\n        n = 0\n        for _ in 1:N\n           n += (x^3 !== x^three)\n           x = nextfloat(x)\n        end\n        return n\n    end\n    @test g3(1.0, 3, 100_000_000) == 0\n    @test g3(1.0f0, 3, 100_000_000) == 0\n    g3′(start, N) = g3(start, 3, N)\n    @test g3′(1.0, 100_000_000) == 0\n    @test g3′(1.0f0, 100_000_000) == 0\n\n    function ginv(start, inv, N)\n        x = start\n        n = 0\n        for _ in 1:N\n           n += (x^-1 !== x^inv)\n           x = nextfloat(x)\n        end\n        return n\n    end\n    @test ginv(1.0, -1, 100_000_000) == 0\n    @test ginv(1.0f0, -1, 100_000_000) == 0\n    ginv′(start, N) = ginv(start, -1, N)\n    @test ginv′(1.0, 100_000_000) == 0\n    @test ginv′(1.0f0, 100_000_000) == 0\n\n    f(x, p) = x^p\n    finv(x) = f(x, -1)\n    f2(x) = f(x, 2)\n    f3(x) = f(x, 3)\n    x = 1.0000000105367122\n    @test x^2 == f(x, 2) == f2(x) == x*x == Float64(big(x)*big(x))\n    @test x^3 == f(x, 3) == f3(x) == x*x*x == Float64(big(x)*big(x)*big(x))\n    x = 1.000000007393669\n    @test x^-1 == f(x, -1) == finv(x) == 1/x == inv(x) == Float64(1/big(x)) == Float64(inv(big(x)))\nend\n\n@testset \"curried approximation\" begin\n\n    @test ≈(1.0; atol=1).(1.0:3.0) == [true, true, false]\n\nend\n\n@testset \"isnan for Number\" begin\n    struct CustomNumber <: Number end\n    @test !isnan(CustomNumber())\nend\n\n@testset \"isapprox and integer overflow\" begin\n    for T in (Int8, Int16, Int32)\n        T === Int && continue\n        @test !isapprox(typemin(T), T(0))\n        @test !isapprox(typemin(T), unsigned(T)(0))\n        @test !isapprox(typemin(T), 0)\n        @test !isapprox(typemin(T), T(0), atol=0.99)",
      "        [joinpath(homedir(), \".terminfo\")]\n    elseif haskey(ENV, \"TERMINFO_DIRS\")\n        split(ENV[\"TERMINFO_DIRS\"], ':')\n    elseif Sys.isunix()\n        [\"/usr/share/terminfo\"]\n    else\n        String[]\n    end\n    for dir in terminfo_dirs\n        if isfile(joinpath(dir, chr, term))\n            return joinpath(dir, chr, term)\n        elseif isfile(joinpath(dir, chrcode, term))\n            return joinpath(dir, chrcode, term)\n        end\n    end\nend\n\n\"\"\"\n    load_terminfo(term::String)\n\nLoad the `TermInfo` for `term`, falling back on a blank `TermInfo`.\n\"\"\"\nfunction load_terminfo(term::String)\n    file = find_terminfo_file(term)\n    isnothing(file) && return TermInfo()\n    try\n        TermInfo(read(file, TermInfoRaw))\n    catch err\n        if err isa ArgumentError || err isa IOError\n            TermInfo()\n        else\n            rethrow()\n        end\n    end\nend\n\n\"\"\"\nThe terminfo of the current terminal.\n\"\"\"\ncurrent_terminfo::TermInfo = TermInfo()\n\n# Legacy/TTY methods and the `:color` parameter\n\nif Sys.iswindows()\n    ttyhascolor(term_type = nothing) = true\nelse\n    function ttyhascolor(term_type = get(ENV, \"TERM\", \"\"))\n        startswith(term_type, \"xterm\") ||\n            haskey(current_terminfo, :setaf)\n    end\nend\n\n\"\"\"\n    ttyhastruecolor()\n\nReturn a boolean signifying whether the current terminal supports 24-bit colors.\n\nThis uses the `COLORTERM` environment variable if possible, returning true if it\nis set to either `\"truecolor\"` or `\"24bit\"`.\n\nAs a fallback, first on unix systems the `colors` terminal capability is checked\n— should more than 256 colors be reported, this is taken to signify 24-bit\nsupport.\n\"\"\"",
      "\n# IndexStyle\nlet a = fill(1.0, 5, 3)\n    r = reinterpret(Int64, a)\n    @test @inferred(IndexStyle(r)) == IndexLinear()\n    fill!(r, 2)\n    @test all(a .=== reinterpret(Float64, [Int64(2)])[1])\n    @test all(r .=== Int64(2))\n    for badinds in (0, 16, (0,1), (1,0), (6,3), (5,4))\n        @test_throws BoundsError r[badinds...]\n        @test_throws BoundsError r[badinds...] = -2\n    end\n    for goodinds in (1, 15, (1,1), (5,3))\n        @test setindex!(r, -2, goodinds...) === r\n        @test r[goodinds...] == -2\n    end\n    r = reinterpret(Int32, a)\n    @test @inferred(IndexStyle(r)) == IndexLinear()\n    fill!(r, 3)\n    @test all(a .=== reinterpret(Float64, [(Int32(3), Int32(3))])[1])\n    @test all(r .=== Int32(3))\n    for badinds in (0, 31, (0,1), (1,0), (11,3), (10,4))\n        @test_throws BoundsError r[badinds...]\n        @test_throws BoundsError r[badinds...] = -3\n    end\n    for goodinds in (1, 30, (1,1), (10,3))\n        @test setindex!(r, -3, goodinds...) === r\n        @test r[goodinds...] == -3\n    end\n    r = reinterpret(Int64, view(a, 1:2:5, :))\n    @test @inferred(IndexStyle(r)) == IndexCartesian()\n    fill!(r, 4)\n    @test all(a[1:2:5,:] .=== reinterpret(Float64, [Int64(4)])[1])\n    @test all(r .=== Int64(4))\n    for badinds in (0, 10, (0,1), (1,0), (4,3), (3,4))\n        @test_throws BoundsError r[badinds...]\n        @test_throws BoundsError r[badinds...] = -4\n    end\n    for goodinds in (1, 9, (1,1), (3,3))\n        @test setindex!(r, -4, goodinds...) === r\n        @test r[goodinds...] == -4\n    end\n    r = reinterpret(Int32, view(a, 1:2:5, :))\n    @test @inferred(IndexStyle(r)) == IndexCartesian()\n    fill!(r, 5)\n    @test all(a[1:2:5,:] .=== reinterpret(Float64, [(Int32(5), Int32(5))])[1])\n    @test all(r .=== Int32(5))\n    for badinds in (0, 19, (0,1), (1,0), (7,3), (6,4))\n        @test_throws BoundsError r[badinds...]\n        @test_throws BoundsError r[badinds...] = -5\n    end\n    for goodinds in (1, 18, (1,1), (6,3))\n        @test setindex!(r, -5, goodinds...) === r\n        @test r[goodinds...] == -5\n    end\n\n    ar = [(1,2), (3,4)]\n    arr = reinterpret(reshape, Int, ar)\n    @test @inferred(IndexStyle(arr)) == Base.IndexSCartesian2{2}()\n    @test @inferred(eachindex(arr)) == Base.SCartesianIndices2{2}(Base.OneTo(2))\n    @test @inferred(eachindex(arr, arr)) == Base.SCartesianIndices2{2}(Base.OneTo(2))\nend\n\n# Error on reinterprets that would expose padding",
      "\"\"\"\ncbrt(x::AbstractFloat) = x < 0 ? -(-x)^(1//3) : x^(1//3)\n\n\"\"\"\n    _approx_cbrt(x)\n\nApproximate `cbrt` to 5 bits precision\n\n    cbrt(2^e * (1+m)) ≈ 2^(e÷3) * (1 + (e%3+m)÷3)\n\nwhere:\n - `e` is integral and >= 0\n - `m` is real and in [0, 1),\n - `÷` is integer division\n - `%` is integer remainder\n\nThe RHS is always >= the LHS and has a maximum relative error of about 1 in 16.\nAdding a bias of -0.03306235651 to the `(e%3+m)÷3` term reduces the error to about 1 in\n32.\n\nWith the IEEE floating point representation, for finite positive normal values, ordinary\ninteger division of the value in bits magically gives almost exactly the RHS of the above\nprovided we first subtract the exponent bias and later add it back.  We do the\nsubtraction virtually to keep e >= 0 so that ordinary integer division rounds towards\nminus infinity; this is also efficient. All operations can be done in 32-bit.\n\nThese implementations assume that NaNs, infinities and zeros have already been filtered.\n\"\"\"\n@inline function _approx_cbrt(x::T) where {T<:Union{Float32,Float64}}\n    # floor(UInt32, adj * exp2(k)) should be evaluated to 2 constants.\n    adj = exponent_bias(T)*2/3 - 0.03306235651\n    k = significand_bits(T) - (8*sizeof(T) - 32)\n\n    u = highword(x) & 0x7fff_ffff\n    if u >= Base.Math.highword(floatmin(T))\n        v = div(u, UInt32(3)) + floor(UInt32, adj * exp2(k))\n    else\n        # subnormal\n        x *= maxintfloat(T)\n        adj -= exponent(maxintfloat(T))/3\n        u = highword(x) & 0x7fff_ffff\n        v = div(u, UInt32(3)) + floor(UInt32, adj * exp2(k))\n    end\n    return copysign(fromhighword(T, v), x)\nend\n\n@inline function _improve_cbrt(x::Float32, t::Float32)\n    # Newton iterations solving\n    #   t^2 - x/t == 0\n    # with update\n    #   t <- t*(t^3 + 2*x)/(2*t^3 + x)\n\n    # Use double precision so that its terms can be arranged for efficiency\n    # without causing overflow or underflow.\n    xx = Float64(x)\n    tt = Float64(t)\n\n    # 1st step: 16 bits accuracy\n    tt3 = tt^3\n    tt *= (2*xx + tt3)/(x + 2*tt3)\n\n    # 2nd step: 47 bits accuracy\n    tt3 = tt^3\n    tt *= (2*xx + tt3)/(x + 2*tt3)",
      "# Error thrown from ill-formed uses of @simd\nstruct SimdError <: Exception\n    msg::String\nend\n\n# Parse iteration space expression\n#       symbol '=' range\n#       symbol 'in' range\nfunction parse_iteration_space(x)\n    (isa(x, Expr) && (x.head === :(=) || x.head === :in)) || throw(SimdError(\"= or in expected\"))\n    length(x.args) == 2 || throw(SimdError(\"simd range syntax is wrong\"))\n    isa(x.args[1], Symbol) || throw(SimdError(\"simd loop index must be a symbol\"))\n    x.args # symbol, range\nend\n\n# reject invalid control flow statements in @simd loop body\nfunction check_body!(x::Expr)\n    if x.head === :break || x.head === :continue\n        throw(SimdError(\"$(x.head) is not allowed inside a @simd loop body\"))\n    elseif x.head === :macrocall && x.args[1] === Symbol(\"@goto\")\n        throw(SimdError(\"@goto is not allowed inside a @simd loop body\"))\n    end\n    for arg in x.args\n        check_body!(arg)\n    end\n    return true\nend\ncheck_body!(x::QuoteNode) = check_body!(x.value)\ncheck_body!(x) = true\n\n# @simd splits a for loop into two loops: an outer scalar loop and\n# an inner loop marked with :loopinfo. The simd_... functions define\n# the splitting.\n# Custom iterators that do not support random access cannot support\n# vectorization. In order to be compatible with `@simd` annotated loops,\n#they should override `simd_inner_length(v::MyIter, j) = 1`,\n#`simd_outer_range(v::MyIter) = v`, and `simd_index(v::MyIter, j, i) = j`.\n\n# Get range for outer loop.\nsimd_outer_range(r) = 0:0\n\n# Get trip count for inner loop.\n@inline simd_inner_length(r, j) = Base.length(r)\n\n# Construct user-level element from original range, outer loop index j, and inner loop index i.\n@inline simd_index(r, j, i) = (@inbounds ret = r[i+firstindex(r)]; ret)\n\n# Compile Expr x in context of @simd.\nfunction compile(x, ivdep)\n    (isa(x, Expr) && x.head === :for) || throw(SimdError(\"for loop expected\"))\n    length(x.args) == 2 || throw(SimdError(\"1D for loop expected\"))\n    check_body!(x)\n\n    var,range = parse_iteration_space(x.args[1])\n    r = gensym(\"r\") # Range value\n    j = gensym(\"i\") # Iteration variable for outer loop\n    n = gensym(\"n\") # Trip count for inner loop\n    i = gensym(\"i\") # Trip index for inner loop\n    quote\n        # Evaluate range value once, to enhance type and data flow analysis by optimizers.\n        let $r = $range\n            for $j in Base.simd_outer_range($r)\n                let $n = Base.simd_inner_length($r,$j)\n                    if zero($n) < $n",
      "            unsafe_copyto!(a1, 1, a2, 1, min(-bdiff, l2))\n        end\n    elseif bdiff > 0\n        if right_false_is_false\n            # We don't need to worry about the trailing bits — they're all false\n            _deletebeg!(a1, min(l1, bdiff))\n            b1 += bdiff\n        else # @assert f(x, false) == x\n            # We don't need to worry about the trailing bits — they already have the\n            # correct value\n        end\n    end\n    b1 # the new offset\nend\n\n@inline push!(s::BitSet, n::Integer) = _setint!(s, Int(n), true)\n\npush!(s::BitSet, ns::Integer...) = (for n in ns; push!(s, n); end; s)\n\n@inline pop!(s::BitSet) = pop!(s, last(s))\n\n@inline function pop!(s::BitSet, n::Integer)\n    if n in s\n        delete!(s, n)\n        n\n    else\n        throw(KeyError(n))\n    end\nend\n\n@inline function pop!(s::BitSet, n::Integer, default)\n    if n in s\n        delete!(s, n)\n        n\n    else\n        default\n    end\nend\n\n@inline _is_convertible_Int(n) = typemin(Int) <= n <= typemax(Int)\n@inline delete!(s::BitSet, n::Int) = _setint!(s, n, false)\n@inline delete!(s::BitSet, n::Integer) = _is_convertible_Int(n) ? delete!(s, Int(n)) : s\n\npopfirst!(s::BitSet) = pop!(s, first(s))\n\nfunction empty!(s::BitSet)\n    empty!(s.bits)\n    s.offset = NO_OFFSET\n    s\nend\n\nisempty(s::BitSet) = _check0(s.bits, 1, length(s.bits))\n\n# Mathematical set functions: union!, intersect!, setdiff!, symdiff!\n\nunion(s::BitSet, sets...) = union!(copy(s), sets...)\nunion!(s1::BitSet, s2::BitSet) = _matched_map!(|, s1, s2)\n\nintersect(s1::BitSet, s2::BitSet) =\n    length(s1.bits) < length(s2.bits) ? intersect!(copy(s1), s2) : intersect!(copy(s2), s1)\n\nintersect!(s1::BitSet, s2::BitSet) = _matched_map!(&, s1, s2)\n\nsetdiff!(s1::BitSet, s2::BitSet) = _matched_map!((p, q) -> p & ~q, s1, s2)",
      "    end\nend\n\n@testset \"diagonal integer matrix to real power\" begin\n    A = Matrix(Diagonal([1, 2, 3]))\n    @test A^2.3 ≈ float(A)^2.3\nend\n\n@testset \"issue #23366 (Int Matrix to Int power)\" begin\n    @testset \"Tests for $elty\" for elty in (Int128, Int16, Int32, Int64, Int8,\n                                            UInt128, UInt16, UInt32, UInt64, UInt8,\n                                            BigInt)\n        #@info \"Testing $elty\"\n        @test elty[1 1;1 0]^-1 == [0  1;  1 -1]\n        @test elty[1 1;1 0]^-2 == [1 -1; -1  2]\n        @test (@inferred elty[1 1;1 0]^2) == elty[2 1;1 1]\n        I_ = elty[1 0;0 1]\n        @test I_^-1 == I_\n        if !(elty<:Unsigned)\n            @test (@inferred (-I_)^-1) == -I_\n            @test (@inferred (-I_)^-2) == I_\n        end\n        # make sure that type promotion for ^(::Matrix{<:Integer}, ::Integer)\n        # is analogous to type promotion for ^(::Integer, ::Integer)\n        # e.g. [1 1;1 0]^big(10000) should return Matrix{BigInt}, the same\n        # way as 2^big(10000) returns BigInt\n        for elty2 = (Int64, BigInt)\n            TT = Base.promote_op(^, elty, elty2)\n            @test (@inferred elty[1 1;1 0]^elty2(1))::Matrix{TT} == [1 1;1 0]\n        end\n    end\nend\n\n@testset \"Least squares solutions\" begin\n    a = [fill(1, 20) 1:20 1:20]\n    b = reshape(Matrix(1.0I, 8, 5), 20, 2)\n    @testset \"Tests for type $elty\" for elty in (Float32, Float64, ComplexF32, ComplexF64)\n        a = convert(Matrix{elty}, a)\n        b = convert(Matrix{elty}, b)\n\n        # Vector rhs\n        x = a[:,1:2]\\b[:,1]\n        @test ((a[:,1:2]*x-b[:,1])'*(a[:,1:2]*x-b[:,1]))[1] ≈ convert(elty, 2.546616541353384)\n\n        # Matrix rhs\n        x = a[:,1:2]\\b\n        @test det((a[:,1:2]*x-b)'*(a[:,1:2]*x-b)) ≈ convert(elty, 4.437969924812031)\n\n        # Rank deficient\n        x = a\\b\n        @test det((a*x-b)'*(a*x-b)) ≈ convert(elty, 4.437969924812031)\n\n        # Underdetermined minimum norm\n        x = convert(Matrix{elty}, [1 0 0; 0 1 -1]) \\ convert(Vector{elty}, [1,1])\n        @test x ≈ convert(Vector{elty}, [1, 0.5, -0.5])\n\n        # symmetric, positive definite\n        @test inv(convert(Matrix{elty}, [6. 2; 2 1])) ≈ convert(Matrix{elty}, [0.5 -1; -1 3])\n\n        # symmetric, indefinite\n        @test inv(convert(Matrix{elty}, [1. 2; 2 1])) ≈ convert(Matrix{elty}, [-1. 2; 2 -1]/3)\n    end\nend\n"
    ]
  },
  {
    "id": "ionic-team/ionic-framework",
    "org": "ionic-team",
    "avatarURL": "https://avatars.githubusercontent.com/u/3171503?v=4",
    "name": "ionic-team/ionic-framework",
    "url": "https://github.com/ionic-team/ionic-framework",
    "lang": "TypeScript",
    "star_num": 49490,
    "fork_num": 13666,
    "snippets": [
      "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { TabsLazyRoutingModule } from './tabs-lazy-routing.module';\nimport { TabsTab3Component } from './tabs-tab3/tabs-tab3.component';\nimport { IonicModule } from '@ionic/angular';\nimport { TabsTab3NestedComponent } from './tabs-tab3-nested/tabs-tab3-nested.component';\n\n@NgModule({\n  declarations: [TabsTab3Component, TabsTab3NestedComponent],\n  imports: [\n    CommonModule,\n    IonicModule,\n    TabsLazyRoutingModule\n  ]\n})\nexport class TabsLazyModule { }\n",
      "  const wrapperAnimation = createAnimation();\n\n  backdropAnimation\n    .addElement(baseEl.querySelector('ion-backdrop')!)\n    .fromTo('opacity', 0.01, 'var(--backdrop-opacity)')\n    .beforeStyles({\n      'pointer-events': 'none',\n    })\n    .afterClearStyles(['pointer-events']);\n\n  wrapperAnimation\n    .addElement(baseEl.querySelector('.picker-wrapper')!)\n    .fromTo('transform', 'translateY(100%)', 'translateY(0%)');\n\n  return baseAnimation\n    .addElement(baseEl)\n    .easing('cubic-bezier(.36,.66,.04,1)')\n    .duration(400)\n    .addAnimation([backdropAnimation, wrapperAnimation]);\n};\n",
      "                <ion-input aria-label=\"Input\" value=\"Input Text\"></ion-input>\n              </ion-item>\n              <ion-item>Pokémon Yellow</ion-item>\n              <ion-item lines=\"inset\">Super Metroid (with Inset Line)</ion-item>\n              <ion-item lines=\"none\">Mega Man X (with No Line)</ion-item>\n              <ion-item>The Legend of Zelda</ion-item>\n              <ion-item lines=\"full\">Halo</ion-item>\n            </ion-list>\n          </div>\n        </ion-content>\n      `,\n        config\n      );\n\n      const listWrapper = page.locator('.wrapper');\n\n      await expect(listWrapper).toHaveScreenshot(screenshot(`list-inset-full-lines`));\n    });\n    test('should render inset lines while allowing for overrides', async ({ page }) => {\n      await page.setContent(\n        `\n        <ion-content color=\"primary\">\n          <div class=\"wrapper\" style=\"display: flex\">\n            <ion-list inset=\"true\" style=\"width: 100%\" lines=\"inset\">\n              <ion-item>\n                <ion-input aria-label=\"Input\" value=\"Input Text\"></ion-input>\n              </ion-item>\n              <ion-item>Pokémon Yellow</ion-item>\n              <ion-item lines=\"full\">Super Metroid (with Full Line)</ion-item>\n              <ion-item lines=\"none\">Mega Man X (with No Line)</ion-item>\n              <ion-item>The Legend of Zelda</ion-item>\n              <ion-item lines=\"full\">Halo</ion-item>\n            </ion-list>\n          </div>\n        </ion-content>\n      `,\n        config\n      );\n\n      const listWrapper = page.locator('.wrapper');\n\n      await expect(listWrapper).toHaveScreenshot(screenshot(`list-inset-inset-lines`));\n    });\n    test('should render no lines while allowing for overrides', async ({ page }) => {\n      await page.setContent(\n        `\n        <ion-content color=\"primary\">\n          <div class=\"wrapper\" style=\"display: flex\">\n            <ion-list inset=\"true\" style=\"width: 100%\" lines=\"none\">\n              <ion-item>\n                <ion-input aria-label=\"Input\" value=\"Input Text\"></ion-input>\n              </ion-item>\n              <ion-item>Pokémon Yellow</ion-item>\n              <ion-item lines=\"full\">Super Metroid (with Full Line)</ion-item>\n              <ion-item lines=\"inset\">Mega Man X (with Inset Line)</ion-item>\n              <ion-item>The Legend of Zelda</ion-item>\n              <ion-item lines=\"full\">Halo</ion-item>\n            </ion-list>\n          </div>\n        </ion-content>\n      `,\n        config\n      );\n",
      "",
      "      `,\n        config\n      );\n\n      const submitEvent = await page.spyOnEvent('submit');\n\n      await page.click('ion-button');\n\n      expect(submitEvent).toHaveReceivedEvent();\n    });\n\n    test('should submit the closest form', async ({ page }) => {\n      await page.setContent(\n        `\n        <form>\n          <ion-button type=\"submit\">Submit</ion-button>\n        </form>\n      `,\n        config\n      );\n\n      const submitEvent = await page.spyOnEvent('submit');\n\n      await page.click('ion-button');\n\n      expect(submitEvent).toHaveReceivedEvent();\n    });\n\n    test('should submit the closest form by pressing the `enter` button on a form element', async ({\n      page,\n    }, testInfo) => {\n      testInfo.annotations.push({\n        type: 'issue',\n        description: 'https://github.com/ionic-team/ionic-framework/issues/19368',\n      });\n\n      await page.setContent(\n        `\n        <form>\n          <input type=\"text\" />\n          <ion-button type=\"submit\">Submit</ion-button>\n        </form>\n      `,\n        config\n      );\n\n      const submitEvent = await page.spyOnEvent('submit');\n\n      await page.press('input', 'Enter');\n\n      expect(submitEvent).toHaveReceivedEvent();\n    });\n\n    test('should submit the closest form with multiple elements by pressing the `enter` button', async ({\n      page,\n    }, testInfo) => {\n      testInfo.annotations.push({\n        type: 'issue',\n        description: 'https://github.com/ionic-team/ionic-framework/issues/19368',\n      });\n\n      await page.setContent(\n        `\n        <form>",
      "        \"IonTabs must contain an IonRouterOutlet. See https://ionicframework.com/docs/vue/navigation#working-with-tabs for more information.\"\n      );\n    }\n\n    let childrenToRender = [\n      h(\n        \"div\",\n        {\n          class: \"tabs-inner\",\n          style: {\n            position: \"relative\",\n            flex: \"1\",\n            contain: \"layout size style\",\n          },\n        },\n        routerOutlet\n      ),\n    ];\n\n    /**\n     * If ion-tab-bar has slot=\"top\" it needs to be\n     * rendered before `.tabs-inner` otherwise it will\n     * not show above the tab content.\n     */\n    if (slottedContent && slottedContent.length > 0) {\n      /**\n       * Render all content except for router outlet\n       * since that needs to be inside of `.tabs-inner`.\n       */\n      const filteredContent = slottedContent.filter(\n        (child: VNode) =>\n          !child.type ||\n          (child.type && (child.type as any).name !== \"IonRouterOutlet\")\n      );\n\n      const slottedTabBar = filteredContent.find(\n        (child: VNode) => child.type && (child.type as any).name === \"IonTabBar\"\n      );\n      const hasTopSlotTabBar =\n        slottedTabBar && slottedTabBar.props?.slot === \"top\";\n\n      if (slottedTabBar) {\n        if (!slottedTabBar.props) {\n          slottedTabBar.props = {};\n        }\n        /**\n         * ionTabsWillChange and ionTabsDidChange are\n         * fired from `ion-tabs`, so we need to pass these down\n         * as props so they can fire when the active tab changes.\n         * TODO: We may want to move logic from the tab bar into here\n         * so we do not have code split across two components.\n         */\n        slottedTabBar.props._tabsWillChange = (tab: string) =>\n          $emit(WILL_CHANGE, { tab });\n        slottedTabBar.props._tabsDidChange = (tab: string) =>\n          $emit(DID_CHANGE, { tab });\n      }\n\n      if (hasTopSlotTabBar) {\n        childrenToRender = [...filteredContent, ...childrenToRender];\n      } else {\n        childrenToRender = [...childrenToRender, ...filteredContent];\n      }\n    }",
      "        await page.setContent(\n          `\n          <style>\n            ion-textarea {\n              --border-radius: 10px !important;\n              --padding-start: 50px !important;\n              --padding-end: 50px !important;\n            }\n          </style>\n\n          <ion-textarea\n            shape=\"round\"\n            fill=\"solid\"\n            label=\"Email\"\n            label-placement=\"floating\"\n            value=\"hi@ionic.io\"\n            helper-text=\"Enter your email\"\n            maxlength=\"20\"\n            counter=\"true\"\n          ></ion-textarea>\n        `,\n          config\n        );\n\n        const textarea = page.locator('ion-textarea');\n        await expect(textarea).toHaveScreenshot(screenshot(`textarea-fill-shaped-solid-custom`));\n      });\n    });\n    test.describe('textarea: fill outline', () => {\n      test('should not have visual regressions', async ({ page }) => {\n        await page.setContent(\n          `\n          <ion-textarea\n            fill=\"outline\"\n            label=\"Email\"\n            value=\"hi@ionic.io\"\n            helper-text=\"Enter your email\"\n            maxlength=\"20\"\n            counter=\"true\"\n          ></ion-textarea>\n        `,\n          config\n        );\n\n        const textarea = page.locator('ion-textarea');\n        await expect(textarea).toHaveScreenshot(screenshot(`textarea-fill-outline`));\n      });\n      test('should render correctly with floating label', async ({ page }) => {\n        await page.setContent(\n          `\n          <ion-textarea\n            fill=\"outline\"\n            label=\"Email\"\n            label-placement=\"floating\"\n            value=\"hi@ionic.io\"\n            helper-text=\"Enter your email\"\n            maxlength=\"20\"\n            counter=\"true\"\n          ></ion-textarea>\n        `,\n          config\n        );\n\n        const textarea = page.locator('ion-textarea');",
      "\n    window.dispatchEvent(new Event('keyboardWillHide'));\n    expect(callbackMock).toHaveBeenCalledWith(false, undefined);\n  });\n});\n",
      "    });\n  });\n});\n",
      "      components: [Modal],\n      html: `\n        <ion-modal role=\"alertdialog\"></ion-modal>\n      `,\n    });\n\n    const modal = page.body.querySelector('ion-modal');\n    const modalWrapper = modal.shadowRoot.querySelector('.modal-wrapper');\n\n    await expect(modalWrapper.getAttribute('role')).toBe('alertdialog');\n  });\n});\n"
    ]
  },
  {
    "id": "nestjs/nest",
    "org": "nestjs",
    "avatarURL": "https://avatars.githubusercontent.com/u/28507035?v=4",
    "name": "nestjs/nest",
    "url": "https://github.com/nestjs/nest",
    "lang": "TypeScript",
    "star_num": 59350,
    "fork_num": 7109,
    "snippets": [
      "import { InjectionToken } from './injection-token.interface';\n\n/**\n * @publicApi\n */\nexport type OptionalFactoryDependency = {\n  token: InjectionToken;\n  optional: boolean;\n};\n",
      "export class CreateDogDto {}\n",
      "import {\n  MessageBody,\n  SubscribeMessage,\n  WebSocketGateway,\n} from '@nestjs/websockets';\nimport { RequestInterceptor } from './request.interceptor';\n\n@WebSocketGateway(8080)\nexport class ApplicationGateway {\n  @SubscribeMessage('push')\n  onPush(@MessageBody() data) {\n    return {\n      event: 'pop',\n      data,\n    };\n  }\n\n  @UseInterceptors(RequestInterceptor)\n  @SubscribeMessage('getClient')\n  getPathCalled(client, data) {\n    return {\n      event: 'popClient',\n      data: { ...data, path: client.pattern },\n    };\n  }\n}\n",
      " * @publicApi\n */\nexport interface CustomTransportStrategy {\n  readonly transportId?: Transport | symbol;\n  listen(callback: (...optionalParams: unknown[]) => any): any;\n  close(): any;\n}\n",
      "import { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  await app.listen(3000);\n  console.log(`Application is running on: ${await app.getUrl()}`);\n}\nbootstrap();\n",
      "/**\n * Number of times that the middleware was executed.\n */\nlet triggerCounter = 0;\n@Injectable()\nclass Middleware implements NestMiddleware {\n  use(req, res, next) {\n    triggerCounter++;\n    next();\n  }\n}\n\n@Controller()\nclass TestController {\n  @Get('/test')\n  testA() {}\n\n  @Get('/:id')\n  testB() {}\n\n  @Get('/static/route')\n  testC() {}\n\n  @Get('/:id/:nested')\n  testD() {}\n}\n\n@Module({\n  controllers: [TestController],\n})\nclass TestModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(Middleware).forRoutes(TestController);\n  }\n}\n\ndescribe('Middleware (run on route match)', () => {\n  let app: INestApplication;\n\n  beforeEach(async () => {\n    triggerCounter = 0;\n    app = (\n      await Test.createTestingModule({\n        imports: [TestModule],\n      }).compile()\n    ).createNestApplication();\n\n    await app.init();\n  });\n\n  it(`forRoutes(TestController) should execute middleware once when request url is equal match`, () => {\n    return request(app.getHttpServer())\n      .get('/test')\n      .expect(200)\n      .then(() => {\n        expect(triggerCounter).to.be.eq(1);\n      });\n  });\n\n  it(`forRoutes(TestController) should execute middleware once when request url is not equal match`, () => {\n    return request(app.getHttpServer())\n      .get('/1')\n      .expect(200)\n      .then(() => {",
      "import { Injectable, Logger, Scope } from '@nestjs/common';\n\n@Injectable({ scope: Scope.TRANSIENT })\nexport class Transient2Service {\n  logger = new Logger();\n}\n",
      "import { BaseRpcContext } from './base-rpc.context';\n\ntype RmqContextArgs = [Record<string, any>, any, string];\n\nexport class RmqContext extends BaseRpcContext<RmqContextArgs> {\n  constructor(args: RmqContextArgs) {\n    super(args);\n  }\n\n  /**\n   * Returns the original message (with properties, fields, and content).\n   */\n  getMessage() {\n    return this.args[0];\n  }\n\n  /**\n   * Returns the reference to the original RMQ channel.\n   */\n  getChannelRef() {\n    return this.args[1];\n  }\n\n  /**\n   * Returns the name of the pattern.\n   */\n  getPattern() {\n    return this.args[2];\n  }\n}\n",
      "import {\n  ContextType,\n  Controller,\n  PipeTransform,\n  Type,\n} from '@nestjs/common/interfaces';\nimport { isFunction } from '@nestjs/common/utils/shared.utils';\nimport { ExecutionContextHost } from './execution-context-host';\n\nexport interface ParamProperties<T = any, IExtractor extends Function = any> {\n  index: number;\n  type: T | string;\n  data: ParamData;\n  pipes: PipeTransform[];\n  extractValue: IExtractor;\n}\n\nexport class ContextUtils {\n  public mapParamType(key: string): string {\n    const keyPair = key.split(':');\n    return keyPair[0];\n  }\n\n  public reflectCallbackParamtypes(\n    instance: Controller,\n    methodName: string,\n  ): any[] {\n    return Reflect.getMetadata(PARAMTYPES_METADATA, instance, methodName);\n  }\n\n  public reflectCallbackMetadata<T = any>(\n    instance: Controller,\n    methodName: string,\n    metadataKey: string,\n  ): T {\n    return Reflect.getMetadata(metadataKey, instance.constructor, methodName);\n  }\n\n  public reflectPassthrough(instance: Controller, methodName: string): boolean {\n    return Reflect.getMetadata(\n      RESPONSE_PASSTHROUGH_METADATA,\n      instance.constructor,\n      methodName,\n    );\n  }\n\n  public getArgumentsLength<T>(keys: string[], metadata: T): number {\n    return keys.length\n      ? Math.max(...keys.map(key => metadata[key].index)) + 1\n      : 0;\n  }\n\n  public createNullArray(length: number): any[] {\n    const a = new Array(length);\n    for (let i = 0; i < length; ++i) a[i] = undefined;\n    return a;\n  }\n\n  public mergeParamsMetatypes(\n    paramsProperties: ParamProperties[],\n    paramtypes: any[],\n  ): (ParamProperties & { metatype?: any })[] {\n    if (!paramtypes) {\n      return paramsProperties;",
      "/**\n * @publicApi\n */\nexport interface WebSocketServerOptions {\n  port: number;\n  namespace: string;\n}\n"
    ]
  },
  {
    "id": "Tencent/wepy",
    "org": "Tencent",
    "avatarURL": "https://avatars.githubusercontent.com/u/18461506?v=4",
    "name": "Tencent/wepy",
    "url": "https://github.com/Tencent/wepy",
    "lang": "JavaScript",
    "star_num": 22254,
    "fork_num": 3094,
    "snippets": [
      "    return this.getId(id).resolve || {};\n  },\n  getReplacements(id) {\n    return this.getId(id).replace || [];\n  }\n};\n",
      "  return (function () {\n    _vm.myclickStop.apply(_vm, $args || [$event]);\n  })();\n}\n",
      " * Copyright (C) 2017 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the MIT License (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at\n * http://opensource.org/licenses/MIT\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport sass from 'sass';\n\nexport default function(content, config, file) {\n  return new Promise((resolve, reject) => {\n    config.data = content;\n    config.file = file;\n    sass.render(config, (err, res) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(res.css);\n      }\n    });\n  });\n}\n",
      " * not type checking this file because flow doesn't play well with\n * dynamically accessing methods on Array prototype\n */\n\nimport { def, hasOwn, isObject } from '../util/index';\nimport { cleanPaths } from './observerPath';\n\nconst arrayProto = Array.prototype;\nexport const arrayMethods = Object.create(arrayProto);\n\nconst methodsToPatch = ['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'];\n\n/**\n * Intercept mutating methods and emit events\n */\nmethodsToPatch.forEach(function(method) {\n  // cache original method\n  const original = arrayProto[method];\n  def(arrayMethods, method, function mutator(...args) {\n    const len = this.length;\n    // 清除已经失效的 paths\n    if (len > 0) {\n      switch (method) {\n        case 'pop':\n          delInvalidPaths(len - 1, this[len - 1], this);\n          break;\n        case 'shift':\n          delInvalidPaths(0, this[0], this);\n          break;\n        case 'splice':\n        case 'sort':\n        case 'reverse':\n          for (let i = 0; i < this.length; i++) {\n            delInvalidPaths(i, this[i], this);\n          }\n      }\n    }\n\n    const result = original.apply(this, args);\n    const ob = this.__ob__;\n    const vm = ob.vm;\n\n    // push parent key to dirty, wait to setData\n    if (vm.$dirty) {\n      if (method === 'push') {\n        const lastIndex = ob.value.length - 1;\n        vm.$dirty.set(ob.op, lastIndex, ob.value[lastIndex]);\n      } else {\n        vm.$dirty.set(ob.op, null, ob.value);\n      }\n    }\n\n    // 这里和 vue 不一样，所有变异方法都需要更新 path\n    ob.observeArray(ob.key, ob.value);\n\n    // notify change\n    ob.dep.notify();\n    return result;\n  });\n});\n\nfunction delInvalidPaths(key, value, parent) {\n  if (isObject(value) && hasOwn(value, '__ob__')) {\n    // delete invalid paths",
      "      let level = 0;\n      let referScope = null;\n      while (fetchScope) {\n        level++;\n\n        // Get all iterators from parent scopes\n        if (!referScope && fetchScope.declared.indexOf(param) > -1) {\n          referScope = fetchScope;\n          iterators = [];\n        }\n        if (referScope) {\n          if (!fetchScope.iterator1) {\n            this.logger.error(\n              'v-for',\n              `Missing iterator index in \"${fetchScope.expr}\". If you want to use v-model inside a v-for. then you have to declare a iterator index, like \"(item, index) in list\".`\n            );\n          } else {\n            if (iterators.indexOf(fetchScope.iterator1) > -1) {\n              // index exists\n              this.logger.warn('v-for', `Duplicated iterator in \"${fetchScope.expr}\"`);\n            }\n            iterators.push(fetchScope.iterator1);\n          }\n        }\n        fetchScope = fetchScope.parent;\n      }\n\n      if (iterators && iterators.length) {\n        rst.model.scopeInfo = {\n          referScope: referScope,\n          scope: scope,\n          param: param,\n          level: level,\n          iterators: iterators\n        };\n      }\n    }\n    return rst;\n  });\n\n  this.register('template-parse-ast-attr-v-model-apply', function parseVModelApply({ parsed, rel }) {\n    let model = parsed.model;\n    let expr = model.expr.trim();\n    let attrs = parsed.attrs;\n\n    if (rel.model) {\n      return;\n    }\n\n    if (model.tag === 'radio' || model.tag === 'checkbox') {\n      // checkbox and radio do not have bindchange event.\n      this.logger.warn(\n        'v-model',\n        `<${model.tag} /> do not support v-model, please use <${model.tag}-group /> instead.`\n      );\n    }\n\n    let map = MODEL_MAP[model.tag];\n    if (map) {\n      if (map.value) {\n        attrs[map.value] = `{{ ${expr} }}`;\n      }\n\n      if (!attrs[`bind${map.type}`]) {",
      "    newProps = [props];\n  }\n  if (isArr(props)) {\n    props.forEach(prop => {\n      newProps[prop] = {\n        type: null,\n        observer: observerFn(output, props, prop)\n      };\n    });\n  } else if (isObj(props)) {\n    for (let k in props) {\n      let prop = props[k];\n      let newProp = {};\n\n      // props.type\n      if (isUndef(prop.type)) {\n        newProp.type = null;\n      } else if (isArr(prop.type)) {\n        newProp.optionalTypes = prop.type;\n        newProp.type = prop.type[0];\n      } else if (AllowedTypes.indexOf(prop.type) === -1) {\n        newProp.type = null;\n        // eslint-disable-next-line\n        console.warn(\n          `Type property of props \"${k}\" is invalid. Only String/Number/Boolean/Object/Array/null is allowed in weapp Component`\n        );\n      } else {\n        newProp.type = prop.type;\n      }\n\n      // props.default\n      if (!isUndef(prop.default)) {\n        if (isFunc(prop.default)) {\n          newProp.value = prop.default.call(output);\n        } else {\n          newProp.value = prop.default;\n        }\n      }\n      // props.optionalTypes\n      if (!isUndef(prop.optionalTypes)) {\n        if (isArr(prop.optionalTypes)) {\n          newProp.optionalTypes = prop.optionalTypes;\n        }\n      }\n      // TODO\n      // props.validator\n      // props.required\n\n      newProp.observer = observerFn(output, props, prop);\n\n      newProps[k] = newProp;\n    }\n  }\n\n  // eslint-disable-next-line\n  Object.keys(newProps).forEach(prop => {});\n\n  output.properties = newProps;\n}\n\n/*\n * init props\n */\nexport function initProps(vm, properties) {",
      "\nexport function pushTarget(_target) {\n  if (Dep.target) targetStack.push(Dep.target);\n  Dep.target = _target;\n}\n\nexport function popTarget() {\n  Dep.target = targetStack.pop();\n}\n",
      "    }\n    vm[changedPaths[0]] = _data;\n  };\n};\n/*\n * patch props option\n */\nexport function patchProps(output, props) {\n  let newProps = {};\n  if (isStr(props)) {\n    newProps = [props];\n  }\n  if (isArr(props)) {\n    props.forEach(prop => {\n      newProps[prop] = {\n        type: null,\n        observer: observerFn(output, props, prop)\n      };\n    });\n  } else if (isObj(props)) {\n    for (let k in props) {\n      let prop = props[k];\n      let newProp = {};\n\n      // props.type\n      if (isUndef(prop.type)) {\n        newProp.type = null;\n      } else if (isArr(prop.type)) {\n        newProp.optionalTypes = prop.type;\n        newProp.type = prop.type[0];\n      } else if (AllowedTypes.indexOf(prop.type) === -1) {\n        newProp.type = null;\n        // eslint-disable-next-line\n        console.warn(\n          `Type property of props \"${k}\" is invalid. Only String/Number/Boolean/Object/Array/null is allowed in weapp Component`\n        );\n      } else {\n        newProp.type = prop.type;\n      }\n\n      // props.default\n      if (!isUndef(prop.default)) {\n        if (isFunc(prop.default)) {\n          newProp.value = prop.default.call(output);\n        } else {\n          newProp.value = prop.default;\n        }\n      }\n      // props.optionalTypes\n      if (!isUndef(prop.optionalTypes)) {\n        if (isArr(prop.optionalTypes)) {\n          newProp.optionalTypes = prop.optionalTypes;\n        }\n      }\n      // TODO\n      // props.validator\n      // props.required\n\n      newProp.observer = observerFn(output, props, prop);\n\n      newProps[k] = newProp;\n    }\n  }\n",
      "    // return {} means remove :class\n    return { attrs: {} };\n  });\n};\n",
      "/**\n * @desc\n * @author wudi@supermonkey.com.cn\n * @createDate 2019/11/18\n */\nconst config = {\n  homePage: '',\n  tabPages: [],\n  routeMap: {}\n}\n\nfunction setConfig(obj) {\n  Object.assign(config, obj)\n}\n\nexport { setConfig }\n\nexport default config\n"
    ]
  },
  {
    "id": "vercel/next.js",
    "org": "vercel",
    "avatarURL": "https://avatars.githubusercontent.com/u/14985020?v=4",
    "name": "vercel/next.js",
    "url": "https://github.com/vercel/next.js",
    "lang": "JavaScript",
    "star_num": 111191,
    "fork_num": 24686,
    "snippets": [
      "import MyCoolImage from 'my-cool-image'\n\nconst Page = () => {\n  return (\n    <div>\n      <h1>next/legacy/image from node_modules</h1>\n\n      <MyCoolImage\n        id=\"image-from-node-modules\"\n        width={1404}\n        height={936}\n        src=\"https://i.imgur.com/CgezKMb.jpg\"\n      />\n    </div>\n  )\n}\n\nexport default Page\n",
      "export default class extends React.Component {}",
      "import Link from 'next/link'\n\nexport default () => (\n  <div>\n    <p>Index Page</p>\n    <Link href=\"/about\" id=\"about-link\">\n      About Page\n    </Link>\n  </div>\n)\n",
      "          }\n          export const config = {\n            unstable_allowDynamic: '/lib/**'\n          }\n        `)\n        context.lib.write(`\n          export async function hasDynamic() {\n            eval('100')\n          }\n        `)\n      },\n    },\n  ])('$title with allowed, used dynamic code', ({ init, url }) => {\n    beforeEach(() => init())\n\n    it('still warns in dev at runtime', async () => {\n      context.app = await launchApp(context.appDir, context.appPort, appOption)\n      const res = await fetchViaHTTP(context.appPort, url)\n      await waitFor(500)\n      expect(res.status).toBe(200)\n      expect(context.logs.output).toContain(\n        `Dynamic Code Evaluation (e. g. 'eval', 'new Function') not allowed in Edge Runtime`\n      )\n    })\n  })\n\n  describe.each([\n    {\n      title: 'Edge API',\n      url: routeUrl,\n      init() {\n        context.api.write(`\n          export default async function handler(request) {\n            if ((() => false)()) {\n              eval('100')\n            }\n            return Response.json({ result: true })\n          }\n          export const config = {\n            runtime: 'edge',\n            unstable_allowDynamic: '**'\n          }\n        `)\n      },\n    },\n    {\n      title: 'Middleware',\n      url: middlewareUrl,\n      init() {\n        context.middleware.write(`\n          import { NextResponse } from 'next/server'\n          // populated with tests\n          export default () => {\n            if ((() => false)()) {\n              eval('100')\n            }\n            return NextResponse.next()\n          }\n          export const config = {\n            unstable_allowDynamic: '**'\n          }\n        `)\n      },\n    },",
      "export default function Another() {\n  return 'hello from another!'\n}\n",
      "export default function Page() {\n  return <p>loading...</p>\n}\n",
      "  )\n}\n",
      "export default class extends React.Component {\n  componentDidUpdate(prevProps) {\n    if (prevProps.url.query.f !== this.props.router.query.f) {\n      const test = this.props.url\n    }\n  }\n}\n",
      "export const config = { amp: 'hybrid' }\n\nexport default () => (\n  <amp-layout className=\"abc\" layout=\"responsive\" width=\"1\" height=\"1\">\n    <span>Hello World</span>\n  </amp-layout>\n)\n",
      "\nif (typeof EventSource !== \"function\") {\n\tthrow new Error(\n\t\t\"Environment doesn't support lazy compilation (requires EventSource)\"\n\t);\n}\n\nvar urlBase = decodeURIComponent(__resourceQuery.slice(1));\n/** @type {EventSource | undefined} */\nvar activeEventSource;\nvar activeKeys = new Map();\nvar errorHandlers = new Set();\n\nvar updateEventSource = function updateEventSource() {\n\tif (activeEventSource) activeEventSource.close();\n\tif (activeKeys.size) {\n\t\tactiveEventSource = new EventSource(\n\t\t\turlBase + Array.from(activeKeys.keys()).join(\"@\")\n\t\t);\n\t\t/**\n\t\t * @this {EventSource}\n\t\t * @param {Event & { message?: string, filename?: string, lineno?: number, colno?: number, error?: Error }} event event\n\t\t */\n\t\tactiveEventSource.onerror = function (event) {\n\t\t\terrorHandlers.forEach(function (onError) {\n\t\t\t\tonError(\n\t\t\t\t\tnew Error(\n\t\t\t\t\t\t\"Problem communicating active modules to the server: \" +\n\t\t\t\t\t\t\tevent.message +\n\t\t\t\t\t\t\t\" \" +\n\t\t\t\t\t\t\tevent.filename +\n\t\t\t\t\t\t\t\":\" +\n\t\t\t\t\t\t\tevent.lineno +\n\t\t\t\t\t\t\t\":\" +\n\t\t\t\t\t\t\tevent.colno +\n\t\t\t\t\t\t\t\" \" +\n\t\t\t\t\t\t\tevent.error\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t});\n\t\t};\n\t} else {\n\t\tactiveEventSource = undefined;\n\t}\n};\n\n/**\n * @param {{ data: string, onError: (err: Error) => void, active: boolean, module: module }} options options\n * @returns {() => void} function to destroy response\n */\nexports.keepAlive = function (options) {\n\tvar data = options.data;\n\tvar onError = options.onError;\n\tvar active = options.active;\n\tvar module = options.module;\n\terrorHandlers.add(onError);\n\tvar value = activeKeys.get(data) || 0;\n\tactiveKeys.set(data, value + 1);\n\tif (value === 0) {\n\t\tupdateEventSource();\n\t}\n\tif (!active && !module.hot) {\n\t\tconsole.log(\n\t\t\t\"Hot Module Replacement is not enabled. Waiting for process restart...\""
    ]
  },
  {
    "id": "rollup/rollup",
    "org": "rollup",
    "avatarURL": "https://avatars.githubusercontent.com/u/12554859?v=4",
    "name": "rollup/rollup",
    "url": "https://github.com/rollup/rollup",
    "lang": "JavaScript",
    "star_num": 23869,
    "fork_num": 1389,
    "snippets": [
      "define(['exports', './inner/more_inner/something', './inner/some_effect'], (function (exports, something, some_effect) { 'use strict';\n\n\n\n\texports.Something = something.Something;\n\n}));\n",
      "});\n\nexport { DEP as D, dynamic3 as a, dynamic1 as b, dynamic2 as d };\n",
      "export var foo = function () {\n\treturn 42;\n}\n",
      "module.exports = defineTest({\n\tdescription: 'detects side-effects when mutating object literals'\n});\n",
      "#!/usr/bin/env node\n'use strict';\n\nconsole.log('nested/plugin.mjs');\nconsole.log('plugin.mjs');\nvar main = 42;\n\nmodule.exports = main;\n",
      "export const baz = { bar: { foo: {} } };\n",
      "'use strict';\n\nvar dep = require('./generated-dep.js');\n\nconsole.log('1', dep.dep);\n",
      "export function yar() {\n\tconsole.log('yar?');\n}\n",
      "'use strict';\n\nvar m2 = require('./m2.js');\n\n\n\nexports.m2 = m2;\n",
      "define(['module', 'require', 'exports'], (function (module, require, exports) { 'use strict';\n\n\tfunction log(url) {\n\t\tif (typeof document === 'undefined') {\n\t\t\tconsole.log(url);\n\t\t} else {\n\t\t\tdocument.body.innerHTML += url + '<br>';\n\t\t}\n\t}\n\n\tlog('main: ' + new URL(module.uri, document.baseURI).href);\n\tnew Promise(function (resolve, reject) { require(['./nested/chunk'], resolve, reject); });\n\n\texports.log = log;\n\n}));\n"
    ]
  },
  {
    "id": "webpack/webpack",
    "org": "webpack",
    "avatarURL": "https://avatars.githubusercontent.com/u/2105791?v=4",
    "name": "webpack/webpack",
    "url": "https://github.com/webpack/webpack",
    "lang": "JavaScript",
    "star_num": 63481,
    "fork_num": 8845,
    "snippets": [
      "module.exports = \"b\";",
      "};\n",
      "__webpack_nonce__ = \"nonce\";\n",
      "export default [DEFINE.A, RUN];\n",
      "// This file can update, because it accept itself.\n// A dispose handler removes the old <style> element.\n\nvar addStyle = require(\"./addStyle\");\n\nvar dispose = addStyle(\"body { background: green; }\");\n\nif(module.hot) {\n\tmodule.hot.accept();\n\tmodule.hot.dispose(dispose);\n}\n",
      "export { default } from \"./common2\";\n",
      "import url from \"../_images/file.png\";\nimport index from \"../_static/file.html\";\n\nit(\"should output asset with path\", () => {\n\texpect(url).toEqual(\"images/file.png\");\n\texpect(index).toEqual(\"static/index.html\");\n});\n",
      "\tconst value = x(v);\n\n\treturn C(value);\n}\n\nexport { x, y };\n",
      "require.ensure([\"./acircular2\"], function(require) {\n\trequire(\"./acircular2\");\n})",
      "function requireInContext(someVariable) {\n\treturn require(`./some-dir/${someVariable}`);\n}\n\nit(\"should not exclude paths not matching the exclusion pattern\", function() {\n\texpect(requireInContext(\"file\")).toBe(\"thats good\");\n\texpect(requireInContext(\"check-here/file\")).toBe(\"thats good\");\n\texpect(requireInContext(\"check-here/check-here/file\")).toBe(\"thats good\");\n});\n\nit(\"should exclude paths/files matching the exclusion pattern\", function() {\n\t\texpect(() => requireInContext(\"dont\")).toThrowError(/Cannot find module '.\\/dont'/);\n\n\t\texpect(() => requireInContext(\"dont-check-here/file\")).toThrowError(/Cannot find module '.\\/dont-check-here\\/file'/);\n\n\t\texpect(() => requireInContext(\"check-here/dont-check-here/file\")).toThrowError(/Cannot find module '.\\/check-here\\/dont-check-here\\/file'/);\n});\n"
    ]
  },
  {
    "id": "bazelbuild/bazel",
    "org": "bazelbuild",
    "avatarURL": "https://avatars.githubusercontent.com/u/11684617?v=4",
    "name": "bazelbuild/bazel",
    "url": "https://github.com/bazelbuild/bazel",
    "lang": "Java",
    "star_num": 21318,
    "fork_num": 3852,
    "snippets": [
      "import com.google.common.collect.ImmutableList;\nimport com.google.common.collect.ImmutableMultimap;\nimport com.google.common.collect.ImmutableSet;\nimport com.google.common.collect.Iterables;\nimport com.google.common.collect.LinkedHashMultimap;\nimport com.google.common.collect.Sets;\nimport com.google.protobuf.CodedInputStream;\nimport com.google.protobuf.CodedOutputStream;\nimport java.io.IOException;\nimport java.util.Collections;\nimport java.util.Set;\n\n/** {@link ObjectCodec} for {@link ImmutableSet} and other sets that should be immutable. */\n@SuppressWarnings(\"rawtypes\") // Intentional erasure of ImmutableSet.\nfinal class ImmutableSetRuntimeCodec implements ObjectCodec<Set> {\n  @SuppressWarnings(\"unchecked\")\n  private static final Class<Set> LINKED_HASH_MULTIMAP_CLASS =\n      (Class<Set>) LinkedHashMultimap.create(ImmutableMultimap.of(\"a\", \"b\")).get(\"a\").getClass();\n\n  @SuppressWarnings(\"unchecked\")\n  private static final Class<Set> SINGLETON_SET_CLASS =\n      (Class<Set>) Collections.singleton(\"a\").getClass();\n\n  @SuppressWarnings(\"unchecked\")\n  private static final Class<Set> SUBSET_CLASS =\n      (Class<Set>) Iterables.getOnlyElement(Sets.powerSet(ImmutableSet.of())).getClass();\n\n  @SuppressWarnings(\"unchecked\")\n  private static final Class<Set> EMPTY_SET_CLASS = (Class<Set>) Collections.emptySet().getClass();\n\n  @Override\n  public Class<ImmutableSet> getEncodedClass() {\n    return ImmutableSet.class;\n  }\n\n  @Override\n  public ImmutableList<Class<? extends Set>> additionalEncodedClasses() {\n    return ImmutableList.of(\n        LINKED_HASH_MULTIMAP_CLASS, SINGLETON_SET_CLASS, EMPTY_SET_CLASS, SUBSET_CLASS);\n  }\n\n  @Override\n  public void serialize(SerializationContext context, Set object, CodedOutputStream codedOut)\n      throws SerializationException, IOException {\n    codedOut.writeInt32NoTag(object.size());\n    for (Object obj : object) {\n      context.serialize(obj, codedOut);\n    }\n  }\n\n  @SuppressWarnings(\"unchecked\") // Adding object to untyped builder.\n  @Override\n  public ImmutableSet deserialize(DeserializationContext context, CodedInputStream codedIn)\n      throws SerializationException, IOException {\n    int size = codedIn.readInt32();\n    ImmutableSet.Builder builder = ImmutableSet.builderWithExpectedSize(size);\n    for (int i = 0; i < size; i++) {\n      // Don't inline so builder knows this is an object, not an array.\n      Object item = context.deserialize(codedIn);\n      builder.add(item);\n    }\n    return builder.build();\n  }\n}",
      "// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage com.google.devtools.build.lib.starlarkdebug.module;\n\nimport com.google.common.collect.ImmutableList;\nimport com.google.devtools.build.lib.events.Event;\nimport com.google.devtools.build.lib.events.Reporter;\nimport com.google.devtools.build.lib.runtime.BlazeModule;\nimport com.google.devtools.build.lib.runtime.Command;\nimport com.google.devtools.build.lib.runtime.CommandEnvironment;\nimport com.google.devtools.build.lib.starlarkdebug.server.StarlarkDebugServer;\nimport com.google.devtools.build.lib.util.DetailedExitCode;\nimport com.google.devtools.common.options.OptionsBase;\nimport java.io.IOException;\nimport net.starlark.java.eval.Debug;\n\n/** Blaze module for setting up Starlark debugging. */\npublic final class StarlarkDebuggerModule extends BlazeModule {\n  @Override\n  public void beforeCommand(CommandEnvironment env) {\n    // Conditionally enable debugging\n    StarlarkDebuggerOptions buildOptions =\n        env.getOptions().getOptions(StarlarkDebuggerOptions.class);\n    boolean enabled = buildOptions != null && buildOptions.debugStarlark;\n    if (enabled) {\n      initializeDebugging(\n          env.getReporter(), buildOptions.debugServerPort, buildOptions.verboseLogs);\n    } else {\n      disableDebugging();\n    }\n  }\n\n  @Override\n  public void afterCommand() {\n    disableDebugging();\n  }\n\n  @Override\n  public Iterable<Class<? extends OptionsBase>> getCommandOptions(Command command) {\n    return \"build\".equals(command.name())\n        ? ImmutableList.of(StarlarkDebuggerOptions.class)\n        : ImmutableList.of();\n  }\n\n  @Override\n  public void blazeShutdown() {\n    disableDebugging();\n  }\n\n  @Override\n  public void blazeShutdownOnCrash(DetailedExitCode exitCode) {\n    disableDebugging();\n  }\n\n  private static void initializeDebugging(Reporter reporter, int debugPort, boolean verboseLogs) {\n    try {\n      StarlarkDebugServer server =\n          StarlarkDebugServer.createAndWaitForConnection(reporter, debugPort, verboseLogs);\n      Debug.setDebugger(server);\n    } catch (IOException e) {\n      reporter.handle(Event.error(\"Error while setting up the debug server: \" + e.getMessage()));\n    }\n  }",
      "        by using the macro \"{PARENT_REMOTE_EXECUTION_PROPERTIES}\". See the section on\n        <a href=\"#platform_inheritance\">Platform Inheritance</a> for details.\n        <!-- #END_BLAZE_RULE.ATTRIBUTE --> */\n        .add(attr(REMOTE_EXECUTION_PROPS_ATTR, Type.STRING))\n\n        /* <!-- #BLAZE_RULE(platform).ATTRIBUTE(exec_properties) -->\n        A map of strings that affect the way actions are executed remotely. Bazel makes no attempt\n        to interpret this, it is treated as opaque data that's forwarded via the Platform field of\n        the  <a href=\"https://github.com/bazelbuild/remote-apis\">remote execution protocol</a>.\n\n        This includes any data from the parent platform's <code>exec_properties</code> attributes.\n        If the child and parent platform define the same keys, the child's values are kept. Any\n        keys associated with a value that is an empty string are removed from the dictionary.\n\n        This attribute is a full replacement for the deprecated\n        <code>remote_execution_properties</code>.\n        <!-- #END_BLAZE_RULE.ATTRIBUTE --> */\n        .add(attr(EXEC_PROPS_ATTR, Type.STRING_DICT).value(ImmutableMap.of()))\n        .build();\n  }\n\n  @Override\n  public Metadata getMetadata() {\n    return Metadata.builder()\n        .name(RULE_NAME)\n        .ancestors(PlatformBaseRule.class)\n        .factoryClass(Platform.class)\n        .build();\n  }\n}\n/*<!-- #FAMILY_SUMMARY -->\n\n<p>\nThis set of rules exists to allow you to model specific hardware platforms you are\nbuilding for and specify the specific tools you may need to compile code for those platforms.\nThe user should be familiar with the concepts explained <a href=\"/extending/platforms\">here</a>.\n</p>\n\n<!-- #END_FAMILY_SUMMARY -->*/\n\n/*<!-- #BLAZE_RULE (NAME = platform, FAMILY = Platforms and Toolchains)[GENERIC_RULE] -->\n\n<p>This rule defines a new platform -- a named collection of constraint choices\n(such as cpu architecture or compiler version) describing an environment in\nwhich part of the build may run.\n\nFor more details, see the <a href=\"//extending/platforms\">Platforms</a> page.\n\n\n<h4 id=\"platform_examples\">Example</h4>\n<p>\n  This defines a platform that describes any environment running Linux on ARM.\n</p>\n<pre class=\"code\">\nplatform(\n    name = \"linux_arm\",\n    constraint_values = [\n        \"@platforms//os:linux\",\n        \"@platforms//cpu:arm\",\n    ],\n)\n</pre>\n\n<h3 id=\"platform_inheritance\">Platform Inheritance</h3>",
      "  public void setUp() throws Exception {\n    fileSystem = Jimfs.newFileSystem();\n    Path root = Files.createDirectories(fileSystem.getPath(\"\"));\n    symbols = Files.createFile(root.resolve(\"symbols.bin\"));\n    res = Files.createDirectories(root.resolve(\"res\"));\n    otherRes = Files.createDirectories(root.resolve(\"otherres\"));\n    assets = Files.createDirectories(root.resolve(\"assets\"));\n    otherAssets = Files.createDirectories(root.resolve(\"otherassets\"));\n    label = \"//some_target/foo:foo\";\n  }\n\n  @Test\n  public void flagFullParse() throws Exception {\n    Truth.assertThat(\n            SerializedAndroidData.valueOf(\n                \"res#otherres;assets#otherassets;//some_target/foo:foo;symbols.bin\", fileSystem))\n        .isEqualTo(\n            new SerializedAndroidData(\n                ImmutableList.of(res, otherRes),\n                ImmutableList.of(assets, otherAssets),\n                label,\n                symbols));\n  }\n\n  @Test\n  public void flagParseWithNoSymbolsFile() throws Exception {\n    Truth.assertThat(\n            SerializedAndroidData.valueOf(\n                \"res#otherres;assets#otherassets;//some_target/foo:foo;\", fileSystem))\n        .isEqualTo(\n            new SerializedAndroidData(\n                ImmutableList.of(res, otherRes),\n                ImmutableList.of(assets, otherAssets),\n                label,\n                null));\n  }\n\n  @Test\n  public void flagParseWithEmptyResources() throws Exception {\n    Truth.assertThat(\n            SerializedAndroidData.valueOf(\n                \";assets;//some_target/foo:foo;symbols.bin\", fileSystem))\n        .isEqualTo(\n            new SerializedAndroidData(\n                ImmutableList.<Path>of(), ImmutableList.of(assets), label, symbols));\n  }\n\n  @Test\n  public void flagParseWithEmptyAssets() throws Exception {\n    Truth.assertThat(\n            SerializedAndroidData.valueOf(\"res;;//some_target/foo:foo;symbols.bin\", fileSystem))\n        .isEqualTo(\n            new SerializedAndroidData(\n                ImmutableList.of(res), ImmutableList.<Path>of(), label, symbols));\n  }\n\n  @Test\n  public void flagParseWithEmptyResourcesAndAssets() throws Exception {\n    Truth.assertThat(\n            SerializedAndroidData.valueOf(\";;//some_target/foo:foo;symbols.bin\", fileSystem))\n        .isEqualTo(\n            new SerializedAndroidData(\n                ImmutableList.<Path>of(), ImmutableList.<Path>of(), label, symbols));\n  }",
      "  /**\n   * Adds the namespaces associated with a {@link FullyQualifiedName}.\n   *\n   * <p>An xml namespace consists of a prefix and a uri. They are common declared on the root\n   * &lt;resources&gt; tag of each resource. The namespaces collected here will be merged together,\n   * with the last uri added taking precedence over the prefix key.\n   */\n  void defineNamespacesFor(FullyQualifiedName fqn, Namespaces namespaces);\n\n  /**\n   * Provides a fluent interface to generate an xml resource for the values directory.\n   *\n   * <p>Example usage: <code>\n   *    writer.define(key)\n   *        .derivedFrom(source)\n   *        .startTag(tagName)\n   *        .named(key)\n   *        .closeTag()\n   *        .write(stringValue)\n   *        .endTag()\n   *        .save();\n   * </code>\n   */\n  // Check return value will ensure that the value is finished being written.\n  @CheckReturnValue\n  ValueResourceDefinitionMetadata define(FullyQualifiedName fqn);\n\n  /** Represents the xml values resource meta data. */\n  @CheckReturnValue\n  interface ValueResourceDefinitionMetadata {\n    ValuesResourceDefinition derivedFrom(DataSource source);\n  }\n\n  /** Fluent interface to define the xml value for a {@link FullyQualifiedName}. */\n  @CheckReturnValue\n  interface ValuesResourceDefinition {\n    /** Starts an xml tag with a prefix and localName. */\n    StartTag startTag(String prefix, String localName);\n\n    /** Starts an xml tag with a localName. */\n    StartTag startTag(String localName);\n\n    /** Starts an xml tag with a QName. */\n    StartTag startTag(QName name);\n\n    /** Starts an xml tag with the name \"item\" */\n    StartTag startItemTag();\n\n    /**\n     * Takes another values xml resource and writes it as a child tag here.\n     *\n     * <p>This allows xml elements from other {@link XmlResourceValue} to be moved in the stream.\n     * Currently, this is only necessary for {@link StyleableXmlResourceValue} which can have {@link\n     * AttrXmlResourceValue} defined as child elements (yet, they are merged and treated as\n     * independent resources.)\n     *\n     * @param fqn The {@link FullyQualifiedName} of the {@link XmlResourceValue} to be adopted. This\n     *     resource doesn't have to be defined for the adopt invocation, but it must exist when\n     *     {@link AndroidDataWritingVisitor#flush()} is called.\n     * @return The current definition.\n     */\n    ValuesResourceDefinition adopt(FullyQualifiedName fqn);\n\n    /** Adds a string as xml characters to the definition. */",
      "// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage com.google.devtools.build.lib.analysis;\n\nimport com.google.common.collect.ImmutableList;\nimport com.google.common.collect.ImmutableMap;\nimport com.google.devtools.build.lib.buildeventstream.BuildEventContext;\nimport com.google.devtools.build.lib.buildeventstream.BuildEventIdUtil;\nimport com.google.devtools.build.lib.buildeventstream.BuildEventStreamProtos;\nimport com.google.devtools.build.lib.buildeventstream.BuildEventStreamProtos.BuildEventId;\nimport com.google.devtools.build.lib.buildeventstream.BuildEventWithOrderConstraint;\nimport com.google.devtools.build.lib.buildeventstream.GenericBuildEvent;\nimport com.google.devtools.build.lib.events.ExtendedEventHandler;\nimport java.util.Collection;\nimport java.util.Map;\n\n/** This event is fired once build info data is available. */\npublic final class BuildInfoEvent\n    implements BuildEventWithOrderConstraint, ExtendedEventHandler.Postable {\n  private final Map<String, String> buildInfoMap;\n\n  /**\n   * Construct the event from a map.\n   */\n  public BuildInfoEvent(Map<String, String> buildInfo) {\n    buildInfoMap = ImmutableMap.copyOf(buildInfo);\n  }\n\n  /**\n   * Return immutable map populated with build info key/value pairs.\n   */\n  public Map<String, String> getBuildInfoMap() {\n    return buildInfoMap;\n  }\n\n  @Override\n  public BuildEventId getEventId() {\n    return BuildEventIdUtil.workspaceStatusId();\n  }\n\n  @Override\n  public Collection<BuildEventId> getChildrenEvents() {\n    return ImmutableList.of();\n  }\n\n  @Override\n  public Collection<BuildEventId> postedAfter() {\n    return ImmutableList.of(BuildEventIdUtil.buildStartedId());\n  }\n\n  @Override\n  public BuildEventStreamProtos.BuildEvent asStreamProto(BuildEventContext converters) {\n    BuildEventStreamProtos.WorkspaceStatus.Builder status =\n        BuildEventStreamProtos.WorkspaceStatus.newBuilder();\n    for (Map.Entry<String, String> entry : getBuildInfoMap().entrySet()) {\n      status.addItem(\n          BuildEventStreamProtos.WorkspaceStatus.Item.newBuilder()\n              .setKey(entry.getKey())\n              .setValue(entry.getValue())\n              .build());\n    }",
      "      default:\n        System.err.println(\"Unknown message type: \" + event);\n    }\n  }\n\n  private String messageWithLocation(Event event) {\n    String location =\n        event.getLocation() == null ? \"<no location>\" : event.getLocation().toString();\n    return location + \": \" + event.getMessage();\n  }\n}\n",
      "",
      "import java.net.URL;\nimport java.util.Locale;\nimport java.util.OptionalLong;\nimport org.junit.After;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.JUnit4;\n\n/** Unit tests for {@link ProgressInputStream}. */\n@RunWith(JUnit4.class)\npublic class ProgressInputStreamTest {\n\n  private final ManualClock clock = new ManualClock();\n  private final EventHandler eventHandler = mock(EventHandler.class);\n  private final ExtendedEventHandler extendedEventHandler =\n      new Reporter(new EventBus(), eventHandler);\n  private final InputStream delegate = mock(InputStream.class);\n  private final URL url = makeUrl(\"http://lol.example\");\n  private ProgressInputStream stream =\n      new ProgressInputStream(\n          Locale.US, clock, extendedEventHandler, 1, delegate, url, url, OptionalLong.empty());\n\n  @After\n  public void after() throws Exception {\n    verifyNoMoreInteractions(eventHandler, delegate);\n  }\n\n  @Test\n  public void close_callsDelegate() throws Exception {\n    stream.close();\n    verify(delegate).close();\n  }\n\n  @Test\n  public void available_callsDelegate() throws Exception {\n    stream.available();\n    verify(delegate).available();\n  }\n\n  @Test\n  public void read_callsdelegate() throws Exception {\n    stream.read();\n    verify(delegate).read();\n  }\n\n  @Test\n  public void readThrowsException_passesThrough() throws Exception {\n    when(delegate.read()).thenThrow(new IOException());\n    assertThrows(IOException.class, () -> stream.read());\n    verify(delegate).read();\n  }\n\n  @Test\n  public void readsAfterInterval_emitsProgressOnce() throws Exception {\n    when(delegate.read()).thenReturn(42);\n    assertThat(stream.read()).isEqualTo(42);\n    clock.advanceMillis(1);\n    assertThat(stream.read()).isEqualTo(42);\n    assertThat(stream.read()).isEqualTo(42);\n    verify(delegate, times(3)).read();\n    verify(eventHandler).handle(Event.progress(\"Downloading http://lol.example: 2 bytes\"));\n  }\n\n  @Test",
      "\n  private static Set<SkyKey> consolidateDataAndReturnNewElements(\n      IncrementalInMemoryNodeEntry entry, boolean mutateObject) {\n    List<Object> dataToConsolidate = entry.getReverseDepsDataToConsolidateForReverseDepsUtil();\n    if (dataToConsolidate == null) {\n      return ImmutableSet.of();\n    }\n\n    // On a node's initial build (or if not keeping rdeps), we don't need to build up two different\n    // sets for \"all reverse deps\" and \"new reverse deps\" - they are all new.\n    Op opToStoreBare = getOpToStoreBare(entry);\n    boolean allRdepsAreNew = opToStoreBare == Op.ADD;\n    Set<SkyKey> allReverseDeps;\n    Set<SkyKey> newReverseDeps;\n    var raw = entry.getReverseDepsRawForReverseDepsUtil();\n    if (isSingleReverseDep(raw)) {\n      Preconditions.checkState(!allRdepsAreNew, entry);\n      allReverseDeps = CompactHashSet.create((SkyKey) raw);\n      newReverseDeps = CompactHashSet.create();\n    } else {\n      List<SkyKey> reverseDepsAsList = multipleAsList(raw);\n      if (allRdepsAreNew) {\n        Preconditions.checkState(reverseDepsAsList.isEmpty(), entry);\n        allReverseDeps = null;\n        newReverseDeps = CompactHashSet.createWithExpectedSize(dataToConsolidate.size());\n      } else {\n        allReverseDeps = getReverseDepsSet(entry, reverseDepsAsList);\n        newReverseDeps = CompactHashSet.create();\n      }\n    }\n\n    for (Object keyToConsolidate : dataToConsolidate) {\n      SkyKey key = KeyToConsolidate.key(keyToConsolidate);\n      switch (KeyToConsolidate.op(keyToConsolidate, opToStoreBare)) {\n        case CHECK:\n          Preconditions.checkState(!allRdepsAreNew, entry);\n          Preconditions.checkState(\n              allReverseDeps.contains(key),\n              \"Reverse dep not present: %s %s %s %s\",\n              keyToConsolidate,\n              allReverseDeps,\n              dataToConsolidate,\n              entry);\n          Preconditions.checkState(\n              newReverseDeps.add(key),\n              \"Duplicate new reverse dep: %s %s %s %s\",\n              keyToConsolidate,\n              allReverseDeps,\n              dataToConsolidate,\n              entry);\n          break;\n        case REMOVE:\n          if (!allRdepsAreNew) {\n            Preconditions.checkState(\n                allReverseDeps.remove(key),\n                \"Reverse dep to be removed not present: %s %s %s %s\",\n                keyToConsolidate,\n                allReverseDeps,\n                dataToConsolidate,\n                entry);\n          }\n          Preconditions.checkState(\n              newReverseDeps.remove(key),\n              \"Reverse dep to be removed not present: %s %s %s %s\","
    ]
  },
  {
    "id": "apache/cassandra",
    "org": "apache",
    "avatarURL": "https://avatars.githubusercontent.com/u/47359?v=4",
    "name": "apache/cassandra",
    "url": "https://github.com/apache/cassandra",
    "lang": "Java",
    "star_num": 8183,
    "fork_num": 3459,
    "snippets": [
      "    private final ReducingKeyIterator iter;\n    private final TimeUUID compactionId;\n    private final Collection<SSTableReader> sstables;\n\n    public CollatedViewIndexBuilder(ColumnFamilyStore cfs, Set<Index> indexers, ReducingKeyIterator iter, Collection<SSTableReader> sstables)\n    {\n        this.cfs = cfs;\n        this.indexers = indexers;\n        this.iter = iter;\n        this.compactionId = nextTimeUUID();\n        this.sstables = sstables;\n    }\n\n    public CompactionInfo getCompactionInfo()\n    {\n        return new CompactionInfo(cfs.metadata(),\n                                  OperationType.INDEX_BUILD,\n                                  iter.getBytesRead(),\n                                  iter.getTotalBytes(),\n                                  compactionId,\n                                  sstables);\n    }\n\n    public void build()\n    {\n        try\n        {\n            int pageSize = cfs.indexManager.calculateIndexingPageSize();\n            RegularAndStaticColumns targetPartitionColumns = extractIndexedColumns();\n            \n            while (iter.hasNext())\n            {\n                if (isStopRequested())\n                    throw new CompactionInterruptedException(getCompactionInfo());\n                DecoratedKey key = iter.next();\n                cfs.indexManager.indexPartition(key, indexers, pageSize, targetPartitionColumns);\n            }\n        }\n        finally\n        {\n            iter.close();\n        }\n    }\n\n    private RegularAndStaticColumns extractIndexedColumns()\n    {\n        RegularAndStaticColumns.Builder builder = RegularAndStaticColumns.builder();\n        \n        for (Index index : indexers)\n        {\n            boolean isPartitionIndex = true;\n            \n            for (ColumnMetadata column : cfs.metadata().regularAndStaticColumns())\n            {\n                if (index.dependsOn(column))\n                {\n                    builder.add(column);\n                    isPartitionIndex = false;\n                }\n            }\n\n            // if any index declares no dependency on any column, it is a full partition index\n            // so we can use the base partition columns as the input source\n            if (isPartitionIndex)",
      "        .isInstanceOf(IllegalArgumentException.class)\n        .hasMessageContaining(\"Invalid data rate: 2147483647 megabits per second; \" +\n                                                                                                                                                  \"stream_throughput_outbound and \" +\n                                                                                                                                                  \"inter_dc_stream_throughput_outbound should \" +\n                                                                                                                                                  \"be between 0 and 2147483646 in megabits per second\");\n    }\n\n    @Test\n    public void testFromSymbol()\n    {\n        assertEquals(DataRateSpec.DataRateUnit.fromSymbol(\"B/s\"), DataRateSpec.DataRateUnit.BYTES_PER_SECOND);\n        assertEquals(DataRateSpec.DataRateUnit.fromSymbol(\"KiB/s\"), DataRateSpec.DataRateUnit.KIBIBYTES_PER_SECOND);\n        assertEquals(DataRateSpec.DataRateUnit.fromSymbol(\"MiB/s\"), DataRateSpec.DataRateUnit.MEBIBYTES_PER_SECOND);\n        assertThatThrownBy(() -> DataRateSpec.DataRateUnit.fromSymbol(\"n\"))\n        .isInstanceOf(IllegalArgumentException.class)\n        .hasMessageContaining(\"Unsupported data rate unit: n\");\n    }\n\n    @Test\n    public void testInvalidInputs()\n    {\n        assertThatThrownBy(() -> new DataRateSpec.LongBytesPerSecondBound(\"10\")).isInstanceOf(IllegalArgumentException.class)\n                                                                                .hasMessageContaining(\"Invalid data rate: 10\");\n        assertThatThrownBy(() -> new DataRateSpec.LongBytesPerSecondBound(\"-10b/s\")).isInstanceOf(IllegalArgumentException.class)\n                                                                                    .hasMessageContaining(\"Invalid data rate: -10b/s\");\n        assertThatThrownBy(() -> new DataRateSpec.LongBytesPerSecondBound(-10, DataRateSpec.DataRateUnit.BYTES_PER_SECOND))\n        .isInstanceOf(IllegalArgumentException.class)\n        .hasMessageContaining(\"Invalid data rate: value must be non-negative\");\n        assertThatThrownBy(() -> new DataRateSpec.LongBytesPerSecondBound(\"10xb/s\")).isInstanceOf(IllegalArgumentException.class)\n                                                                                    .hasMessageContaining(\"Invalid data rate: 10xb/s\");\n        assertThatThrownBy(() -> new DataRateSpec.LongBytesPerSecondBound(\"9223372036854775809B/s\")\n                                 .toBytesPerSecond()).isInstanceOf(NumberFormatException.class)\n                                                     .hasMessageContaining(\"For input string: \\\"9223372036854775809\\\"\");\n        assertThatThrownBy(() -> new DataRateSpec.LongBytesPerSecondBound(\"9223372036854775809KiB/s\")\n                                 .toBytesPerSecond()).isInstanceOf(NumberFormatException.class)\n                                                     .hasMessageContaining(\"For input string: \\\"9223372036854775809\\\"\");\n        assertThatThrownBy(() -> new DataRateSpec.LongBytesPerSecondBound(\"9223372036854775809MiB/s\")\n                                 .toBytesPerSecond()).isInstanceOf(NumberFormatException.class)\n                                                     .hasMessageContaining(\"For input string: \\\"9223372036854775809\\\"\");\n    }\n\n    @Test\n    public void testInvalidForConversion()\n    {\n        //just test the cast to Int as currently we don't even have any long bound rates and there is a very low probability of ever having them\n        assertEquals(Integer.MAX_VALUE, new DataRateSpec.LongBytesPerSecondBound(\"92233720368547758B/s\").toBytesPerSecondAsInt());\n\n        assertThatThrownBy(() -> new DataRateSpec.LongBytesPerSecondBound(Long.MAX_VALUE + \"B/s\"))\n        .isInstanceOf(IllegalArgumentException.class)\n        .hasMessageContaining(\"Invalid data rate: 9223372036854775807B/s. \" +\n                              \"It shouldn't be more than 9223372036854775806 in bytes_per_second\");\n        assertThatThrownBy(() -> new DataRateSpec.LongBytesPerSecondBound(Long.MAX_VALUE + \"MiB/s\"))\n        .isInstanceOf(IllegalArgumentException.class)\n        .hasMessageContaining(\"Invalid data rate: 9223372036854775807MiB/s. \" +\n                              \"It shouldn't be more than 9223372036854775806 in bytes_per_second\");\n        assertThatThrownBy(() -> new DataRateSpec.LongBytesPerSecondBound(Long.MAX_VALUE - 5 + \"KiB/s\"))\n        .isInstanceOf(IllegalArgumentException.class)\n        .hasMessageContaining(\"Invalid data rate: 9223372036854775802KiB/s. \" +\n                              \"It shouldn't be more than 9223372036854775806 in bytes_per_second\");\n    }\n\n    @Test\n    public void testValidUnits()\n    {",
      "import org.junit.Assert;\nimport org.junit.BeforeClass;\n\nimport com.datastax.driver.core.ColumnDefinitions;\nimport com.datastax.driver.core.DataType;\nimport com.datastax.driver.core.ResultSet;\nimport org.apache.cassandra.cql3.CQL3Type;\nimport org.apache.cassandra.exceptions.InvalidRequestException;\nimport org.apache.cassandra.schema.SchemaConstants;\n\nimport static java.lang.String.format;\n\n/**\n * Tests for {@link HashMaskingFunction}.\n */\npublic class HashMaskingFunctionTest extends MaskingFunctionTester\n{\n    @BeforeClass\n    public static void beforeClass()\n    {\n        requireNetwork();\n    }\n\n    @Override\n    protected void testMaskingOnColumn(String name, CQL3Type type, Object value) throws Throwable\n    {\n        ByteBuffer serializedValue = serializedValue(type, value);\n\n        // with default algorithm\n        assertRows(execute(format(\"SELECT mask_hash(%s) FROM %%s\", name)),\n                   row(HashMaskingFunction.hash(HashMaskingFunction.messageDigest(HashMaskingFunction.DEFAULT_ALGORITHM),\n                                                serializedValue)));\n\n        // with null algorithm\n        assertRows(execute(format(\"SELECT mask_hash(%s, null) FROM %%s\", name)),\n                   row(HashMaskingFunction.hash(HashMaskingFunction.messageDigest(HashMaskingFunction.DEFAULT_ALGORITHM),\n                                                serializedValue)));\n\n        // with manually specified algorithm\n        assertRows(execute(format(\"SELECT mask_hash(%s, 'SHA-512') FROM %%s\", name)),\n                   row(HashMaskingFunction.hash(HashMaskingFunction.messageDigest(\"SHA-512\"), serializedValue)));\n\n        // with not found ASCII algorithm\n        assertInvalidThrowMessage(\"Hash algorithm not found\",\n                                  InvalidRequestException.class,\n                                  format(\"SELECT mask_hash(%s, 'unknown-algorithm') FROM %%s\", name));\n\n        // with not found UTF-8 algorithm\n        assertInvalidThrowMessage(\"Hash algorithm not found\",\n                                  InvalidRequestException.class,\n                                  format(\"SELECT mask_hash(%s, 'áéíóú') FROM %%s\", name));\n\n        // test result set metadata, it should always be of type blob\n        ResultSet rs = executeNet(format(\"SELECT mask_hash(%s) FROM %%s\", name));\n        ColumnDefinitions definitions = rs.getColumnDefinitions();\n        Assert.assertEquals(1, definitions.size());\n        Assert.assertEquals(DataType.blob(), definitions.getType(0));\n        Assert.assertEquals(format(\"%s.mask_hash(%s)\", SchemaConstants.SYSTEM_KEYSPACE_NAME, name),\n                            definitions.getName(0));\n    }\n\n    private ByteBuffer serializedValue(CQL3Type type, Object value)\n    {\n        if (isNullOrEmptyMultiCell(type, value))",
      "",
      "    GlobalInboundSettings withTemplate(InboundConnectionSettings template)\n    {\n        return new GlobalInboundSettings(queueCapacity, endpointReserveLimit, globalReserveLimit, template);\n    }\n}\n",
      "import java.util.concurrent.Callable;\nimport java.util.concurrent.TimeUnit;\n\nimport net.bytebuddy.ByteBuddy;\nimport net.bytebuddy.dynamic.loading.ClassLoadingStrategy;\nimport net.bytebuddy.implementation.MethodDelegation;\nimport net.bytebuddy.implementation.bind.annotation.SuperCall;\nimport org.assertj.core.api.Assertions;\nimport org.junit.Test;\n\nimport org.apache.cassandra.db.ColumnFamilyStore;\nimport org.apache.cassandra.db.Keyspace;\nimport org.apache.cassandra.db.SystemKeyspace;\nimport org.apache.cassandra.db.compaction.CompactionInterruptedException;\nimport org.apache.cassandra.db.compaction.CompactionIterator;\nimport org.apache.cassandra.db.compaction.CompactionManager;\nimport org.apache.cassandra.db.rows.UnfilteredRowIterator;\nimport org.apache.cassandra.db.streaming.CassandraIncomingFile;\nimport org.apache.cassandra.distributed.Cluster;\nimport org.apache.cassandra.distributed.api.ConsistencyLevel;\nimport org.apache.cassandra.distributed.api.IInvokableInstance;\nimport org.apache.cassandra.distributed.api.NodeToolResult;\nimport org.apache.cassandra.io.sstable.format.SSTableReader;\nimport org.apache.cassandra.io.util.DataInputPlus;\nimport org.apache.cassandra.locator.InetAddressAndPort;\nimport org.apache.cassandra.locator.RangesAtEndpoint;\nimport org.apache.cassandra.streaming.StreamSession;\nimport org.apache.cassandra.service.ActiveRepairService;\nimport org.apache.cassandra.utils.TimeUUID;\n\nimport static net.bytebuddy.matcher.ElementMatchers.named;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertTrue;\n\nimport static org.apache.cassandra.distributed.api.Feature.GOSSIP;\nimport static org.apache.cassandra.distributed.api.Feature.NETWORK;\n\npublic class RepairErrorsTest extends TestBaseImpl\n{\n    @Test\n    public void testRemoteValidationFailure() throws IOException\n    {\n        Cluster.Builder builder = Cluster.build(2)\n                                         .withConfig(config -> config.with(GOSSIP).with(NETWORK))\n                                         .withInstanceInitializer(ByteBuddyHelper::install);\n        try (Cluster cluster = builder.createWithoutStarting())\n        {\n            cluster.setUncaughtExceptionsFilter((i, throwable) -> {\n                if (i == 2)\n                    return throwable.getMessage() != null && throwable.getMessage().contains(\"IGNORE\");\n                return false;\n            });\n\n            cluster.startup();\n            init(cluster);\n\n            cluster.schemaChange(\"create table \"+KEYSPACE+\".tbl (id int primary key, x int)\");\n            for (int i = 0; i < 10; i++)\n                cluster.coordinator(1).execute(\"insert into \"+KEYSPACE+\".tbl (id, x) VALUES (?,?)\", ConsistencyLevel.ALL, i, i);\n            cluster.forEach(i -> i.flush(KEYSPACE));\n            long mark = cluster.get(1).logs().mark();\n            cluster.forEach(i -> i.nodetoolResult(\"repair\", \"--full\").asserts().failure());\n            Assertions.assertThat(cluster.get(1).logs().grep(mark, \"^ERROR\").getResult()).isEmpty();\n        }",
      "        super(scope);\n        mutationSize = Metrics.histogram(factory.createMetricName(\"MutationSizeHistogram\"), false);\n    }\n\n    public void release()\n    {\n        super.release();\n        Metrics.remove(factory.createMetricName(\"MutationSizeHistogram\"));\n    }\n}\n",
      "",
      "import org.junit.Test;\n\npublic class MergeIteratorTest\n{\n    CLI<String> all = null, cat = null, a = null, b = null, c = null, d = null;\n\n    @Before\n    public void clear()\n    {\n        all = new CLI(\"1\", \"2\", \"3\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"8\", \"9\");\n        cat = new CLI(\"1\", \"2\", \"33\", \"4\", \"5\", \"6\", \"7\", \"88\", \"9\");\n        a = new CLI(\"1\", \"3\", \"5\", \"8\");\n        b = new CLI(\"2\", \"4\", \"6\");\n        c = new CLI(\"3\", \"7\", \"8\", \"9\");\n        d = new CLI();\n    }\n\n    /** Test that duplicate values are concatted. */\n    @Test\n    public void testManyToOne() throws Exception\n    {\n        MergeIterator.Reducer<String,String> reducer = new MergeIterator.Reducer<String,String>()\n        {\n            String concatted = \"\";\n\n            @Override\n            public void reduce(int idx, String current)\n            {\n                concatted += current;\n            }\n\n            public String getReduced()\n            {\n                String tmp = concatted;\n                concatted = \"\";\n                return tmp;\n            }\n        };\n        IMergeIterator<String,String> smi = MergeIterator.get(Arrays.asList(a, b, c, d),\n                Ordering.<String>natural(),\n                reducer);\n        assert Iterators.elementsEqual(cat, smi);\n        smi.close();\n        assert a.closed && b.closed && c.closed && d.closed;\n    }\n\n    // closeable list iterator\n    public static class CLI<E> extends AbstractIterator<E> implements CloseableIterator<E>\n    {\n        Iterator<E> iter;\n        boolean closed = false;\n        public CLI(E... items)\n        {\n            this.iter = Arrays.asList(items).iterator();\n        }\n\n        protected E computeNext()\n        {\n            if (!iter.hasNext()) return endOfData();\n            return iter.next();\n        }\n\n        public void close()\n        {",
      "        PrintStream out = probe.output().out;\n        // display cluster name, snitch and partitioner\n        out.println(\"Cluster Information:\");\n        out.println(\"\\tName: \" + probe.getClusterName());\n        String snitch = probe.getEndpointSnitchInfoProxy().getSnitchName();\n        boolean dynamicSnitchEnabled = false;\n        if (snitch.equals(DynamicEndpointSnitch.class.getName()))\n        {\n            snitch = probe.getDynamicEndpointSnitchInfoProxy().getSubsnitchClassName();\n            dynamicSnitchEnabled = true;\n        }\n        out.println(\"\\tSnitch: \" + snitch);\n        out.println(\"\\tDynamicEndPointSnitch: \" + (dynamicSnitchEnabled ? \"enabled\" : \"disabled\"));\n        out.println(\"\\tPartitioner: \" + probe.getPartitioner());\n\n        // display schema version for each node\n        out.println(\"\\tSchema versions:\");\n        Map<String, List<String>> schemaVersions = printPort ? probe.getSpProxy().getSchemaVersionsWithPort() : probe.getSpProxy().getSchemaVersions();\n        for (Map.Entry<String, List<String>> entry : schemaVersions.entrySet())\n        {\n            out.printf(\"\\t\\t%s: %s%n%n\", entry.getKey(), entry.getValue());\n        }\n\n        // Collect status information of all nodes\n        boolean withPort = true;\n        joiningNodes = probe.getJoiningNodes(withPort);\n        leavingNodes = probe.getLeavingNodes(withPort);\n        movingNodes = probe.getMovingNodes(withPort);\n        liveNodes = probe.getLiveNodes(withPort);\n        unreachableNodes = probe.getUnreachableNodes(withPort);\n\n        // Get the list of all keyspaces\n        List<String> keyspaces = probe.getKeyspaces();\n\n        out.println(\"Stats for all nodes:\");\n        out.println(\"\\tLive: \" + liveNodes.size());\n        out.println(\"\\tJoining: \" + joiningNodes.size());\n        out.println(\"\\tMoving: \" + movingNodes.size());\n        out.println(\"\\tLeaving: \" + leavingNodes.size());\n        out.println(\"\\tUnreachable: \" + unreachableNodes.size());\n\n        Map<String, String> tokensToEndpoints = probe.getTokenToEndpointMap(withPort);\n        StringBuilder errors = new StringBuilder();\n        Map<String, Float> ownerships = null;\n        try\n        {\n            ownerships = probe.effectiveOwnershipWithPort(keyspace);\n        }\n        catch (IllegalStateException ex)\n        {\n            try\n            {\n                ownerships = probe.getOwnershipWithPort();\n                errors.append(\"Note: \").append(ex.getMessage()).append(\"%n\");\n            }\n            catch (Exception e)\n            {\n                out.printf(\"%nError: %s%n\", e.getMessage());\n                System.exit(1);\n            }\n        }\n        catch (IllegalArgumentException ex)\n        {\n            out.printf(\"%nError: %s%n\", ex.getMessage());"
    ]
  },
  {
    "id": "redis/redis",
    "org": "redis",
    "avatarURL": "https://avatars.githubusercontent.com/u/1529926?v=4",
    "name": "redis/redis",
    "url": "https://github.com/redis/redis",
    "lang": "C",
    "star_num": 61371,
    "fork_num": 22830,
    "snippets": [
      "\t\tassert(ptr_ind + 1 < arraylen(ptrs));\t\t\t\\\n\t\tvoid *ptr = __VA_ARGS__;\t\t\t\t\\\n\t\tassert_ptr_not_null(ptr, \"\");\t\t\t\t\\\n\t\tptrs[ptr_ind++] = ptr;\t\t\t\t\t\\\n\t\tif (opt_junk_alloc && !zero) {\t\t\t\t\\\n\t\t\texpect_ptr_eq(ptr, last_junked_ptr, \"\");\t\\\n\t\t\texpect_zu_eq(last_junked_usize,\t\t\t\\\n\t\t\t    TEST_MALLOC_SIZE(ptr), \"\");\t\t\t\\\n\t\t}\t\t\t\t\t\t\t\\\n\t} while (0)\n\tif (!zero && lg_align == 0) {\n\t\tJUNK_ALLOC(malloc(size));\n\t}\n\tif (!zero) {\n\t\tJUNK_ALLOC(aligned_alloc(1 << lg_align, size));\n\t}\n#ifdef JEMALLOC_OVERRIDE_MEMALIGN\n\tif (!zero) {\n\t\tJUNK_ALLOC(je_memalign(1 << lg_align, size));\n\t}\n#endif\n#ifdef JEMALLOC_OVERRIDE_VALLOC\n\tif (!zero && lg_align == LG_PAGE) {\n\t\tJUNK_ALLOC(je_valloc(size));\n\t}\n#endif\n\tint zero_flag = zero ? MALLOCX_ZERO : 0;\n\tJUNK_ALLOC(mallocx(size, zero_flag | MALLOCX_LG_ALIGN(lg_align)));\n\tJUNK_ALLOC(mallocx(size, zero_flag | MALLOCX_LG_ALIGN(lg_align)\n\t    | MALLOCX_TCACHE_NONE));\n\tif (lg_align >= LG_SIZEOF_PTR) {\n\t\tvoid *memalign_result;\n\t\tint err = posix_memalign(&memalign_result, (1 << lg_align),\n\t\t    size);\n\t\tassert_d_eq(err, 0, \"\");\n\t\tJUNK_ALLOC(memalign_result);\n\t}\n}\n\nTEST_BEGIN(test_junk_alloc_free) {\n\tbool zerovals[] = {false, true};\n\tsize_t sizevals[] = {\n\t\t1, 8, 100, 1000, 100*1000\n\t/*\n\t * Memory allocation failure is a real possibility in 32-bit mode.\n\t * Rather than try to check in the face of resource exhaustion, we just\n\t * rely more on the 64-bit tests.  This is a little bit white-box-y in\n\t * the sense that this is only a good test strategy if we know that the\n\t * junk pathways don't touch interact with the allocation selection\n\t * mechanisms; but this is in fact the case.\n\t */\n#if LG_SIZEOF_PTR == 3\n\t\t    , 10 * 1000 * 1000\n#endif\n\t};\n\tsize_t lg_alignvals[] = {\n\t\t0, 4, 10, 15, 16, LG_PAGE\n#if LG_SIZEOF_PTR == 3\n\t\t    , 20, 24\n#endif\n\t};\n\n#define JUNK_FREE(...)\t\t\t\t\t\t\t\\\n\tdo {\t\t\t\t\t\t\t\t\\",
      "\tfor (unsigned i = 0; i < alloc_n; ++i) {\n\t\t((unsigned *)ptr)[i] = 1;\n\t}\n\n\tsize_t alloc_size2 = PAGE * 28;\n\tsize_t alloc_n2 = alloc_size / sizeof(unsigned);\n\tedata_t *edata2 = san_bump_alloc(tsdn, &sba, pac, pac_ehooks_get(pac),\n\t    alloc_size2, /* zero */ true);\n\n\texpect_ptr_not_null(edata2, \"Failed to allocate edata\");\n\texpect_u_eq(edata_arena_ind_get(edata2), arena_ind,\n\t    \"Edata was assigned an incorrect arena id\");\n\texpect_zu_eq(edata_size_get(edata2), alloc_size2,\n\t    \"Allocated edata of incorrect size\");\n\texpect_false(edata_slab_get(edata2),\n\t    \"Bump allocator incorrectly assigned 'slab' to true\");\n\texpect_true(edata_committed_get(edata2), \"Edata is not committed\");\n\n\tvoid *ptr2 = edata_addr_get(edata2);\n\texpect_ptr_not_null(ptr, \"Edata was assigned an invalid address\");\n\n\tuintptr_t ptrdiff = ptr2 > ptr ? (uintptr_t)ptr2 - (uintptr_t)ptr\n\t    : (uintptr_t)ptr - (uintptr_t)ptr2;\n\tsize_t between_allocs = (size_t)ptrdiff - alloc_size;\n\n\texpect_zu_ge(between_allocs, PAGE,\n\t    \"Guard page between allocs is missing\");\n\n\tfor (unsigned i = 0; i < alloc_n2; ++i) {\n\t\texpect_u_eq(((unsigned *)ptr2)[i], 0, \"Memory is not zeroed\");\n\t}\n}\nTEST_END\n\nTEST_BEGIN(test_large_alloc_size) {\n\ttest_skip_if(!maps_coalesce || !opt_retain);\n\n\ttsdn_t *tsdn = tsdn_fetch();\n\n\tsan_bump_alloc_t sba;\n\tsan_bump_alloc_init(&sba);\n\n\tunsigned arena_ind = do_arena_create(0, 0);\n\tassert_u_ne(arena_ind, UINT_MAX, \"Failed to create an arena\");\n\n\tarena_t *arena = arena_get(tsdn, arena_ind, false);\n\tpac_t *pac = &arena->pa_shard.pac;\n\n\tsize_t alloc_size = SBA_RETAINED_ALLOC_SIZE * 2;\n\tedata_t* edata = san_bump_alloc(tsdn, &sba, pac, pac_ehooks_get(pac),\n\t    alloc_size, /* zero */ false);\n\texpect_u_eq(edata_arena_ind_get(edata), arena_ind,\n\t    \"Edata was assigned an incorrect arena id\");\n\texpect_zu_eq(edata_size_get(edata), alloc_size,\n\t    \"Allocated edata of incorrect size\");\n\texpect_false(edata_slab_get(edata),\n\t    \"Bump allocator incorrectly assigned 'slab' to true\");\n\texpect_true(edata_committed_get(edata), \"Edata is not committed\");\n\n\tvoid *ptr = edata_addr_get(edata);\n\texpect_ptr_not_null(ptr, \"Edata was assigned an invalid address\");\n\t/* Test that memory is allocated; no guard pages are misplaced */\n\tfor (unsigned i = 0; i < alloc_size / PAGE; ++i) {\n\t\t*((char *)ptr + PAGE * i) = 1;",
      "#include <sys/resource.h>\n#include <unistd.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <errno.h>\n#include <sys/wait.h>\n\n#ifdef __linux__\n#include <sys/mman.h>\n#endif\n\n\n#ifdef __linux__\nstatic sds read_sysfs_line(char *path) {\n    char buf[256];\n    FILE *f = fopen(path, \"r\");\n    if (!f) return NULL;\n    if (!fgets(buf, sizeof(buf), f)) {\n        fclose(f);\n        return NULL;\n    }\n    fclose(f);\n    sds res = sdsnew(buf);\n    res = sdstrim(res, \" \\n\");\n    return res;\n}\n\n/* Verify our clocksource implementation doesn't go through a system call (uses vdso).\n * Going through a system call to check the time degrades Redis performance. */\nstatic int checkClocksource(sds *error_msg) {\n    unsigned long test_time_us, system_hz;\n    struct timespec ts;\n    unsigned long long start_us;\n    struct rusage ru_start, ru_end;\n\n    system_hz = sysconf(_SC_CLK_TCK);\n\n    if (getrusage(RUSAGE_SELF, &ru_start) != 0)\n        return 0;\n    if (clock_gettime(CLOCK_MONOTONIC, &ts) < 0) {\n        return 0;\n    }\n    start_us = (ts.tv_sec * 1000000 + ts.tv_nsec / 1000);\n\n    /* clock_gettime() busy loop of 5 times system tick (for a system_hz of 100 this is 50ms)\n     * Using system_hz is required to ensure accurate measurements from getrusage().\n     * If our clocksource is configured correctly (vdso) this will result in no system calls.\n     * If our clocksource is inefficient it'll waste most of the busy loop in the kernel. */\n    test_time_us = 5 * 1000000 / system_hz;\n    while (1) {\n        unsigned long long d;\n        if (clock_gettime(CLOCK_MONOTONIC, &ts) < 0)\n            return 0;\n        d = (ts.tv_sec * 1000000 + ts.tv_nsec / 1000) - start_us;\n        if (d >= test_time_us) break;\n    }\n    if (getrusage(RUSAGE_SELF, &ru_end) != 0)\n        return 0;\n\n    long long stime_us = (ru_end.ru_stime.tv_sec * 1000000 + ru_end.ru_stime.tv_usec) - (ru_start.ru_stime.tv_sec * 1000000 + ru_start.ru_stime.tv_usec);\n    long long utime_us = (ru_end.ru_utime.tv_sec * 1000000 + ru_end.ru_utime.tv_usec) - (ru_start.ru_utime.tv_sec * 1000000 + ru_start.ru_utime.tv_usec);\n\n    /* If more than 10% of the process time was in system calls we probably have an inefficient clocksource, print a warning */",
      "",
      "\t */\n\tchar buf[2 * sizeof(intptr_t) + 3];\n\tsize_t buf_sz = sizeof(buf);\n\twhile (bt_node != NULL) {\n\t\temitter_json_array_begin(emitter);\n\t\tsize_t i;\n\t\tfor (i = 0; i < bt_node->bt.len; i++) {\n\t\t\tmalloc_snprintf(buf, buf_sz, \"%p\", bt_node->bt.vec[i]);\n\t\t\tchar *trace_str = buf;\n\t\t\temitter_json_value(emitter, emitter_type_string,\n\t\t\t    &trace_str);\n\t\t}\n\t\temitter_json_array_end(emitter);\n\n\t\tbt_old_node = bt_node;\n\t\tbt_node = bt_node->next;\n\t\tidalloctm(tsd_tsdn(tsd), bt_old_node, NULL, NULL, true, true);\n\t}\n\temitter_json_array_end(emitter);\n}\n\nstatic void\nprof_log_emit_allocs(tsd_t *tsd, emitter_t *emitter) {\n\temitter_json_array_kv_begin(emitter, \"allocations\");\n\tprof_alloc_node_t *alloc_node = log_alloc_first;\n\tprof_alloc_node_t *alloc_old_node;\n\twhile (alloc_node != NULL) {\n\t\temitter_json_object_begin(emitter);\n\n\t\temitter_json_kv(emitter, \"alloc_thread\", emitter_type_size,\n\t\t    &alloc_node->alloc_thr_ind);\n\n\t\temitter_json_kv(emitter, \"free_thread\", emitter_type_size,\n\t\t    &alloc_node->free_thr_ind);\n\n\t\temitter_json_kv(emitter, \"alloc_trace\", emitter_type_size,\n\t\t    &alloc_node->alloc_bt_ind);\n\n\t\temitter_json_kv(emitter, \"free_trace\", emitter_type_size,\n\t\t    &alloc_node->free_bt_ind);\n\n\t\temitter_json_kv(emitter, \"alloc_timestamp\",\n\t\t    emitter_type_uint64, &alloc_node->alloc_time_ns);\n\n\t\temitter_json_kv(emitter, \"free_timestamp\", emitter_type_uint64,\n\t\t    &alloc_node->free_time_ns);\n\n\t\temitter_json_kv(emitter, \"usize\", emitter_type_uint64,\n\t\t    &alloc_node->usize);\n\n\t\temitter_json_object_end(emitter);\n\n\t\talloc_old_node = alloc_node;\n\t\talloc_node = alloc_node->next;\n\t\tidalloctm(tsd_tsdn(tsd), alloc_old_node, NULL, NULL, true,\n\t\t    true);\n\t}\n\temitter_json_array_end(emitter);\n}\n\nstatic void\nprof_log_emit_metadata(emitter_t *emitter) {\n\temitter_json_object_kv_begin(emitter, \"info\");\n",
      "#define HUGE_SZ (2 << 20)\n#define SMALL_SZ (8)\n\nTEST_BEGIN(huge_bind_thread) {\n\tunsigned arena1, arena2;\n\tsize_t sz = sizeof(unsigned);\n\n\t/* Bind to a manual arena. */\n\texpect_d_eq(mallctl(\"arenas.create\", &arena1, &sz, NULL, 0), 0,\n\t    \"Failed to create arena\");\n\texpect_d_eq(mallctl(\"thread.arena\", NULL, NULL, &arena1,\n\t    sizeof(arena1)), 0, \"Fail to bind thread\");\n\n\tvoid *ptr = mallocx(HUGE_SZ, 0);\n\texpect_ptr_not_null(ptr, \"Fail to allocate huge size\");\n\texpect_d_eq(mallctl(\"arenas.lookup\", &arena2, &sz, &ptr,\n\t    sizeof(ptr)), 0, \"Unexpected mallctl() failure\");\n\texpect_u_eq(arena1, arena2, \"Wrong arena used after binding\");\n\tdallocx(ptr, 0);\n\n\t/* Switch back to arena 0. */\n\ttest_skip_if(have_percpu_arena &&\n\t    PERCPU_ARENA_ENABLED(opt_percpu_arena));\n\tarena2 = 0;\n\texpect_d_eq(mallctl(\"thread.arena\", NULL, NULL, &arena2,\n\t    sizeof(arena2)), 0, \"Fail to bind thread\");\n\tptr = mallocx(SMALL_SZ, MALLOCX_TCACHE_NONE);\n\texpect_d_eq(mallctl(\"arenas.lookup\", &arena2, &sz, &ptr,\n\t    sizeof(ptr)), 0, \"Unexpected mallctl() failure\");\n\texpect_u_eq(arena2, 0, \"Wrong arena used after binding\");\n\tdallocx(ptr, MALLOCX_TCACHE_NONE);\n\n\t/* Then huge allocation should use the huge arena. */\n\tptr = mallocx(HUGE_SZ, 0);\n\texpect_ptr_not_null(ptr, \"Fail to allocate huge size\");\n\texpect_d_eq(mallctl(\"arenas.lookup\", &arena2, &sz, &ptr,\n\t    sizeof(ptr)), 0, \"Unexpected mallctl() failure\");\n\texpect_u_ne(arena2, 0, \"Wrong arena used after binding\");\n\texpect_u_ne(arena1, arena2, \"Wrong arena used after binding\");\n\tdallocx(ptr, 0);\n}\nTEST_END\n\nTEST_BEGIN(huge_mallocx) {\n\tunsigned arena1, arena2;\n\tsize_t sz = sizeof(unsigned);\n\n\texpect_d_eq(mallctl(\"arenas.create\", &arena1, &sz, NULL, 0), 0,\n\t    \"Failed to create arena\");\n\tvoid *huge = mallocx(HUGE_SZ, MALLOCX_ARENA(arena1));\n\texpect_ptr_not_null(huge, \"Fail to allocate huge size\");\n\texpect_d_eq(mallctl(\"arenas.lookup\", &arena2, &sz, &huge,\n\t    sizeof(huge)), 0, \"Unexpected mallctl() failure\");\n\texpect_u_eq(arena1, arena2, \"Wrong arena used for mallocx\");\n\tdallocx(huge, MALLOCX_ARENA(arena1));\n\n\tvoid *huge2 = mallocx(HUGE_SZ, 0);\n\texpect_ptr_not_null(huge, \"Fail to allocate huge size\");\n\texpect_d_eq(mallctl(\"arenas.lookup\", &arena2, &sz, &huge2,\n\t    sizeof(huge2)), 0, \"Unexpected mallctl() failure\");\n\texpect_u_ne(arena1, arena2,\n\t    \"Huge allocation should not come from the manual arena.\");\n\texpect_u_ne(arena2, 0,\n\t    \"Huge allocation should not come from the arena 0.\");",
      "TEST_END\n\nint\nmain(void) {\n\treturn test_no_reentrancy(\n\t    test_prof_realloc);\n}\n",
      " * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n *   * Redistributions of source code must retain the above copyright notice,\n *     this list of conditions and the following disclaimer.\n *   * Redistributions in binary form must reproduce the above copyright\n *     notice, this list of conditions and the following disclaimer in the\n *     documentation and/or other materials provided with the distribution.\n *   * Neither the name of Redis nor the names of its contributors may be used\n *     to endorse or promote products derived from this software without\n *     specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n\n\n#include <sys/select.h>\n#include <string.h>\n\ntypedef struct aeApiState {\n    fd_set rfds, wfds;\n    /* We need to have a copy of the fd sets as it's not safe to reuse\n     * FD sets after select(). */\n    fd_set _rfds, _wfds;\n} aeApiState;\n\nstatic int aeApiCreate(aeEventLoop *eventLoop) {\n    aeApiState *state = zmalloc(sizeof(aeApiState));\n\n    if (!state) return -1;\n    FD_ZERO(&state->rfds);\n    FD_ZERO(&state->wfds);\n    eventLoop->apidata = state;\n    return 0;\n}\n\nstatic int aeApiResize(aeEventLoop *eventLoop, int setsize) {\n    AE_NOTUSED(eventLoop);\n    /* Just ensure we have enough room in the fd_set type. */\n    if (setsize >= FD_SETSIZE) return -1;\n    return 0;\n}\n\nstatic void aeApiFree(aeEventLoop *eventLoop) {\n    zfree(eventLoop->apidata);\n}\n\nstatic int aeApiAddEvent(aeEventLoop *eventLoop, int fd, int mask) {\n    aeApiState *state = eventLoop->apidata;\n\n    if (mask & AE_READABLE) FD_SET(fd,&state->rfds);\n    if (mask & AE_WRITABLE) FD_SET(fd,&state->wfds);\n    return 0;\n}",
      "\tsize_t slabmib[4];\n\tsize_t len;\n\n\tlen = sizeof(nbins);\n\texpect_d_eq(mallctl(\"arenas.nbins\", &nbins, &len, NULL, 0), 0,\n\t    \"nbins mallctl failure\");\n\n\tlen = sizeof(page);\n\texpect_d_eq(mallctl(\"arenas.page\", &page, &len, NULL, 0), 0,\n\t    \"page mallctl failure\");\n\n\tlen = 4;\n\texpect_d_eq(mallctlnametomib(\"arenas.bin.0.size\", sizemib, &len), 0,\n\t    \"bin size mallctlnametomib failure\");\n\n\tlen = 4;\n\texpect_d_eq(mallctlnametomib(\"arenas.bin.0.slab_size\", slabmib, &len),\n\t    0, \"slab size mallctlnametomib failure\");\n\n\tsize_t biggest_slab_seen = 0;\n\n\tfor (unsigned i = 0; i < nbins; i++) {\n\t\tsize_t bin_size;\n\t\tsize_t slab_size;\n\t\tlen = sizeof(size_t);\n\t\tsizemib[2] = i;\n\t\tslabmib[2] = i;\n\t\texpect_d_eq(mallctlbymib(sizemib, 4, (void *)&bin_size, &len,\n\t\t    NULL, 0), 0, \"bin size mallctlbymib failure\");\n\n\t\tlen = sizeof(size_t);\n\t\texpect_d_eq(mallctlbymib(slabmib, 4, (void *)&slab_size, &len,\n\t\t    NULL, 0), 0, \"slab size mallctlbymib failure\");\n\n\t\tif (bin_size < 100) {\n\t\t\t/*\n\t\t\t * Then we should be as close to 17 as possible.  Since\n\t\t\t * not all page sizes are valid (because of bitmap\n\t\t\t * limitations on the number of items in a slab), we\n\t\t\t * should at least make sure that the number of pages\n\t\t\t * goes up.\n\t\t\t */\n\t\t\texpect_zu_ge(slab_size, biggest_slab_seen,\n\t\t\t    \"Slab sizes should go up\");\n\t\t\tbiggest_slab_seen = slab_size;\n\t\t} else if (\n\t\t    (100 <= bin_size && bin_size < 128)\n\t\t    || (128 < bin_size && bin_size <= 200)) {\n\t\t\texpect_zu_eq(slab_size, page,\n\t\t\t    \"Forced-small slabs should be small\");\n\t\t} else if (bin_size == 128) {\n\t\t\texpect_zu_eq(slab_size, 2 * page,\n\t\t\t    \"Forced-2-page slab should be 2 pages\");\n\t\t} else if (200 < bin_size && bin_size <= 4096) {\n\t\t\texpect_zu_ge(slab_size, biggest_slab_seen,\n\t\t\t    \"Slab sizes should go up\");\n\t\t\tbiggest_slab_seen = slab_size;\n\t\t}\n\t}\n\t/*\n\t * For any reasonable configuration, 17 pages should be a valid slab\n\t * size for 4096-byte items.\n\t */\n\texpect_zu_eq(biggest_slab_seen, 17 * page, \"Didn't hit page target\");",
      "\t/*\n\t * We prevent user reentrancy within hooks.  This is basically just a\n\t * thread-local bool that triggers an early-exit.\n\t *\n\t * We don't fold in_hook into reentrancy.  There are two reasons for\n\t * this:\n\t * - Right now, we turn on reentrancy during things like extent hook\n\t *   execution.  Allocating during extent hooks is not officially\n\t *   supported, but we don't want to break it for the time being.  These\n\t *   sorts of allocations should probably still be hooked, though.\n\t * - If a hook allocates, we may want it to be relatively fast (after\n\t *   all, it executes on every allocator operation).  Turning on\n\t *   reentrancy is a fairly heavyweight mode (disabling tcache,\n\t *   redirecting to arena 0, etc.).  It's possible we may one day want\n\t *   to turn on reentrant mode here, if it proves too difficult to keep\n\t *   this working.  But that's fairly easy for us to see; OTOH, people\n\t *   not using hooks because they're too slow is easy for us to miss.\n\t *\n\t * The tricky part is\n\t * that this code might get invoked even if we don't have access to tsd.\n\t * This function mimics getting a pointer to thread-local data, except\n\t * that it might secretly return a pointer to some global data if we\n\t * know that the caller will take the early-exit path.\n\t * If we return a bool that indicates that we are reentrant, then the\n\t * caller will go down the early exit path, leaving the global\n\t * untouched.\n\t */\n\tstatic bool in_hook_global = true;\n\ttsdn_t *tsdn = tsdn_fetch();\n\tbool *in_hook = tsdn_in_hookp_get(tsdn);\n\tif (in_hook!= NULL) {\n\t\treturn in_hook;\n\t}\n\treturn &in_hook_global;\n}\n\n#define HOOK_PROLOGUE\t\t\t\t\t\t\t\\\n\tif (likely(atomic_load_u(&nhooks, ATOMIC_RELAXED) == 0)) {\t\\\n\t\treturn;\t\t\t\t\t\t\t\\\n\t}\t\t\t\t\t\t\t\t\\\n\tbool *in_hook = hook_reentrantp();\t\t\t\t\\\n\tif (*in_hook) {\t\t\t\t\t\t\t\\\n\t\treturn;\t\t\t\t\t\t\t\\\n\t}\t\t\t\t\t\t\t\t\\\n\t*in_hook = true;\n\n#define HOOK_EPILOGUE\t\t\t\t\t\t\t\\\n\t*in_hook = false;\n\nvoid\nhook_invoke_alloc(hook_alloc_t type, void *result, uintptr_t result_raw,\n    uintptr_t args_raw[3]) {\n\tHOOK_PROLOGUE\n\n\thooks_internal_t hook;\n\tFOR_EACH_HOOK_BEGIN(&hook)\n\t\thook_alloc h = hook.hooks.alloc_hook;\n\t\tif (h != NULL) {\n\t\t\th(hook.hooks.extra, type, result, result_raw, args_raw);\n\t\t}\n\tFOR_EACH_HOOK_END\n\n\tHOOK_EPILOGUE\n}"
    ]
  }
];